!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
#all-types	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#all-types	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#all-types	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#all-types:hover	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#all-types:hover	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#all-types>p	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#help	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#help .infos	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
#help dd	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
#help dt	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
#help dt	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
#help h1	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
#help h2	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
#help>div	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#help>div	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#help>div	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#help>div div	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
#implementations-list>h3>span.in-band	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
#implementors-list>.impl-items .table-display .out-of-band	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
#main	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#main>.docblock h1	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
#main>.docblock h2	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
#main>.docblock h3	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
#main>.docblock h4	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
#main>.docblock h5	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
#main>.since	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
#main>.stability	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
#main>.structfield	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
#main>.sub-variant>h3	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
#main>.variant	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
#main>div.important-traits	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
#main>ul	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#main>ul>li	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#results	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#results>table	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#search	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#settings-menu	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#settings-menu	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#settings-menu	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#settings-menu:focus	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#settings-menu:focus	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#settings-menu:hover	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#settings-menu:hover	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#sidebar-filler	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#sidebar-filler	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#sidebar-filler	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#theme-choices	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#theme-choices	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#theme-choices	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#theme-choices>button	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#theme-choices>button:focus	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#theme-choices>button:focus	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#theme-choices>button:hover	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#theme-choices>button:hover	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#theme-choices>button:not(:first-child)	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#theme-choices>button:not(:first-child)	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#theme-choices>button:not(:first-child)	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#theme-picker	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#theme-picker	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#theme-picker	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#theme-picker:focus	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#theme-picker:focus	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#theme-picker:hover	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#theme-picker:hover	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#titles	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#titles>div	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
#titles>div.selected	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
#titles>div.selected	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
#titles>div:hover	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	i
#titles>div:hover	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	i
#titles>div:not(.selected)	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
#titles>div:not(.selected)	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
#titles>div:not(:last-child):not(.selected)	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
#titles>div>div.count	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
#titles>div>div.count	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
#titles>div>div.count	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
*	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.anchor	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.anchor.field	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.anchor:before	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.attributes	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.block	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.block a	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.block a.current.attr	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.attr	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.constant	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.constant	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.crate	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.block a.current.derive	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.derive	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.enum	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.enum	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.fn	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.fn	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.foreigntype	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.foreigntype	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.keyword	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.keyword	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.macro	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.macro	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.method	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.method	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.mod	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.mod	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.primitive	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.primitive	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.static	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.static	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.struct	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.struct	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.trait	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.trait	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.tymethod	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.tymethod	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.type	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.type	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a.current.union	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.block a.current.union	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.block a:hover	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.block a:hover	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.block h2	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.block h3	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.block li	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.block ul	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.collapse-toggle	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.collapse-toggle	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.collapse-toggle	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.collapse-toggle.hidden-default	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.collapse-toggle>.inner	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .docblock>.impl-items	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .docblock>.impl-items .table-display	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .docblock>.impl-items table td	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content .docblock>.impl-items>h4	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .fn .where	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .fn .where	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .fn .where	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .fnname	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .fnname	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted a	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.content .highlighted a	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.content .highlighted span	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.content .highlighted span	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.content .highlighted.attr	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.attr	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.constant	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.constant	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.derive	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.derive	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.enum	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.enum	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.externcrate	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.externcrate	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.fn	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.fn	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.foreigntype	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.foreigntype	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.keyword	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.keyword	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.macro	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.macro	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.method	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.method	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.mod	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.mod	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.primitive	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.primitive	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.static	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.static	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.struct	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.struct	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.trait	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.trait	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.tymethod	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.tymethod	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.type	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.type	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .highlighted.union	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .highlighted.union	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .impl-items .docblock	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .impl-items .method	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .impl-items .stability	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .impl-items>.stability	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .impl-items>.type	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .in-band	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .item-list	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .method	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .method .where	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .method .where	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .method .where	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .methods>div:not(.important-traits)	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .multi-column	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .multi-column li	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content .out-of-band	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .search-results td:first-child	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content .search-results td:first-child a	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content .search-results td:first-child a span	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content .search-results td:first-child a:after	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content .stability	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .stability code	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content .stability::before	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content .where.fmt-newline	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content .where.fmt-newline	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content .where.fmt-newline	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content a.attr	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.attr	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.constant	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.constant	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.derive	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.derive	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.enum	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.enum	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.fn	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.fn	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.foreigntype	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.foreigntype	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.keyword	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.keyword	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.macro	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.macro	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.method	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.method	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.mod	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.mod	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.primitive	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.primitive	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.static	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.static	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.struct	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.struct	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.trait	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.trait	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.tymethod	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.tymethod	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.type	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.type	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content a.union	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content a.union	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content h4>.out-of-band	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content pre.line-numbers	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content span.attr	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.attr	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.constant	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.constant	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.derive	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.derive	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.enum	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.enum	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.externcrate	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.externcrate	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.fn	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.fn	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.foreigntype	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.foreigntype	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.keyword	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.keyword	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.macro	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.macro	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.method	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.method	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.mod	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.mod	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.primitive	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.primitive	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.static	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.static	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.struct	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.struct	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.trait	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.trait	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.tymethod	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.tymethod	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.type	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.type	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content span.union	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.content span.union	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.content table :not(code)>a	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content table:not(.table-display)	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.content td	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content td h1	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content td h2	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content td p:first-child	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content td:first-child	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content tr:first-child td	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.content>.methods>div.important-traits	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.docblock	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.docblock a:not(.srclink):not(.test-arrow):hover	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.docblock code	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.docblock code	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.docblock code	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock code.spotlight	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.docblock code.spotlight :last-child	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock h1	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.docblock h1	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.docblock h1	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock h2	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.docblock h2	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.docblock h2	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock h3	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.docblock h3	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.docblock h3	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock h4	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.docblock h4	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.docblock h4	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock h5	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.docblock h5	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.docblock h5	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock pre code	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock table	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.docblock table	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.docblock table	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock table td	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.docblock table td	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.docblock table td	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock table th	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.docblock table th	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.docblock table th	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock-short a:not(.srclink):not(.test-arrow)	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.docblock-short a:not(.srclink):not(.test-arrow)	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.docblock-short a:not(.srclink):not(.test-arrow):hover	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.docblock-short code	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.docblock-short code	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.docblock-short code	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock-short p	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock-short pre code	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.docblock-short.nowrap	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow)	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow)	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.docblock>.section-header:first-child	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.docblock>.section-header:first-child:hover>a:before	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.enum>.collapsed	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.enum>.toggle-wrapper+.docblock	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.example-wrap	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.example-wrap>pre.line-number	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.example-wrap>pre.line-number	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.example-wrap>pre.line-number	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.fields+table	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.ghost	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.ghost+.since	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.hidden	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.hidden-by-impl-hider	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.hidden-by-usual-hider	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.impl-items .attributes	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.impl-items code	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.impl-items code	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.impl-items table td	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.impl-items>.associatedconstant	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.impl-items>.toggle-attributes	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.impl>.collapse-toggle	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.important-traits	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.important-traits .tooltip .tooltiptext	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.important-traits .tooltip .tooltiptext	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.important-traits .tooltip .tooltiptext	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.in-band	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.in-band	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.in-band	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.in-band:hover>.anchor	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.in-band>code	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.information	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.information:hover+pre.compile_fail	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.information:hover+pre.compile_fail	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.information:hover+pre.ignore	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.information:hover+pre.ignore	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.information>.compile_fail:hover	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.information>.compile_fail:hover	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.information>.ignore:hover	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.information>.ignore:hover	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.invisible	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.invisible	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.invisible	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.invisible>.srclink	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.invisible>code	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.item-spacer	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.js-only	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.line-numbers .line-highlighted	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.line-numbers .line-highlighted	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.line-numbers :target	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.line-numbers :target	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.line-numbers span	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.line-numbers span	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.line-numbers span	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.location a:first-child	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.location:empty	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.methods>.stability	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.modal	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.modal	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.modal	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.modal-content	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.modal-content	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.modal-content	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.modal-content>.close	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.modal-content>.close	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.modal-content>.close	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.modal-content>.close:hover	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.modal-content>.close:hover	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.modal-content>.close:hover+.whiter	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.modal-content>.close:hover+.whiter	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.modal-content>.docblock	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.modal-content>.docblock>code.content	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.modal-content>.whiter	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.modal-content>.whiter	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.modal-content>.whiter	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.module-item .stab	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.module-item .stab	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.module-item .stab	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.module-item.unstable	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.non-exhaustive	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.search-container	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.search-container>.top-button	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.search-failed	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.search-failed>a	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.search-failed>a	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.search-input	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.search-input	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.search-input	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.search-input:focus	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.search-input:focus	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.search-input:focus	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.search-results .desc	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.search-results a	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.search-results td span.alias	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.search-results td span.alias	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.search-results td span.grey	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.search-results td span.grey	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.section-header a	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.section-header:hover a	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.section-header:hover a:before	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.setting-line	kernel/target/doc/settings.css	/^.setting-line{padding:5px;}.setting-line>div{max-width:calc(100% - 74px);display:inline-block;ve/;"	c
.setting-line>div	kernel/target/doc/settings.css	/^.setting-line{padding:5px;}.setting-line>div{max-width:calc(100% - 74px);display:inline-block;ve/;"	c
.show-it	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.show-it>.block.items	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.show-it>.block.items>ul	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.show-it>.block.items>ul>li	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.show-it>.block.items>ul>li>a	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.sidebar	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.sidebar	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar .block>ul>li	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar .current	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.sidebar .current	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.sidebar .location	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.sidebar .location	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.sidebar .location	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar .location:empty	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar .version	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.sidebar .version	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.sidebar .version	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar img	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.sidebar-elems	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.sidebar-elems	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.sidebar-elems	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar-links	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar-links>a	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar-menu	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.sidebar-menu	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.sidebar-menu	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar-title	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.sidebar-title	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.sidebar-title	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar.mobile	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar>.block.version	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sidebar>.location	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.since	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.since	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.since	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.since+.srclink	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.slider	kernel/target/doc/settings.css	/^.setting-line{padding:5px;}.setting-line>div{max-width:calc(100% - 74px);display:inline-block;ve/;"	c
.slider:before	kernel/target/doc/settings.css	/^.setting-line{padding:5px;}.setting-line>div{max-width:calc(100% - 74px);display:inline-block;ve/;"	c
.small-section-header:hover>.anchor	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.small-section-header>.anchor	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.source .content	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.source .content pre	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.source .content pre.rust	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.source .sidebar	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.source .sidebar	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.stab	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.stab .microscope	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.stab p	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.stab summary	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.stab.deprecated	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.stab.deprecated	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.stab.portability	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.stab.portability	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.stab.unstable	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.stab.unstable	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.stability a	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
.stability a	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
.stability a	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.struct>.collapsed	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.struct>.toggle-wrapper+.docblock	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sub-variant	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sub-variant>div	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sub-variant>div>.stability	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sub-variant>div>span	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.sub-variant>h3	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.summary	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.table-display	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.table-display .out-of-band	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.table-display td:hover .anchor	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.table-display tr td:first-child	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.table-display tr td:last-child	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.theme-picker	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.theme-picker button	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
.toggle	kernel/target/doc/settings.css	/^.setting-line{padding:5px;}.setting-line>div{max-width:calc(100% - 74px);display:inline-block;ve/;"	c
.toggle input	kernel/target/doc/settings.css	/^.setting-line{padding:5px;}.setting-line>div{max-width:calc(100% - 74px);display:inline-block;ve/;"	s
.toggle-attributes.collapsed	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.toggle-label	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.toggle-label	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.toggle-label	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.toggle-wrapper	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.toggle-wrapper.collapsed	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.toggle-wrapper.marg-left>.collapse-toggle	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.toggle-wrapper>.collapse-toggle	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.tooltip	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.tooltip .tooltiptext	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.tooltip .tooltiptext	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.tooltip .tooltiptext	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.tooltip .tooltiptext::after	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.tooltip .tooltiptext::after	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.tooltip .tooltiptext::after	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.tooltip.compile_fail	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.tooltip.compile_fail	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.tooltip.ignore	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
.tooltip.ignore	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
.tooltip:hover .tooltiptext	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.variant+.toggle-wrapper+.docblock>p	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.variants_table	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
.variants_table tbody tr td:first-child	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
0	arch/riscv32i/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1164083562126845933":["rustc 1.32.0-nightl/;"	s	array:outputs.1164083562126845933
0	arch/riscv32i/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1164083562126845933":["rustc 1.32.0-nightl/;"	s	array:outputs.15337506775154344876
0	arch/riscv32i/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1164083562126845933":["rustc 1.32.0-nightl/;"	s	array:outputs.1617349019360157463
0	arch/riscv32i/target/debug/.fingerprint/bare-metal-24acc5d3590b7513/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0./;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/bare-metal-7dd6462cd7700cd7/lib-bare_metal-7dd6462cd7700cd7.json	/^{"rustc":10377385455325587324,"features":"[]","target":10318145944003877215,"profile":1187018370/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a	array:deps
0	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s	array:deps.0
0	arch/riscv32i/target/debug/.fingerprint/bit_field-56ae9b63ca7874f1/lib-bit_field-56ae9b63ca7874f1.json	/^{"rustc":10377385455325587324,"features":"[]","target":6212214415640514931,"profile":11870183705/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-0c285ab8bbe41fa7/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"db/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-126b22abd70e245c/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0e/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a	array:deps
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	array:deps.0
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	array:deps.1
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a	array:deps
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	array:deps.0
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	array:deps.1
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-7b5528c14e2c7055/build-script-build_script_build-7b5528c14e2c7055.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-d6ebf6a6021a8976/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"78/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-e220008a48c83b01/build-script-build_script_build-e220008a48c83b01.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-e3787b41749bb5b0/build-script-build_script_build-e3787b41749bb5b0.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a	array:deps
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	array:deps.0
0	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	array:deps.1
0	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	a	array:deps
0	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	s	array:deps.0
0	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	a	array:deps
0	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	s	array:deps.0
0	arch/riscv32i/target/debug/.fingerprint/semver-parser-1d01b4b0efb84ec1/lib-semver_parser-1d01b4b0efb84ec1.json	/^{"rustc":10377385455325587324,"features":"[]","target":11042536386261824010,"profile":1187018370/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	a	array:local.0.MtimeBased
0	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	n	array:local.0.MtimeBased.0
0	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	o	array:local
0	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	a	array:local.0.MtimeBased
0	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	n	array:local.0.MtimeBased.0
0	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	o	array:local
0	boards/hifive1/target/.rustc_info.json	/^{"rustc_fingerprint":6405865732497413016,"outputs":{"1164083562126845933":["rustc 1.35.0-nightly/;"	s	array:outputs.1164083562126845933
0	boards/hifive1/target/.rustc_info.json	/^{"rustc_fingerprint":6405865732497413016,"outputs":{"1164083562126845933":["rustc 1.35.0-nightly/;"	s	array:outputs.1617349019360157463
0	boards/hifive1/target/.rustc_info.json	/^{"rustc_fingerprint":6405865732497413016,"outputs":{"1164083562126845933":["rustc 1.35.0-nightly/;"	s	array:outputs.7126485114448444624
0	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	a	array:deps
0	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	o	array:local
0	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	s	array:deps.0
0	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	a	array:local.0.MtimeBased
0	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	n	array:local.0.MtimeBased.0
0	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	o	array:local
0	boards/hifive1/target/debug/.fingerprint/riscvregs-8a1ccaee318cf981/build-script-build_script_build-8a1ccaee318cf981.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	o	array:local
0	boards/hifive1/target/debug/.fingerprint/riscvregs-e5cf2a660cb8088f/build-script-build_script_build-e5cf2a660cb8088f.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	o	array:local
0	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	a	array:deps
0	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	o	array:local
0	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	s	array:deps.0
0	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	a	array:deps
0	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	o	array:local
0	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	s	array:deps.0
0	boards/hifive1/target/debug/.fingerprint/semver-parser-0cbc1426a8cfeede/lib-semver_parser-0cbc1426a8cfeede.json	/^{"rustc":4168008693276420879,"features":"[]","target":3650675185119913205,"profile":118386650091/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-3818320f62d4b526/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	s	array:rustflags
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	s	array:rustflags
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	a	array:deps
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	a	array:local.0.MtimeBased
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	n	array:local.0.MtimeBased.0
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	s	array:deps.0
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	s	array:deps.1
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	s	array:rustflags
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	a	array:local.0.MtimeBased
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	n	array:local.0.MtimeBased.0
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	s	array:rustflags
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a	array:local.0.MtimeBased
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n	array:local.0.MtimeBased.0
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	a	array:deps
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	a	array:local.0.MtimeBased
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	n	array:local.0.MtimeBased.0
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	s	array:deps.0
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	s	array:deps.1
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	s	array:rustflags
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-5a31f60d1aed50ae/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	a	array:deps
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:deps.0
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:deps.1
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:rustflags
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	a	array:deps
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:deps.0
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:deps.1
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:rustflags
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-90db6ed0e5b8c3d4/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	a	array:local.0.MtimeBased
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	n	array:local.0.MtimeBased.0
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	s	array:rustflags
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	a	array:local.0.MtimeBased
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	n	array:local.0.MtimeBased.0
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	o	array:local
0	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	s	array:rustflags
0	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	s	array:outputs.1164083562126845933
0	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	s	array:outputs.15337506775154344876
0	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	s	array:outputs.1617349019360157463
0	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	a	array:local.0.MtimeBased
0	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	n	array:local.0.MtimeBased.0
0	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	o	array:local
0	kernel/target/debug/.fingerprint/tock-cells-816571e4fa975f6b/doc-lib-tock_cells-816571e4fa975f6b.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":3062756892/;"	o	array:local
0	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	a	array:local.0.MtimeBased
0	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	n	array:local.0.MtimeBased.0
0	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	o	array:local
0	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	a	array:local.0.MtimeBased
0	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	n	array:local.0.MtimeBased.0
0	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	o	array:local
0	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	a	array:local.0.MtimeBased
0	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	n	array:local.0.MtimeBased.0
0	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	o	array:local
0	kernel/target/debug/.fingerprint/tock-registers-e7eec879e9fa92db/doc-lib-tock_registers-e7eec879e9fa92db.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":30627568924/;"	o	array:local
0	libraries/tock-register-interface/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1617349019360157463":["___\\nlib___.rlib\\/;"	s	array:outputs.1164083562126845933
0	libraries/tock-register-interface/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1617349019360157463":["___\\nlib___.rlib\\/;"	s	array:outputs.15337506775154344876
0	libraries/tock-register-interface/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1617349019360157463":["___\\nlib___.rlib\\/;"	s	array:outputs.1617349019360157463
0	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	a	array:local.0.MtimeBased
0	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	n	array:local.0.MtimeBased.0
0	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	o	array:local
1	arch/riscv32i/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1164083562126845933":["rustc 1.32.0-nightl/;"	s	array:outputs.1164083562126845933
1	arch/riscv32i/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1164083562126845933":["rustc 1.32.0-nightl/;"	s	array:outputs.15337506775154344876
1	arch/riscv32i/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1164083562126845933":["rustc 1.32.0-nightl/;"	s	array:outputs.1617349019360157463
1	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s	array:deps.0
1	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a	array:deps
1	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	array:deps.0
1	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	array:deps.1
1	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a	array:deps
1	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	array:deps.0
1	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	array:deps.1
1	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a	array:deps
1	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	array:deps.0
1	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	array:deps.1
1	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	s	array:deps.0
1	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	s	array:deps.0
1	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	n	array:local.0.MtimeBased.0
1	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	s	array:local.0.MtimeBased
1	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	n	array:local.0.MtimeBased.0
1	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	s	array:local.0.MtimeBased
1	boards/hifive1/target/.rustc_info.json	/^{"rustc_fingerprint":6405865732497413016,"outputs":{"1164083562126845933":["rustc 1.35.0-nightly/;"	s	array:outputs.1164083562126845933
1	boards/hifive1/target/.rustc_info.json	/^{"rustc_fingerprint":6405865732497413016,"outputs":{"1164083562126845933":["rustc 1.35.0-nightly/;"	s	array:outputs.1617349019360157463
1	boards/hifive1/target/.rustc_info.json	/^{"rustc_fingerprint":6405865732497413016,"outputs":{"1164083562126845933":["rustc 1.35.0-nightly/;"	s	array:outputs.7126485114448444624
1	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	s	array:deps.0
1	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	n	array:local.0.MtimeBased.0
1	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	s	array:local.0.MtimeBased
1	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	s	array:deps.0
1	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	s	array:deps.0
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	s	array:rustflags
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	s	array:rustflags
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	a	array:deps
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	n	array:local.0.MtimeBased.0
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	s	array:deps.0
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	s	array:deps.1
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	s	array:local.0.MtimeBased
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	s	array:rustflags
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	n	array:local.0.MtimeBased.0
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	s	array:local.0.MtimeBased
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	s	array:rustflags
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n	array:local.0.MtimeBased.0
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	s	array:local.0.MtimeBased
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	a	array:deps
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	n	array:local.0.MtimeBased.0
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	s	array:deps.0
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	s	array:deps.1
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	s	array:local.0.MtimeBased
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	s	array:rustflags
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	a	array:deps
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:deps.0
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:deps.1
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:rustflags
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	a	array:deps
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:deps.0
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:deps.1
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:rustflags
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	n	array:local.0.MtimeBased.0
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	s	array:local.0.MtimeBased
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	s	array:rustflags
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	n	array:local.0.MtimeBased.0
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	s	array:local.0.MtimeBased
1	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	s	array:rustflags
1	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	s	array:outputs.1164083562126845933
1	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	s	array:outputs.15337506775154344876
1	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	s	array:outputs.1617349019360157463
1	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	n	array:local.0.MtimeBased.0
1	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	s	array:local.0.MtimeBased
1	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	n	array:local.0.MtimeBased.0
1	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	s	array:local.0.MtimeBased
1	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	n	array:local.0.MtimeBased.0
1	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	s	array:local.0.MtimeBased
1	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	n	array:local.0.MtimeBased.0
1	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	s	array:local.0.MtimeBased
1	libraries/tock-register-interface/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1617349019360157463":["___\\nlib___.rlib\\/;"	s	array:outputs.1164083562126845933
1	libraries/tock-register-interface/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1617349019360157463":["___\\nlib___.rlib\\/;"	s	array:outputs.15337506775154344876
1	libraries/tock-register-interface/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1617349019360157463":["___\\nlib___.rlib\\/;"	s	array:outputs.1617349019360157463
1	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	n	array:local.0.MtimeBased.0
1	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	s	array:local.0.MtimeBased
1164083562126845933	arch/riscv32i/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1164083562126845933":["rustc 1.32.0-nightl/;"	a	object:outputs
1164083562126845933	boards/hifive1/target/.rustc_info.json	/^{"rustc_fingerprint":6405865732497413016,"outputs":{"1164083562126845933":["rustc 1.35.0-nightly/;"	a	object:outputs
1164083562126845933	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	a	object:outputs
1164083562126845933	libraries/tock-register-interface/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1617349019360157463":["___\\nlib___.rlib\\/;"	a	object:outputs
15337506775154344876	arch/riscv32i/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1164083562126845933":["rustc 1.32.0-nightl/;"	a	object:outputs
15337506775154344876	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	a	object:outputs
15337506775154344876	libraries/tock-register-interface/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1617349019360157463":["___\\nlib___.rlib\\/;"	a	object:outputs
1617349019360157463	arch/riscv32i/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1164083562126845933":["rustc 1.32.0-nightl/;"	a	object:outputs
1617349019360157463	boards/hifive1/target/.rustc_info.json	/^{"rustc_fingerprint":6405865732497413016,"outputs":{"1164083562126845933":["rustc 1.35.0-nightly/;"	a	object:outputs
1617349019360157463	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	a	object:outputs
1617349019360157463	libraries/tock-register-interface/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1617349019360157463":["___\\nlib___.rlib\\/;"	a	object:outputs
2	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n	array:deps.0
2	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n	array:deps.0
2	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n	array:deps.1
2	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n	array:deps.0
2	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n	array:deps.1
2	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n	array:deps.0
2	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n	array:deps.1
2	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	n	array:deps.0
2	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	n	array:deps.0
2	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n	array:deps.0
2	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	n	array:deps.0
2	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	n	array:deps.0
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	s	array:rustflags
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	s	array:rustflags
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	n	array:deps.0
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	n	array:deps.1
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	s	array:rustflags
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	s	array:rustflags
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	n	array:deps.0
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	n	array:deps.1
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	s	array:rustflags
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	n	array:deps.0
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	n	array:deps.1
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:rustflags
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	n	array:deps.0
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	n	array:deps.1
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:rustflags
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	s	array:rustflags
2	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	s	array:rustflags
3	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	s	array:rustflags
3	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	s	array:rustflags
3	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	s	array:rustflags
3	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	s	array:rustflags
3	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	s	array:rustflags
3	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:rustflags
3	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	array:rustflags
3	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	s	array:rustflags
3	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	s	array:rustflags
7126485114448444624	boards/hifive1/target/.rustc_info.json	/^{"rustc_fingerprint":6405865732497413016,"outputs":{"1164083562126845933":["rustc 1.35.0-nightly/;"	a	object:outputs
9682706032187346551	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	b	object:successes
:target	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
:target	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
:target>.in-band	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
:target>.in-band	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
:target>code	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
:target>code	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
:target>code	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
A	chips/sam4l/src/gpio.rs	/^    A,$/;"	e	enum:PeripheralFunction
A	chips/tm4c129x/src/gpio.rs	/^    A = 1,$/;"	e	enum:PeripheralFunction
A5	boards/imix/src/spi_dummy.rs	/^pub static mut A5: [u8; 16] = [0xA5; 16];$/;"	v
AAAA	chips/nrf52/src/ficr.rs	/^    AAAA = 0x41414141,$/;"	e	enum:Variant
AAAB	chips/nrf52/src/ficr.rs	/^    AAAB = 0x41414142,$/;"	e	enum:Variant
AAB0	chips/nrf52/src/ficr.rs	/^    AAB0 = 0x41414230,$/;"	e	enum:Variant
AABA	chips/nrf52/src/ficr.rs	/^    AABA = 0x41414241,$/;"	e	enum:Variant
AABB	chips/nrf52/src/ficr.rs	/^    AABB = 0x41414242,$/;"	e	enum:Variant
AAE0	chips/nrf52/src/ficr.rs	/^    AAE0 = 0x41414530,$/;"	e	enum:Variant
ABDACB_SDR0_TX	chips/sam4l/src/dma.rs	/^    ABDACB_SDR0_TX = 31,$/;"	e	enum:DMAPeripheral
ABDACB_SDR1_TX	chips/sam4l/src/dma.rs	/^    ABDACB_SDR1_TX = 32,$/;"	e	enum:DMAPeripheral
ABSACB	chips/sam4l/src/pm.rs	/^    ABSACB,$/;"	e	enum:PBAClock
AC0	chips/sam4l/src/acifc.rs	/^    AC0 = 0x00,$/;"	e	enum:Channel
AC1	chips/sam4l/src/acifc.rs	/^    AC1 = 0x01,$/;"	e	enum:Channel
AC2	chips/sam4l/src/acifc.rs	/^    AC2 = 0x02,$/;"	e	enum:Channel
AC3	chips/sam4l/src/acifc.rs	/^    AC3 = 0x03,$/;"	e	enum:Channel
ACCEL_CLIENT	boards/imix/src/i2c_dummy.rs	/^static mut ACCEL_CLIENT: AccelClient = AccelClient {$/;"	v
ACCEL_CLIENT	boards/launchxl/src/i2c_tests.rs	/^static mut ACCEL_CLIENT: AccelClient = AccelClient {$/;"	v
ACIFC	chips/sam4l/src/acifc.rs	/^pub static mut ACIFC: Acifc = Acifc::new();$/;"	v
ACIFC	chips/sam4l/src/pm.rs	/^    ACIFC,$/;"	e	enum:PBAClock
ACMD41_ManufSpecificInit	capsules/src/sdcard.rs	/^    ACMD41_ManufSpecificInit = 0x80 + 41, \/\/ Manufacturer specific Init$/;"	e	enum:SDCmd
AD0	chips/sam4l/src/adc.rs	/^    AD0 = 0x00,$/;"	e	enum:Channel
AD1	chips/sam4l/src/adc.rs	/^    AD1 = 0x01,$/;"	e	enum:Channel
AD10	chips/sam4l/src/adc.rs	/^    AD10 = 0x0A,$/;"	e	enum:Channel
AD11	chips/sam4l/src/adc.rs	/^    AD11 = 0x0B,$/;"	e	enum:Channel
AD12	chips/sam4l/src/adc.rs	/^    AD12 = 0x0C,$/;"	e	enum:Channel
AD13	chips/sam4l/src/adc.rs	/^    AD13 = 0x0D,$/;"	e	enum:Channel
AD14	chips/sam4l/src/adc.rs	/^    AD14 = 0x0E,$/;"	e	enum:Channel
AD2	chips/sam4l/src/adc.rs	/^    AD2 = 0x02,$/;"	e	enum:Channel
AD3	chips/sam4l/src/adc.rs	/^    AD3 = 0x03,$/;"	e	enum:Channel
AD4	chips/sam4l/src/adc.rs	/^    AD4 = 0x04,$/;"	e	enum:Channel
AD5	chips/sam4l/src/adc.rs	/^    AD5 = 0x05,$/;"	e	enum:Channel
AD6	chips/sam4l/src/adc.rs	/^    AD6 = 0x06,$/;"	e	enum:Channel
AD7	chips/sam4l/src/adc.rs	/^    AD7 = 0x07,$/;"	e	enum:Channel
AD8	chips/sam4l/src/adc.rs	/^    AD8 = 0x08,$/;"	e	enum:Channel
AD9	chips/sam4l/src/adc.rs	/^    AD9 = 0x09,$/;"	e	enum:Channel
ADC	chips/nrf52/src/adc.rs	/^pub static mut ADC: Adc = Adc::new(SAADC_BASE);$/;"	v
ADC0	chips/sam4l/src/adc.rs	/^pub static mut ADC0: Adc = Adc::new(BASE_ADDRESS, dma::DMAPeripheral::ADCIFE_RX);$/;"	v
ADCIFE	chips/sam4l/src/pm.rs	/^    ADCIFE,$/;"	e	enum:PBAClock
ADCIFE_RX	chips/sam4l/src/dma.rs	/^    ADCIFE_RX = 11,$/;"	e	enum:DMAPeripheral
ADCIFE_TX	chips/sam4l/src/dma.rs	/^    ADCIFE_TX = 29,$/;"	e	enum:DMAPeripheral
ADC_BUFFER1	capsules/src/adc.rs	/^pub static mut ADC_BUFFER1: [u16; 128] = [0; 128];$/;"	v
ADC_BUFFER2	capsules/src/adc.rs	/^pub static mut ADC_BUFFER2: [u16; 128] = [0; 128];$/;"	v
ADC_BUFFER3	capsules/src/adc.rs	/^pub static mut ADC_BUFFER3: [u16; 128] = [0; 128];$/;"	v
AES	chips/sam4l/src/aes.rs	/^pub static mut AES: Aes<'static> = Aes::new();$/;"	v
AES128	kernel/src/hil/symmetric_encryption.rs	/^pub trait AES128<'a> {$/;"	i
AES128CBC	kernel/src/hil/symmetric_encryption.rs	/^pub trait AES128CBC {$/;"	i
AES128CCM	capsules/src/aes_ccm.rs	/^impl<A: AES128<'a> + AES128Ctr + AES128CBC> AES128CCM<'a, A> {$/;"	c
AES128CCM	capsules/src/aes_ccm.rs	/^impl<A: AES128<'a> + AES128Ctr + AES128CBC> symmetric_encryption::AES128CCM<'a>$/;"	c
AES128CCM	capsules/src/aes_ccm.rs	/^impl<A: AES128<'a> + AES128Ctr + AES128CBC> symmetric_encryption::Client<'a> for AES128CCM<'a, A/;"	c
AES128CCM	capsules/src/aes_ccm.rs	/^pub struct AES128CCM<'a, A: AES128<'a> + AES128Ctr + AES128CBC> {$/;"	s
AES128CCM	kernel/src/hil/symmetric_encryption.rs	/^pub trait AES128CCM<'a> {$/;"	i
AES128Ctr	kernel/src/hil/symmetric_encryption.rs	/^pub trait AES128Ctr {$/;"	i
AESA	chips/sam4l/src/pm.rs	/^    AESA,$/;"	e	enum:HSBClock
AESA_RX	chips/sam4l/src/dma.rs	/^    AESA_RX = 17,$/;"	e	enum:DMAPeripheral
AESA_TX	chips/sam4l/src/dma.rs	/^    AESA_TX = 36,$/;"	e	enum:DMAPeripheral
AESCCM	boards/imix/src/aes_ccm_test.rs	/^type AESCCM = aes_ccm::AES128CCM<'static, Aes<'static>>;$/;"	t
AESECB	chips/nrf5x/src/aes.rs	/^pub static mut AESECB: AesECB = AesECB::new();$/;"	v
AFfmtCfg	capsules/src/fxos8700cq.rs	/^    AFfmtCfg = 0x15,$/;"	e	enum:Registers
AFfmtCount	capsules/src/fxos8700cq.rs	/^    AFfmtCount = 0x18,$/;"	e	enum:Registers
AFfmtSrc	capsules/src/fxos8700cq.rs	/^    AFfmtSrc = 0x16,$/;"	e	enum:Registers
AFfmtThs	capsules/src/fxos8700cq.rs	/^    AFfmtThs = 0x17,$/;"	e	enum:Registers
AFfmtThsXLsb	capsules/src/fxos8700cq.rs	/^    AFfmtThsXLsb = 0x74,$/;"	e	enum:Registers
AFfmtThsXMsb	capsules/src/fxos8700cq.rs	/^    AFfmtThsXMsb = 0x73,$/;"	e	enum:Registers
AFfmtThsYLsb	capsules/src/fxos8700cq.rs	/^    AFfmtThsYLsb = 0x76,$/;"	e	enum:Registers
AFfmtThsYMsb	capsules/src/fxos8700cq.rs	/^    AFfmtThsYMsb = 0x75,$/;"	e	enum:Registers
AFfmtThsZLsb	capsules/src/fxos8700cq.rs	/^    AFfmtThsZLsb = 0x78,$/;"	e	enum:Registers
AFfmtThsZMsb	capsules/src/fxos8700cq.rs	/^    AFfmtThsZMsb = 0x77,$/;"	e	enum:Registers
ALARM1	chips/nrf5x/src/timer.rs	/^pub static mut ALARM1: TimerAlarm = TimerAlarm::new(1);$/;"	v
ALIASES	kernel/target/doc/aliases.js	/^var ALIASES = {};$/;"	v
ALLOW	kernel/src/syscall.rs	/^    ALLOW {$/;"	e	enum:Syscall
ANT_DIV	capsules/src/rf233_const.rs	/^    ANT_DIV = 0x0D,$/;"	e	enum:RF233Register
APBA	chips/sam4l/src/pm.rs	/^    APBA,$/;"	e	enum:HSBClock
APBB	chips/sam4l/src/pm.rs	/^    APBB,$/;"	e	enum:HSBClock
APBC	chips/sam4l/src/pm.rs	/^    APBC,$/;"	e	enum:HSBClock
APBD	chips/sam4l/src/pm.rs	/^    APBD,$/;"	e	enum:HSBClock
APP_HARD_FAULT	arch/cortex-m/src/syscall.rs	/^pub static mut APP_HARD_FAULT: usize = 0;$/;"	v
APP_MEMORY	boards/arty-e21/src/main.rs	/^static mut APP_MEMORY: [u8; 8192] = [0; 8192];$/;"	v
APP_MEMORY	boards/ek-tm4c1294xl/src/main.rs	/^static mut APP_MEMORY: [u8; 10240] = [0; 10240];$/;"	v
APP_MEMORY	boards/hail/src/main.rs	/^static mut APP_MEMORY: [u8; 49152] = [0; 49152];$/;"	v
APP_MEMORY	boards/hifive1/src/main.rs	/^static mut APP_MEMORY: [u8; 8192] = [0; 8192];$/;"	v
APP_MEMORY	boards/imix/src/main.rs	/^static mut APP_MEMORY: [u8; 16384] = [0; 16384];$/;"	v
APP_MEMORY	boards/launchxl/src/main.rs	/^static mut APP_MEMORY: [u8; 0xA000] = [0; 0xA000];$/;"	v
APP_MEMORY	boards/nordic/nrf51dk/src/main.rs	/^static mut APP_MEMORY: [u8; 8192] = [0; 8192];$/;"	v
APP_MEMORY	boards/nordic/nrf52840dk/src/main.rs	/^static mut APP_MEMORY: [u8; 245760] = [0; 245760];$/;"	v
APP_MEMORY	boards/nordic/nrf52dk/src/main.rs	/^static mut APP_MEMORY: [u8; 32768] = [0; 32768];$/;"	v
ARRAY	boards/imix/src/ipv6_lowpan_test.rs	/^static mut ARRAY: [u8; 100] = [0x0; 100]; \/\/used in introducing delay between frames$/;"	v
AST	chips/sam4l/src/ast.rs	/^pub static mut AST: Ast<'static> = Ast {$/;"	v
AST	chips/sam4l/src/pm.rs	/^    AST,$/;"	e	enum:PBDClock
AVecmCfg	capsules/src/fxos8700cq.rs	/^    AVecmCfg = 0x5f,$/;"	e	enum:Registers
AVecmCnt	capsules/src/fxos8700cq.rs	/^    AVecmCnt = 0x62,$/;"	e	enum:Registers
AVecmInitxLsb	capsules/src/fxos8700cq.rs	/^    AVecmInitxLsb = 0x64,$/;"	e	enum:Registers
AVecmInitxMsb	capsules/src/fxos8700cq.rs	/^    AVecmInitxMsb = 0x63,$/;"	e	enum:Registers
AVecmInityLsb	capsules/src/fxos8700cq.rs	/^    AVecmInityLsb = 0x66,$/;"	e	enum:Registers
AVecmInityMsb	capsules/src/fxos8700cq.rs	/^    AVecmInityMsb = 0x65,$/;"	e	enum:Registers
AVecmInitzLsb	capsules/src/fxos8700cq.rs	/^    AVecmInitzLsb = 0x68,$/;"	e	enum:Registers
AVecmInitzMsb	capsules/src/fxos8700cq.rs	/^    AVecmInitzMsb = 0x67,$/;"	e	enum:Registers
AVecmThsLsb	capsules/src/fxos8700cq.rs	/^    AVecmThsLsb = 0x61,$/;"	e	enum:Registers
AVecmThsMsb	capsules/src/fxos8700cq.rs	/^    AVecmThsMsb = 0x60,$/;"	e	enum:Registers
AWAKE	capsules/src/ieee802154/xmac.rs	/^    AWAKE,       \/\/ Awake and listening for incoming preambles$/;"	e	enum:XMacState
Aborted	kernel/src/hil/uart.rs	/^    Aborted,$/;"	e	enum:Error
Aborting	capsules/src/virtual_uart.rs	/^    Aborting,$/;"	e	enum:UartDeviceReceiveState
Abs	capsules/src/alarm.rs	/^    Abs(u32),$/;"	e	enum:Expiration
Abs	capsules/src/ble_advertising_driver.rs	/^    Abs(u32),$/;"	e	enum:Expiration
AcChannel	chips/sam4l/src/acifc.rs	/^impl AcChannel {$/;"	c
AcChannel	chips/sam4l/src/acifc.rs	/^pub struct AcChannel {$/;"	s
AcComponent	boards/imix/src/components/analog_comparator.rs	/^impl AcComponent {$/;"	c
AcComponent	boards/imix/src/components/analog_comparator.rs	/^impl Component for AcComponent {$/;"	c
AcComponent	boards/imix/src/components/analog_comparator.rs	/^pub struct AcComponent {}$/;"	s
AccelClient	boards/imix/src/i2c_dummy.rs	/^impl hil::i2c::I2CHwMasterClient for AccelClient {$/;"	c
AccelClient	boards/imix/src/i2c_dummy.rs	/^struct AccelClient {$/;"	s
AccelClient	boards/launchxl/src/i2c_tests.rs	/^impl hil::i2c::I2CHwMasterClient for AccelClient {$/;"	c
AccelClient	boards/launchxl/src/i2c_tests.rs	/^struct AccelClient {$/;"	s
AccelClientState	boards/imix/src/i2c_dummy.rs	/^enum AccelClientState {$/;"	g
AccelClientState	boards/launchxl/src/i2c_tests.rs	/^enum AccelClientState {$/;"	g
AccumulatedChargeLSB	capsules/src/ltc294x.rs	/^    AccumulatedChargeLSB = 0x03,$/;"	e	enum:Registers
AccumulatedChargeMSB	capsules/src/ltc294x.rs	/^    AccumulatedChargeMSB = 0x02,$/;"	e	enum:Registers
Acifc	chips/sam4l/src/acifc.rs	/^impl<'a> Acifc<'a> {$/;"	c
Acifc	chips/sam4l/src/acifc.rs	/^impl<'a> analog_comparator::AnalogComparator for Acifc<'a> {$/;"	c
Acifc	chips/sam4l/src/acifc.rs	/^pub struct Acifc<'a> {$/;"	s
AcifcRegisters	chips/sam4l/src/acifc.rs	/^struct AcifcRegisters {$/;"	s
Acknowledgement	capsules/src/net/ieee802154.rs	/^    Acknowledgement = 0b010,$/;"	e	enum:FrameType
Activating	boards/imix/src/i2c_dummy.rs	/^    Activating,$/;"	e	enum:AccelClientState
Activating	boards/launchxl/src/i2c_tests.rs	/^    Activating,$/;"	e	enum:AccelClientState
ActivationMode	capsules/src/led.rs	/^pub enum ActivationMode {$/;"	g
Active	chips/sam4l/src/usbc/mod.rs	/^    Active(Mode),$/;"	e	enum:State
ActiveHigh	capsules/src/led.rs	/^    ActiveHigh,$/;"	e	enum:ActivationMode
ActiveLow	capsules/src/led.rs	/^    ActiveLow,$/;"	e	enum:ActivationMode
ActiveOperationalDataset	capsules/src/net/thread/tlv.rs	/^    ActiveOperationalDataset = 24,$/;"	e	enum:TlvType
ActiveOperationalDataset	capsules/src/net/thread/tlv.rs	/^    ActiveOperationalDataset(&'a [u8]),$/;"	e	enum:Tlv
ActiveTimestamp	capsules/src/net/thread/tlv.rs	/^    ActiveTimestamp = 14,$/;"	e	enum:NetworkManagementTlvType
ActiveTimestamp	capsules/src/net/thread/tlv.rs	/^    ActiveTimestamp {$/;"	e	enum:NetworkManagementTlv
Adc	capsules/src/adc.rs	/^impl<A: hil::adc::Adc + hil::adc::AdcHighSpeed> Adc<'a, A> {$/;"	c
Adc	capsules/src/adc.rs	/^impl<A: hil::adc::Adc + hil::adc::AdcHighSpeed> Driver for Adc<'a, A> {$/;"	c
Adc	capsules/src/adc.rs	/^impl<A: hil::adc::Adc + hil::adc::AdcHighSpeed> hil::adc::Client for Adc<'a, A> {$/;"	c
Adc	capsules/src/adc.rs	/^impl<A: hil::adc::Adc + hil::adc::AdcHighSpeed> hil::adc::HighSpeedClient for Adc<'a, A> {$/;"	c
Adc	capsules/src/adc.rs	/^pub struct Adc<'a, A: hil::adc::Adc + hil::adc::AdcHighSpeed> {$/;"	s
Adc	chips/nrf52/src/adc.rs	/^impl Adc {$/;"	c
Adc	chips/nrf52/src/adc.rs	/^impl hil::adc::Adc for Adc {$/;"	c
Adc	chips/nrf52/src/adc.rs	/^pub struct Adc {$/;"	s
Adc	chips/sam4l/src/adc.rs	/^impl Adc {$/;"	c
Adc	chips/sam4l/src/adc.rs	/^impl dma::DMAClient for Adc {$/;"	c
Adc	chips/sam4l/src/adc.rs	/^impl hil::adc::Adc for Adc {$/;"	c
Adc	chips/sam4l/src/adc.rs	/^impl hil::adc::AdcHighSpeed for Adc {$/;"	c
Adc	chips/sam4l/src/adc.rs	/^pub struct Adc {$/;"	s
Adc	kernel/src/hil/adc.rs	/^pub trait Adc {$/;"	i
AdcChRegisters	chips/nrf52/src/adc.rs	/^struct AdcChRegisters {$/;"	s
AdcChannel	chips/nrf52/src/adc.rs	/^pub enum AdcChannel {$/;"	g
AdcChannel	chips/sam4l/src/adc.rs	/^impl AdcChannel {$/;"	c
AdcChannel	chips/sam4l/src/adc.rs	/^pub struct AdcChannel {$/;"	s
AdcComponent	boards/imix/src/components/adc.rs	/^impl AdcComponent {$/;"	c
AdcComponent	boards/imix/src/components/adc.rs	/^impl Component for AdcComponent {$/;"	c
AdcComponent	boards/imix/src/components/adc.rs	/^pub struct AdcComponent {}$/;"	s
AdcEventChRegisters	chips/nrf52/src/adc.rs	/^struct AdcEventChRegisters {$/;"	s
AdcHighSpeed	kernel/src/hil/adc.rs	/^pub trait AdcHighSpeed: Adc {$/;"	i
AdcMode	capsules/src/adc.rs	/^enum AdcMode {$/;"	g
AdcRegisters	chips/nrf52/src/adc.rs	/^struct AdcRegisters {$/;"	s
AdcRegisters	chips/sam4l/src/adc.rs	/^pub struct AdcRegisters {$/;"	s
Address16	capsules/src/net/thread/tlv.rs	/^    Address16 = 10,$/;"	e	enum:TlvType
Address16	capsules/src/net/thread/tlv.rs	/^    Address16(u16),$/;"	e	enum:Tlv
AddressMode	capsules/src/net/ieee802154.rs	/^impl AddressMode {$/;"	c
AddressMode	capsules/src/net/ieee802154.rs	/^impl From<&'a Option<MacAddress>> for AddressMode {$/;"	c
AddressMode	capsules/src/net/ieee802154.rs	/^pub enum AddressMode {$/;"	g
AddressNak	kernel/src/hil/i2c.rs	/^    AddressNak,$/;"	e	enum:Error
AddressOutOfBounds	kernel/src/process.rs	/^    AddressOutOfBounds,$/;"	e	enum:Error
AdvPduType	capsules/src/ble_advertising_driver.rs	/^type AdvPduType = u8;$/;"	t
Advertising	capsules/src/ble_advertising_driver.rs	/^    Advertising(RadioChannel),$/;"	e	enum:BLEState
AdvertisingChannel37	kernel/src/hil/ble_advertising.rs	/^    AdvertisingChannel37 = 2,$/;"	e	enum:RadioChannel
AdvertisingChannel38	kernel/src/hil/ble_advertising.rs	/^    AdvertisingChannel38 = 26,$/;"	e	enum:RadioChannel
AdvertisingChannel39	kernel/src/hil/ble_advertising.rs	/^    AdvertisingChannel39 = 80,$/;"	e	enum:RadioChannel
AdvertisingIdle	capsules/src/ble_advertising_driver.rs	/^    AdvertisingIdle,$/;"	e	enum:BLEState
Aes	chips/sam4l/src/aes.rs	/^impl Aes<'a> {$/;"	c
Aes	chips/sam4l/src/aes.rs	/^impl hil::symmetric_encryption::AES128<'a> for Aes<'a> {$/;"	c
Aes	chips/sam4l/src/aes.rs	/^impl hil::symmetric_encryption::AES128CBC for Aes<'a> {$/;"	c
Aes	chips/sam4l/src/aes.rs	/^impl hil::symmetric_encryption::AES128Ctr for Aes<'a> {$/;"	c
Aes	chips/sam4l/src/aes.rs	/^pub struct Aes<'a> {$/;"	s
AesECB	chips/nrf5x/src/aes.rs	/^impl AesECB<'a> {$/;"	c
AesECB	chips/nrf5x/src/aes.rs	/^impl kernel::hil::symmetric_encryption::AES128<'a> for AesECB<'a> {$/;"	c
AesECB	chips/nrf5x/src/aes.rs	/^impl kernel::hil::symmetric_encryption::AES128Ctr for AesECB<'a> {$/;"	c
AesECB	chips/nrf5x/src/aes.rs	/^pub struct AesECB<'a> {$/;"	s
AesEcbRegisters	chips/nrf5x/src/aes.rs	/^struct AesEcbRegisters {$/;"	s
AesRegisters	chips/sam4l/src/aes.rs	/^struct AesRegisters {$/;"	s
Alarm	kernel/src/hil/time.rs	/^pub trait Alarm: Time {$/;"	i
AlarmData	capsules/src/alarm.rs	/^impl Default for AlarmData {$/;"	c
AlarmData	capsules/src/alarm.rs	/^pub struct AlarmData {$/;"	s
AlarmData	capsules/src/ble_advertising_driver.rs	/^impl AlarmData {$/;"	c
AlarmData	capsules/src/ble_advertising_driver.rs	/^struct AlarmData {$/;"	s
AlarmDriver	boards/imix/src/components/alarm.rs	/^    type Output = &'static AlarmDriver<'static, VirtualMuxAlarm<'static, sam4l::ast::Ast<'static/;"	v	implementation:AlarmDriverComponent
AlarmDriver	capsules/src/alarm.rs	/^impl<A: Alarm> AlarmDriver<'a, A> {$/;"	c
AlarmDriver	capsules/src/alarm.rs	/^impl<A: Alarm> Driver for AlarmDriver<'a, A> {$/;"	c
AlarmDriver	capsules/src/alarm.rs	/^impl<A: Alarm> time::Client for AlarmDriver<'a, A> {$/;"	c
AlarmDriver	capsules/src/alarm.rs	/^pub struct AlarmDriver<'a, A: Alarm> {$/;"	s
AlarmDriverComponent	boards/imix/src/components/alarm.rs	/^impl AlarmDriverComponent {$/;"	c
AlarmDriverComponent	boards/imix/src/components/alarm.rs	/^impl Component for AlarmDriverComponent {$/;"	c
AlarmDriverComponent	boards/imix/src/components/alarm.rs	/^pub struct AlarmDriverComponent {$/;"	s
AlarmState	capsules/src/sdcard.rs	/^enum AlarmState {$/;"	g
AlarmTimer	chips/tm4c129x/src/gpt.rs	/^impl AlarmTimer {$/;"	c
AlarmTimer	chips/tm4c129x/src/gpt.rs	/^impl hil::Controller for AlarmTimer {$/;"	c
AlarmTimer	chips/tm4c129x/src/gpt.rs	/^impl hil::time::Alarm for AlarmTimer {$/;"	c
AlarmTimer	chips/tm4c129x/src/gpt.rs	/^impl hil::time::Time for AlarmTimer {$/;"	c
AlarmTimer	chips/tm4c129x/src/gpt.rs	/^pub struct AlarmTimer {$/;"	s
AlertMode	capsules/src/ltc294x.rs	/^    AlertMode = 0x02,$/;"	e	enum:InterruptPinConf
Allocator	kernel/src/grant.rs	/^impl Allocator {$/;"	c
Allocator	kernel/src/grant.rs	/^pub struct Allocator {$/;"	s
AmbientLight	boards/imix/src/components/isl29035.rs	/^    type Output = &'static AmbientLight<'static>;$/;"	v	implementation:AmbientLightComponent
AmbientLight	capsules/src/ambient_light.rs	/^impl AmbientLight<'a> {$/;"	c
AmbientLight	capsules/src/ambient_light.rs	/^impl Driver for AmbientLight<'a> {$/;"	c
AmbientLight	capsules/src/ambient_light.rs	/^impl hil::sensors::AmbientLightClient for AmbientLight<'a> {$/;"	c
AmbientLight	capsules/src/ambient_light.rs	/^pub struct AmbientLight<'a> {$/;"	s
AmbientLight	kernel/src/hil/sensors.rs	/^pub trait AmbientLight {$/;"	i
AmbientLightClient	kernel/src/hil/sensors.rs	/^pub trait AmbientLightClient {$/;"	i
AmbientLightComponent	boards/imix/src/components/isl29035.rs	/^impl AmbientLightComponent {$/;"	c
AmbientLightComponent	boards/imix/src/components/isl29035.rs	/^impl Component for AmbientLightComponent {$/;"	c
AmbientLightComponent	boards/imix/src/components/isl29035.rs	/^pub struct AmbientLightComponent {$/;"	s
Analog	chips/tm4c129x/src/gpio.rs	/^    Analog,$/;"	e	enum:InputMode
AnalogComparator	capsules/src/analog_comparator.rs	/^impl<'a, A: hil::analog_comparator::AnalogComparator> AnalogComparator<'a, A> {$/;"	c
AnalogComparator	capsules/src/analog_comparator.rs	/^impl<'a, A: hil::analog_comparator::AnalogComparator> Driver for AnalogComparator<'a, A> {$/;"	c
AnalogComparator	capsules/src/analog_comparator.rs	/^impl<'a, A: hil::analog_comparator::AnalogComparator> hil::analog_comparator::Client$/;"	c
AnalogComparator	capsules/src/analog_comparator.rs	/^pub struct AnalogComparator<'a, A: hil::analog_comparator::AnalogComparator + 'a> {$/;"	s
AnalogComparator	kernel/src/hil/analog_comparator.rs	/^pub trait AnalogComparator {$/;"	i
AnalogInput0	chips/nrf52/src/adc.rs	/^    AnalogInput0 = 1,$/;"	e	enum:AdcChannel
AnalogInput1	chips/nrf52/src/adc.rs	/^    AnalogInput1 = 2,$/;"	e	enum:AdcChannel
AnalogInput2	chips/nrf52/src/adc.rs	/^    AnalogInput2 = 3,$/;"	e	enum:AdcChannel
AnalogInput3	chips/nrf52/src/adc.rs	/^    AnalogInput3 = 4,$/;"	e	enum:AdcChannel
AnalogInput4	chips/nrf52/src/adc.rs	/^    AnalogInput4 = 5,$/;"	e	enum:AdcChannel
AnalogInput5	chips/nrf52/src/adc.rs	/^    AnalogInput5 = 6,$/;"	e	enum:AdcChannel
AnalogInput6	chips/nrf52/src/adc.rs	/^    AnalogInput6 = 7,$/;"	e	enum:AdcChannel
AnalogInput7	chips/nrf52/src/adc.rs	/^    AnalogInput7 = 8,$/;"	e	enum:AdcChannel
Aon	chips/cc26x2/src/aon.rs	/^impl Aon {$/;"	c
Aon	chips/cc26x2/src/aon.rs	/^pub struct Aon {$/;"	s
AonEventRegisters	chips/cc26x2/src/aon.rs	/^pub struct AonEventRegisters {$/;"	s
AonIocRegisters	chips/cc26x2/src/aon.rs	/^pub struct AonIocRegisters {$/;"	s
AonPMCtlRegisters	chips/cc26x2/src/prcm.rs	/^struct AonPMCtlRegisters {$/;"	s
AonPmCtlRegisters	chips/cc26x2/src/aon.rs	/^struct AonPmCtlRegisters {$/;"	s
App	capsules/src/adc.rs	/^pub struct App {$/;"	s
App	capsules/src/ambient_light.rs	/^pub struct App {$/;"	s
App	capsules/src/app_flash_driver.rs	/^pub struct App {$/;"	s
App	capsules/src/ble_advertising_driver.rs	/^impl App {$/;"	c
App	capsules/src/ble_advertising_driver.rs	/^impl Default for App {$/;"	c
App	capsules/src/ble_advertising_driver.rs	/^pub struct App {$/;"	s
App	capsules/src/console.rs	/^pub struct App {$/;"	s
App	capsules/src/crc.rs	/^pub struct App {$/;"	s
App	capsules/src/humidity.rs	/^pub struct App {$/;"	s
App	capsules/src/i2c_master.rs	/^pub struct App {$/;"	s
App	capsules/src/i2c_master_slave_driver.rs	/^pub struct App {$/;"	s
App	capsules/src/ieee802154/driver.rs	/^impl Default for App {$/;"	c
App	capsules/src/ieee802154/driver.rs	/^pub struct App {$/;"	s
App	capsules/src/net/udp/driver.rs	/^pub struct App {$/;"	s
App	capsules/src/ninedof.rs	/^impl Default for App {$/;"	c
App	capsules/src/ninedof.rs	/^pub struct App {$/;"	s
App	capsules/src/nonvolatile_storage_driver.rs	/^    App { app_id: AppId },$/;"	e	enum:NonvolatileUser
App	capsules/src/nonvolatile_storage_driver.rs	/^impl Default for App {$/;"	c
App	capsules/src/nonvolatile_storage_driver.rs	/^pub struct App {$/;"	s
App	capsules/src/nrf51822_serialization.rs	/^struct App {$/;"	s
App	capsules/src/rng.rs	/^pub struct App {$/;"	s
App	capsules/src/sdcard.rs	/^struct App {$/;"	s
App	capsules/src/spi.rs	/^struct App {$/;"	s
App	capsules/src/temperature.rs	/^pub struct App {$/;"	s
App	capsules/src/usb_user.rs	/^pub struct App {$/;"	s
AppFlash	capsules/src/app_flash_driver.rs	/^impl AppFlash<'a> {$/;"	c
AppFlash	capsules/src/app_flash_driver.rs	/^impl Driver for AppFlash<'a> {$/;"	c
AppFlash	capsules/src/app_flash_driver.rs	/^impl hil::nonvolatile_storage::NonvolatileStorageClient for AppFlash<'a> {$/;"	c
AppFlash	capsules/src/app_flash_driver.rs	/^pub struct AppFlash<'a> {$/;"	s
AppId	kernel/src/callback.rs	/^impl AppId {$/;"	c
AppId	kernel/src/callback.rs	/^impl Eq for AppId {}$/;"	c
AppId	kernel/src/callback.rs	/^impl PartialEq for AppId {$/;"	c
AppId	kernel/src/callback.rs	/^impl fmt::Debug for AppId {$/;"	c
AppId	kernel/src/callback.rs	/^pub struct AppId {$/;"	s
AppPtr	kernel/src/mem.rs	/^impl<L, T> AppPtr<L, T> {$/;"	c
AppPtr	kernel/src/mem.rs	/^impl<L, T> Deref for AppPtr<L, T> {$/;"	c
AppPtr	kernel/src/mem.rs	/^impl<L, T> DerefMut for AppPtr<L, T> {$/;"	c
AppPtr	kernel/src/mem.rs	/^impl<L, T> Drop for AppPtr<L, T> {$/;"	c
AppPtr	kernel/src/mem.rs	/^pub struct AppPtr<L, T> {$/;"	s
AppSlice	kernel/src/mem.rs	/^impl<L, T> AppSlice<L, T> {$/;"	c
AppSlice	kernel/src/mem.rs	/^impl<L, T> AsMut<[T]> for AppSlice<L, T> {$/;"	c
AppSlice	kernel/src/mem.rs	/^impl<L, T> AsRef<[T]> for AppSlice<L, T> {$/;"	c
AppSlice	kernel/src/mem.rs	/^pub struct AppSlice<L, T> {$/;"	s
AppliedGrant	kernel/src/grant.rs	/^impl<T> AppliedGrant<T> {$/;"	c
AppliedGrant	kernel/src/grant.rs	/^pub struct AppliedGrant<T> {$/;"	s
ArbitrationLost	kernel/src/hil/i2c.rs	/^    ArbitrationLost,$/;"	e	enum:Error
Arrow1Lend	doc/courses/rustconf/presentation/ipc.svg	/^       inkscape:isstock="true">$/;"	i
Arrow1Lend	doc/courses/rustconf/rustconf.svg	/^       inkscape:isstock="true">$/;"	i
Arrow1Lend-2	doc/courses/rustconf/presentation/ipc.svg	/^       inkscape:isstock="true">$/;"	i
Arrow1Lstart	doc/courses/rustconf/presentation/ipc.svg	/^       inkscape:isstock="true">$/;"	i
Arrow1Mend	doc/courses/rustconf/console.svg	/^       inkscape:collect="always">$/;"	i
Arrow2Lend	doc/courses/rustconf/console.svg	/^       inkscape:isstock="true">$/;"	i
Arrow2Lend	doc/courses/rustconf/rustconf.svg	/^       inkscape:isstock="true">$/;"	i
Arrow2Lstart	doc/courses/rustconf/rustconf.svg	/^       inkscape:isstock="true">$/;"	i
Arrow2Mend	doc/courses/rustconf/console.svg	/^       inkscape:isstock="true">$/;"	i
Arrow2Mstart	doc/courses/rustconf/console.svg	/^       inkscape:isstock="true">$/;"	i
ArtyE21	boards/arty-e21/src/main.rs	/^impl Platform for ArtyE21 {$/;"	c
ArtyE21	boards/arty-e21/src/main.rs	/^struct ArtyE21 {$/;"	s
ArtyExx	chips/arty_exx/src/chip.rs	/^impl ArtyExx {$/;"	c
ArtyExx	chips/arty_exx/src/chip.rs	/^impl kernel::Chip for ArtyExx {$/;"	c
ArtyExx	chips/arty_exx/src/chip.rs	/^pub struct ArtyExx {$/;"	s
AsPrimitive	libraries/enum_primitive/src/cast.rs	/^pub trait AsPrimitive<T>: 'static + Copy$/;"	i
AslpCount	capsules/src/fxos8700cq.rs	/^    AslpCount = 0x29,$/;"	e	enum:Registers
Ast	chips/sam4l/src/ast.rs	/^impl Alarm for Ast<'a> {$/;"	c
Ast	chips/sam4l/src/ast.rs	/^impl Ast<'a> {$/;"	c
Ast	chips/sam4l/src/ast.rs	/^impl Controller for Ast<'a> {$/;"	c
Ast	chips/sam4l/src/ast.rs	/^impl Time for Ast<'a> {$/;"	c
Ast	chips/sam4l/src/ast.rs	/^pub struct Ast<'a> {$/;"	s
AstRegisters	chips/sam4l/src/ast.rs	/^struct AstRegisters {$/;"	s
AtomicUsize	kernel/src/common/deferred_call.rs	/^impl AtomicUsize {$/;"	c
AtomicUsize	kernel/src/common/deferred_call.rs	/^struct AtomicUsize {$/;"	s
AtomicUsize	kernel/src/common/deferred_call.rs	/^unsafe impl Sync for AtomicUsize {}$/;"	c
Auth	capsules/src/aes_ccm.rs	/^    Auth,$/;"	e	enum:CCMState
AwakeMac	capsules/src/ieee802154/mac.rs	/^impl<R: radio::Radio> AwakeMac<'a, R> {$/;"	c
AwakeMac	capsules/src/ieee802154/mac.rs	/^impl<R: radio::Radio> Mac for AwakeMac<'a, R> {$/;"	c
AwakeMac	capsules/src/ieee802154/mac.rs	/^impl<R: radio::Radio> radio::RxClient for AwakeMac<'a, R> {$/;"	c
AwakeMac	capsules/src/ieee802154/mac.rs	/^impl<R: radio::Radio> radio::TxClient for AwakeMac<'a, R> {$/;"	c
AwakeMac	capsules/src/ieee802154/mac.rs	/^pub struct AwakeMac<'a, R: radio::Radio> {$/;"	s
B	capsules/src/net/thread/tlv.rs	/^    B = 0b0000_1000, \/\/ Thread 1.x Beacons are enabled.$/;"	e	enum:SecurityPolicy
B	chips/sam4l/src/gpio.rs	/^    B,$/;"	e	enum:PeripheralFunction
B	chips/tm4c129x/src/gpio.rs	/^    B = 2,$/;"	e	enum:PeripheralFunction
BASE_VECTORS	chips/cc26x2/src/crt1.rs	/^pub static BASE_VECTORS: [unsafe extern "C" fn(); 54] = [$/;"	v
BASE_VECTORS	chips/nrf51/src/crt1.rs	/^pub static BASE_VECTORS: [unsafe extern "C" fn(); 16] = [$/;"	v
BASE_VECTORS	chips/nrf52/src/crt1.rs	/^pub static BASE_VECTORS: [unsafe extern "C" fn(); 16] = [$/;"	v
BASE_VECTORS	chips/sam4l/src/lib.rs	/^pub static BASE_VECTORS: [unsafe extern "C" fn(); 16] = [$/;"	v
BASE_VECTORS	chips/tm4c129x/src/lib.rs	/^pub static BASE_VECTORS: [unsafe extern "C" fn(); 16] = [$/;"	v
BATMON	capsules/src/rf233_const.rs	/^    BATMON = 0x11,$/;"	e	enum:RF233Register
BEACON_NONCE	capsules/src/test/aes_ccm.rs	/^static BEACON_NONCE: [u8; CCM_NONCE_LENGTH] = [$/;"	v
BEACON_SECURED	capsules/src/test/aes_ccm.rs	/^static BEACON_SECURED: [u8; 34] = [$/;"	v
BEACON_UNSECURED	capsules/src/test/aes_ccm.rs	/^static BEACON_UNSECURED: [u8; 26] = [$/;"	v
BLE	capsules/src/ble_advertising_driver.rs	/^impl<B, A> BLE<'a, B, A>$/;"	c
BLE	capsules/src/ble_advertising_driver.rs	/^impl<B, A> ble_advertising::RxClient for BLE<'a, B, A>$/;"	c
BLE	capsules/src/ble_advertising_driver.rs	/^impl<B, A> ble_advertising::TxClient for BLE<'a, B, A>$/;"	c
BLE	capsules/src/ble_advertising_driver.rs	/^impl<B, A> kernel::Driver for BLE<'a, B, A>$/;"	c
BLE	capsules/src/ble_advertising_driver.rs	/^impl<B, A> kernel::hil::time::Client for BLE<'a, B, A>$/;"	c
BLE	capsules/src/ble_advertising_driver.rs	/^pub struct BLE<'a, B, A>$/;"	s
BLEState	capsules/src/ble_advertising_driver.rs	/^enum BLEState {$/;"	g
BPM	chips/sam4l/src/pm.rs	/^    BPM,$/;"	e	enum:PBDClock
BSCIF	chips/sam4l/src/pm.rs	/^    BSCIF,$/;"	e	enum:PBDClock
BUF	capsules/src/ble_advertising_driver.rs	/^pub static mut BUF: [u8; PACKET_LENGTH] = [0; PACKET_LENGTH];$/;"	v
BUF	capsules/src/fxos8700cq.rs	/^pub static mut BUF: [u8; 6] = [0; 6];$/;"	v
BUF	capsules/src/i2c_master.rs	/^pub static mut BUF: [u8; 64] = [0; 64];$/;"	v
BUF	capsules/src/isl29035.rs	/^pub static mut BUF: [u8; 3] = [0; 3];$/;"	v
BUF1	boards/imix/src/spi_dummy.rs	/^pub static mut BUF1: [u8; 8] = [0, 0, 0, 0, 0, 0, 0, 0];$/;"	v
BUF1	boards/imix/src/spi_slave_dummy.rs	/^pub static mut BUF1: [u8; 8] = [0, 0, 0, 0, 0, 0, 0, 0];$/;"	v
BUF2	boards/imix/src/spi_dummy.rs	/^pub static mut BUF2: [u8; 8] = [8, 7, 6, 5, 4, 3, 2, 1];$/;"	v
BUF2	boards/imix/src/spi_slave_dummy.rs	/^pub static mut BUF2: [u8; 8] = [8, 7, 6, 5, 4, 3, 2, 1];$/;"	v
BUFFER	boards/imix/src/virtual_uart_rx_test.rs	/^    static mut BUFFER: [u8; 7] = [0; 7];$/;"	v	function:static_init_test_receive_large
BUFFER	capsules/src/lps25hb.rs	/^pub static mut BUFFER: [u8; 5] = [0; 5];$/;"	v
BUFFER	capsules/src/ltc294x.rs	/^pub static mut BUFFER: [u8; 20] = [0; 20];$/;"	v
BUFFER	capsules/src/max17205.rs	/^pub static mut BUFFER: [u8; 8] = [0; 8];$/;"	v
BUFFER	capsules/src/mcp230xx.rs	/^pub static mut BUFFER: [u8; 7] = [0; 7];$/;"	v
BUFFER	capsules/src/nonvolatile_storage_driver.rs	/^pub static mut BUFFER: [u8; 512] = [0; 512];$/;"	v
BUFFER	capsules/src/pca9544a.rs	/^pub static mut BUFFER: [u8; 5] = [0; 5];$/;"	v
BUFFER	capsules/src/si7021.rs	/^pub static mut BUFFER: [u8; 14] = [0; 14];$/;"	v
BUFFER	capsules/src/tmp006.rs	/^pub static mut BUFFER: [u8; 3] = [0; 3];$/;"	v
BUFFER	capsules/src/tsl2561.rs	/^pub static mut BUFFER: [u8; 4] = [0; 4];$/;"	v
BUFFER1	capsules/src/i2c_master_slave_driver.rs	/^pub static mut BUFFER1: [u8; 256] = [0; 256];$/;"	v
BUFFER2	capsules/src/i2c_master_slave_driver.rs	/^pub static mut BUFFER2: [u8; 256] = [0; 256];$/;"	v
BUFFER3	capsules/src/i2c_master_slave_driver.rs	/^pub static mut BUFFER3: [u8; 256] = [0; 256];$/;"	v
BUSY_RX	capsules/src/rf233_const.rs	/^    BUSY_RX = 0x01,$/;"	e	enum:ExternalState
BUSY_RX_AACK	capsules/src/rf233_const.rs	/^    BUSY_RX_AACK = 0x11,$/;"	e	enum:ExternalState
BUSY_TX	capsules/src/rf233_const.rs	/^    BUSY_TX = 0x02,$/;"	e	enum:ExternalState
BUSY_TX_ARET	capsules/src/rf233_const.rs	/^    BUSY_TX_ARET = 0x12,$/;"	e	enum:ExternalState
BYTE	chips/nrf52/src/uart.rs	/^static mut BYTE: u8 = 0;$/;"	v
Bandgap	chips/sam4l/src/adc.rs	/^    Bandgap = 0x0F,$/;"	e	enum:Channel
Bank	chips/sam4l/src/usbc/mod.rs	/^impl Bank {$/;"	c
Bank	chips/sam4l/src/usbc/mod.rs	/^pub struct Bank {$/;"	s
Bank0	chips/sam4l/src/usbc/mod.rs	/^    Bank0,$/;"	e	enum:BankIndex
Bank1	chips/sam4l/src/usbc/mod.rs	/^    Bank1,$/;"	e	enum:BankIndex
BankIndex	chips/sam4l/src/usbc/mod.rs	/^pub enum BankIndex {$/;"	g
Batt	capsules/src/max17205.rs	/^    Batt = 0x0DA,    \/\/ Pack voltage, LSB = 1.25mV$/;"	e	enum:Registers
Beacon	capsules/src/net/ieee802154.rs	/^    Beacon = 0b000,$/;"	e	enum:FrameType
Bitfield	tools/svd2regs.py	/^class Bitfield(CodeBlock):$/;"	c
BitfieldField	tools/svd2regs.py	/^class BitfieldField(CodeBlock):$/;"	c
BitfieldFieldEnum	tools/svd2regs.py	/^class BitfieldFieldEnum(CodeBlock):$/;"	c
BitfieldsMacro	tools/svd2regs.py	/^class BitfieldsMacro(CodeBlock):$/;"	c
Bitmap	capsules/src/net/frag_utils.rs	/^impl Bitmap {$/;"	c
Bitmap	capsules/src/net/frag_utils.rs	/^pub struct Bitmap {$/;"	s
BitmodeValue	chips/nrf5x/src/timer.rs	/^pub enum BitmodeValue {$/;"	g
Ble1Mbit	chips/nrf5x/src/constants.rs	/^    Ble1Mbit = 3,$/;"	e	enum:RadioMode
BleAdvertisementDriver	kernel/src/hil/ble_advertising.rs	/^pub trait BleAdvertisementDriver {$/;"	i
BleConfig	kernel/src/hil/ble_advertising.rs	/^pub trait BleConfig {$/;"	i
BorderAgentLocator	capsules/src/net/thread/tlv.rs	/^    BorderAgentLocator = 9,$/;"	e	enum:NetworkManagementTlvType
BorderAgentLocator	capsules/src/net/thread/tlv.rs	/^    BorderAgentLocator(u16),$/;"	e	enum:NetworkManagementTlv
BorderRouter	capsules/src/net/thread/tlv.rs	/^    BorderRouter = 2,$/;"	e	enum:PrefixSubTlvType
BorderRouter	capsules/src/net/thread/tlv.rs	/^    BorderRouter(&'a [u8]),$/;"	e	enum:PrefixSubTlv
BorderRouterTlvValue	capsules/src/net/thread/tlv.rs	/^impl BorderRouterTlvValue {$/;"	c
BorderRouterTlvValue	capsules/src/net/thread/tlv.rs	/^pub struct BorderRouterTlvValue {$/;"	s
BorderRouterTlvValueBit	capsules/src/net/thread/tlv.rs	/^pub enum BorderRouterTlvValueBit {$/;"	g
Borrowed	kernel/src/grant.rs	/^impl<T: 'a + ?Sized> Borrowed<'a, T> {$/;"	c
Borrowed	kernel/src/grant.rs	/^impl<T: 'a + ?Sized> Deref for Borrowed<'a, T> {$/;"	c
Borrowed	kernel/src/grant.rs	/^impl<T: 'a + ?Sized> DerefMut for Borrowed<'a, T> {$/;"	c
Borrowed	kernel/src/grant.rs	/^pub struct Borrowed<'a, T: 'a + ?Sized> {$/;"	s
BpmRegisters	chips/sam4l/src/bpm.rs	/^struct BpmRegisters {$/;"	s
BscifRegisters	chips/sam4l/src/bscif.rs	/^struct BscifRegisters {$/;"	s
Bulk	capsules/src/usb.rs	/^    Bulk,$/;"	e	enum:TransferType
BulkIn	chips/sam4l/src/usbc/mod.rs	/^    BulkIn(BulkInState),$/;"	e	enum:EndpointState
BulkInResult	kernel/src/hil/usb.rs	/^pub enum BulkInResult {$/;"	g
BulkInState	chips/sam4l/src/usbc/mod.rs	/^pub enum BulkInState {$/;"	g
BulkOut	chips/sam4l/src/usbc/mod.rs	/^    BulkOut(BulkOutState),$/;"	e	enum:EndpointState
BulkOutResult	kernel/src/hil/usb.rs	/^pub enum BulkOutResult {$/;"	g
BulkOutState	chips/sam4l/src/usbc/mod.rs	/^pub enum BulkOutState {$/;"	g
Button	capsules/src/button.rs	/^impl<G: hil::gpio::Pin + hil::gpio::PinCtl> Button<'a, G> {$/;"	c
Button	capsules/src/button.rs	/^impl<G: hil::gpio::Pin + hil::gpio::PinCtl> Client for Button<'a, G> {$/;"	c
Button	capsules/src/button.rs	/^impl<G: hil::gpio::Pin + hil::gpio::PinCtl> Driver for Button<'a, G> {$/;"	c
Button	capsules/src/button.rs	/^pub struct Button<'a, G: hil::gpio::Pin> {$/;"	s
ButtonComponent	boards/imix/src/components/button.rs	/^impl ButtonComponent {$/;"	c
ButtonComponent	boards/imix/src/components/button.rs	/^impl Component for ButtonComponent {$/;"	c
ButtonComponent	boards/imix/src/components/button.rs	/^pub struct ButtonComponent {$/;"	s
ButtonState	capsules/src/button.rs	/^pub enum ButtonState {$/;"	g
Byte	chips/sam4l/src/crccu.rs	/^    Byte,$/;"	e	enum:TrWidth
C	capsules/src/net/thread/tlv.rs	/^    C = 0b0000_0100_0000_0000,   \/\/ Configure$/;"	e	enum:BorderRouterTlvValueBit
C	capsules/src/net/thread/tlv.rs	/^    C = 0b0001_0000, \/\/ External commissioner authentication is allowed using PSKc.$/;"	e	enum:SecurityPolicy
C	chips/sam4l/src/adc.rs	/^impl<C: hil::adc::Client + hil::adc::HighSpeedClient> EverythingClient for C {}$/;"	c
C	chips/sam4l/src/gpio.rs	/^    C,$/;"	e	enum:PeripheralFunction
C	chips/tm4c129x/src/gpio.rs	/^    C = 3,$/;"	e	enum:PeripheralFunction
CATB	chips/sam4l/src/pm.rs	/^    CATB,$/;"	e	enum:PBAClock
CATB_RX	chips/sam4l/src/dma.rs	/^    CATB_RX = 12,$/;"	e	enum:DMAPeripheral
CATB_TX	chips/sam4l/src/dma.rs	/^    CATB_TX = 30,$/;"	e	enum:DMAPeripheral
CBC	chips/sam4l/src/aes.rs	/^    CBC = 1,$/;"	e	enum:ConfidentialityMode
CCA_THRES	capsules/src/rf233_const.rs	/^    CCA_THRES = 0x09,$/;"	e	enum:RF233Register
CCFG_CONF	boards/launchxl/src/ccfg.rs	/^pub static CCFG_CONF: [u32; 22] = [$/;"	v
CCMClient	kernel/src/hil/symmetric_encryption.rs	/^pub trait CCMClient {$/;"	i
CCMState	capsules/src/aes_ccm.rs	/^enum CCMState {$/;"	g
CC_CTRL_0	capsules/src/rf233_const.rs	/^    CC_CTRL_0 = 0x13,$/;"	e	enum:RF233Register
CC_CTRL_1	capsules/src/rf233_const.rs	/^    CC_CTRL_1 = 0x14,$/;"	e	enum:RF233Register
CFB	chips/sam4l/src/aes.rs	/^    CFB = 2,$/;"	e	enum:ConfidentialityMode
CH	chips/nrf52/src/ficr.rs	/^    CH = 0x2001,$/;"	e	enum:Package
CHANNEL_AC0	chips/sam4l/src/acifc.rs	/^pub static mut CHANNEL_AC0: AcChannel = AcChannel::new(Channel::AC0);$/;"	v
CHANNEL_AC1	chips/sam4l/src/acifc.rs	/^pub static mut CHANNEL_AC1: AcChannel = AcChannel::new(Channel::AC1);$/;"	v
CHANNEL_AC2	chips/sam4l/src/acifc.rs	/^pub static mut CHANNEL_AC2: AcChannel = AcChannel::new(Channel::AC2);$/;"	v
CHANNEL_AC3	chips/sam4l/src/acifc.rs	/^pub static mut CHANNEL_AC3: AcChannel = AcChannel::new(Channel::AC3);$/;"	v
CHANNEL_AD0	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD0: AdcChannel = AdcChannel::new(Channel::AD0);$/;"	v
CHANNEL_AD1	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD1: AdcChannel = AdcChannel::new(Channel::AD1);$/;"	v
CHANNEL_AD10	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD10: AdcChannel = AdcChannel::new(Channel::AD10);$/;"	v
CHANNEL_AD11	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD11: AdcChannel = AdcChannel::new(Channel::AD11);$/;"	v
CHANNEL_AD12	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD12: AdcChannel = AdcChannel::new(Channel::AD12);$/;"	v
CHANNEL_AD13	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD13: AdcChannel = AdcChannel::new(Channel::AD13);$/;"	v
CHANNEL_AD14	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD14: AdcChannel = AdcChannel::new(Channel::AD14);$/;"	v
CHANNEL_AD2	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD2: AdcChannel = AdcChannel::new(Channel::AD2);$/;"	v
CHANNEL_AD3	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD3: AdcChannel = AdcChannel::new(Channel::AD3);$/;"	v
CHANNEL_AD4	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD4: AdcChannel = AdcChannel::new(Channel::AD4);$/;"	v
CHANNEL_AD5	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD5: AdcChannel = AdcChannel::new(Channel::AD5);$/;"	v
CHANNEL_AD6	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD6: AdcChannel = AdcChannel::new(Channel::AD6);$/;"	v
CHANNEL_AD7	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD7: AdcChannel = AdcChannel::new(Channel::AD7);$/;"	v
CHANNEL_AD8	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD8: AdcChannel = AdcChannel::new(Channel::AD8);$/;"	v
CHANNEL_AD9	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_AD9: AdcChannel = AdcChannel::new(Channel::AD9);$/;"	v
CHANNEL_BANDGAP	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_BANDGAP: AdcChannel = AdcChannel::new(Channel::Bandgap);$/;"	v
CHANNEL_DAC	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_DAC: AdcChannel = AdcChannel::new(Channel::DAC);$/;"	v
CHANNEL_REFERENCE_GROUND	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_REFERENCE_GROUND: AdcChannel = AdcChannel::new(Channel::ReferenceGround);$/;"	v
CHANNEL_SCALED_VCC	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_SCALED_VCC: AdcChannel = AdcChannel::new(Channel::ScaledVCC);$/;"	v
CHANNEL_VSINGLE	chips/sam4l/src/adc.rs	/^pub static mut CHANNEL_VSINGLE: AdcChannel = AdcChannel::new(Channel::Vsingle);$/;"	v
CHIPID	chips/sam4l/src/pm.rs	/^    CHIPID,$/;"	e	enum:PBCClock
CI	chips/nrf52/src/ficr.rs	/^    CI = 0x2002,$/;"	e	enum:Package
CK	chips/nrf52/src/ficr.rs	/^    CK = 0x2005,$/;"	e	enum:Package
CK32Source	chips/sam4l/src/bpm.rs	/^pub enum CK32Source {$/;"	g
CLK_1K	chips/sam4l/src/scif.rs	/^    CLK_1K = 15,$/;"	e	enum:ClockSource
CLK_CPU	chips/sam4l/src/scif.rs	/^    CLK_CPU = 7,$/;"	e	enum:ClockSource
CLK_HSB	chips/sam4l/src/scif.rs	/^    CLK_HSB = 8,$/;"	e	enum:ClockSource
CLK_PBA	chips/sam4l/src/scif.rs	/^    CLK_PBA = 9,$/;"	e	enum:ClockSource
CLK_PBB	chips/sam4l/src/scif.rs	/^    CLK_PBB = 10,$/;"	e	enum:ClockSource
CLK_PBC	chips/sam4l/src/scif.rs	/^    CLK_PBC = 11,$/;"	e	enum:ClockSource
CLK_PBD	chips/sam4l/src/scif.rs	/^    CLK_PBD = 12,$/;"	e	enum:ClockSource
CLOCK	chips/nrf51/src/clock.rs	/^pub static mut CLOCK: Clock = Clock::new();$/;"	v
CLOCK	chips/nrf52/src/clock.rs	/^pub static mut CLOCK: Clock = Clock::new();$/;"	v
CMD0_Reset	capsules/src/sdcard.rs	/^    CMD0_Reset = 0,                       \/\/                  Reset$/;"	e	enum:SDCmd
CMD12_StopRead	capsules/src/sdcard.rs	/^    CMD12_StopRead = 12,                  \/\/             Stop multiple block read$/;"	e	enum:SDCmd
CMD16_SetBlockSize	capsules/src/sdcard.rs	/^    CMD16_SetBlockSize = 16,              \/\/         Set blocksize$/;"	e	enum:SDCmd
CMD17_ReadSingle	capsules/src/sdcard.rs	/^    CMD17_ReadSingle = 17,                \/\/           Read single block$/;"	e	enum:SDCmd
CMD18_ReadMultiple	capsules/src/sdcard.rs	/^    CMD18_ReadMultiple = 18,              \/\/         Read multiple blocks$/;"	e	enum:SDCmd
CMD1_Init	capsules/src/sdcard.rs	/^    CMD1_Init = 1,                        \/\/                   Generic init$/;"	e	enum:SDCmd
CMD24_WriteSingle	capsules/src/sdcard.rs	/^    CMD24_WriteSingle = 24,               \/\/          Write single block$/;"	e	enum:SDCmd
CMD25_WriteMultiple	capsules/src/sdcard.rs	/^    CMD25_WriteMultiple = 25,             \/\/        Write multiple blocks$/;"	e	enum:SDCmd
CMD55_ManufSpecificCommand	capsules/src/sdcard.rs	/^    CMD55_ManufSpecificCommand = 55,      \/\/ Next command will be manufacturer specific$/;"	e	enum:SDCmd
CMD58_ReadOCR	capsules/src/sdcard.rs	/^    CMD58_ReadOCR = 58,                   \/\/              Read operation condition register (O/;"	e	enum:SDCmd
CMD8_CheckVoltage	capsules/src/sdcard.rs	/^    CMD8_CheckVoltage = 8,                \/\/           Check voltage range$/;"	e	enum:SDCmd
CMD9_ReadCSD	capsules/src/sdcard.rs	/^    CMD9_ReadCSD = 9,                     \/\/                Read chip specific data (CSD) regi/;"	e	enum:SDCmd
COMMAND	chips/sam4l/src/flashcalw.rs	/^    COMMAND,$/;"	e	enum:RegKey
COMMAND	kernel/src/syscall.rs	/^    COMMAND {$/;"	e	enum:Syscall
COMMAND_BUF	capsules/src/process_console.rs	/^pub static mut COMMAND_BUF: [u8; 32] = [0; 32];$/;"	v
COMMENT_MAX_LENGTH	tools/svd2regs.py	/^COMMENT_MAX_LENGTH = 80$/;"	v
CONFIG_DONE	capsules/src/rf233.rs	/^    CONFIG_DONE,$/;"	e	enum:InternalState
CONFIG_IEEE0_SET	capsules/src/rf233.rs	/^    CONFIG_IEEE0_SET,$/;"	e	enum:InternalState
CONFIG_IEEE1_SET	capsules/src/rf233.rs	/^    CONFIG_IEEE1_SET,$/;"	e	enum:InternalState
CONFIG_IEEE2_SET	capsules/src/rf233.rs	/^    CONFIG_IEEE2_SET,$/;"	e	enum:InternalState
CONFIG_IEEE3_SET	capsules/src/rf233.rs	/^    CONFIG_IEEE3_SET,$/;"	e	enum:InternalState
CONFIG_IEEE4_SET	capsules/src/rf233.rs	/^    CONFIG_IEEE4_SET,$/;"	e	enum:InternalState
CONFIG_IEEE5_SET	capsules/src/rf233.rs	/^    CONFIG_IEEE5_SET,$/;"	e	enum:InternalState
CONFIG_IEEE6_SET	capsules/src/rf233.rs	/^    CONFIG_IEEE6_SET,$/;"	e	enum:InternalState
CONFIG_IEEE7_SET	capsules/src/rf233.rs	/^    CONFIG_IEEE7_SET,$/;"	e	enum:InternalState
CONFIG_PAN0_SET	capsules/src/rf233.rs	/^    CONFIG_PAN0_SET,$/;"	e	enum:InternalState
CONFIG_PAN1_SET	capsules/src/rf233.rs	/^    CONFIG_PAN1_SET,$/;"	e	enum:InternalState
CONFIG_POWER_SET	capsules/src/rf233.rs	/^    CONFIG_POWER_SET,$/;"	e	enum:InternalState
CONFIG_SHORT0_SET	capsules/src/rf233.rs	/^    CONFIG_SHORT0_SET,$/;"	e	enum:InternalState
CONFIG_SHORT1_SET	capsules/src/rf233.rs	/^    CONFIG_SHORT1_SET,$/;"	e	enum:InternalState
CONTROL	chips/sam4l/src/flashcalw.rs	/^    CONTROL,$/;"	e	enum:RegKey
COUNTER	boards/imix/src/spi_slave_dummy.rs	/^pub static mut COUNTER: usize = 0;$/;"	v
CPB	chips/sam4l/src/flashcalw.rs	/^    CPB,$/;"	e	enum:FlashCMD
CPU	chips/cc26x2/src/prcm.rs	/^    CPU,$/;"	e	enum:PowerDomain
CRC	kernel/src/hil/crc.rs	/^pub trait CRC {$/;"	i
CRCCU	chips/sam4l/src/crccu.rs	/^pub static mut CRCCU: Crccu<'static> = Crccu::new(BASE_ADDRESS);$/;"	v
CRCCU	chips/sam4l/src/pm.rs	/^    CRCCU,$/;"	e	enum:HSBClock
CRCCU	chips/sam4l/src/pm.rs	/^    CRCCU,$/;"	e	enum:PBBClock
CRYPT_BUF	boards/imix/src/components/radio.rs	/^static mut CRYPT_BUF: [u8; CRYPT_SIZE] = [0x00; CRYPT_SIZE];$/;"	v
CSCR	chips/sam4l/src/scif.rs	/^    CSCR = 0x1C,$/;"	e	enum:Register
CSMA_BE	capsules/src/rf233_const.rs	/^    CSMA_BE = 0x2F,$/;"	e	enum:RF233Register
CSMA_SEED_0	capsules/src/rf233_const.rs	/^    CSMA_SEED_0 = 0x2D,$/;"	e	enum:RF233Register
CSMA_SEED_1	capsules/src/rf233_const.rs	/^    CSMA_SEED_1 = 0x2E,$/;"	e	enum:RF233Register
CTR	chips/sam4l/src/aes.rs	/^    CTR = 4,$/;"	e	enum:ConfidentialityMode
CTTO	chips/nrf51/src/clock.rs	/^    CTTO = (1 << 4),$/;"	e	enum:InterruptField
CTTO	chips/nrf52/src/clock.rs	/^    CTTO = (1 << 4),$/;"	e	enum:InterruptField
C_SRCS	doc/courses/2018-11-SenSys/exercises/app/Makefile	/^C_SRCS := $(wildcard *.c)$/;"	m
Callback	kernel/src/callback.rs	/^impl Callback {$/;"	c
Callback	kernel/src/callback.rs	/^pub struct Callback {$/;"	s
Capability	boards/imix/src/components/process_console.rs	/^pub struct Capability;$/;"	s
Capability	boards/imix/src/components/process_console.rs	/^unsafe impl capabilities::ProcessManagementCapability for Capability {}$/;"	c
CardStateChanged	capsules/src/sdcard.rs	/^    CardStateChanged = -1,$/;"	e	enum:ErrorCode
Cc26X2	chips/cc26x2/src/chip.rs	/^impl Cc26X2 {$/;"	c
Cc26X2	chips/cc26x2/src/chip.rs	/^impl kernel::Chip for Cc26X2 {$/;"	c
Cc26X2	chips/cc26x2/src/chip.rs	/^pub struct Cc26X2 {$/;"	s
Cell	libraries/tock-cells/src/numeric_cell_ext.rs	/^impl<T> NumericCellExt<T> for Cell<T>$/;"	c
Challenge	capsules/src/net/thread/tlv.rs	/^    Challenge = 3,$/;"	e	enum:TlvType
Challenge	capsules/src/net/thread/tlv.rs	/^    Challenge([u8; 8]), \/\/ Byte string max length 8 bytes.$/;"	e	enum:Tlv
Channel	capsules/src/net/thread/tlv.rs	/^    Channel = 0,$/;"	e	enum:NetworkManagementTlvType
Channel	capsules/src/net/thread/tlv.rs	/^    Channel {$/;"	e	enum:NetworkManagementTlv
Channel	chips/nrf52/src/adc.rs	/^    type Channel = AdcChannel;$/;"	t	implementation:Adc
Channel	chips/sam4l/src/acifc.rs	/^    type Channel = AcChannel;$/;"	t	implementation:Acifc
Channel	chips/sam4l/src/acifc.rs	/^enum Channel {$/;"	g
Channel	chips/sam4l/src/adc.rs	/^    type Channel = AdcChannel;$/;"	t	implementation:Adc
Channel	chips/sam4l/src/adc.rs	/^enum Channel {$/;"	g
Channel	kernel/src/hil/adc.rs	/^    type Channel;$/;"	t	interface:Adc
Channel	kernel/src/hil/analog_comparator.rs	/^    type Channel;$/;"	t	interface:AnalogComparator
ChannelMask	capsules/src/net/thread/tlv.rs	/^    ChannelMask = 53,$/;"	e	enum:NetworkManagementTlvType
ChannelMask	capsules/src/net/thread/tlv.rs	/^    ChannelMask(&'a [u8]),$/;"	e	enum:NetworkManagementTlv
ChannelMaskEntry	capsules/src/net/thread/tlv.rs	/^impl ChannelMaskEntry {$/;"	c
ChannelMaskEntry	capsules/src/net/thread/tlv.rs	/^pub struct ChannelMaskEntry {$/;"	s
ChargeCompleteMode	capsules/src/ltc294x.rs	/^    ChargeCompleteMode = 0x01,$/;"	e	enum:InterruptPinConf
ChargeThresholdHighLSB	capsules/src/ltc294x.rs	/^    ChargeThresholdHighLSB = 0x05,$/;"	e	enum:Registers
ChargeThresholdHighMSB	capsules/src/ltc294x.rs	/^    ChargeThresholdHighMSB = 0x04,$/;"	e	enum:Registers
ChargeThresholdLowLSB	capsules/src/ltc294x.rs	/^    ChargeThresholdLowLSB = 0x07,$/;"	e	enum:Registers
ChargeThresholdLowMSB	capsules/src/ltc294x.rs	/^    ChargeThresholdLowMSB = 0x06,$/;"	e	enum:Registers
Cheese	capsules/examples/traitobj_list.rs	/^impl<'a> Cheese<'a> {$/;"	c
Cheese	capsules/examples/traitobj_list.rs	/^impl<'a> Funky<'a> for Cheese<'a> {$/;"	c
Cheese	capsules/examples/traitobj_list.rs	/^pub struct Cheese<'a> {$/;"	s
Chip	kernel/src/platform/mod.rs	/^pub trait Chip {$/;"	i
ChipModel	capsules/src/ltc294x.rs	/^pub enum ChipModel {$/;"	g
ChipSelect	chips/nrf52/src/spi.rs	/^    type ChipSelect = &'static hil::gpio::Pin;$/;"	t	implementation:SPIM
ChipSelect	chips/sam4l/src/spi.rs	/^    type ChipSelect = u8;$/;"	t	implementation:SpiHw
ChipSelect	chips/sam4l/src/usart.rs	/^    type ChipSelect = Option<&'static hil::gpio::Pin>;$/;"	t	implementation:USART
ChipSelect	kernel/src/hil/spi.rs	/^    type ChipSelect: Copy;$/;"	t	interface:SpiMaster
Class	capsules/src/usb.rs	/^    Class,$/;"	e	enum:RequestType
ClearFeature	capsules/src/usb.rs	/^    ClearFeature {$/;"	e	enum:StandardDeviceRequest
Client	capsules/src/usbc_client.rs	/^impl<C: hil::usb::UsbController> Client<'a, C> {$/;"	c
Client	capsules/src/usbc_client.rs	/^impl<C: hil::usb::UsbController> hil::usb::Client for Client<'a, C> {$/;"	c
Client	capsules/src/usbc_client.rs	/^pub struct Client<'a, C: 'a> {$/;"	s
Client	kernel/src/hil/adc.rs	/^pub trait Client {$/;"	i
Client	kernel/src/hil/analog_comparator.rs	/^pub trait Client {$/;"	i
Client	kernel/src/hil/crc.rs	/^pub trait Client {$/;"	i
Client	kernel/src/hil/flash.rs	/^pub trait Client<F: Flash> {$/;"	i
Client	kernel/src/hil/gpio.rs	/^pub trait Client {$/;"	i
Client	kernel/src/hil/gpio_async.rs	/^pub trait Client {$/;"	i
Client	kernel/src/hil/rng.rs	/^pub trait Client {$/;"	i
Client	kernel/src/hil/symmetric_encryption.rs	/^pub trait Client<'a> {$/;"	i
Client	kernel/src/hil/time.rs	/^pub trait Client {$/;"	i
Client	kernel/src/hil/uart.rs	/^pub trait Client {$/;"	i
Client	kernel/src/hil/usb.rs	/^pub trait Client {$/;"	i
Client	kernel/src/process.rs	/^    Client,$/;"	e	enum:IPCType
Client32	kernel/src/hil/entropy.rs	/^pub trait Client32 {$/;"	i
Client8	kernel/src/hil/entropy.rs	/^pub trait Client8 {$/;"	i
Clock	chips/cc26x2/src/prcm.rs	/^impl Clock {$/;"	c
Clock	chips/cc26x2/src/prcm.rs	/^pub struct Clock(());$/;"	s
Clock	chips/nrf51/src/clock.rs	/^impl Clock {$/;"	c
Clock	chips/nrf51/src/clock.rs	/^pub struct Clock {$/;"	s
Clock	chips/nrf52/src/clock.rs	/^impl Clock {$/;"	c
Clock	chips/nrf52/src/clock.rs	/^pub struct Clock {$/;"	s
Clock	chips/sam4l/src/ast.rs	/^enum Clock {$/;"	g
Clock	chips/sam4l/src/pm.rs	/^impl ClockInterface for Clock {$/;"	c
Clock	chips/sam4l/src/pm.rs	/^pub enum Clock {$/;"	g
Clock	chips/sam4l/src/scif.rs	/^pub enum Clock {$/;"	g
Clock	chips/tm4c129x/src/sysctl.rs	/^pub enum Clock {$/;"	g
Clock1K	chips/sam4l/src/ast.rs	/^    Clock1K = 4,$/;"	e	enum:Clock
Clock1K	chips/sam4l/src/scif.rs	/^    Clock1K = 4,$/;"	e	enum:Clock
ClockAPB	chips/sam4l/src/ast.rs	/^    ClockAPB = 2,$/;"	e	enum:Clock
ClockAPB	chips/sam4l/src/scif.rs	/^    ClockAPB = 2,$/;"	e	enum:Clock
ClockClient	chips/nrf51/src/clock.rs	/^pub trait ClockClient {$/;"	i
ClockClient	chips/nrf52/src/clock.rs	/^pub trait ClockClient {$/;"	i
ClockFrequency	chips/sifive/src/prci.rs	/^pub enum ClockFrequency {$/;"	g
ClockGclk2	chips/sam4l/src/ast.rs	/^    ClockGclk2 = 3,$/;"	e	enum:Clock
ClockGclk2	chips/sam4l/src/scif.rs	/^    ClockGclk2 = 3,$/;"	e	enum:Clock
ClockInterface	kernel/src/platform/mod.rs	/^pub trait ClockInterface {$/;"	i
ClockMask	chips/sam4l/src/pm.rs	/^pub enum ClockMask {$/;"	g
ClockOsc32	chips/sam4l/src/ast.rs	/^    ClockOsc32 = 1,$/;"	e	enum:Clock
ClockOsc32	chips/sam4l/src/scif.rs	/^    ClockOsc32 = 1,$/;"	e	enum:Clock
ClockOsc32	chips/sam4l/src/wdt.rs	/^    ClockOsc32 = 1,$/;"	e	enum:WdtClockSource
ClockPhase	kernel/src/hil/spi.rs	/^pub enum ClockPhase {$/;"	g
ClockPolarity	kernel/src/hil/spi.rs	/^pub enum ClockPolarity {$/;"	g
ClockRCSys	chips/sam4l/src/ast.rs	/^    ClockRCSys = 0,$/;"	e	enum:Clock
ClockRCSys	chips/sam4l/src/scif.rs	/^    ClockRCSys = 0,$/;"	e	enum:Clock
ClockRCSys	chips/sam4l/src/wdt.rs	/^    ClockRCSys = 0,$/;"	e	enum:WdtClockSource
ClockRegisters	chips/nrf51/src/clock.rs	/^struct ClockRegisters {$/;"	s
ClockRegisters	chips/nrf52/src/clock.rs	/^struct ClockRegisters {$/;"	s
ClockRunning	chips/nrf51/src/clock.rs	/^pub enum ClockRunning {$/;"	g
ClockSource	chips/sam4l/src/scif.rs	/^pub enum ClockSource {$/;"	g
ClockTaskTriggered	chips/nrf51/src/clock.rs	/^pub enum ClockTaskTriggered {$/;"	g
CmpXLsb	capsules/src/fxos8700cq.rs	/^    CmpXLsb = 0x3a,$/;"	e	enum:Registers
CmpXMsb	capsules/src/fxos8700cq.rs	/^    CmpXMsb = 0x39,$/;"	e	enum:Registers
CmpYLsb	capsules/src/fxos8700cq.rs	/^    CmpYLsb = 0x3c,$/;"	e	enum:Registers
CmpYMsb	capsules/src/fxos8700cq.rs	/^    CmpYMsb = 0x3b,$/;"	e	enum:Registers
CmpZLsb	capsules/src/fxos8700cq.rs	/^    CmpZLsb = 0x3e,$/;"	e	enum:Registers
CmpZMsb	capsules/src/fxos8700cq.rs	/^    CmpZMsb = 0x3d,$/;"	e	enum:Registers
CodeBlock	tools/svd2regs.py	/^class CodeBlock(str):$/;"	c
CommandComplete	kernel/src/hil/flash.rs	/^    CommandComplete,$/;"	e	enum:Error
CommandComplete	kernel/src/hil/i2c.rs	/^    CommandComplete,$/;"	e	enum:Error
CommandComplete	kernel/src/hil/uart.rs	/^    CommandComplete,$/;"	e	enum:Error
CommissionerId	capsules/src/net/thread/tlv.rs	/^    CommissionerId = 10,$/;"	e	enum:NetworkManagementTlvType
CommissionerId	capsules/src/net/thread/tlv.rs	/^    CommissionerId([u8; 64]), \/\/ Commissioner ID max length 64 bytes.$/;"	e	enum:NetworkManagementTlv
CommissionerSessionId	capsules/src/net/thread/tlv.rs	/^    CommissionerSessionId = 11,$/;"	e	enum:NetworkManagementTlvType
CommissionerSessionId	capsules/src/net/thread/tlv.rs	/^    CommissionerSessionId(u16),$/;"	e	enum:NetworkManagementTlv
CommissionerUdpPort	capsules/src/net/thread/tlv.rs	/^    CommissionerUdpPort = 15,$/;"	e	enum:NetworkManagementTlvType
CommissionerUdpPort	capsules/src/net/thread/tlv.rs	/^    CommissionerUdpPort(u16),$/;"	e	enum:NetworkManagementTlv
CommissioningData	capsules/src/net/thread/tlv.rs	/^    CommissioningData = 4,$/;"	e	enum:NetworkDataTlvType
CommissioningData	capsules/src/net/thread/tlv.rs	/^    CommissioningData {$/;"	e	enum:NetworkDataTlv
CompareClient	chips/nrf5x/src/timer.rs	/^pub trait CompareClient {$/;"	i
Component	kernel/src/component.rs	/^pub trait Component {$/;"	i
ConfidentialityMode	chips/sam4l/src/aes.rs	/^enum ConfidentialityMode {$/;"	g
Config	chips/nrf5x/src/rtc.rs	/^    type Config = &'static time::Client;$/;"	t	implementation:Rtc
Config	chips/sam4l/src/ast.rs	/^    type Config = &'static time::Client;$/;"	t	implementation:Ast
Config	chips/sam4l/src/gpio.rs	/^    type Config = Option<PeripheralFunction>;$/;"	t	implementation:GPIOPin
Config	chips/tm4c129x/src/gpio.rs	/^    type Config = Mode;$/;"	t	implementation:GPIOPin
Config	chips/tm4c129x/src/gpt.rs	/^    type Config = &'static hil::time::Client;$/;"	t	implementation:AlarmTimer
Config	kernel/src/hil/mod.rs	/^    type Config;$/;"	t	interface:Controller
ConfigClient	kernel/src/hil/radio.rs	/^pub trait ConfigClient {$/;"	i
Configuration	capsules/src/tmp006.rs	/^    Configuration = 0x02,$/;"	e	enum:Registers
Configuration	capsules/src/usb.rs	/^    Configuration,$/;"	e	enum:DescriptorType
ConfigurationAttributes	capsules/src/usb.rs	/^impl ConfigurationAttributes {$/;"	c
ConfigurationAttributes	capsules/src/usb.rs	/^pub struct ConfigurationAttributes(u8);$/;"	s
ConfigurationDescriptor	capsules/src/usb.rs	/^impl Default for ConfigurationDescriptor {$/;"	c
ConfigurationDescriptor	capsules/src/usb.rs	/^impl Descriptor for ConfigurationDescriptor {$/;"	c
ConfigurationDescriptor	capsules/src/usb.rs	/^pub struct ConfigurationDescriptor {$/;"	s
Configure	capsules/src/tmp006.rs	/^    Configure,$/;"	e	enum:ProtocolState
Configure	capsules/src/virtual_spi.rs	/^    Configure(hil::spi::ClockPolarity, hil::spi::ClockPhase, u32),$/;"	e	enum:Op
Connectivity	capsules/src/net/thread/tlv.rs	/^    Connectivity = 15,$/;"	e	enum:TlvType
Connectivity	capsules/src/net/thread/tlv.rs	/^    Connectivity {$/;"	e	enum:Tlv
Console	capsules/src/console.rs	/^impl<U: UART> Client for Console<'a, U> {$/;"	c
Console	capsules/src/console.rs	/^impl<U: UART> Console<'a, U> {$/;"	c
Console	capsules/src/console.rs	/^impl<U: UART> Driver for Console<'a, U> {$/;"	c
Console	capsules/src/console.rs	/^pub struct Console<'a, U: UART> {$/;"	s
ConsoleComponent	boards/imix/src/components/console.rs	/^impl Component for ConsoleComponent {$/;"	c
ConsoleComponent	boards/imix/src/components/console.rs	/^impl ConsoleComponent {$/;"	c
ConsoleComponent	boards/imix/src/components/console.rs	/^pub struct ConsoleComponent {$/;"	s
Context	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^impl ContextStore for Context {$/;"	c
Context	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^pub struct Context {$/;"	s
ContextStore	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^pub trait ContextStore {$/;"	i
ContextSwitchReason	kernel/src/syscall.rs	/^pub enum ContextSwitchReason {$/;"	g
Continue	kernel/src/hil/entropy.rs	/^pub enum Continue {$/;"	g
Continue	kernel/src/hil/rng.rs	/^pub enum Continue {$/;"	g
ContinuousBuffer	capsules/src/adc.rs	/^    ContinuousBuffer = 3,$/;"	e	enum:AdcMode
ContinuousSample	capsules/src/adc.rs	/^    ContinuousSample = 1,$/;"	e	enum:AdcMode
Control	capsules/src/ltc294x.rs	/^    Control = 0x01,$/;"	e	enum:Registers
Control	capsules/src/tsl2561.rs	/^    Control = 0x00,$/;"	e	enum:Registers
Control	capsules/src/usb.rs	/^    Control = 0,$/;"	e	enum:TransferType
ControlField	capsules/src/pca9544a.rs	/^enum ControlField {$/;"	g
ControlStatReg	chips/cc26x2/src/i2c.rs	/^    impl ControlStatReg {$/;"	c	module:regs
Controller	kernel/src/hil/mod.rs	/^pub trait Controller {$/;"	i
CortexMConfig	arch/cortex-m/src/mpu.rs	/^impl CortexMConfig {$/;"	c
CortexMConfig	arch/cortex-m/src/mpu.rs	/^impl Default for CortexMConfig {$/;"	c
CortexMConfig	arch/cortex-m/src/mpu.rs	/^pub struct CortexMConfig {$/;"	s
CortexMRegion	arch/cortex-m/src/mpu.rs	/^impl CortexMRegion {$/;"	c
CortexMRegion	arch/cortex-m/src/mpu.rs	/^pub struct CortexMRegion {$/;"	s
CortexMStoredState	arch/cortex-m/src/syscall.rs	/^impl Default for CortexMStoredState {$/;"	c
CortexMStoredState	arch/cortex-m/src/syscall.rs	/^pub struct CortexMStoredState {$/;"	s
Coulomb	capsules/src/max17205.rs	/^    Coulomb = 0x04D,$/;"	e	enum:Registers
Crc	capsules/src/crc.rs	/^impl<C: hil::crc::CRC> Crc<'a, C> {$/;"	c
Crc	capsules/src/crc.rs	/^impl<C: hil::crc::CRC> Driver for Crc<'a, C> {$/;"	c
Crc	capsules/src/crc.rs	/^impl<C: hil::crc::CRC> hil::crc::Client for Crc<'a, C> {$/;"	c
Crc	capsules/src/crc.rs	/^pub struct Crc<'a, C: hil::crc::CRC> {$/;"	s
Crc32	kernel/src/hil/crc.rs	/^    Crc32,$/;"	e	enum:CrcAlg
Crc32C	kernel/src/hil/crc.rs	/^    Crc32C,$/;"	e	enum:CrcAlg
CrcAlg	kernel/src/hil/crc.rs	/^pub enum CrcAlg {$/;"	g
CrcComponent	boards/imix/src/components/crc.rs	/^impl Component for CrcComponent {$/;"	c
CrcComponent	boards/imix/src/components/crc.rs	/^impl CrcComponent {$/;"	c
CrcComponent	boards/imix/src/components/crc.rs	/^pub struct CrcComponent {$/;"	s
Crccu	chips/sam4l/src/crccu.rs	/^impl Crccu<'a> {$/;"	c
Crccu	chips/sam4l/src/crccu.rs	/^impl crc::CRC for Crccu<'a> {$/;"	c
Crccu	chips/sam4l/src/crccu.rs	/^pub struct Crccu<'a> {$/;"	s
CrccuRegisters	chips/sam4l/src/crccu.rs	/^struct CrccuRegisters {$/;"	s
Ctrl	chips/sam4l/src/usbc/mod.rs	/^    Ctrl(CtrlState),$/;"	e	enum:EndpointState
CtrlIn	capsules/src/usbc_client.rs	/^    CtrlIn(usize, usize),$/;"	e	enum:State
CtrlInResult	kernel/src/hil/usb.rs	/^pub enum CtrlInResult {$/;"	g
CtrlOut	capsules/src/usbc_client.rs	/^    CtrlOut,$/;"	e	enum:State
CtrlOutResult	kernel/src/hil/usb.rs	/^pub enum CtrlOutResult {$/;"	g
CtrlReg1	capsules/src/fxos8700cq.rs	/^    CtrlReg1 = 0x2a,$/;"	e	enum:Registers
CtrlReg1	capsules/src/lps25hb.rs	/^    CtrlReg1 = 0x20,$/;"	e	enum:Registers
CtrlReg2	capsules/src/fxos8700cq.rs	/^    CtrlReg2 = 0x2b,$/;"	e	enum:Registers
CtrlReg2	capsules/src/lps25hb.rs	/^    CtrlReg2 = 0x21,$/;"	e	enum:Registers
CtrlReg3	capsules/src/fxos8700cq.rs	/^    CtrlReg3 = 0x2c,$/;"	e	enum:Registers
CtrlReg3	capsules/src/lps25hb.rs	/^    CtrlReg3 = 0x22,$/;"	e	enum:Registers
CtrlReg4	capsules/src/fxos8700cq.rs	/^    CtrlReg4 = 0x2d,$/;"	e	enum:Registers
CtrlReg4	capsules/src/lps25hb.rs	/^    CtrlReg4 = 0x23,$/;"	e	enum:Registers
CtrlReg5	capsules/src/fxos8700cq.rs	/^    CtrlReg5 = 0x2e,$/;"	e	enum:Registers
CtrlSetupResult	kernel/src/hil/usb.rs	/^pub enum CtrlSetupResult {$/;"	g
CtrlState	chips/sam4l/src/usbc/mod.rs	/^pub enum CtrlState {$/;"	g
Ctx16	boards/imix/src/ipv6_lowpan_test.rs	/^    Ctx16,$/;"	e	enum:DAC
Ctx16	boards/imix/src/ipv6_lowpan_test.rs	/^    Ctx16,$/;"	e	enum:SAC
Ctx16	boards/imix/src/sixlowpan_dummy.rs	/^    Ctx16,$/;"	e	enum:DAC
Ctx16	boards/imix/src/sixlowpan_dummy.rs	/^    Ctx16,$/;"	e	enum:SAC
Ctx64	boards/imix/src/ipv6_lowpan_test.rs	/^    Ctx64,$/;"	e	enum:DAC
Ctx64	boards/imix/src/ipv6_lowpan_test.rs	/^    Ctx64,$/;"	e	enum:SAC
Ctx64	boards/imix/src/sixlowpan_dummy.rs	/^    Ctx64,$/;"	e	enum:DAC
Ctx64	boards/imix/src/sixlowpan_dummy.rs	/^    Ctx64,$/;"	e	enum:SAC
CtxIID	boards/imix/src/ipv6_lowpan_test.rs	/^    CtxIID,$/;"	e	enum:DAC
CtxIID	boards/imix/src/ipv6_lowpan_test.rs	/^    CtxIID,$/;"	e	enum:SAC
CtxIID	boards/imix/src/sixlowpan_dummy.rs	/^    CtxIID,$/;"	e	enum:DAC
CtxIID	boards/imix/src/sixlowpan_dummy.rs	/^    CtxIID,$/;"	e	enum:SAC
Current	capsules/src/max17205.rs	/^    Current = 0x00A, \/\/ Instantaneous current, LSB = 156.25 uA$/;"	e	enum:Registers
CurrentLSB	capsules/src/ltc294x.rs	/^    CurrentLSB = 0x0F,$/;"	e	enum:Registers
CurrentMSB	capsules/src/ltc294x.rs	/^    CurrentMSB = 0x0E,$/;"	e	enum:Registers
D	capsules/src/net/thread/tlv.rs	/^    D = 0b0000_1000_0000_0000,   \/\/ DHCP$/;"	e	enum:BorderRouterTlvValueBit
D	chips/sam4l/src/gpio.rs	/^    D,$/;"	e	enum:PeripheralFunction
D	chips/tm4c129x/src/gpio.rs	/^    D = 4,$/;"	e	enum:PeripheralFunction
DAC	boards/imix/src/ipv6_lowpan_test.rs	/^enum DAC {$/;"	g
DAC	boards/imix/src/sixlowpan_dummy.rs	/^enum DAC {$/;"	g
DAC	chips/sam4l/src/adc.rs	/^    DAC = 0x13,$/;"	e	enum:Channel
DAC	chips/sam4l/src/dac.rs	/^pub static mut DAC: Dac = Dac::new(DAC_BASE);$/;"	v
DACC	chips/sam4l/src/pm.rs	/^    DACC,$/;"	e	enum:PBAClock
DACC_TX	chips/sam4l/src/dma.rs	/^    DACC_TX = 35,$/;"	e	enum:DMAPeripheral
DATA	boards/imix/src/i2c_dummy.rs	/^    static mut DATA: [u8; 255] = [0; 255];$/;"	v	function:i2c_accel_test
DATA	boards/imix/src/i2c_dummy.rs	/^    static mut DATA: [u8; 255] = [0; 255];$/;"	v	function:i2c_li_test
DATA	boards/imix/src/i2c_dummy.rs	/^    static mut DATA: [u8; 255] = [0; 255];$/;"	v	function:i2c_scan_slaves
DATA	boards/launchxl/src/i2c_tests.rs	/^    static mut DATA: [u8; 0x7F] = [0x01; 0x7F];$/;"	v	function:i2c_scan_slaves
DATA	boards/launchxl/src/i2c_tests.rs	/^    static mut DATA: [u8; 255] = [0; 255];$/;"	v	function:i2c_accel_test
DATA_NONCE	capsules/src/test/aes_ccm.rs	/^static DATA_NONCE: [u8; CCM_NONCE_LENGTH] = [$/;"	v
DATA_SECURED	capsules/src/test/aes_ccm.rs	/^static DATA_SECURED: [u8; 30] = [$/;"	v
DATA_UNSECURED	capsules/src/test/aes_ccm.rs	/^static DATA_UNSECURED: [u8; 30] = [$/;"	v
DEBUG_GPIOS	kernel/src/debug.rs	/^pub static mut DEBUG_GPIOS: ($/;"	v
DEBUG_WRITER	kernel/src/debug.rs	/^static mut DEBUG_WRITER: Option<&'static mut DebugWriterWrapper> = None;$/;"	v
DEFAULT_CTX_PREFIX	boards/imix/src/icmp_lowpan_test.rs	/^static DEFAULT_CTX_PREFIX: [u8; 16] = [0x0 as u8; 16];$/;"	v
DEFAULT_CTX_PREFIX	boards/imix/src/ipv6_lowpan_test.rs	/^static DEFAULT_CTX_PREFIX: [u8; 16] = [0x0 as u8; 16];$/;"	v
DEFAULT_CTX_PREFIX	boards/imix/src/udp_lowpan_test.rs	/^static DEFAULT_CTX_PREFIX: [u8; 16] = [0x0 as u8; 16];$/;"	v
DEFERRED_CALL	chips/nrf52/src/nvmc.rs	/^static DEFERRED_CALL: DeferredCall<DeferredCallTask> =$/;"	v
DEFERRED_CALL	chips/sam4l/src/flashcalw.rs	/^static DEFERRED_CALL: DeferredCall<Task> = unsafe { DeferredCall::new(Task::Flashcalw) };$/;"	v
DEFERRED_CALL	kernel/src/common/deferred_call.rs	/^static DEFERRED_CALL: AtomicUsize = AtomicUsize::new(0);$/;"	v
DELAY_SLEEP	capsules/src/ieee802154/xmac.rs	/^    DELAY_SLEEP, \/\/ Receiving done; waiting for any other incoming data packets$/;"	e	enum:XMacState
DFLL	chips/sam4l/src/pm.rs	/^    DFLL = 0x10,$/;"	e	enum:ClockMask
DFLL	chips/sam4l/src/pm.rs	/^    DFLL,$/;"	e	enum:MainClock
DFLL0	chips/sam4l/src/scif.rs	/^    DFLL0 = 2,$/;"	e	enum:ClockSource
DFLL0CONF	chips/sam4l/src/scif.rs	/^    DFLL0CONF = 0x28,$/;"	e	enum:Register
DFLL0MUL	chips/sam4l/src/scif.rs	/^    DFLL0MUL = 0x30,$/;"	e	enum:Register
DFLL0SSG	chips/sam4l/src/scif.rs	/^    DFLL0SSG = 0x38,$/;"	e	enum:Register
DFLL0STEP	chips/sam4l/src/scif.rs	/^    DFLL0STEP = 0x34,$/;"	e	enum:Register
DMAChannel	chips/sam4l/src/dma.rs	/^impl DMAChannel {$/;"	c
DMAChannel	chips/sam4l/src/dma.rs	/^pub struct DMAChannel {$/;"	s
DMAChannel00	chips/sam4l/src/dma.rs	/^    DMAChannel00 = 0,$/;"	e	enum:DMAChannelNum
DMAChannel01	chips/sam4l/src/dma.rs	/^    DMAChannel01 = 1,$/;"	e	enum:DMAChannelNum
DMAChannel02	chips/sam4l/src/dma.rs	/^    DMAChannel02 = 2,$/;"	e	enum:DMAChannelNum
DMAChannel03	chips/sam4l/src/dma.rs	/^    DMAChannel03 = 3,$/;"	e	enum:DMAChannelNum
DMAChannel04	chips/sam4l/src/dma.rs	/^    DMAChannel04 = 4,$/;"	e	enum:DMAChannelNum
DMAChannel05	chips/sam4l/src/dma.rs	/^    DMAChannel05 = 5,$/;"	e	enum:DMAChannelNum
DMAChannel06	chips/sam4l/src/dma.rs	/^    DMAChannel06 = 6,$/;"	e	enum:DMAChannelNum
DMAChannel07	chips/sam4l/src/dma.rs	/^    DMAChannel07 = 7,$/;"	e	enum:DMAChannelNum
DMAChannel08	chips/sam4l/src/dma.rs	/^    DMAChannel08 = 8,$/;"	e	enum:DMAChannelNum
DMAChannel09	chips/sam4l/src/dma.rs	/^    DMAChannel09 = 9,$/;"	e	enum:DMAChannelNum
DMAChannel10	chips/sam4l/src/dma.rs	/^    DMAChannel10 = 10,$/;"	e	enum:DMAChannelNum
DMAChannel11	chips/sam4l/src/dma.rs	/^    DMAChannel11 = 11,$/;"	e	enum:DMAChannelNum
DMAChannel12	chips/sam4l/src/dma.rs	/^    DMAChannel12 = 12,$/;"	e	enum:DMAChannelNum
DMAChannel13	chips/sam4l/src/dma.rs	/^    DMAChannel13 = 13,$/;"	e	enum:DMAChannelNum
DMAChannel14	chips/sam4l/src/dma.rs	/^    DMAChannel14 = 14,$/;"	e	enum:DMAChannelNum
DMAChannel15	chips/sam4l/src/dma.rs	/^    DMAChannel15 = 15,$/;"	e	enum:DMAChannelNum
DMAChannelNum	chips/sam4l/src/dma.rs	/^pub enum DMAChannelNum {$/;"	g
DMAClient	chips/sam4l/src/dma.rs	/^pub trait DMAClient {$/;"	i
DMAPeripheral	chips/sam4l/src/dma.rs	/^pub enum DMAPeripheral {$/;"	g
DMARegisters	chips/sam4l/src/dma.rs	/^struct DMARegisters {$/;"	s
DMAWidth	chips/sam4l/src/dma.rs	/^pub enum DMAWidth {$/;"	g
DMA_CHANNELS	chips/sam4l/src/dma.rs	/^pub static mut DMA_CHANNELS: [DMAChannel; 16] = [$/;"	v
DMA_Receiving	chips/sam4l/src/usart.rs	/^    DMA_Receiving,$/;"	e	enum:USARTStateRX
DMA_Transmitting	chips/sam4l/src/usart.rs	/^    DMA_Transmitting,$/;"	e	enum:USARTStateTX
DONE	chips/nrf51/src/clock.rs	/^    DONE = (1 << 3),$/;"	e	enum:InterruptField
DONE	chips/nrf52/src/clock.rs	/^    DONE = (1 << 3),$/;"	e	enum:InterruptField
DOWN_BUFFER	capsules/src/segger_rtt.rs	/^pub static mut DOWN_BUFFER: [u8; 32] = [0; 32];$/;"	v
Dac	capsules/src/dac.rs	/^impl Dac<'a> {$/;"	c
Dac	capsules/src/dac.rs	/^impl Driver for Dac<'a> {$/;"	c
Dac	capsules/src/dac.rs	/^pub struct Dac<'a> {$/;"	s
Dac	chips/sam4l/src/dac.rs	/^impl Dac {$/;"	c
Dac	chips/sam4l/src/dac.rs	/^impl hil::dac::DacChannel for Dac {$/;"	c
Dac	chips/sam4l/src/dac.rs	/^pub struct Dac {$/;"	s
DacChannel	kernel/src/hil/dac.rs	/^pub trait DacChannel {$/;"	i
DacRegisters	chips/sam4l/src/dac.rs	/^pub struct DacRegisters {$/;"	s
Data	capsules/src/net/ieee802154.rs	/^    Data = 0b001,$/;"	e	enum:FrameType
Data0High	capsules/src/tsl2561.rs	/^    Data0High = 0x0d,$/;"	e	enum:Registers
Data0Low	capsules/src/tsl2561.rs	/^    Data0Low = 0x0c,$/;"	e	enum:Registers
Data1High	capsules/src/tsl2561.rs	/^    Data1High = 0x0f,$/;"	e	enum:Registers
Data1Low	capsules/src/tsl2561.rs	/^    Data1Low = 0x0e,$/;"	e	enum:Registers
DataChannel0	kernel/src/hil/ble_advertising.rs	/^    DataChannel0 = 4,$/;"	e	enum:RadioChannel
DataChannel1	kernel/src/hil/ble_advertising.rs	/^    DataChannel1 = 6,$/;"	e	enum:RadioChannel
DataChannel10	kernel/src/hil/ble_advertising.rs	/^    DataChannel10 = 24,$/;"	e	enum:RadioChannel
DataChannel11	kernel/src/hil/ble_advertising.rs	/^    DataChannel11 = 28,$/;"	e	enum:RadioChannel
DataChannel12	kernel/src/hil/ble_advertising.rs	/^    DataChannel12 = 30,$/;"	e	enum:RadioChannel
DataChannel13	kernel/src/hil/ble_advertising.rs	/^    DataChannel13 = 32,$/;"	e	enum:RadioChannel
DataChannel14	kernel/src/hil/ble_advertising.rs	/^    DataChannel14 = 34,$/;"	e	enum:RadioChannel
DataChannel15	kernel/src/hil/ble_advertising.rs	/^    DataChannel15 = 36,$/;"	e	enum:RadioChannel
DataChannel16	kernel/src/hil/ble_advertising.rs	/^    DataChannel16 = 38,$/;"	e	enum:RadioChannel
DataChannel17	kernel/src/hil/ble_advertising.rs	/^    DataChannel17 = 40,$/;"	e	enum:RadioChannel
DataChannel18	kernel/src/hil/ble_advertising.rs	/^    DataChannel18 = 42,$/;"	e	enum:RadioChannel
DataChannel19	kernel/src/hil/ble_advertising.rs	/^    DataChannel19 = 44,$/;"	e	enum:RadioChannel
DataChannel2	kernel/src/hil/ble_advertising.rs	/^    DataChannel2 = 8,$/;"	e	enum:RadioChannel
DataChannel20	kernel/src/hil/ble_advertising.rs	/^    DataChannel20 = 46,$/;"	e	enum:RadioChannel
DataChannel21	kernel/src/hil/ble_advertising.rs	/^    DataChannel21 = 48,$/;"	e	enum:RadioChannel
DataChannel22	kernel/src/hil/ble_advertising.rs	/^    DataChannel22 = 50,$/;"	e	enum:RadioChannel
DataChannel23	kernel/src/hil/ble_advertising.rs	/^    DataChannel23 = 52,$/;"	e	enum:RadioChannel
DataChannel24	kernel/src/hil/ble_advertising.rs	/^    DataChannel24 = 54,$/;"	e	enum:RadioChannel
DataChannel25	kernel/src/hil/ble_advertising.rs	/^    DataChannel25 = 56,$/;"	e	enum:RadioChannel
DataChannel26	kernel/src/hil/ble_advertising.rs	/^    DataChannel26 = 58,$/;"	e	enum:RadioChannel
DataChannel27	kernel/src/hil/ble_advertising.rs	/^    DataChannel27 = 60,$/;"	e	enum:RadioChannel
DataChannel28	kernel/src/hil/ble_advertising.rs	/^    DataChannel28 = 62,$/;"	e	enum:RadioChannel
DataChannel29	kernel/src/hil/ble_advertising.rs	/^    DataChannel29 = 64,$/;"	e	enum:RadioChannel
DataChannel3	kernel/src/hil/ble_advertising.rs	/^    DataChannel3 = 10,$/;"	e	enum:RadioChannel
DataChannel30	kernel/src/hil/ble_advertising.rs	/^    DataChannel30 = 66,$/;"	e	enum:RadioChannel
DataChannel31	kernel/src/hil/ble_advertising.rs	/^    DataChannel31 = 68,$/;"	e	enum:RadioChannel
DataChannel32	kernel/src/hil/ble_advertising.rs	/^    DataChannel32 = 70,$/;"	e	enum:RadioChannel
DataChannel33	kernel/src/hil/ble_advertising.rs	/^    DataChannel33 = 72,$/;"	e	enum:RadioChannel
DataChannel34	kernel/src/hil/ble_advertising.rs	/^    DataChannel34 = 74,$/;"	e	enum:RadioChannel
DataChannel35	kernel/src/hil/ble_advertising.rs	/^    DataChannel35 = 76,$/;"	e	enum:RadioChannel
DataChannel36	kernel/src/hil/ble_advertising.rs	/^    DataChannel36 = 78,$/;"	e	enum:RadioChannel
DataChannel4	kernel/src/hil/ble_advertising.rs	/^    DataChannel4 = 12,$/;"	e	enum:RadioChannel
DataChannel5	kernel/src/hil/ble_advertising.rs	/^    DataChannel5 = 14,$/;"	e	enum:RadioChannel
DataChannel6	kernel/src/hil/ble_advertising.rs	/^    DataChannel6 = 16,$/;"	e	enum:RadioChannel
DataChannel7	kernel/src/hil/ble_advertising.rs	/^    DataChannel7 = 18,$/;"	e	enum:RadioChannel
DataChannel8	kernel/src/hil/ble_advertising.rs	/^    DataChannel8 = 20,$/;"	e	enum:RadioChannel
DataChannel9	kernel/src/hil/ble_advertising.rs	/^    DataChannel9 = 22,$/;"	e	enum:RadioChannel
DataNak	kernel/src/hil/i2c.rs	/^    DataNak,$/;"	e	enum:Error
DataOrder	kernel/src/hil/spi.rs	/^pub enum DataOrder {$/;"	g
Deactivating	boards/imix/src/i2c_dummy.rs	/^    Deactivating,$/;"	e	enum:AccelClientState
Deactivating	boards/launchxl/src/i2c_tests.rs	/^    Deactivating,$/;"	e	enum:AccelClientState
Debug	kernel/src/debug.rs	/^impl Default for Debug {$/;"	c
Debug	kernel/src/debug.rs	/^pub trait Debug {$/;"	i
DebugProcessRestart	capsules/src/debug_process_restart.rs	/^impl<'a, C: ProcessManagementCapability> Client for DebugProcessRestart<C> {$/;"	c
DebugProcessRestart	capsules/src/debug_process_restart.rs	/^impl<'a, C: ProcessManagementCapability> DebugProcessRestart<C> {$/;"	c
DebugProcessRestart	capsules/src/debug_process_restart.rs	/^pub struct DebugProcessRestart<C: ProcessManagementCapability> {$/;"	s
DebugWriter	kernel/src/debug.rs	/^impl DebugWriter {$/;"	c
DebugWriter	kernel/src/debug.rs	/^impl hil::uart::Client for DebugWriter {$/;"	c
DebugWriter	kernel/src/debug.rs	/^pub struct DebugWriter {$/;"	s
DebugWriterWrapper	kernel/src/debug.rs	/^impl DebugWriterWrapper {$/;"	c
DebugWriterWrapper	kernel/src/debug.rs	/^impl Write for DebugWriterWrapper {$/;"	c
DebugWriterWrapper	kernel/src/debug.rs	/^pub struct DebugWriterWrapper {$/;"	s
DebugWriterWrapper	kernel/src/debug.rs	/^static mut DEBUG_WRITER: Option<&'static mut DebugWriterWrapper> = None;$/;"	v
Deconfigure	capsules/src/tmp006.rs	/^    Deconfigure(Option<f32>),$/;"	e	enum:ProtocolState
Decrypting	capsules/src/ieee802154/framer.rs	/^    Decrypting(FrameInfo),$/;"	e	enum:RxState
DefVal	capsules/src/mcp230xx.rs	/^    DefVal = 0x03,$/;"	e	enum:Registers
DeferredCall	kernel/src/common/deferred_call.rs	/^impl<T: Into<usize> + TryFrom<usize> + Copy> DeferredCall<T> {$/;"	c
DeferredCall	kernel/src/common/deferred_call.rs	/^pub struct DeferredCall<T>(T);$/;"	s
DeferredCallTask	chips/nrf52/src/deferred_call_tasks.rs	/^impl Into<usize> for DeferredCallTask {$/;"	c
DeferredCallTask	chips/nrf52/src/deferred_call_tasks.rs	/^impl TryFrom<usize> for DeferredCallTask {$/;"	c
DeferredCallTask	chips/nrf52/src/deferred_call_tasks.rs	/^pub enum DeferredCallTask {$/;"	g
Delay	chips/sam4l/src/usbc/mod.rs	/^    Delay,$/;"	e	enum:BulkInState
Delay	chips/sam4l/src/usbc/mod.rs	/^    Delay,$/;"	e	enum:BulkOutState
Delay	kernel/src/hil/usb.rs	/^    Delay,$/;"	e	enum:BulkInResult
Delay	kernel/src/hil/usb.rs	/^    Delay,$/;"	e	enum:BulkOutResult
Delay	kernel/src/hil/usb.rs	/^    Delay,$/;"	e	enum:CtrlInResult
Delay	kernel/src/hil/usb.rs	/^    Delay,$/;"	e	enum:CtrlOutResult
DelayTimer	capsules/src/net/thread/tlv.rs	/^    DelayTimer = 52,$/;"	e	enum:NetworkManagementTlvType
DelayTimer	capsules/src/net/thread/tlv.rs	/^    DelayTimer(u32),$/;"	e	enum:NetworkManagementTlv
Descriptor	capsules/src/usb.rs	/^pub trait Descriptor {$/;"	i
Descriptor	chips/sam4l/src/crccu.rs	/^struct Descriptor {$/;"	s
DescriptorType	capsules/src/usb.rs	/^pub enum DescriptorType {$/;"	g
DetachablePin	boards/imix/src/power.rs	/^impl DetachablePin {$/;"	c
DetachablePin	boards/imix/src/power.rs	/^struct DetachablePin {$/;"	s
DetectionChange	capsules/src/sdcard.rs	/^    DetectionChange,$/;"	e	enum:AlarmState
Device	capsules/src/usb.rs	/^    Device = 1,$/;"	e	enum:DescriptorType
Device	capsules/src/usb.rs	/^    Device,$/;"	e	enum:Recipient
Device	chips/sam4l/src/usbc/mod.rs	/^    Device {$/;"	e	enum:Mode
DeviceConfig	chips/sam4l/src/usbc/mod.rs	/^pub struct DeviceConfig {$/;"	s
DeviceDescriptor	capsules/src/ieee802154/driver.rs	/^impl Default for DeviceDescriptor {$/;"	c
DeviceDescriptor	capsules/src/ieee802154/driver.rs	/^struct DeviceDescriptor {$/;"	s
DeviceDescriptor	capsules/src/usb.rs	/^impl Default for DeviceDescriptor {$/;"	c
DeviceDescriptor	capsules/src/usb.rs	/^impl Descriptor for DeviceDescriptor {$/;"	c
DeviceDescriptor	capsules/src/usb.rs	/^pub struct DeviceDescriptor {$/;"	s
DeviceID	capsules/src/tmp006.rs	/^    DeviceID = 0xFF,$/;"	e	enum:Registers
DeviceProcedure	capsules/src/ieee802154/framer.rs	/^pub trait DeviceProcedure {$/;"	i
DeviceQualifier	capsules/src/usb.rs	/^    DeviceQualifier,$/;"	e	enum:DescriptorType
DeviceRemoteWakeup	capsules/src/usb.rs	/^    DeviceRemoteWakeup,$/;"	e	enum:FeatureSelector
DeviceRequestType	capsules/src/usb.rs	/^impl DeviceRequestType {$/;"	c
DeviceRequestType	capsules/src/usb.rs	/^impl fmt::Debug for DeviceRequestType {$/;"	c
DeviceRequestType	capsules/src/usb.rs	/^pub struct DeviceRequestType(u8);$/;"	s
DeviceSpeed	kernel/src/hil/usb.rs	/^pub enum DeviceSpeed {$/;"	g
DeviceState	chips/sam4l/src/usbc/mod.rs	/^pub struct DeviceState {$/;"	s
DeviceToHost	capsules/src/usb.rs	/^    DeviceToHost,$/;"	e	enum:TransferDirection
DfllRc32kAt48MHz	chips/sam4l/src/pm.rs	/^    DfllRc32kAt48MHz,$/;"	e	enum:SystemClockSource
DieTemperature	capsules/src/tmp006.rs	/^    DieTemperature = 0x01,$/;"	e	enum:Registers
Digital	chips/tm4c129x/src/gpio.rs	/^    Digital,$/;"	e	enum:InputMode
Digital	chips/tm4c129x/src/gpio.rs	/^    Digital,$/;"	e	enum:OutputMode
DigitalAfsel	chips/tm4c129x/src/gpio.rs	/^    DigitalAfsel,$/;"	e	enum:InputMode
DigitalAfsel	chips/tm4c129x/src/gpio.rs	/^    DigitalAfsel,$/;"	e	enum:InputOutputMode
DigitalAfsel	chips/tm4c129x/src/gpio.rs	/^    DigitalAfsel,$/;"	e	enum:OutputMode
Direction	capsules/src/mcp230xx.rs	/^enum Direction {$/;"	g
Disabled	capsules/src/alarm.rs	/^    Disabled,$/;"	e	enum:Expiration
Disabled	capsules/src/ble_advertising_driver.rs	/^    Disabled,$/;"	e	enum:Expiration
Disabled	capsules/src/fxos8700cq.rs	/^    Disabled,$/;"	e	enum:State
Disabled	capsules/src/isl29035.rs	/^    Disabled,$/;"	e	enum:State
Disabled	capsules/src/ltc294x.rs	/^    Disabled = 0x00,$/;"	e	enum:InterruptPinConf
Disabled	chips/sam4l/src/usbc/mod.rs	/^    Disabled,$/;"	e	enum:EndpointState
Disabling	capsules/src/isl29035.rs	/^    Disabling(usize),$/;"	e	enum:State
Done	capsules/src/lps25hb.rs	/^    Done,$/;"	e	enum:State
Done	capsules/src/ltc294x.rs	/^    Done,$/;"	e	enum:State
Done	capsules/src/mcp230xx.rs	/^    Done,$/;"	e	enum:State
Done	capsules/src/net/stream.rs	/^    Done(usize, Output),$/;"	e	enum:SResult
Done	capsules/src/pca9544a.rs	/^    Done,$/;"	e	enum:State
Done	capsules/src/tsl2561.rs	/^    Done,$/;"	e	enum:State
Done	kernel/src/hil/entropy.rs	/^    Done,$/;"	e	enum:Continue
Done	kernel/src/hil/rng.rs	/^    Done,$/;"	e	enum:Continue
Driver	kernel/src/driver.rs	/^pub trait Driver {$/;"	i
DummyCB	boards/imix/src/spi_dummy.rs	/^impl spi::SpiMasterClient for DummyCB {$/;"	c
DummyCB	boards/imix/src/spi_dummy.rs	/^pub struct DummyCB {$/;"	s
E	chips/sam4l/src/gpio.rs	/^    E,$/;"	e	enum:PeripheralFunction
E	chips/tm4c129x/src/gpio.rs	/^    E = 5,$/;"	e	enum:PeripheralFunction
E310x	chips/e310x/src/chip.rs	/^impl E310x {$/;"	c
E310x	chips/e310x/src/chip.rs	/^impl kernel::Chip for E310x {$/;"	c
E310x	chips/e310x/src/chip.rs	/^pub struct E310x {$/;"	s
EA	chips/sam4l/src/flashcalw.rs	/^    EA,$/;"	e	enum:FlashCMD
EAGPF	chips/sam4l/src/flashcalw.rs	/^    EAGPF,$/;"	e	enum:FlashCMD
EALREADY	kernel/src/returncode.rs	/^    EALREADY,$/;"	e	enum:ReturnCode
EBUSY	kernel/src/returncode.rs	/^    EBUSY,$/;"	e	enum:ReturnCode
ECANCEL	kernel/src/returncode.rs	/^    ECANCEL,$/;"	e	enum:ReturnCode
ECB	chips/sam4l/src/aes.rs	/^    ECB = 0,$/;"	e	enum:ConfidentialityMode
ECB_DATA	chips/nrf5x/src/aes.rs	/^static mut ECB_DATA: [u8; 48] = [0; 48];$/;"	v
EGPB	chips/sam4l/src/flashcalw.rs	/^    EGPB,$/;"	e	enum:FlashCMD
EIC	chips/sam4l/src/pm.rs	/^    EIC,$/;"	e	enum:PBDClock
EINVAL	kernel/src/returncode.rs	/^    EINVAL,$/;"	e	enum:ReturnCode
ENOACK	kernel/src/returncode.rs	/^    ENOACK,$/;"	e	enum:ReturnCode
ENODEVICE	kernel/src/returncode.rs	/^    ENODEVICE,$/;"	e	enum:ReturnCode
ENOMEM	kernel/src/returncode.rs	/^    ENOMEM,$/;"	e	enum:ReturnCode
ENOSUPPORT	kernel/src/returncode.rs	/^    ENOSUPPORT,$/;"	e	enum:ReturnCode
EOFF	kernel/src/returncode.rs	/^    EOFF,$/;"	e	enum:ReturnCode
EP	chips/sam4l/src/flashcalw.rs	/^    EP,$/;"	e	enum:FlashCMD
ERESERVE	kernel/src/returncode.rs	/^    ERESERVE,$/;"	e	enum:ReturnCode
ESIZE	kernel/src/returncode.rs	/^    ESIZE,$/;"	e	enum:ReturnCode
ET	tools/svd2regs.py	/^from xml.etree import ElementTree as ET$/;"	x
EUNINSTALLED	kernel/src/returncode.rs	/^    EUNINSTALLED,$/;"	e	enum:ReturnCode
EUP	chips/sam4l/src/flashcalw.rs	/^    EUP,$/;"	e	enum:FlashCMD
EitherEdge	kernel/src/hil/gpio.rs	/^    EitherEdge,$/;"	e	enum:InterruptMode
EkTm4c1294xl	boards/ek-tm4c1294xl/src/main.rs	/^impl Platform for EkTm4c1294xl {$/;"	c
EkTm4c1294xl	boards/ek-tm4c1294xl/src/main.rs	/^struct EkTm4c1294xl {$/;"	s
EnableAndAttach	capsules/src/usb_user.rs	/^    EnableAndAttach,$/;"	e	enum:Request
EnableInterruptSettings	capsules/src/mcp230xx.rs	/^    EnableInterruptSettings(u8),$/;"	e	enum:State
Enabled	chips/sam4l/src/crccu.rs	/^    Enabled,$/;"	e	enum:State
Enabling	boards/imix/src/i2c_dummy.rs	/^    Enabling,$/;"	e	enum:LiClientState
Enabling	capsules/src/isl29035.rs	/^    Enabling,$/;"	e	enum:State
EncMic128	capsules/src/net/ieee802154.rs	/^    EncMic128 = 0b111,$/;"	e	enum:SecurityLevel
EncMic32	capsules/src/net/ieee802154.rs	/^    EncMic32 = 0b101,$/;"	e	enum:SecurityLevel
EncMic64	capsules/src/net/ieee802154.rs	/^    EncMic64 = 0b110,$/;"	e	enum:SecurityLevel
Encrypt	capsules/src/aes_ccm.rs	/^    Encrypt,$/;"	e	enum:CCMState
Encrypting	capsules/src/ieee802154/framer.rs	/^    Encrypting(FrameInfo),$/;"	e	enum:TxState
EndDevice	capsules/src/net/thread/tlv.rs	/^    EndDevice = 0b0100_0000,$/;"	e	enum:MulticastResponder
Endpoint	capsules/src/usb.rs	/^    Endpoint,$/;"	e	enum:DescriptorType
Endpoint	capsules/src/usb.rs	/^    Endpoint,$/;"	e	enum:Recipient
Endpoint	chips/sam4l/src/usbc/mod.rs	/^pub type Endpoint = [Bank; 2];$/;"	t
EndpointAddress	capsules/src/usb.rs	/^impl EndpointAddress {$/;"	c
EndpointAddress	capsules/src/usb.rs	/^pub struct EndpointAddress(u8);$/;"	s
EndpointConfigValue	chips/sam4l/src/usbc/mod.rs	/^type EndpointConfigValue = LocalRegisterCopy<u32, EndpointConfig::Register>;$/;"	t
EndpointDescriptor	capsules/src/usb.rs	/^impl Descriptor for EndpointDescriptor {$/;"	c
EndpointDescriptor	capsules/src/usb.rs	/^pub struct EndpointDescriptor {$/;"	s
EndpointHalt	capsules/src/usb.rs	/^    EndpointHalt,$/;"	e	enum:FeatureSelector
EndpointIndex	chips/sam4l/src/usbc/mod.rs	/^impl EndpointIndex {$/;"	c
EndpointIndex	chips/sam4l/src/usbc/mod.rs	/^pub struct EndpointIndex(u8);$/;"	s
EndpointState	chips/sam4l/src/usbc/mod.rs	/^impl Default for EndpointState {$/;"	c
EndpointState	chips/sam4l/src/usbc/mod.rs	/^pub enum EndpointState {$/;"	g
EndpointStatusValue	chips/sam4l/src/usbc/mod.rs	/^type EndpointStatusValue = LocalRegisterCopy<u32, EndpointStatus::Register>;$/;"	t
Entropy32	kernel/src/hil/entropy.rs	/^pub trait Entropy32<'a> {$/;"	i
Entropy32To8	capsules/src/rng.rs	/^impl Entropy32To8<'a> {$/;"	c
Entropy32To8	capsules/src/rng.rs	/^impl Entropy8<'a> for Entropy32To8<'a> {$/;"	c
Entropy32To8	capsules/src/rng.rs	/^impl entropy::Client32 for Entropy32To8<'a> {$/;"	c
Entropy32To8	capsules/src/rng.rs	/^pub struct Entropy32To8<'a> {$/;"	s
Entropy32To8Iter	capsules/src/rng.rs	/^impl Iterator for Entropy32To8Iter<'a, 'b> {$/;"	c
Entropy32To8Iter	capsules/src/rng.rs	/^struct Entropy32To8Iter<'a, 'b: 'a>(&'a Entropy32To8<'b>);$/;"	s
Entropy32ToRandom	capsules/src/rng.rs	/^impl Entropy32ToRandom<'a> {$/;"	c
Entropy32ToRandom	capsules/src/rng.rs	/^impl Rng<'a> for Entropy32ToRandom<'a> {$/;"	c
Entropy32ToRandom	capsules/src/rng.rs	/^impl entropy::Client32 for Entropy32ToRandom<'a> {$/;"	c
Entropy32ToRandom	capsules/src/rng.rs	/^pub struct Entropy32ToRandom<'a> {$/;"	s
Entropy32ToRandomIter	capsules/src/rng.rs	/^impl Iterator for Entropy32ToRandomIter<'a> {$/;"	c
Entropy32ToRandomIter	capsules/src/rng.rs	/^struct Entropy32ToRandomIter<'a>(&'a mut Iterator<Item = u32>);$/;"	s
Entropy8	kernel/src/hil/entropy.rs	/^pub trait Entropy8<'a> {$/;"	i
Entropy8To32	capsules/src/rng.rs	/^impl Entropy32<'a> for Entropy8To32<'a> {$/;"	c
Entropy8To32	capsules/src/rng.rs	/^impl Entropy8To32<'a> {$/;"	c
Entropy8To32	capsules/src/rng.rs	/^impl entropy::Client8 for Entropy8To32<'a> {$/;"	c
Entropy8To32	capsules/src/rng.rs	/^pub struct Entropy8To32<'a> {$/;"	s
Entropy8To32Iter	capsules/src/rng.rs	/^impl Iterator for Entropy8To32Iter<'a, 'b> {$/;"	c
Entropy8To32Iter	capsules/src/rng.rs	/^struct Entropy8To32Iter<'a, 'b: 'a>(&'a Entropy8To32<'b>);$/;"	s
EnumType	libraries/tock-register-interface/src/registers.rs	/^    type EnumType;$/;"	t	interface:TryFromValue
Erase	capsules/src/mx25r6435f.rs	/^    Erase,$/;"	e	enum:Operation
Erase	capsules/src/virtual_flash.rs	/^    Erase(usize),$/;"	e	enum:Op
Erase	chips/nrf52/src/nvmc.rs	/^    Erase, \/\/ Performing an erase operation.$/;"	e	enum:FlashState
EraseErasing	chips/sam4l/src/flashcalw.rs	/^    EraseErasing,                 \/\/ Waiting on the erase to finish.$/;"	e	enum:FlashState
EraseSectorCheckDone	capsules/src/mx25r6435f.rs	/^    EraseSectorCheckDone {$/;"	e	enum:State
EraseSectorDone	capsules/src/mx25r6435f.rs	/^    EraseSectorDone,$/;"	e	enum:State
EraseSectorErase	capsules/src/mx25r6435f.rs	/^    EraseSectorErase {$/;"	e	enum:State
EraseSectorWriteEnable	capsules/src/mx25r6435f.rs	/^    EraseSectorWriteEnable {$/;"	e	enum:State
EraseUnlocking	chips/sam4l/src/flashcalw.rs	/^    EraseUnlocking { page: i32 }, \/\/ Started an erase operation.$/;"	e	enum:FlashState
ErrBadLength	kernel/src/hil/usb.rs	/^    ErrBadLength,$/;"	e	enum:CtrlSetupResult
ErrInvalidConfigurationIndex	kernel/src/hil/usb.rs	/^    ErrInvalidConfigurationIndex,$/;"	e	enum:CtrlSetupResult
ErrInvalidDeviceIndex	kernel/src/hil/usb.rs	/^    ErrInvalidDeviceIndex,$/;"	e	enum:CtrlSetupResult
ErrInvalidStringIndex	kernel/src/hil/usb.rs	/^    ErrInvalidStringIndex,$/;"	e	enum:CtrlSetupResult
ErrNoDeviceQualifier	kernel/src/hil/usb.rs	/^    ErrNoDeviceQualifier,$/;"	e	enum:CtrlSetupResult
ErrNoParse	kernel/src/hil/usb.rs	/^    ErrNoParse,$/;"	e	enum:CtrlSetupResult
ErrNonstandardRequest	kernel/src/hil/usb.rs	/^    ErrNonstandardRequest,$/;"	e	enum:CtrlSetupResult
ErrUnrecognizedDescriptorType	kernel/src/hil/usb.rs	/^    ErrUnrecognizedDescriptorType,$/;"	e	enum:CtrlSetupResult
ErrUnrecognizedRequestType	kernel/src/hil/usb.rs	/^    ErrUnrecognizedRequestType,$/;"	e	enum:CtrlSetupResult
Error	capsules/src/net/stream.rs	/^    Error(Error),$/;"	e	enum:SResult
Error	chips/nrf52/src/deferred_call_tasks.rs	/^    type Error = ();$/;"	t	implementation:DeferredCallTask
Error	chips/nrf5x/src/constants.rs	/^    type Error = ();$/;"	t	implementation:TxPower
Error	chips/sam4l/src/deferred_call_tasks.rs	/^    type Error = ();$/;"	t	implementation:Task
Error	kernel/src/hil/flash.rs	/^pub enum Error {$/;"	g
Error	kernel/src/hil/i2c.rs	/^impl Display for Error {$/;"	c
Error	kernel/src/hil/i2c.rs	/^pub enum Error {$/;"	g
Error	kernel/src/hil/uart.rs	/^pub enum Error {$/;"	g
Error	kernel/src/hil/usb.rs	/^    Error,$/;"	e	enum:BulkInResult
Error	kernel/src/hil/usb.rs	/^    Error,$/;"	e	enum:BulkOutResult
Error	kernel/src/hil/usb.rs	/^    Error,$/;"	e	enum:CtrlInResult
Error	kernel/src/process.rs	/^pub enum Error {$/;"	g
ErrorCode	capsules/src/sdcard.rs	/^enum ErrorCode {$/;"	g
Even	kernel/src/hil/uart.rs	/^    Even = 2,$/;"	e	enum:Parity
EverythingClient	chips/sam4l/src/adc.rs	/^pub trait EverythingClient: hil::adc::Client + hil::adc::HighSpeedClient {}$/;"	i
ExecuteOnly	kernel/src/platform/mpu.rs	/^    ExecuteOnly,$/;"	e	enum:Permissions
Exists	capsules/src/humidity.rs	/^    Exists,$/;"	e	enum:HumidityCommand
Exists	capsules/src/ninedof.rs	/^    Exists,$/;"	e	enum:NineDofCommand
Expiration	capsules/src/alarm.rs	/^enum Expiration {$/;"	g
Expiration	capsules/src/ble_advertising_driver.rs	/^enum Expiration {$/;"	g
Extended	capsules/src/net/ieee802154.rs	/^    Extended = 0b111,$/;"	e	enum:FrameType
ExtendedPanId	capsules/src/net/thread/tlv.rs	/^    ExtendedPanId = 2,$/;"	e	enum:NetworkManagementTlvType
ExtendedPanId	capsules/src/net/thread/tlv.rs	/^    ExtendedPanId([u8; 8]),             \/\/ Extended PAN ID length 8 bytes.$/;"	e	enum:NetworkManagementTlv
ExternalOscillator	chips/sam4l/src/pm.rs	/^    ExternalOscillator {$/;"	e	enum:SystemClockSource
ExternalState	capsules/src/rf233_const.rs	/^pub enum ExternalState {$/;"	g
F	chips/sam4l/src/gpio.rs	/^    F,$/;"	e	enum:PeripheralFunction
F	chips/tm4c129x/src/gpio.rs	/^    F = 6,$/;"	e	enum:PeripheralFunction
F16MHz	chips/nrf51/src/clock.rs	/^    F16MHz = 0xFF,$/;"	e	enum:XtalFreq
F32MHz	chips/nrf51/src/clock.rs	/^    F32MHz = 0,$/;"	e	enum:XtalFreq
FAIL	kernel/src/returncode.rs	/^    FAIL,$/;"	e	enum:ReturnCode
FICR_INSTANCE	chips/nrf52/src/ficr.rs	/^pub static mut FICR_INSTANCE: Ficr = Ficr::new();$/;"	v
FLASHCALW	chips/sam4l/src/flashcalw.rs	/^impl FLASHCALW {$/;"	c
FLASHCALW	chips/sam4l/src/flashcalw.rs	/^impl hil::flash::Flash for FLASHCALW {$/;"	c
FLASHCALW	chips/sam4l/src/flashcalw.rs	/^impl<C: hil::flash::Client<Self>> hil::flash::HasClient<'static, C> for FLASHCALW {$/;"	c
FLASHCALW	chips/sam4l/src/flashcalw.rs	/^pub struct FLASHCALW {$/;"	s
FLASHCALW	chips/sam4l/src/pm.rs	/^    FLASHCALW,$/;"	e	enum:HSBClock
FLASHCALW	chips/sam4l/src/pm.rs	/^    FLASHCALW,$/;"	e	enum:PBBClock
FLASHCALWP	chips/sam4l/src/pm.rs	/^    FLASHCALWP,$/;"	e	enum:HSBClock
FLASH_CONTROLLER	chips/sam4l/src/flashcalw.rs	/^pub static mut FLASH_CONTROLLER: FLASHCALW = FLASHCALW::new($/;"	v
FLASH_PAGEBUFFER	boards/imix/src/components/nonvolatile_storage.rs	/^        pub static mut FLASH_PAGEBUFFER: sam4l::flashcalw::Sam4lPage =$/;"	v	method:NonvolatileStorageComponent::finalize
FLASH_PAGEBUFFER	boards/nordic/nrf52dk_base/src/lib.rs	/^        pub static mut FLASH_PAGEBUFFER: capsules::mx25r6435f::Mx25r6435fSector =$/;"	v	function:setup_board
FLOP	boards/imix/src/spi_dummy.rs	/^pub static mut FLOP: bool = false;$/;"	v
FLOP	boards/imix/src/spi_slave_dummy.rs	/^pub static mut FLOP: bool = false;$/;"	v
FM25CL	capsules/src/fm25cl.rs	/^impl<S: hil::spi::SpiMasterDevice> FM25CL<'a, S> {$/;"	c
FM25CL	capsules/src/fm25cl.rs	/^impl<S: hil::spi::SpiMasterDevice> FM25CLCustom for FM25CL<'a, S> {$/;"	c
FM25CL	capsules/src/fm25cl.rs	/^impl<S: hil::spi::SpiMasterDevice> hil::nonvolatile_storage::NonvolatileStorage for FM25CL<'a, S/;"	c
FM25CL	capsules/src/fm25cl.rs	/^impl<S: hil::spi::SpiMasterDevice> hil::spi::SpiMasterClient for FM25CL<'a, S> {$/;"	c
FM25CL	capsules/src/fm25cl.rs	/^pub struct FM25CL<'a, S: hil::spi::SpiMasterDevice> {$/;"	s
FM25CLClient	capsules/src/fm25cl.rs	/^pub trait FM25CLClient {$/;"	i
FM25CLCustom	capsules/src/fm25cl.rs	/^pub trait FM25CLCustom {$/;"	i
FOO	boards/hail/src/test_take_map_cell.rs	/^    static FOO: u32 = 1234;$/;"	v	function:test_take_map_cell
FP	chips/sam4l/src/scif.rs	/^    FP = 18,$/;"	e	enum:ClockSource
FRAME_READ	capsules/src/rf233_const.rs	/^    FRAME_READ = 0x20,$/;"	e	enum:RF233BusCommand
FRAME_WRITE	capsules/src/rf233_const.rs	/^    FRAME_WRITE = 0x60,$/;"	e	enum:RF233BusCommand
FREQM	chips/sam4l/src/pm.rs	/^    FREQM,$/;"	e	enum:PBCClock
FSetup	capsules/src/fxos8700cq.rs	/^    FSetup = 0x09,$/;"	e	enum:Registers
FTN_CTRL	capsules/src/rf233_const.rs	/^    FTN_CTRL = 0x18,$/;"	e	enum:RF233Register
FallingEdge	kernel/src/hil/gpio.rs	/^    FallingEdge,$/;"	e	enum:InterruptMode
Fast400k	chips/sam4l/src/i2c.rs	/^    Fast400k,$/;"	e	enum:Speed
FastPlus1M	chips/sam4l/src/i2c.rs	/^    FastPlus1M,$/;"	e	enum:Speed
FastStart	chips/sam4l/src/pm.rs	/^    FastStart,$/;"	e	enum:OscillatorStartup
Fault	kernel/src/process.rs	/^    Fault,$/;"	e	enum:State
Fault	kernel/src/syscall.rs	/^    Fault,$/;"	e	enum:ContextSwitchReason
FaultResponse	kernel/src/process.rs	/^pub enum FaultResponse {$/;"	g
FeatureSelector	capsules/src/usb.rs	/^impl FeatureSelector {$/;"	c
FeatureSelector	capsules/src/usb.rs	/^pub enum FeatureSelector {$/;"	g
Ficr	chips/nrf52/src/ficr.rs	/^impl Ficr {$/;"	c
Ficr	chips/nrf52/src/ficr.rs	/^impl fmt::Display for Ficr {$/;"	c
Ficr	chips/nrf52/src/ficr.rs	/^pub struct Ficr {$/;"	s
FicrRegisters	chips/nrf52/src/ficr.rs	/^struct FicrRegisters {$/;"	s
Field	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> Field<u16, R> {$/;"	c
Field	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> Field<u32, R> {$/;"	c
Field	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> Field<u64, R> {$/;"	c
Field	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> Field<u8, R> {$/;"	c
Field	libraries/tock-register-interface/src/registers.rs	/^pub struct Field<T: IntLike, R: RegisterLongName> {$/;"	s
FieldValue	chips/sam4l/src/wdt.rs	/^impl From<WdtClockSource> for FieldValue<u32, Control::Register> {$/;"	c
FieldValue	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> FieldValue<u16, R> {$/;"	c
FieldValue	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> FieldValue<u32, R> {$/;"	c
FieldValue	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> FieldValue<u64, R> {$/;"	c
FieldValue	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> FieldValue<u8, R> {$/;"	c
FieldValue	libraries/tock-register-interface/src/registers.rs	/^impl<T: IntLike, R: RegisterLongName> Add for FieldValue<T, R> {$/;"	c
FieldValue	libraries/tock-register-interface/src/registers.rs	/^impl<T: IntLike, R: RegisterLongName> AddAssign for FieldValue<T, R> {$/;"	c
FieldValue	libraries/tock-register-interface/src/registers.rs	/^impl<T: IntLike, R: RegisterLongName> FieldValue<T, R> {$/;"	c
FieldValue	libraries/tock-register-interface/src/registers.rs	/^pub struct FieldValue<T: IntLike, R: RegisterLongName> {$/;"	s
FifoCtrl	capsules/src/lps25hb.rs	/^    FifoCtrl = 0x2e,$/;"	e	enum:Registers
FifoStatus	capsules/src/lps25hb.rs	/^    FifoStatus = 0x2f,$/;"	e	enum:Registers
Flash	chips/nrf52/src/ficr.rs	/^enum Flash {$/;"	g
Flash	kernel/src/hil/flash.rs	/^pub trait Flash {$/;"	i
FlashCMD	chips/sam4l/src/flashcalw.rs	/^enum FlashCMD {$/;"	g
FlashError	kernel/src/hil/flash.rs	/^    FlashError,$/;"	e	enum:Error
FlashState	chips/nrf52/src/nvmc.rs	/^pub enum FlashState {$/;"	g
FlashState	chips/sam4l/src/flashcalw.rs	/^enum FlashState {$/;"	g
FlashUser	capsules/src/virtual_flash.rs	/^impl<F: hil::flash::Flash, C: hil::flash::Client<Self>> hil::flash::HasClient<'a, C>$/;"	c
FlashUser	capsules/src/virtual_flash.rs	/^impl<F: hil::flash::Flash> FlashUser<'a, F> {$/;"	c
FlashUser	capsules/src/virtual_flash.rs	/^impl<F: hil::flash::Flash> ListNode<'a, FlashUser<'a, F>> for FlashUser<'a, F> {$/;"	c
FlashUser	capsules/src/virtual_flash.rs	/^impl<F: hil::flash::Flash> hil::flash::Client<F> for FlashUser<'a, F> {$/;"	c
FlashUser	capsules/src/virtual_flash.rs	/^impl<F: hil::flash::Flash> hil::flash::Flash for FlashUser<'a, F> {$/;"	c
FlashUser	capsules/src/virtual_flash.rs	/^pub struct FlashUser<'a, F: hil::flash::Flash + 'static> {$/;"	s
Flashcalw	chips/sam4l/src/deferred_call_tasks.rs	/^    Flashcalw = 0,$/;"	e	enum:Task
FlashcalwRegisters	chips/sam4l/src/flashcalw.rs	/^struct FlashcalwRegisters {$/;"	s
Flow	boards/imix/src/ipv6_lowpan_test.rs	/^    Flow = 0b10,$/;"	e	enum:TF
Flow	boards/imix/src/sixlowpan_dummy.rs	/^    Flow = 0b10,$/;"	e	enum:TF
Fragment	capsules/src/net/ieee802154.rs	/^    Fragment = 0b110,$/;"	e	enum:FrameType
Frame	capsules/src/ieee802154/framer.rs	/^impl Frame {$/;"	c
Frame	capsules/src/ieee802154/framer.rs	/^pub struct Frame {$/;"	s
FrameInfo	capsules/src/ieee802154/framer.rs	/^impl FrameInfo {$/;"	c
FrameInfo	capsules/src/ieee802154/framer.rs	/^struct FrameInfo {$/;"	s
FrameType	capsules/src/net/ieee802154.rs	/^impl FrameType {$/;"	c
FrameType	capsules/src/net/ieee802154.rs	/^pub enum FrameType {$/;"	g
FrameVersion	capsules/src/net/ieee802154.rs	/^impl FrameVersion {$/;"	c
FrameVersion	capsules/src/net/ieee802154.rs	/^pub enum FrameVersion {$/;"	g
Framer	capsules/src/ieee802154/framer.rs	/^impl<M: Mac, A: AES128CCM<'a>> CCMClient for Framer<'a, M, A> {$/;"	c
Framer	capsules/src/ieee802154/framer.rs	/^impl<M: Mac, A: AES128CCM<'a>> Framer<'a, M, A> {$/;"	c
Framer	capsules/src/ieee802154/framer.rs	/^impl<M: Mac, A: AES128CCM<'a>> MacDevice<'a> for Framer<'a, M, A> {$/;"	c
Framer	capsules/src/ieee802154/framer.rs	/^impl<M: Mac, A: AES128CCM<'a>> radio::ConfigClient for Framer<'a, M, A> {$/;"	c
Framer	capsules/src/ieee802154/framer.rs	/^impl<M: Mac, A: AES128CCM<'a>> radio::RxClient for Framer<'a, M, A> {$/;"	c
Framer	capsules/src/ieee802154/framer.rs	/^impl<M: Mac, A: AES128CCM<'a>> radio::TxClient for Framer<'a, M, A> {$/;"	c
Framer	capsules/src/ieee802154/framer.rs	/^pub struct Framer<'a, M: Mac, A: AES128CCM<'a>> {$/;"	s
FramingError	kernel/src/hil/uart.rs	/^    FramingError,$/;"	e	enum:Error
Freq16KHz	kernel/src/hil/time.rs	/^impl Frequency for Freq16KHz {$/;"	c
Freq16KHz	kernel/src/hil/time.rs	/^pub struct Freq16KHz;$/;"	s
Freq16MHz	kernel/src/hil/time.rs	/^impl Frequency for Freq16MHz {$/;"	c
Freq16MHz	kernel/src/hil/time.rs	/^pub struct Freq16MHz;$/;"	s
Freq18Mhz	chips/sifive/src/prci.rs	/^    Freq18Mhz,$/;"	e	enum:ClockFrequency
Freq1KHz	kernel/src/hil/time.rs	/^impl Frequency for Freq1KHz {$/;"	c
Freq1KHz	kernel/src/hil/time.rs	/^pub struct Freq1KHz;$/;"	s
Freq32KHz	kernel/src/hil/time.rs	/^impl Frequency for Freq32KHz {$/;"	c
Freq32KHz	kernel/src/hil/time.rs	/^pub struct Freq32KHz;$/;"	s
Freq384Mhz	chips/sifive/src/prci.rs	/^    Freq384Mhz,$/;"	e	enum:ClockFrequency
Frequency	capsules/src/virtual_alarm.rs	/^    type Frequency = Alrm::Frequency;$/;"	t	implementation:VirtualMuxAlarm
Frequency	chips/cc26x2/src/rtc.rs	/^    type Frequency = RtcFreq;$/;"	t	implementation:Rtc
Frequency	chips/nrf52/src/spi.rs	/^impl From<u32> for Frequency {$/;"	c
Frequency	chips/nrf52/src/spi.rs	/^pub enum Frequency {$/;"	g
Frequency	chips/nrf5x/src/rtc.rs	/^    type Frequency = Freq32KHz;$/;"	t	implementation:Rtc
Frequency	chips/nrf5x/src/timer.rs	/^    type Frequency = hil::time::Freq16KHz;$/;"	t	implementation:TimerAlarm
Frequency	chips/sam4l/src/ast.rs	/^    type Frequency = Freq16KHz;$/;"	t	implementation:Ast
Frequency	chips/tm4c129x/src/gpt.rs	/^    type Frequency = hil::time::Freq16MHz;$/;"	t	implementation:AlarmTimer
Frequency	kernel/src/hil/time.rs	/^    type Frequency: Frequency;$/;"	t	interface:Time
Frequency	kernel/src/hil/time.rs	/^pub trait Frequency {$/;"	i
Frequency12MHz	chips/sam4l/src/pm.rs	/^    Frequency12MHz,$/;"	e	enum:RcfastFrequency
Frequency16MHz	chips/sam4l/src/pm.rs	/^    Frequency16MHz,$/;"	e	enum:OscillatorFrequency
Frequency25MHz	chips/tm4c129x/src/sysctl.rs	/^    Frequency25MHz,$/;"	e	enum:OscillatorFrequency
Frequency4MHz	chips/sam4l/src/pm.rs	/^    Frequency4MHz,$/;"	e	enum:RcfastFrequency
Frequency8MHz	chips/sam4l/src/pm.rs	/^    Frequency8MHz,$/;"	e	enum:RcfastFrequency
FromPrimitive	libraries/enum_primitive/src/cast.rs	/^pub trait FromPrimitive: Sized {$/;"	i
Full	chips/sam4l/src/usbc/mod.rs	/^    Full,$/;"	e	enum:Speed
Full	kernel/src/hil/usb.rs	/^    Full,$/;"	e	enum:DeviceSpeed
FullCapRep	capsules/src/max17205.rs	/^    FullCapRep = 0x035, \/\/ Maximum capacity, LSB = 0.5 mAh$/;"	e	enum:Registers
FullNetworkDataRequired	capsules/src/net/thread/tlv.rs	/^    FullNetworkDataRequired = 0b0000_0001,$/;"	e	enum:LinkMode
FullThreadDevice	capsules/src/net/thread/tlv.rs	/^    FullThreadDevice = 0b0000_0010,$/;"	e	enum:LinkMode
FunctionCall	kernel/src/process.rs	/^    FunctionCall(FunctionCall),$/;"	e	enum:Task
FunctionCall	kernel/src/process.rs	/^pub struct FunctionCall {$/;"	s
Funky	capsules/examples/traitobj_list.rs	/^impl<'a> ListNode<'a, Funky<'a>> for Funky<'a> {$/;"	c
Funky	capsules/examples/traitobj_list.rs	/^pub trait Funky<'a> {$/;"	i
Fxos8700Component	boards/imix/src/components/fxos8700.rs	/^impl Component for Fxos8700Component {$/;"	c
Fxos8700Component	boards/imix/src/components/fxos8700.rs	/^impl Fxos8700Component {$/;"	c
Fxos8700Component	boards/imix/src/components/fxos8700.rs	/^pub struct Fxos8700Component {$/;"	s
Fxos8700cq	capsules/src/fxos8700cq.rs	/^impl Fxos8700cq<'a> {$/;"	c
Fxos8700cq	capsules/src/fxos8700cq.rs	/^impl I2CClient for Fxos8700cq<'a> {$/;"	c
Fxos8700cq	capsules/src/fxos8700cq.rs	/^impl gpio::Client for Fxos8700cq<'a> {$/;"	c
Fxos8700cq	capsules/src/fxos8700cq.rs	/^impl hil::sensors::NineDof for Fxos8700cq<'a> {$/;"	c
Fxos8700cq	capsules/src/fxos8700cq.rs	/^pub struct Fxos8700cq<'a> {$/;"	s
G	chips/sam4l/src/gpio.rs	/^    G,$/;"	e	enum:PeripheralFunction
G	chips/tm4c129x/src/gpio.rs	/^    G = 7,$/;"	e	enum:PeripheralFunction
GCLK0	chips/sam4l/src/scif.rs	/^    GCLK0,$/;"	e	enum:GenericClock
GCLK1	chips/sam4l/src/scif.rs	/^    GCLK1,$/;"	e	enum:GenericClock
GCLK10	chips/sam4l/src/scif.rs	/^    GCLK10,$/;"	e	enum:GenericClock
GCLK11	chips/sam4l/src/scif.rs	/^    GCLK11 = 21,$/;"	e	enum:ClockSource
GCLK11	chips/sam4l/src/scif.rs	/^    GCLK11,$/;"	e	enum:GenericClock
GCLK2	chips/sam4l/src/scif.rs	/^    GCLK2,$/;"	e	enum:GenericClock
GCLK3	chips/sam4l/src/scif.rs	/^    GCLK3,$/;"	e	enum:GenericClock
GCLK4	chips/sam4l/src/scif.rs	/^    GCLK4,$/;"	e	enum:GenericClock
GCLK5	chips/sam4l/src/scif.rs	/^    GCLK5,$/;"	e	enum:GenericClock
GCLK6	chips/sam4l/src/scif.rs	/^    GCLK6,$/;"	e	enum:GenericClock
GCLK7	chips/sam4l/src/scif.rs	/^    GCLK7,$/;"	e	enum:GenericClock
GCLK8	chips/sam4l/src/scif.rs	/^    GCLK8,$/;"	e	enum:GenericClock
GCLK9	chips/sam4l/src/scif.rs	/^    GCLK9,$/;"	e	enum:GenericClock
GCLK_IN0	chips/sam4l/src/scif.rs	/^    GCLK_IN0 = 19,$/;"	e	enum:ClockSource
GCLK_IN1	chips/sam4l/src/scif.rs	/^    GCLK_IN1 = 20,$/;"	e	enum:ClockSource
GLOC	chips/sam4l/src/pm.rs	/^    GLOC,$/;"	e	enum:PBAClock
GPFRHI	chips/sam4l/src/flashcalw.rs	/^    GPFRHI,$/;"	e	enum:RegKey
GPFRLO	chips/sam4l/src/flashcalw.rs	/^    GPFRLO,$/;"	e	enum:RegKey
GPIO	capsules/src/gpio.rs	/^impl<G: Pin + PinCtl> Driver for GPIO<'a, G> {$/;"	c
GPIO	capsules/src/gpio.rs	/^impl<G: Pin + PinCtl> GPIO<'a, G> {$/;"	c
GPIO	capsules/src/gpio.rs	/^impl<G: Pin> Client for GPIO<'a, G> {$/;"	c
GPIO	capsules/src/gpio.rs	/^pub struct GPIO<'a, G: Pin> {$/;"	s
GPIO	chips/sam4l/src/pm.rs	/^    GPIO,$/;"	e	enum:PBCClock
GPIO	chips/tm4c129x/src/sysctl.rs	/^    GPIO(RCGCGPIO),$/;"	e	enum:Clock
GPIOA	chips/tm4c129x/src/sysctl.rs	/^    GPIOA,$/;"	e	enum:RCGCGPIO
GPIOAsync	capsules/src/gpio_async.rs	/^impl<Port: hil::gpio_async::Port> Driver for GPIOAsync<'a, Port> {$/;"	c
GPIOAsync	capsules/src/gpio_async.rs	/^impl<Port: hil::gpio_async::Port> GPIOAsync<'a, Port> {$/;"	c
GPIOAsync	capsules/src/gpio_async.rs	/^impl<Port: hil::gpio_async::Port> hil::gpio_async::Client for GPIOAsync<'a, Port> {$/;"	c
GPIOAsync	capsules/src/gpio_async.rs	/^pub struct GPIOAsync<'a, Port: hil::gpio_async::Port> {$/;"	s
GPIOB	chips/tm4c129x/src/sysctl.rs	/^    GPIOB,$/;"	e	enum:RCGCGPIO
GPIOC	chips/tm4c129x/src/sysctl.rs	/^    GPIOC,$/;"	e	enum:RCGCGPIO
GPIOD	chips/tm4c129x/src/sysctl.rs	/^    GPIOD,$/;"	e	enum:RCGCGPIO
GPIOE	chips/tm4c129x/src/sysctl.rs	/^    GPIOE,$/;"	e	enum:RCGCGPIO
GPIOF	chips/tm4c129x/src/sysctl.rs	/^    GPIOF,$/;"	e	enum:RCGCGPIO
GPIOG	chips/tm4c129x/src/sysctl.rs	/^    GPIOG,$/;"	e	enum:RCGCGPIO
GPIOH	chips/tm4c129x/src/sysctl.rs	/^    GPIOH,$/;"	e	enum:RCGCGPIO
GPIOJ	chips/tm4c129x/src/sysctl.rs	/^    GPIOJ,$/;"	e	enum:RCGCGPIO
GPIOK	chips/tm4c129x/src/sysctl.rs	/^    GPIOK,$/;"	e	enum:RCGCGPIO
GPIOL	chips/tm4c129x/src/sysctl.rs	/^    GPIOL,$/;"	e	enum:RCGCGPIO
GPIOM	chips/tm4c129x/src/sysctl.rs	/^    GPIOM,$/;"	e	enum:RCGCGPIO
GPION	chips/tm4c129x/src/sysctl.rs	/^    GPION,$/;"	e	enum:RCGCGPIO
GPIOP	chips/tm4c129x/src/sysctl.rs	/^    GPIOP,$/;"	e	enum:RCGCGPIO
GPIOPin	chips/cc26x2/src/gpio.rs	/^impl GPIOPin {$/;"	c
GPIOPin	chips/cc26x2/src/gpio.rs	/^impl hil::gpio::Pin for GPIOPin {$/;"	c
GPIOPin	chips/cc26x2/src/gpio.rs	/^impl hil::gpio::PinCtl for GPIOPin {$/;"	c
GPIOPin	chips/cc26x2/src/gpio.rs	/^pub struct GPIOPin {$/;"	s
GPIOPin	chips/nrf5x/src/gpio.rs	/^impl GPIOPin {$/;"	c
GPIOPin	chips/nrf5x/src/gpio.rs	/^impl hil::gpio::Pin for GPIOPin {$/;"	c
GPIOPin	chips/nrf5x/src/gpio.rs	/^impl hil::gpio::PinCtl for GPIOPin {$/;"	c
GPIOPin	chips/nrf5x/src/gpio.rs	/^pub struct GPIOPin {$/;"	s
GPIOPin	chips/sam4l/src/gpio.rs	/^impl GPIOPin {$/;"	c
GPIOPin	chips/sam4l/src/gpio.rs	/^impl hil::Controller for GPIOPin {$/;"	c
GPIOPin	chips/sam4l/src/gpio.rs	/^impl hil::gpio::Pin for GPIOPin {$/;"	c
GPIOPin	chips/sam4l/src/gpio.rs	/^impl hil::gpio::PinCtl for GPIOPin {$/;"	c
GPIOPin	chips/sam4l/src/gpio.rs	/^pub struct GPIOPin {$/;"	s
GPIOPin	chips/tm4c129x/src/gpio.rs	/^impl GPIOPin {$/;"	c
GPIOPin	chips/tm4c129x/src/gpio.rs	/^impl hil::Controller for GPIOPin {$/;"	c
GPIOPin	chips/tm4c129x/src/gpio.rs	/^impl hil::gpio::Pin for GPIOPin {$/;"	c
GPIOPin	chips/tm4c129x/src/gpio.rs	/^impl hil::gpio::PinCtl for GPIOPin {$/;"	c
GPIOPin	chips/tm4c129x/src/gpio.rs	/^pub struct GPIOPin {$/;"	s
GPIOQ	chips/tm4c129x/src/sysctl.rs	/^    GPIOQ,$/;"	e	enum:RCGCGPIO
GenericClock	chips/sam4l/src/scif.rs	/^pub enum GenericClock {$/;"	g
GetConfiguration	capsules/src/usb.rs	/^    GetConfiguration,$/;"	e	enum:StandardDeviceRequest
GetDescriptor	capsules/src/usb.rs	/^    GetDescriptor {$/;"	e	enum:StandardDeviceRequest
GetInterface	capsules/src/usb.rs	/^    GetInterface {$/;"	e	enum:StandardDeviceRequest
GetStatus	capsules/src/usb.rs	/^    GetStatus {$/;"	e	enum:StandardDeviceRequest
GotMeasurement	capsules/src/lps25hb.rs	/^    GotMeasurement,$/;"	e	enum:State
GotMeasurement	capsules/src/tsl2561.rs	/^    GotMeasurement,$/;"	e	enum:State
GotRhMeasurement	capsules/src/si7021.rs	/^    GotRhMeasurement,$/;"	e	enum:State
GotTempMeasurement	capsules/src/si7021.rs	/^    GotTempMeasurement,$/;"	e	enum:State
GpIntEn	capsules/src/mcp230xx.rs	/^    GpIntEn = 0x02,$/;"	e	enum:Registers
GpPu	capsules/src/mcp230xx.rs	/^    GpPu = 0x06,$/;"	e	enum:Registers
Gpio	capsules/src/mcp230xx.rs	/^    Gpio = 0x09,$/;"	e	enum:Registers
GpioComponent	boards/imix/src/components/gpio.rs	/^impl Component for GpioComponent {$/;"	c
GpioComponent	boards/imix/src/components/gpio.rs	/^impl GpioComponent {$/;"	c
GpioComponent	boards/imix/src/components/gpio.rs	/^pub struct GpioComponent {}$/;"	s
GpioMode	capsules/src/button.rs	/^pub enum GpioMode {$/;"	g
GpioPin	chips/sifive/src/gpio.rs	/^impl GpioPin {$/;"	c
GpioPin	chips/sifive/src/gpio.rs	/^impl hil::gpio::Pin for GpioPin {$/;"	c
GpioPin	chips/sifive/src/gpio.rs	/^impl hil::gpio::PinCtl for GpioPin {$/;"	c
GpioPin	chips/sifive/src/gpio.rs	/^pub struct GpioPin {$/;"	s
GpioRegisters	chips/cc26x2/src/gpio.rs	/^struct GpioRegisters {$/;"	s
GpioRegisters	chips/nrf5x/src/gpio.rs	/^struct GpioRegisters {$/;"	s
GpioRegisters	chips/sam4l/src/gpio.rs	/^struct GpioRegisters {$/;"	s
GpioRegisters	chips/sifive/src/gpio.rs	/^pub struct GpioRegisters {$/;"	s
GpioRegisters	chips/tm4c129x/src/gpio.rs	/^struct GpioRegisters {$/;"	s
GpioteRegisters	chips/nrf5x/src/gpio.rs	/^struct GpioteRegisters {$/;"	s
GptRegisters	chips/tm4c129x/src/gpt.rs	/^struct GptRegisters {$/;"	s
Grant	kernel/src/grant.rs	/^impl<T: Default> Grant<T> {$/;"	c
Grant	kernel/src/grant.rs	/^pub struct Grant<T: Default> {$/;"	s
H	chips/tm4c129x/src/gpio.rs	/^    H = 8,$/;"	e	enum:PeripheralFunction
HFCLKSTARTED	chips/nrf51/src/clock.rs	/^    HFCLKSTARTED = (1 << 0),$/;"	e	enum:InterruptField
HFCLKSTARTED	chips/nrf52/src/clock.rs	/^    HFCLKSTARTED = (1 << 0),$/;"	e	enum:InterruptField
HMATRIX	chips/sam4l/src/pm.rs	/^    HMATRIX,$/;"	e	enum:PBBClock
HRAMC1	chips/sam4l/src/pm.rs	/^    HRAMC1,$/;"	e	enum:PBBClock
HRP	chips/sam4l/src/scif.rs	/^    HRP = 17,$/;"	e	enum:ClockSource
HSB	chips/sam4l/src/pm.rs	/^    HSB(HSBClock),$/;"	e	enum:Clock
HSBClock	chips/sam4l/src/pm.rs	/^pub enum HSBClock {$/;"	g
HSDIS	chips/sam4l/src/flashcalw.rs	/^    HSDIS,$/;"	e	enum:FlashCMD
HSEN	chips/sam4l/src/flashcalw.rs	/^    HSEN,$/;"	e	enum:FlashCMD
Hail	boards/hail/src/main.rs	/^impl Platform for Hail {$/;"	c
Hail	boards/hail/src/main.rs	/^struct Hail {$/;"	s
HalfWord	chips/sam4l/src/crccu.rs	/^    HalfWord,$/;"	e	enum:TrWidth
Halted	kernel/src/hil/usb.rs	/^    Halted,$/;"	e	enum:CtrlOutResult
HasClient	kernel/src/hil/flash.rs	/^pub trait HasClient<'a, C> {$/;"	i
HasRoute	capsules/src/net/thread/tlv.rs	/^    HasRoute = 0,$/;"	e	enum:PrefixSubTlvType
HasRoute	capsules/src/net/thread/tlv.rs	/^    HasRoute(&'a [u8]),$/;"	e	enum:PrefixSubTlv
HasRouteTlvValue	capsules/src/net/thread/tlv.rs	/^impl HasRouteTlvValue {$/;"	c
HasRouteTlvValue	capsules/src/net/thread/tlv.rs	/^pub struct HasRouteTlvValue {$/;"	s
Header	capsules/src/net/ieee802154.rs	/^impl Header<'a> {$/;"	c
Header	capsules/src/net/ieee802154.rs	/^pub struct Header<'a> {$/;"	s
HeaderIE	capsules/src/net/ieee802154.rs	/^impl Default for HeaderIE<'a> {$/;"	c
HeaderIE	capsules/src/net/ieee802154.rs	/^impl HeaderIE<'a> {$/;"	c
HeaderIE	capsules/src/net/ieee802154.rs	/^pub enum HeaderIE<'a> {$/;"	g
Help	kernel/target/doc/settings.html	/^<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=/;"	h
Help	kernel/target/doc/src/tock_cells/lib.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	h
Help	kernel/target/doc/src/tock_cells/map_cell.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	h
Help	kernel/target/doc/src/tock_cells/numeric_cell_ext.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	h
Help	kernel/target/doc/src/tock_cells/optional_cell.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	h
Help	kernel/target/doc/src/tock_cells/take_cell.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	h
Help	kernel/target/doc/src/tock_cells/volatile_cell.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	h
Help	kernel/target/doc/src/tock_registers/lib.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	h
Help	kernel/target/doc/src/tock_registers/macros.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	h
Help	kernel/target/doc/src/tock_registers/registers.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	h
Help	kernel/target/doc/tock_cells/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	h
Help	kernel/target/doc/tock_cells/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	h
Help	kernel/target/doc/tock_cells/map_cell/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	h
Help	kernel/target/doc/tock_cells/numeric_cell_ext/index.html	/^<table><tr class='module-item'><td><a class="trait" href="trait.NumericCellExt.html" title='tock/;"	h
Help	kernel/target/doc/tock_cells/optional_cell/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	h
Help	kernel/target/doc/tock_cells/take_cell/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	h
Help	kernel/target/doc/tock_cells/volatile_cell/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	h
Help	kernel/target/doc/tock_registers/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	h
Help	kernel/target/doc/tock_registers/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	h
Help	kernel/target/doc/tock_registers/macro.register_bitfields.html	/^<\/div><\/section><section id="search" class="content hidden"><\/section><section class="footer"/;"	h
Help	kernel/target/doc/tock_registers/macro.register_bitmasks.html	/^<\/div><\/section><section id="search" class="content hidden"><\/section><section class="footer"/;"	h
Help	kernel/target/doc/tock_registers/macros/index.html	/^<\/div><\/section><section id="search" class="content hidden"><\/section><section class="footer"/;"	h
Help	kernel/target/doc/tock_registers/registers/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	h
HexBuf	chips/sam4l/src/usbc/debug.rs	/^impl fmt::Debug for HexBuf<'a> {$/;"	c
HexBuf	chips/sam4l/src/usbc/debug.rs	/^pub struct HexBuf<'a>(pub &'a [u8]);$/;"	s
HiFive1	boards/hifive1/src/main.rs	/^impl Platform for HiFive1 {$/;"	c
HiFive1	boards/hifive1/src/main.rs	/^struct HiFive1 {$/;"	s
High	capsules/src/mcp230xx.rs	/^    High = 0x01,$/;"	e	enum:PinState
High	capsules/src/net/thread/tlv.rs	/^    High = 0b0100_0000,$/;"	e	enum:ParentPriority
HighClockSource	chips/nrf51/src/clock.rs	/^pub enum HighClockSource {$/;"	g
HighClockSource	chips/nrf52/src/clock.rs	/^pub enum HighClockSource {$/;"	g
HighSpeedClient	kernel/src/hil/adc.rs	/^pub trait HighSpeedClient {$/;"	i
HighWhenPressed	capsules/src/button.rs	/^    HighWhenPressed,$/;"	e	enum:GpioMode
Host	chips/sam4l/src/usbc/mod.rs	/^    Host,$/;"	e	enum:Mode
HostToDevice	capsules/src/usb.rs	/^    HostToDevice,$/;"	e	enum:TransferDirection
HpFilterCutoff	capsules/src/fxos8700cq.rs	/^    HpFilterCutoff = 0x0f,$/;"	e	enum:Registers
Humidity	capsules/src/si7021.rs	/^    Humidity,$/;"	e	enum:OnDeck
HumidityClient	kernel/src/hil/sensors.rs	/^pub trait HumidityClient {$/;"	i
HumidityCommand	capsules/src/humidity.rs	/^pub enum HumidityCommand {$/;"	g
HumidityComponent	boards/imix/src/components/si7021.rs	/^impl Component for HumidityComponent {$/;"	c
HumidityComponent	boards/imix/src/components/si7021.rs	/^impl HumidityComponent {$/;"	c
HumidityComponent	boards/imix/src/components/si7021.rs	/^pub struct HumidityComponent {$/;"	s
HumidityDriver	kernel/src/hil/sensors.rs	/^pub trait HumidityDriver {$/;"	i
HumiditySensor	boards/imix/src/components/si7021.rs	/^    type Output = &'static HumiditySensor<'static>;$/;"	v	implementation:HumidityComponent
HumiditySensor	capsules/src/humidity.rs	/^impl Driver for HumiditySensor<'a> {$/;"	c
HumiditySensor	capsules/src/humidity.rs	/^impl HumiditySensor<'a> {$/;"	c
HumiditySensor	capsules/src/humidity.rs	/^impl hil::sensors::HumidityClient for HumiditySensor<'a> {$/;"	c
HumiditySensor	capsules/src/humidity.rs	/^pub struct HumiditySensor<'a> {$/;"	s
I	chips/tm4c129x/src/gpio.rs	/^    I = 9,$/;"	e	enum:PeripheralFunction
I2C0	chips/cc26x2/src/i2c.rs	/^pub static mut I2C0: I2CMaster = I2CMaster::new(I2C0REGISTERS);$/;"	v
I2C0	chips/sam4l/src/i2c.rs	/^pub static mut I2C0: I2CHw = I2CHw::new($/;"	v
I2C1	chips/sam4l/src/i2c.rs	/^pub static mut I2C1: I2CHw = I2CHw::new($/;"	v
I2C2	chips/sam4l/src/i2c.rs	/^pub static mut I2C2: I2CHw = I2CHw::new($/;"	v
I2C3	chips/sam4l/src/i2c.rs	/^pub static mut I2C3: I2CHw = I2CHw::new($/;"	v
I2CClient	kernel/src/hil/i2c.rs	/^pub trait I2CClient {$/;"	i
I2CDevice	capsules/src/virtual_i2c.rs	/^impl I2CClient for I2CDevice<'a> {$/;"	c
I2CDevice	capsules/src/virtual_i2c.rs	/^impl I2CDevice<'a> {$/;"	c
I2CDevice	capsules/src/virtual_i2c.rs	/^impl ListNode<'a, I2CDevice<'a>> for I2CDevice<'a> {$/;"	c
I2CDevice	capsules/src/virtual_i2c.rs	/^impl i2c::I2CDevice for I2CDevice<'a> {$/;"	c
I2CDevice	capsules/src/virtual_i2c.rs	/^pub struct I2CDevice<'a> {$/;"	s
I2CDevice	kernel/src/hil/i2c.rs	/^pub trait I2CDevice {$/;"	i
I2CHw	chips/sam4l/src/i2c.rs	/^impl DMAClient for I2CHw {$/;"	c
I2CHw	chips/sam4l/src/i2c.rs	/^impl I2CHw {$/;"	c
I2CHw	chips/sam4l/src/i2c.rs	/^impl PeripheralManagement<TWIMClock> for I2CHw {$/;"	c
I2CHw	chips/sam4l/src/i2c.rs	/^impl PeripheralManagement<TWISClock> for I2CHw {$/;"	c
I2CHw	chips/sam4l/src/i2c.rs	/^impl hil::i2c::I2CMaster for I2CHw {$/;"	c
I2CHw	chips/sam4l/src/i2c.rs	/^impl hil::i2c::I2CMasterSlave for I2CHw {}$/;"	c
I2CHw	chips/sam4l/src/i2c.rs	/^impl hil::i2c::I2CSlave for I2CHw {$/;"	c
I2CHw	chips/sam4l/src/i2c.rs	/^pub struct I2CHw {$/;"	s
I2CHwMasterClient	kernel/src/hil/i2c.rs	/^pub trait I2CHwMasterClient {$/;"	i
I2CHwSlaveClient	kernel/src/hil/i2c.rs	/^pub trait I2CHwSlaveClient {$/;"	i
I2CMaster	chips/cc26x2/src/i2c.rs	/^impl<'a> I2CMaster<'a> {$/;"	c
I2CMaster	chips/cc26x2/src/i2c.rs	/^impl<'a> i2c::I2CMaster for I2CMaster<'a> {$/;"	c
I2CMaster	chips/cc26x2/src/i2c.rs	/^pub struct I2CMaster<'a> {$/;"	s
I2CMaster	kernel/src/hil/i2c.rs	/^pub trait I2CMaster {$/;"	i
I2CMasterDriver	capsules/src/i2c_master.rs	/^impl<I: 'static + i2c::I2CMaster> I2CMasterDriver<I> {$/;"	c
I2CMasterDriver	capsules/src/i2c_master.rs	/^impl<I: i2c::I2CMaster> Driver for I2CMasterDriver<I> {$/;"	c
I2CMasterDriver	capsules/src/i2c_master.rs	/^impl<I: i2c::I2CMaster> i2c::I2CHwMasterClient for I2CMasterDriver<I> {$/;"	c
I2CMasterDriver	capsules/src/i2c_master.rs	/^pub struct I2CMasterDriver<I: 'static + i2c::I2CMaster> {$/;"	s
I2CMasterRegisters	chips/cc26x2/src/i2c.rs	/^struct I2CMasterRegisters {$/;"	s
I2CMasterSlave	kernel/src/hil/i2c.rs	/^pub trait I2CMasterSlave: I2CMaster + I2CSlave {}$/;"	i
I2CMasterSlaveDriver	capsules/src/i2c_master_slave_driver.rs	/^impl Driver for I2CMasterSlaveDriver<'a> {$/;"	c
I2CMasterSlaveDriver	capsules/src/i2c_master_slave_driver.rs	/^impl I2CMasterSlaveDriver<'a> {$/;"	c
I2CMasterSlaveDriver	capsules/src/i2c_master_slave_driver.rs	/^impl hil::i2c::I2CHwMasterClient for I2CMasterSlaveDriver<'a> {$/;"	c
I2CMasterSlaveDriver	capsules/src/i2c_master_slave_driver.rs	/^impl hil::i2c::I2CHwSlaveClient for I2CMasterSlaveDriver<'a> {$/;"	c
I2CMasterSlaveDriver	capsules/src/i2c_master_slave_driver.rs	/^pub struct I2CMasterSlaveDriver<'a> {$/;"	s
I2CSlave	kernel/src/hil/i2c.rs	/^pub trait I2CSlave {$/;"	i
I2C_BUF	boards/imix/src/components/isl29035.rs	/^static mut I2C_BUF: [u8; 3] = [0; 3];$/;"	v
I2C_BUF	boards/imix/src/components/si7021.rs	/^static mut I2C_BUF: [u8; 14] = [0; 14];$/;"	v
ICMP	capsules/src/net/ipv6/ipv6.rs	/^    ICMP(ICMP6Header),$/;"	e	enum:TransportHeader
ICMP6Header	capsules/src/net/icmpv6/icmpv6.rs	/^impl ICMP6Header {$/;"	c
ICMP6Header	capsules/src/net/icmpv6/icmpv6.rs	/^pub struct ICMP6Header {$/;"	s
ICMP6HeaderOptions	capsules/src/net/icmpv6/icmpv6.rs	/^pub enum ICMP6HeaderOptions {$/;"	g
ICMP6SendClient	capsules/src/net/icmpv6/icmpv6_send.rs	/^pub trait ICMP6SendClient {$/;"	i
ICMP6SendStruct	capsules/src/net/icmpv6/icmpv6_send.rs	/^impl<T: IP6Sender<'a>> ICMP6SendStruct<'a, T> {$/;"	c
ICMP6SendStruct	capsules/src/net/icmpv6/icmpv6_send.rs	/^impl<T: IP6Sender<'a>> ICMP6Sender<'a> for ICMP6SendStruct<'a, T> {$/;"	c
ICMP6SendStruct	capsules/src/net/icmpv6/icmpv6_send.rs	/^impl<T: IP6Sender<'a>> IP6SendClient for ICMP6SendStruct<'a, T> {$/;"	c
ICMP6SendStruct	capsules/src/net/icmpv6/icmpv6_send.rs	/^pub struct ICMP6SendStruct<'a, T: IP6Sender<'a>> {$/;"	s
ICMP6Sender	capsules/src/net/icmpv6/icmpv6_send.rs	/^pub trait ICMP6Sender<'a> {$/;"	i
ICMP6Type	capsules/src/net/icmpv6/icmpv6.rs	/^pub enum ICMP6Type {$/;"	g
ICMP_PAYLOAD	boards/imix/src/icmp_lowpan_test.rs	/^static mut ICMP_PAYLOAD: [u8; 10] = [0; 10];$/;"	v
ICR	chips/sam4l/src/scif.rs	/^    ICR = 0x10,$/;"	e	enum:Register
IDR	chips/sam4l/src/scif.rs	/^    IDR = 0x04,$/;"	e	enum:Register
IEEE_ADDR_0	capsules/src/rf233_const.rs	/^    IEEE_ADDR_0 = 0x24,$/;"	e	enum:RF233Register
IEEE_ADDR_1	capsules/src/rf233_const.rs	/^    IEEE_ADDR_1 = 0x25,$/;"	e	enum:RF233Register
IEEE_ADDR_2	capsules/src/rf233_const.rs	/^    IEEE_ADDR_2 = 0x26,$/;"	e	enum:RF233Register
IEEE_ADDR_3	capsules/src/rf233_const.rs	/^    IEEE_ADDR_3 = 0x27,$/;"	e	enum:RF233Register
IEEE_ADDR_4	capsules/src/rf233_const.rs	/^    IEEE_ADDR_4 = 0x28,$/;"	e	enum:RF233Register
IEEE_ADDR_5	capsules/src/rf233_const.rs	/^    IEEE_ADDR_5 = 0x29,$/;"	e	enum:RF233Register
IEEE_ADDR_6	capsules/src/rf233_const.rs	/^    IEEE_ADDR_6 = 0x2A,$/;"	e	enum:RF233Register
IEEE_ADDR_7	capsules/src/rf233_const.rs	/^    IEEE_ADDR_7 = 0x2B,$/;"	e	enum:RF233Register
IER	chips/sam4l/src/scif.rs	/^    IER = 0x00,$/;"	e	enum:Register
IISC	chips/sam4l/src/pm.rs	/^    IISC,$/;"	e	enum:PBAClock
IISC_CH0_RX	chips/sam4l/src/dma.rs	/^    IISC_CH0_RX = 14,$/;"	e	enum:DMAPeripheral
IISC_CH0_TX	chips/sam4l/src/dma.rs	/^    IISC_CH0_TX = 33,$/;"	e	enum:DMAPeripheral
IISC_CH1_RX	chips/sam4l/src/dma.rs	/^    IISC_CH1_RX = 15,$/;"	e	enum:DMAPeripheral
IISC_CH1_TX	chips/sam4l/src/dma.rs	/^    IISC_CH1_TX = 34,$/;"	e	enum:DMAPeripheral
IMR	chips/sam4l/src/scif.rs	/^    IMR = 0x08,$/;"	e	enum:Register
INTERNAL_BUF	kernel/src/debug.rs	/^pub static mut INTERNAL_BUF: [u8; 1024] = [0; 1024];$/;"	v
INTERRUPT_COUNT	chips/sam4l/src/gpio.rs	/^pub static INTERRUPT_COUNT: AtomicUsize = AtomicUsize::new(0);$/;"	v
INTERRUPT_COUNT	chips/tm4c129x/src/gpio.rs	/^pub static INTERRUPT_COUNT: AtomicUsize = AtomicUsize::new(0);$/;"	v
IN_BUF0	boards/launchxl/src/uart_echo.rs	/^pub static mut IN_BUF0: [u8; MAX_PAYLOAD] = [0; MAX_PAYLOAD];$/;"	v
IN_BUF1	boards/launchxl/src/uart_echo.rs	/^pub static mut IN_BUF1: [u8; MAX_PAYLOAD] = [0; MAX_PAYLOAD];$/;"	v
IP6Header	capsules/src/net/ip.rs	/^impl Default for IP6Header {$/;"	c
IP6Header	capsules/src/net/ip.rs	/^impl IP6Header {$/;"	c
IP6Header	capsules/src/net/ip.rs	/^pub struct IP6Header {$/;"	s
IP6Header	capsules/src/net/ipv6/ipv6.rs	/^impl Default for IP6Header {$/;"	c
IP6Header	capsules/src/net/ipv6/ipv6.rs	/^impl IP6Header {$/;"	c
IP6Header	capsules/src/net/ipv6/ipv6.rs	/^pub struct IP6Header {$/;"	s
IP6Packet	capsules/src/net/ipv6/ipv6.rs	/^impl IP6Packet<'a> {$/;"	c
IP6Packet	capsules/src/net/ipv6/ipv6.rs	/^pub struct IP6Packet<'a> {$/;"	s
IP6Receiver	capsules/src/net/ipv6/ipv6_recv.rs	/^pub trait IP6Receiver<'a> {$/;"	i
IP6RecvClient	capsules/src/net/ipv6/ipv6_recv.rs	/^pub trait IP6RecvClient {$/;"	i
IP6RecvStruct	capsules/src/net/ipv6/ipv6_recv.rs	/^impl<'a> IP6Receiver<'a> for IP6RecvStruct<'a> {$/;"	c
IP6RecvStruct	capsules/src/net/ipv6/ipv6_recv.rs	/^impl<'a> IP6RecvStruct<'a> {$/;"	c
IP6RecvStruct	capsules/src/net/ipv6/ipv6_recv.rs	/^impl<'a> SixlowpanRxClient for IP6RecvStruct<'a> {$/;"	c
IP6RecvStruct	capsules/src/net/ipv6/ipv6_recv.rs	/^pub struct IP6RecvStruct<'a> {$/;"	s
IP6SendClient	capsules/src/net/ipv6/ipv6_send.rs	/^pub trait IP6SendClient {$/;"	i
IP6SendStruct	capsules/src/net/ipv6/ipv6_send.rs	/^impl<A: time::Alarm> IP6SendStruct<'a, A> {$/;"	c
IP6SendStruct	capsules/src/net/ipv6/ipv6_send.rs	/^impl<A: time::Alarm> IP6Sender<'a> for IP6SendStruct<'a, A> {$/;"	c
IP6SendStruct	capsules/src/net/ipv6/ipv6_send.rs	/^impl<A: time::Alarm> TxClient for IP6SendStruct<'a, A> {$/;"	c
IP6SendStruct	capsules/src/net/ipv6/ipv6_send.rs	/^impl<A: time::Alarm> time::Client for IP6SendStruct<'a, A> {$/;"	c
IP6SendStruct	capsules/src/net/ipv6/ipv6_send.rs	/^pub struct IP6SendStruct<'a, A: time::Alarm> {$/;"	s
IP6Sender	capsules/src/net/ipv6/ipv6_send.rs	/^pub trait IP6Sender<'a> {$/;"	i
IP6_DG_OPT	boards/imix/src/ipv6_lowpan_test.rs	/^static mut IP6_DG_OPT: Option<IP6Packet> = None;$/;"	v
IPAddr	capsules/src/net/ip.rs	/^impl IPAddr {$/;"	c
IPAddr	capsules/src/net/ip.rs	/^pub struct IPAddr(pub [u8; 16]);$/;"	s
IPAddr	capsules/src/net/ipv6/ip_utils.rs	/^impl Eq for IPAddr {}$/;"	c
IPAddr	capsules/src/net/ipv6/ip_utils.rs	/^impl IPAddr {$/;"	c
IPAddr	capsules/src/net/ipv6/ip_utils.rs	/^impl PartialEq for IPAddr {$/;"	c
IPAddr	capsules/src/net/ipv6/ip_utils.rs	/^pub struct IPAddr(pub [u8; 16]);$/;"	s
IPC	kernel/src/ipc.rs	/^impl Driver for IPC {$/;"	c
IPC	kernel/src/ipc.rs	/^impl IPC {$/;"	c
IPC	kernel/src/ipc.rs	/^pub struct IPC {$/;"	s
IPC	kernel/src/process.rs	/^    IPC((AppId, IPCType)),$/;"	e	enum:Task
IPCData	kernel/src/ipc.rs	/^impl Default for IPCData {$/;"	c
IPCData	kernel/src/ipc.rs	/^struct IPCData {$/;"	s
IPCType	kernel/src/process.rs	/^pub enum IPCType {$/;"	g
IPPayload	capsules/src/net/ipv6/ipv6.rs	/^impl IPPayload<'a> {$/;"	c
IPPayload	capsules/src/net/ipv6/ipv6.rs	/^pub struct IPPayload<'a> {$/;"	s
IPol	capsules/src/mcp230xx.rs	/^    IPol = 0x01,$/;"	e	enum:Registers
IRQS	chips/nrf51/src/crt1.rs	/^pub static IRQS: [unsafe extern "C" fn(); 80] = [generic_isr; 80];$/;"	v
IRQS	chips/nrf52/src/crt1.rs	/^pub static IRQS: [unsafe extern "C" fn(); 80] = [generic_isr; 80];$/;"	v
IRQS	chips/sam4l/src/lib.rs	/^pub static IRQS: [unsafe extern "C" fn(); 80] = [generic_isr; 80];$/;"	v
IRQS	chips/tm4c129x/src/lib.rs	/^pub static IRQS: [unsafe extern "C" fn(); 111] = [generic_isr; 111];$/;"	v
IRQ_0_PLL_LOCK	capsules/src/rf233_const.rs	/^    IRQ_0_PLL_LOCK = 0x01,$/;"	e	enum:InteruptFlags
IRQ_1_PLL_UNLOCK	capsules/src/rf233_const.rs	/^    IRQ_1_PLL_UNLOCK = 0x02,$/;"	e	enum:InteruptFlags
IRQ_2_RX_START	capsules/src/rf233_const.rs	/^    IRQ_2_RX_START = 0x04,$/;"	e	enum:InteruptFlags
IRQ_3_TRX_END	capsules/src/rf233_const.rs	/^    IRQ_3_TRX_END = 0x08,$/;"	e	enum:InteruptFlags
IRQ_4_CCA_ED_DONE	capsules/src/rf233_const.rs	/^    IRQ_4_CCA_ED_DONE = 0x10,$/;"	e	enum:InteruptFlags
IRQ_5_AMI	capsules/src/rf233_const.rs	/^    IRQ_5_AMI = 0x20,$/;"	e	enum:InteruptFlags
IRQ_6_TRX_UR	capsules/src/rf233_const.rs	/^    IRQ_6_TRX_UR = 0x40,$/;"	e	enum:InteruptFlags
IRQ_7_BAT_LOW	capsules/src/rf233_const.rs	/^    IRQ_7_BAT_LOW = 0x80,$/;"	e	enum:InteruptFlags
IRQ_MASK	capsules/src/rf233_const.rs	/^    IRQ_MASK = 0x0E,$/;"	e	enum:RF233Register
IRQ_STATUS	capsules/src/rf233_const.rs	/^    IRQ_STATUS = 0x0F,$/;"	e	enum:RF233Register
ISR	chips/sam4l/src/scif.rs	/^    ISR = 0x0C,$/;"	e	enum:Register
IS_PANICING	chips/sam4l/src/usart.rs	/^static IS_PANICING: AtomicBool = AtomicBool::new(false);$/;"	v
Id	capsules/src/tsl2561.rs	/^    Id = 0x0a,$/;"	e	enum:Registers
Idle	capsules/src/aes_ccm.rs	/^    Idle,$/;"	e	enum:CCMState
Idle	capsules/src/fm25cl.rs	/^    Idle,$/;"	e	enum:State
Idle	capsules/src/ieee802154/framer.rs	/^    Idle,$/;"	e	enum:RxState
Idle	capsules/src/ieee802154/framer.rs	/^    Idle,$/;"	e	enum:TxState
Idle	capsules/src/ieee802154/virtual_mac.rs	/^    Idle,$/;"	e	enum:Op
Idle	capsules/src/lps25hb.rs	/^    Idle,$/;"	e	enum:State
Idle	capsules/src/ltc294x.rs	/^    Idle,$/;"	e	enum:State
Idle	capsules/src/max17205.rs	/^    Idle,$/;"	e	enum:State
Idle	capsules/src/mcp230xx.rs	/^    Idle,$/;"	e	enum:State
Idle	capsules/src/mx25r6435f.rs	/^    Idle,$/;"	e	enum:State
Idle	capsules/src/nonvolatile_to_pages.rs	/^    Idle,$/;"	e	enum:State
Idle	capsules/src/pca9544a.rs	/^    Idle,$/;"	e	enum:State
Idle	capsules/src/sdcard.rs	/^    Idle,$/;"	e	enum:AlarmState
Idle	capsules/src/sdcard.rs	/^    Idle,$/;"	e	enum:SpiState
Idle	capsules/src/si7021.rs	/^    Idle,$/;"	e	enum:State
Idle	capsules/src/tmp006.rs	/^    Idle,$/;"	e	enum:ProtocolState
Idle	capsules/src/tsl2561.rs	/^    Idle,$/;"	e	enum:State
Idle	capsules/src/virtual_flash.rs	/^    Idle,$/;"	e	enum:Op
Idle	capsules/src/virtual_i2c.rs	/^    Idle,$/;"	e	enum:Op
Idle	capsules/src/virtual_spi.rs	/^    Idle,$/;"	e	enum:Op
Idle	capsules/src/virtual_uart.rs	/^    Idle,$/;"	e	enum:UartDeviceReceiveState
Idle	chips/sam4l/src/usart.rs	/^    Idle,$/;"	e	enum:USARTStateRX
Idle	chips/sam4l/src/usart.rs	/^    Idle,$/;"	e	enum:USARTStateTX
Idle	chips/sam4l/src/usbc/mod.rs	/^    Idle(Mode),$/;"	e	enum:State
IdleHigh	kernel/src/hil/spi.rs	/^    IdleHigh,$/;"	e	enum:ClockPolarity
IdleLow	kernel/src/hil/spi.rs	/^    IdleLow,$/;"	e	enum:ClockPolarity
Imix	boards/imix/src/main.rs	/^impl kernel::Platform for Imix {$/;"	c
Imix	boards/imix/src/main.rs	/^struct Imix {$/;"	s
Implicit	capsules/src/ieee802154/driver.rs	/^    Implicit = 0,$/;"	e	enum:KeyIdModeUserland
Implicit	capsules/src/net/ieee802154.rs	/^    Implicit = 0x00,$/;"	e	enum:KeyIdMode
Implicit	capsules/src/net/ieee802154.rs	/^    Implicit,$/;"	e	enum:KeyId
InDelay	chips/sam4l/src/usbc/mod.rs	/^    InDelay,$/;"	e	enum:CtrlState
Includes	tools/svd2regs.py	/^class Includes(CodeBlock):$/;"	c
Index	capsules/src/ieee802154/driver.rs	/^    Index = 1,$/;"	e	enum:KeyIdModeUserland
Index	capsules/src/net/ieee802154.rs	/^    Index = 0x08,$/;"	e	enum:KeyIdMode
Index	capsules/src/net/ieee802154.rs	/^    Index(u8),$/;"	e	enum:KeyId
Init	capsules/src/usbc_client.rs	/^    Init,$/;"	e	enum:State
Init	chips/sam4l/src/usbc/mod.rs	/^    Init,$/;"	e	enum:BulkInState
Init	chips/sam4l/src/usbc/mod.rs	/^    Init,$/;"	e	enum:BulkOutState
Init	chips/sam4l/src/usbc/mod.rs	/^    Init,$/;"	e	enum:CtrlState
InitAppSpecificInit	capsules/src/sdcard.rs	/^    InitAppSpecificInit,$/;"	e	enum:SpiState
InitCheckCapacity	capsules/src/sdcard.rs	/^    InitCheckCapacity,$/;"	e	enum:SpiState
InitCheckVersion	capsules/src/sdcard.rs	/^    InitCheckVersion,$/;"	e	enum:SpiState
InitComplete	capsules/src/sdcard.rs	/^    InitComplete,$/;"	e	enum:SpiState
InitRepeatAppSpecificInit	capsules/src/sdcard.rs	/^    InitRepeatAppSpecificInit,$/;"	e	enum:SpiState
InitRepeatGenericInit	capsules/src/sdcard.rs	/^    InitRepeatGenericInit,$/;"	e	enum:SpiState
InitRepeatHCSInit	capsules/src/sdcard.rs	/^    InitRepeatHCSInit,$/;"	e	enum:SpiState
InitReset	capsules/src/sdcard.rs	/^    InitReset,$/;"	e	enum:SpiState
InitSetBlocksize	capsules/src/sdcard.rs	/^    InitSetBlocksize,$/;"	e	enum:SpiState
InitializationFailure	capsules/src/sdcard.rs	/^    InitializationFailure = -2,$/;"	e	enum:ErrorCode
Initialized	capsules/src/ble_advertising_driver.rs	/^    Initialized,$/;"	e	enum:BLEState
Initialized	chips/sam4l/src/crccu.rs	/^    Initialized,$/;"	e	enum:State
Inline	boards/imix/src/ipv6_lowpan_test.rs	/^    Inline = 0b00,$/;"	e	enum:TF
Inline	boards/imix/src/ipv6_lowpan_test.rs	/^    Inline,$/;"	e	enum:DAC
Inline	boards/imix/src/ipv6_lowpan_test.rs	/^    Inline,$/;"	e	enum:SAC
Inline	boards/imix/src/sixlowpan_dummy.rs	/^    Inline = 0b00,$/;"	e	enum:TF
Inline	boards/imix/src/sixlowpan_dummy.rs	/^    Inline,$/;"	e	enum:DAC
Inline	boards/imix/src/sixlowpan_dummy.rs	/^    Inline,$/;"	e	enum:SAC
Input	capsules/src/mcp230xx.rs	/^    Input = 0x01,$/;"	e	enum:Direction
Input	chips/tm4c129x/src/gpio.rs	/^    Input(InputMode),$/;"	e	enum:Mode
InputMode	chips/tm4c129x/src/gpio.rs	/^pub enum InputMode {$/;"	g
InputMode	kernel/src/hil/gpio.rs	/^pub enum InputMode {$/;"	g
InputOutput	chips/tm4c129x/src/gpio.rs	/^    InputOutput(InputOutputMode),$/;"	e	enum:Mode
InputOutputMode	chips/tm4c129x/src/gpio.rs	/^pub enum InputOutputMode {$/;"	g
IntCap	capsules/src/mcp230xx.rs	/^    IntCap = 0x08,$/;"	e	enum:Registers
IntCfgReg	capsules/src/lps25hb.rs	/^    IntCfgReg = 0x24,$/;"	e	enum:Registers
IntCon	capsules/src/mcp230xx.rs	/^    IntCon = 0x04,$/;"	e	enum:Registers
IntF	capsules/src/mcp230xx.rs	/^    IntF = 0x07,$/;"	e	enum:Registers
IntLike	libraries/tock-register-interface/src/registers.rs	/^pub trait IntLike:$/;"	i
IntSource	capsules/src/fxos8700cq.rs	/^    IntSource = 0x0c,$/;"	e	enum:Registers
IntSourceReg	capsules/src/lps25hb.rs	/^    IntSourceReg = 0x25,$/;"	e	enum:Registers
Integrating	capsules/src/isl29035.rs	/^    Integrating,$/;"	e	enum:State
Interface	capsules/src/usb.rs	/^    Interface,$/;"	e	enum:DescriptorType
Interface	capsules/src/usb.rs	/^    Interface,$/;"	e	enum:Recipient
InterfaceDescriptor	capsules/src/usb.rs	/^impl Default for InterfaceDescriptor {$/;"	c
InterfaceDescriptor	capsules/src/usb.rs	/^impl Descriptor for InterfaceDescriptor {$/;"	c
InterfaceDescriptor	capsules/src/usb.rs	/^pub struct InterfaceDescriptor {$/;"	s
InterfacePower	capsules/src/usb.rs	/^    InterfacePower,$/;"	e	enum:DescriptorType
InternalState	capsules/src/rf233.rs	/^enum InternalState {$/;"	g
Interrupt	capsules/src/tsl2561.rs	/^    Interrupt = 0x06,$/;"	e	enum:Registers
Interrupt	capsules/src/usb.rs	/^    Interrupt,$/;"	e	enum:TransferType
InterruptField	chips/nrf51/src/clock.rs	/^pub enum InterruptField {$/;"	g
InterruptField	chips/nrf52/src/clock.rs	/^pub enum InterruptField {$/;"	g
InterruptMask	capsules/src/pca9544a.rs	/^    InterruptMask,$/;"	e	enum:ControlField
InterruptMode	kernel/src/hil/gpio.rs	/^pub enum InterruptMode {$/;"	g
InterruptPinConf	capsules/src/ltc294x.rs	/^pub enum InterruptPinConf {$/;"	g
Interrupted	kernel/src/syscall.rs	/^    Interrupted,$/;"	e	enum:ContextSwitchReason
InteruptFlags	capsules/src/rf233_const.rs	/^pub enum InteruptFlags {$/;"	g
Invalid	chips/sam4l/src/crccu.rs	/^    Invalid,$/;"	e	enum:State
IoCon	capsules/src/mcp230xx.rs	/^    IoCon = 0x05,$/;"	e	enum:Registers
IoDir	capsules/src/mcp230xx.rs	/^    IoDir = 0x00,$/;"	e	enum:Registers
IocRegisters	chips/cc26x2/src/gpio.rs	/^struct IocRegisters {$/;"	s
Isl29035	boards/imix/src/components/isl29035.rs	/^    type Output = &'static Isl29035<'static, VirtualMuxAlarm<'static, sam4l::ast::Ast<'static>>>/;"	v	implementation:Isl29035Component
Isl29035	capsules/src/isl29035.rs	/^impl<A: time::Alarm> AmbientLight for Isl29035<'a, A> {$/;"	c
Isl29035	capsules/src/isl29035.rs	/^impl<A: time::Alarm> I2CClient for Isl29035<'a, A> {$/;"	c
Isl29035	capsules/src/isl29035.rs	/^impl<A: time::Alarm> Isl29035<'a, A> {$/;"	c
Isl29035	capsules/src/isl29035.rs	/^impl<A: time::Alarm> time::Client for Isl29035<'a, A> {$/;"	c
Isl29035	capsules/src/isl29035.rs	/^pub struct Isl29035<'a, A: time::Alarm> {$/;"	s
Isl29035Component	boards/imix/src/components/isl29035.rs	/^impl Component for Isl29035Component {$/;"	c
Isl29035Component	boards/imix/src/components/isl29035.rs	/^impl Isl29035Component {$/;"	c
Isl29035Component	boards/imix/src/components/isl29035.rs	/^pub struct Isl29035Component {$/;"	s
Isochronous	capsules/src/usb.rs	/^    Isochronous,$/;"	e	enum:TransferType
Item	capsules/src/rng.rs	/^    type Item = u32;$/;"	t	implementation:Entropy32ToRandomIter
Item	capsules/src/rng.rs	/^    type Item = u32;$/;"	t	implementation:Entropy8To32Iter
Item	capsules/src/rng.rs	/^    type Item = u8;$/;"	t	implementation:Entropy32To8Iter
Item	chips/cc26x2/src/trng.rs	/^    type Item = u32;$/;"	t	implementation:TrngIter
Item	chips/nrf5x/src/trng.rs	/^    type Item = u32;$/;"	t	implementation:TrngIter
Item	chips/sam4l/src/trng.rs	/^    type Item = u32;$/;"	t	implementation:TrngIter
Item	kernel/src/common/list.rs	/^    type Item = &'a T;$/;"	t	implementation:ListIterator
Item	kernel/src/grant.rs	/^    type Item = AppliedGrant<T>;$/;"	t	implementation:Iter
Iter	kernel/src/grant.rs	/^impl<T: Default> Iterator for Iter<'a, T> {$/;"	c
Iter	kernel/src/grant.rs	/^pub struct Iter<'a, T: 'a + Default> {$/;"	s
J	chips/tm4c129x/src/gpio.rs	/^    J = 10,$/;"	e	enum:PeripheralFunction
JLINK_ARGUMENTS	boards/launchxl/Makefile	/^JLINK_ARGUMENTS ?= -device $(JLINK_DEVICE) -if jtag -speed 4000 -AutoConnect 1 -jtagconf -1,-1$/;"	m
JLINK_DEVICE	boards/launchxl/Makefile	/^JLINK_DEVICE ?= cc1312r1f3$/;"	m
JLINK_EXE	boards/launchxl/Makefile	/^JLINK_EXE ?= JLinkExe$/;"	m
Jazz	capsules/examples/traitobj_list.rs	/^impl<'a> Funky<'a> for Jazz<'a> {$/;"	c
Jazz	capsules/examples/traitobj_list.rs	/^impl<'a> Jazz<'a> {$/;"	c
Jazz	capsules/examples/traitobj_list.rs	/^pub struct Jazz<'a> {$/;"	s
K	chips/tm4c129x/src/gpio.rs	/^    K = 11,$/;"	e	enum:PeripheralFunction
K100	chips/nrf52/src/i2c.rs	/^    K100 = 0x01980000,$/;"	e	enum:Speed
K125	chips/nrf52/src/spi.rs	/^    K125 = 0x02000000,$/;"	e	enum:Frequency
K128	chips/nrf52/src/ficr.rs	/^    K128 = 0x80,$/;"	e	enum:Flash
K16	chips/nrf52/src/ficr.rs	/^    K16 = 0x10,$/;"	e	enum:Ram
K250	chips/nrf52/src/i2c.rs	/^    K250 = 0x04000000,$/;"	e	enum:Speed
K250	chips/nrf52/src/spi.rs	/^    K250 = 0x04000000,$/;"	e	enum:Frequency
K256	chips/nrf52/src/ficr.rs	/^    K256 = 0x100,$/;"	e	enum:Flash
K32	chips/nrf52/src/ficr.rs	/^    K32 = 0x20,$/;"	e	enum:Ram
K400	chips/nrf52/src/i2c.rs	/^    K400 = 0x06400000,$/;"	e	enum:Speed
K500	chips/nrf52/src/spi.rs	/^    K500 = 0x08000000,$/;"	e	enum:Frequency
K512	chips/nrf52/src/ficr.rs	/^    K512 = 0x200,$/;"	e	enum:Flash
K64	chips/nrf52/src/ficr.rs	/^    K64 = 0x40,$/;"	e	enum:Ram
KERNEL_ADDRESS	boards/hail/Makefile	/^KERNEL_ADDRESS=0x10000$/;"	m
KERNEL_ADDRESS	boards/imix/Makefile	/^KERNEL_ADDRESS=0x10000$/;"	m
KERNEL_ADDRESS	boards/nordic/nrf51dk/Makefile	/^KERNEL_ADDRESS=0x00000$/;"	m
KERNEL_ADDRESS	boards/nordic/nrf52840dk/Makefile	/^KERNEL_ADDRESS=0x00000$/;"	m
KERNEL_ADDRESS	boards/nordic/nrf52dk/Makefile	/^KERNEL_ADDRESS=0x00000$/;"	m
KERNEL_BUFFER	capsules/src/sdcard.rs	/^pub static mut KERNEL_BUFFER: [u8; 512] = [0; 512];$/;"	v
KERNEL_RXBUFFER	capsules/src/fm25cl.rs	/^pub static mut KERNEL_RXBUFFER: [u8; 512] = [0; 512];$/;"	v
KERNEL_TXBUFFER	capsules/src/fm25cl.rs	/^pub static mut KERNEL_TXBUFFER: [u8; 512] = [0; 512];$/;"	v
KEY	capsules/src/test/aes_ccm.rs	/^static KEY: [u8; AES128_KEY_SIZE] = [$/;"	v
Kernel	capsules/src/nonvolatile_storage_driver.rs	/^    Kernel,$/;"	e	enum:NonvolatileUser
Kernel	kernel/src/sched.rs	/^impl Kernel {$/;"	c
Kernel	kernel/src/sched.rs	/^pub struct Kernel {$/;"	s
KernelError	kernel/src/process.rs	/^    KernelError, \/\/ This likely indicates a bug in the kernel and that some$/;"	e	enum:Error
KernelInfo	kernel/src/introspection.rs	/^impl KernelInfo {$/;"	c
KernelInfo	kernel/src/introspection.rs	/^pub struct KernelInfo {$/;"	s
KernelRead	capsules/src/nonvolatile_storage_driver.rs	/^    KernelRead,$/;"	e	enum:NonvolatileCommand
KernelWrite	capsules/src/nonvolatile_storage_driver.rs	/^    KernelWrite,$/;"	e	enum:NonvolatileCommand
KeyDescriptor	capsules/src/ieee802154/driver.rs	/^impl Default for KeyDescriptor {$/;"	c
KeyDescriptor	capsules/src/ieee802154/driver.rs	/^impl KeyDescriptor {$/;"	c
KeyDescriptor	capsules/src/ieee802154/driver.rs	/^struct KeyDescriptor {$/;"	s
KeyId	capsules/src/net/ieee802154.rs	/^impl KeyId {$/;"	c
KeyId	capsules/src/net/ieee802154.rs	/^pub enum KeyId {$/;"	g
KeyIdMode	capsules/src/net/ieee802154.rs	/^impl From<&'a KeyId> for KeyIdMode {$/;"	c
KeyIdMode	capsules/src/net/ieee802154.rs	/^impl KeyIdMode {$/;"	c
KeyIdMode	capsules/src/net/ieee802154.rs	/^pub enum KeyIdMode {$/;"	g
KeyIdModeUserland	capsules/src/ieee802154/driver.rs	/^enum KeyIdModeUserland {$/;"	g
KeyIdModeUserland	capsules/src/ieee802154/driver.rs	/^impl From<&'a KeyId> for KeyIdModeUserland {$/;"	c
KeyIdModeUserland	capsules/src/ieee802154/driver.rs	/^impl KeyIdModeUserland {$/;"	c
KeyProcedure	capsules/src/ieee802154/framer.rs	/^pub trait KeyProcedure {$/;"	i
Keyboard Shortcuts	kernel/target/doc/settings.html	/^<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=/;"	i
Keyboard Shortcuts	kernel/target/doc/src/tock_cells/lib.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Keyboard Shortcuts	kernel/target/doc/src/tock_cells/map_cell.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Keyboard Shortcuts	kernel/target/doc/src/tock_cells/numeric_cell_ext.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Keyboard Shortcuts	kernel/target/doc/src/tock_cells/optional_cell.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Keyboard Shortcuts	kernel/target/doc/src/tock_cells/take_cell.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Keyboard Shortcuts	kernel/target/doc/src/tock_cells/volatile_cell.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Keyboard Shortcuts	kernel/target/doc/src/tock_registers/lib.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Keyboard Shortcuts	kernel/target/doc/src/tock_registers/macros.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Keyboard Shortcuts	kernel/target/doc/src/tock_registers/registers.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Keyboard Shortcuts	kernel/target/doc/tock_cells/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	i
Keyboard Shortcuts	kernel/target/doc/tock_cells/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
Keyboard Shortcuts	kernel/target/doc/tock_cells/map_cell/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
Keyboard Shortcuts	kernel/target/doc/tock_cells/numeric_cell_ext/index.html	/^<table><tr class='module-item'><td><a class="trait" href="trait.NumericCellExt.html" title='tock/;"	i
Keyboard Shortcuts	kernel/target/doc/tock_cells/optional_cell/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
Keyboard Shortcuts	kernel/target/doc/tock_cells/take_cell/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
Keyboard Shortcuts	kernel/target/doc/tock_cells/volatile_cell/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
Keyboard Shortcuts	kernel/target/doc/tock_registers/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	i
Keyboard Shortcuts	kernel/target/doc/tock_registers/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
Keyboard Shortcuts	kernel/target/doc/tock_registers/macro.register_bitfields.html	/^<\/div><\/section><section id="search" class="content hidden"><\/section><section class="footer"/;"	i
Keyboard Shortcuts	kernel/target/doc/tock_registers/macro.register_bitmasks.html	/^<\/div><\/section><section id="search" class="content hidden"><\/section><section class="footer"/;"	i
Keyboard Shortcuts	kernel/target/doc/tock_registers/macros/index.html	/^<\/div><\/section><section id="search" class="content hidden"><\/section><section class="footer"/;"	i
Keyboard Shortcuts	kernel/target/doc/tock_registers/registers/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
L	chips/tm4c129x/src/gpio.rs	/^    L = 12,$/;"	e	enum:PeripheralFunction
LANGUAGES	capsules/src/usbc_client.rs	/^static LANGUAGES: &'static [u16] = &[$/;"	v
LCDCA	chips/sam4l/src/pm.rs	/^    LCDCA,$/;"	e	enum:PBAClock
LCDCA_ABMDR_TX	chips/sam4l/src/dma.rs	/^    LCDCA_ABMDR_TX = 38,$/;"	e	enum:DMAPeripheral
LCDCA_ACMDR_TX	chips/sam4l/src/dma.rs	/^    LCDCA_ACMDR_TX = 37,$/;"	e	enum:DMAPeripheral
LED	capsules/src/led.rs	/^impl<G: hil::gpio::Pin + hil::gpio::PinCtl> Driver for LED<'a, G> {$/;"	c
LED	capsules/src/led.rs	/^impl<G: hil::gpio::Pin + hil::gpio::PinCtl> LED<'a, G> {$/;"	c
LED	capsules/src/led.rs	/^pub struct LED<'a, G: hil::gpio::Pin> {$/;"	s
LFCLKSTARTED	chips/nrf51/src/clock.rs	/^    LFCLKSTARTED = (1 << 1),$/;"	e	enum:InterruptField
LFCLKSTARTED	chips/nrf52/src/clock.rs	/^    LFCLKSTARTED = (1 << 1),$/;"	e	enum:InterruptField
LI_CLIENT	boards/imix/src/i2c_dummy.rs	/^static mut LI_CLIENT: LiClient = LiClient {$/;"	v
LLP16	boards/imix/src/ipv6_lowpan_test.rs	/^    LLP16,$/;"	e	enum:DAC
LLP16	boards/imix/src/ipv6_lowpan_test.rs	/^    LLP16,$/;"	e	enum:SAC
LLP16	boards/imix/src/sixlowpan_dummy.rs	/^    LLP16,$/;"	e	enum:DAC
LLP16	boards/imix/src/sixlowpan_dummy.rs	/^    LLP16,$/;"	e	enum:SAC
LLP64	boards/imix/src/ipv6_lowpan_test.rs	/^    LLP64,$/;"	e	enum:DAC
LLP64	boards/imix/src/ipv6_lowpan_test.rs	/^    LLP64,$/;"	e	enum:SAC
LLP64	boards/imix/src/sixlowpan_dummy.rs	/^    LLP64,$/;"	e	enum:DAC
LLP64	boards/imix/src/sixlowpan_dummy.rs	/^    LLP64,$/;"	e	enum:SAC
LLPIID	boards/imix/src/ipv6_lowpan_test.rs	/^    LLPIID,$/;"	e	enum:DAC
LLPIID	boards/imix/src/ipv6_lowpan_test.rs	/^    LLPIID,$/;"	e	enum:SAC
LLPIID	boards/imix/src/sixlowpan_dummy.rs	/^    LLPIID,$/;"	e	enum:DAC
LLPIID	boards/imix/src/sixlowpan_dummy.rs	/^    LLPIID,$/;"	e	enum:SAC
LOG_ARGS	tools/usb/bulk-echo-fast/main.c	/^#define LOG_ARGS /;"	d	file:
LOG_STRING	tools/usb/bulk-echo-fast/main.c	/^#define LOG_STRING(/;"	d	file:
LP	chips/sam4l/src/flashcalw.rs	/^    LP,$/;"	e	enum:FlashCMD
LPS25HB	capsules/src/lps25hb.rs	/^impl Driver for LPS25HB<'a> {$/;"	c
LPS25HB	capsules/src/lps25hb.rs	/^impl LPS25HB<'a> {$/;"	c
LPS25HB	capsules/src/lps25hb.rs	/^impl gpio::Client for LPS25HB<'a> {$/;"	c
LPS25HB	capsules/src/lps25hb.rs	/^impl i2c::I2CClient for LPS25HB<'a> {$/;"	c
LPS25HB	capsules/src/lps25hb.rs	/^pub struct LPS25HB<'a> {$/;"	s
LSBFirst	kernel/src/hil/spi.rs	/^    LSBFirst,$/;"	e	enum:DataOrder
LTC2941	capsules/src/ltc294x.rs	/^    LTC2941 = 1,$/;"	e	enum:ChipModel
LTC2942	capsules/src/ltc294x.rs	/^    LTC2942 = 2,$/;"	e	enum:ChipModel
LTC2943	capsules/src/ltc294x.rs	/^    LTC2943 = 3,$/;"	e	enum:ChipModel
LTC294X	capsules/src/ltc294x.rs	/^impl LTC294X<'a> {$/;"	c
LTC294X	capsules/src/ltc294x.rs	/^impl gpio::Client for LTC294X<'a> {$/;"	c
LTC294X	capsules/src/ltc294x.rs	/^impl i2c::I2CClient for LTC294X<'a> {$/;"	c
LTC294X	capsules/src/ltc294x.rs	/^pub struct LTC294X<'a> {$/;"	s
LTC294XClient	capsules/src/ltc294x.rs	/^pub trait LTC294XClient {$/;"	i
LTC294XDriver	capsules/src/ltc294x.rs	/^impl Driver for LTC294XDriver<'a> {$/;"	c
LTC294XDriver	capsules/src/ltc294x.rs	/^impl LTC294XClient for LTC294XDriver<'a> {$/;"	c
LTC294XDriver	capsules/src/ltc294x.rs	/^impl LTC294XDriver<'a> {$/;"	c
LTC294XDriver	capsules/src/ltc294x.rs	/^pub struct LTC294XDriver<'a> {$/;"	s
LanguagesDescriptor	capsules/src/usb.rs	/^impl Descriptor for LanguagesDescriptor<'a> {$/;"	c
LanguagesDescriptor	capsules/src/usb.rs	/^pub struct LanguagesDescriptor<'a> {$/;"	s
LeaderData	capsules/src/net/thread/tlv.rs	/^    LeaderData = 11,$/;"	e	enum:TlvType
LeaderData	capsules/src/net/thread/tlv.rs	/^    LeaderData {$/;"	e	enum:Tlv
Led	kernel/src/hil/led.rs	/^pub trait Led {$/;"	i
LedComponent	boards/imix/src/components/led.rs	/^impl Component for LedComponent {$/;"	c
LedComponent	boards/imix/src/components/led.rs	/^impl LedComponent {$/;"	c
LedComponent	boards/imix/src/components/led.rs	/^pub struct LedComponent {}$/;"	s
LedHigh	kernel/src/hil/led.rs	/^impl Led for LedHigh<'a> {$/;"	c
LedHigh	kernel/src/hil/led.rs	/^impl LedHigh<'a> {$/;"	c
LedHigh	kernel/src/hil/led.rs	/^pub struct LedHigh<'a> {$/;"	s
LedLow	kernel/src/hil/led.rs	/^impl Led for LedLow<'a> {$/;"	c
LedLow	kernel/src/hil/led.rs	/^impl LedLow<'a> {$/;"	c
LedLow	kernel/src/hil/led.rs	/^pub struct LedLow<'a> {$/;"	s
LiClient	boards/imix/src/i2c_dummy.rs	/^impl hil::i2c::I2CHwMasterClient for LiClient {$/;"	c
LiClient	boards/imix/src/i2c_dummy.rs	/^struct LiClient {$/;"	s
LiClientState	boards/imix/src/i2c_dummy.rs	/^enum LiClientState {$/;"	g
LinkLayerFrameCounter	capsules/src/net/thread/tlv.rs	/^    LinkLayerFrameCounter = 5,$/;"	e	enum:TlvType
LinkLayerFrameCounter	capsules/src/net/thread/tlv.rs	/^    LinkLayerFrameCounter(u32),$/;"	e	enum:Tlv
LinkMargin	capsules/src/net/thread/tlv.rs	/^    LinkMargin = 16,$/;"	e	enum:TlvType
LinkMargin	capsules/src/net/thread/tlv.rs	/^    LinkMargin(u8),$/;"	e	enum:Tlv
LinkMode	capsules/src/net/thread/tlv.rs	/^pub enum LinkMode {$/;"	g
List	kernel/src/common/list.rs	/^impl<T: ?Sized + ListNode<'a, T>> List<'a, T> {$/;"	c
List	kernel/src/common/list.rs	/^pub struct List<'a, T: 'a + ?Sized + ListNode<'a, T>> {$/;"	s
ListIterator	kernel/src/common/list.rs	/^impl<T: ?Sized + ListNode<'a, T>> Iterator for ListIterator<'a, T> {$/;"	c
ListIterator	kernel/src/common/list.rs	/^pub struct ListIterator<'a, T: 'a + ?Sized + ListNode<'a, T>> {$/;"	s
ListLink	kernel/src/common/list.rs	/^impl<T: ?Sized> ListLink<'a, T> {$/;"	c
ListLink	kernel/src/common/list.rs	/^pub struct ListLink<'a, T: 'a + ?Sized>(Cell<Option<&'a T>>);$/;"	s
ListNode	kernel/src/common/list.rs	/^pub trait ListNode<'a, T: ?Sized> {$/;"	i
LocalRegisterCopy	libraries/tock-register-interface/src/registers.rs	/^impl<T: IntLike + fmt::Debug, R: RegisterLongName> fmt::Debug for LocalRegisterCopy<T, R> {$/;"	c
LocalRegisterCopy	libraries/tock-register-interface/src/registers.rs	/^impl<T: IntLike, R: RegisterLongName> LocalRegisterCopy<T, R> {$/;"	c
LocalRegisterCopy	libraries/tock-register-interface/src/registers.rs	/^pub struct LocalRegisterCopy<T: IntLike, R: RegisterLongName = ()> {$/;"	s
Long	capsules/src/net/ieee802154.rs	/^    Long = 0b11,$/;"	e	enum:AddressMode
Long	capsules/src/net/ieee802154.rs	/^    Long([u8; 8]),$/;"	e	enum:MacAddress
LongAddr	capsules/src/net/ip.rs	/^    LongAddr([u8; 8]),$/;"	e	enum:MacAddr
LongAddr	capsules/src/net/ipv6/ip_utils.rs	/^    LongAddr([u8; 8]),$/;"	e	enum:MacAddr
Low	capsules/src/mcp230xx.rs	/^    Low = 0x00,$/;"	e	enum:PinState
Low	capsules/src/net/thread/tlv.rs	/^    Low = 0b1100_0000,$/;"	e	enum:ParentPriority
Low	chips/sam4l/src/usbc/mod.rs	/^    Low,$/;"	e	enum:Speed
Low	kernel/src/hil/usb.rs	/^    Low,$/;"	e	enum:DeviceSpeed
LowClockSource	chips/nrf51/src/clock.rs	/^pub enum LowClockSource {$/;"	g
LowClockSource	chips/nrf52/src/clock.rs	/^pub enum LowClockSource {$/;"	g
LowWhenPressed	capsules/src/button.rs	/^    LowWhenPressed,$/;"	e	enum:GpioMode
LowpanICMPTest	boards/imix/src/icmp_lowpan_test.rs	/^impl<'a, A: time::Alarm> capsules::net::icmpv6::icmpv6_send::ICMP6SendClient$/;"	c
LowpanICMPTest	boards/imix/src/icmp_lowpan_test.rs	/^impl<'a, A: time::Alarm> time::Client for LowpanICMPTest<'a, A> {$/;"	c
LowpanICMPTest	boards/imix/src/icmp_lowpan_test.rs	/^impl<A: time::Alarm> LowpanICMPTest<'a, A> {$/;"	c
LowpanICMPTest	boards/imix/src/icmp_lowpan_test.rs	/^pub struct LowpanICMPTest<'a, A: time::Alarm> {$/;"	s
LowpanTest	boards/imix/src/ipv6_lowpan_test.rs	/^impl<'a, A: time::Alarm> LowpanTest<'a, A> {$/;"	c
LowpanTest	boards/imix/src/ipv6_lowpan_test.rs	/^impl<'a, A: time::Alarm> SixlowpanRxClient for LowpanTest<'a, A> {$/;"	c
LowpanTest	boards/imix/src/ipv6_lowpan_test.rs	/^impl<'a, A: time::Alarm> TxClient for LowpanTest<'a, A> {$/;"	c
LowpanTest	boards/imix/src/ipv6_lowpan_test.rs	/^impl<'a, A: time::Alarm> time::Client for LowpanTest<'a, A> {$/;"	c
LowpanTest	boards/imix/src/ipv6_lowpan_test.rs	/^pub struct LowpanTest<'a, A: time::Alarm> {$/;"	s
LowpanTest	boards/imix/src/sixlowpan_dummy.rs	/^impl<'a, R: radio::Radio , A: time::Alarm >$/;"	c
LowpanTest	boards/imix/src/sixlowpan_dummy.rs	/^pub struct LowpanTest<'a, R: radio::Radio , A: time::Alarm > {$/;"	s
LowpanTest	boards/imix/src/udp_lowpan_test.rs	/^impl<'a, A: time::Alarm> LowpanTest<'a, A> {$/;"	c
LowpanTest	boards/imix/src/udp_lowpan_test.rs	/^impl<'a, A: time::Alarm> capsules::net::udp::udp_send::UDPSendClient for LowpanTest<'a, A> {$/;"	c
LowpanTest	boards/imix/src/udp_lowpan_test.rs	/^impl<'a, A: time::Alarm> time::Client for LowpanTest<'a, A> {$/;"	c
LowpanTest	boards/imix/src/udp_lowpan_test.rs	/^pub struct LowpanTest<'a, A: time::Alarm> {$/;"	s
M	chips/tm4c129x/src/gpio.rs	/^    M = 13,$/;"	e	enum:PeripheralFunction
M1	chips/nrf52/src/spi.rs	/^    M1 = 0x10000000,$/;"	e	enum:Frequency
M2	chips/nrf52/src/spi.rs	/^    M2 = 0x20000000,$/;"	e	enum:Frequency
M4	chips/nrf52/src/spi.rs	/^    M4 = 0x40000000,$/;"	e	enum:Frequency
M8	chips/nrf52/src/spi.rs	/^    M8 = 0x80000000,$/;"	e	enum:Frequency
MACCommand	capsules/src/net/ieee802154.rs	/^    MACCommand = 0b011,$/;"	e	enum:FrameType
MAC_NONCE	capsules/src/test/aes_ccm.rs	/^static MAC_NONCE: [u8; CCM_NONCE_LENGTH] = [$/;"	v
MAC_SECURED	capsules/src/test/aes_ccm.rs	/^static MAC_SECURED: [u8; 38] = [$/;"	v
MAC_UNSECURED	capsules/src/test/aes_ccm.rs	/^static MAC_UNSECURED: [u8; 30] = [$/;"	v
MAN_ID_0	capsules/src/rf233_const.rs	/^    MAN_ID_0 = 0x1E,$/;"	e	enum:RF233Register
MAN_ID_1	capsules/src/rf233_const.rs	/^    MAN_ID_1 = 0x1F,$/;"	e	enum:RF233Register
MASK	chips/nrf51/src/clock.rs	/^    MASK = 0x3,$/;"	e	enum:LowClockSource
MASK	chips/nrf52/src/clock.rs	/^    MASK = 3,$/;"	e	enum:LowClockSource
MAX	capsules/src/rf233_const.rs	/^    MAX = 0x3E,$/;"	e	enum:RF233Register
MAX17205	capsules/src/max17205.rs	/^impl MAX17205<'a> {$/;"	c
MAX17205	capsules/src/max17205.rs	/^impl i2c::I2CClient for MAX17205<'a> {$/;"	c
MAX17205	capsules/src/max17205.rs	/^pub struct MAX17205<'a> {$/;"	s
MAX17205Client	capsules/src/max17205.rs	/^pub trait MAX17205Client {$/;"	i
MAX17205Driver	capsules/src/max17205.rs	/^impl Driver for MAX17205Driver<'a> {$/;"	c
MAX17205Driver	capsules/src/max17205.rs	/^impl MAX17205Client for MAX17205Driver<'a> {$/;"	c
MAX17205Driver	capsules/src/max17205.rs	/^impl MAX17205Driver<'a> {$/;"	c
MAX17205Driver	capsules/src/max17205.rs	/^pub struct MAX17205Driver<'a> {$/;"	s
MC1	boards/hail/src/test_take_map_cell.rs	/^    static mut MC1: MapCell<[[u8; 256]; 1]> = MapCell::new([[125; 256]; 1]);$/;"	v	function:test_take_map_cell
MC2	boards/hail/src/test_take_map_cell.rs	/^    static mut MC2: MapCell<[[u8; 256]; 2]> = MapCell::new([[125; 256]; 2]);$/;"	v	function:test_take_map_cell
MC3	boards/hail/src/test_take_map_cell.rs	/^    static mut MC3: MapCell<[[u8; 256]; 3]> = MapCell::new([[125; 256]; 3]);$/;"	v	function:test_take_map_cell
MC4	boards/hail/src/test_take_map_cell.rs	/^    static mut MC4: MapCell<[[u8; 256]; 4]> = MapCell::new([[125; 256]; 4]);$/;"	v	function:test_take_map_cell
MC5	boards/hail/src/test_take_map_cell.rs	/^    static mut MC5: MapCell<[[u8; 256]; 5]> = MapCell::new([[125; 256]; 5]);$/;"	v	function:test_take_map_cell
MC6	boards/hail/src/test_take_map_cell.rs	/^    static mut MC6: MapCell<[[u8; 256]; 6]> = MapCell::new([[125; 256]; 6]);$/;"	v	function:test_take_map_cell
MC7	boards/hail/src/test_take_map_cell.rs	/^    static mut MC7: MapCell<[[u8; 256]; 7]> = MapCell::new([[125; 256]; 7]);$/;"	v	function:test_take_map_cell
MCP230xx	capsules/src/mcp230xx.rs	/^impl MCP230xx<'a> {$/;"	c
MCP230xx	capsules/src/mcp230xx.rs	/^impl hil::gpio::Client for MCP230xx<'a> {$/;"	c
MCP230xx	capsules/src/mcp230xx.rs	/^impl hil::gpio_async::Port for MCP230xx<'a> {$/;"	c
MCP230xx	capsules/src/mcp230xx.rs	/^impl hil::i2c::I2CClient for MCP230xx<'a> {$/;"	c
MCP230xx	capsules/src/mcp230xx.rs	/^pub struct MCP230xx<'a> {$/;"	s
MC_REF	boards/hail/src/test_take_map_cell.rs	/^    static mut MC_REF: MapCell<&'static u32> = MapCell::new(&FOO);$/;"	v	function:test_take_map_cell
MCtrlReg1	capsules/src/fxos8700cq.rs	/^    MCtrlReg1 = 0x5b,$/;"	e	enum:Registers
MCtrlReg2	capsules/src/fxos8700cq.rs	/^    MCtrlReg2 = 0x5c,$/;"	e	enum:Registers
MCtrlReg3	capsules/src/fxos8700cq.rs	/^    MCtrlReg3 = 0x5d,$/;"	e	enum:Registers
MDrStatus	capsules/src/fxos8700cq.rs	/^    MDrStatus = 0x32,$/;"	e	enum:Registers
MEMOP	kernel/src/syscall.rs	/^    MEMOP { operand: usize, arg0: usize },$/;"	e	enum:Syscall
MIN	capsules/src/rf233_const.rs	/^    MIN = 0x00,$/;"	e	enum:RF233Register
MIntSrc	capsules/src/fxos8700cq.rs	/^    MIntSrc = 0x5e,$/;"	e	enum:Registers
MMC	capsules/src/sdcard.rs	/^    MMC = 0x01,$/;"	e	enum:SDCardType
MOffXLsb	capsules/src/fxos8700cq.rs	/^    MOffXLsb = 0x40,$/;"	e	enum:Registers
MOffXMsb	capsules/src/fxos8700cq.rs	/^    MOffXMsb = 0x3f,$/;"	e	enum:Registers
MOffYLsb	capsules/src/fxos8700cq.rs	/^    MOffYLsb = 0x42,$/;"	e	enum:Registers
MOffYMsb	capsules/src/fxos8700cq.rs	/^    MOffYMsb = 0x41,$/;"	e	enum:Registers
MOffZLsb	capsules/src/fxos8700cq.rs	/^    MOffZLsb = 0x44,$/;"	e	enum:Registers
MOffZMsb	capsules/src/fxos8700cq.rs	/^    MOffZMsb = 0x43,$/;"	e	enum:Registers
MOutXLsb	capsules/src/fxos8700cq.rs	/^    MOutXLsb = 0x34,$/;"	e	enum:Registers
MOutXMsb	capsules/src/fxos8700cq.rs	/^    MOutXMsb = 0x33,$/;"	e	enum:Registers
MOutYLsb	capsules/src/fxos8700cq.rs	/^    MOutYLsb = 0x36,$/;"	e	enum:Registers
MOutYMsb	capsules/src/fxos8700cq.rs	/^    MOutYMsb = 0x35,$/;"	e	enum:Registers
MOutZLsb	capsules/src/fxos8700cq.rs	/^    MOutZLsb = 0x38,$/;"	e	enum:Registers
MOutZMsb	capsules/src/fxos8700cq.rs	/^    MOutZMsb = 0x37,$/;"	e	enum:Registers
MPU	arch/cortex-m/src/mpu.rs	/^impl MPU {$/;"	c
MPU	arch/cortex-m/src/mpu.rs	/^impl kernel::mpu::MPU for MPU {$/;"	c
MPU	arch/cortex-m/src/mpu.rs	/^pub struct MPU(StaticRef<MpuRegisters>);$/;"	s
MPU	chips/arty_exx/src/chip.rs	/^    type MPU = ();$/;"	t	implementation:ArtyExx
MPU	chips/cc26x2/src/chip.rs	/^    type MPU = cortexm4::mpu::MPU;$/;"	t	implementation:Cc26X2
MPU	chips/e310x/src/chip.rs	/^    type MPU = ();$/;"	t	implementation:E310x
MPU	chips/nrf51/src/chip.rs	/^    type MPU = ();$/;"	t	implementation:NRF51
MPU	chips/nrf52/src/chip.rs	/^    type MPU = cortexm4::mpu::MPU;$/;"	t	implementation:NRF52
MPU	chips/sam4l/src/chip.rs	/^    type MPU = cortexm4::mpu::MPU;$/;"	t	implementation:Sam4l
MPU	chips/tm4c129x/src/chip.rs	/^    type MPU = cortexm4::mpu::MPU;$/;"	t	implementation:Tm4c129x
MPU	kernel/src/platform/mod.rs	/^    type MPU: mpu::MPU;$/;"	t	interface:Chip
MPU	kernel/src/platform/mpu.rs	/^impl MPU for () {}$/;"	c
MPU	kernel/src/platform/mpu.rs	/^pub trait MPU {$/;"	i
MSBFirst	kernel/src/hil/spi.rs	/^    MSBFirst,$/;"	e	enum:DataOrder
MThsCfg	capsules/src/fxos8700cq.rs	/^    MThsCfg = 0x52,$/;"	e	enum:Registers
MThsCount	capsules/src/fxos8700cq.rs	/^    MThsCount = 0x5a,$/;"	e	enum:Registers
MThsSrc	capsules/src/fxos8700cq.rs	/^    MThsSrc = 0x53,$/;"	e	enum:Registers
MThsXLsb	capsules/src/fxos8700cq.rs	/^    MThsXLsb = 0x55,$/;"	e	enum:Registers
MThsXMsb	capsules/src/fxos8700cq.rs	/^    MThsXMsb = 0x54,$/;"	e	enum:Registers
MThsYLsb	capsules/src/fxos8700cq.rs	/^    MThsYLsb = 0x57,$/;"	e	enum:Registers
MThsYMsb	capsules/src/fxos8700cq.rs	/^    MThsYMsb = 0x56,$/;"	e	enum:Registers
MThsZLsb	capsules/src/fxos8700cq.rs	/^    MThsZLsb = 0x59,$/;"	e	enum:Registers
MThsZMsb	capsules/src/fxos8700cq.rs	/^    MThsZMsb = 0x58,$/;"	e	enum:Registers
MVecmCfg	capsules/src/fxos8700cq.rs	/^    MVecmCfg = 0x69,$/;"	e	enum:Registers
MVecmCnt	capsules/src/fxos8700cq.rs	/^    MVecmCnt = 0x6c,$/;"	e	enum:Registers
MVecmInitxLsb	capsules/src/fxos8700cq.rs	/^    MVecmInitxLsb = 0x6e,$/;"	e	enum:Registers
MVecmInitxMsb	capsules/src/fxos8700cq.rs	/^    MVecmInitxMsb = 0x6d,$/;"	e	enum:Registers
MVecmInityLsb	capsules/src/fxos8700cq.rs	/^    MVecmInityLsb = 0x70,$/;"	e	enum:Registers
MVecmInityMsb	capsules/src/fxos8700cq.rs	/^    MVecmInityMsb = 0x6f,$/;"	e	enum:Registers
MVecmInitzLsb	capsules/src/fxos8700cq.rs	/^    MVecmInitzLsb = 0x72,$/;"	e	enum:Registers
MVecmInitzMsb	capsules/src/fxos8700cq.rs	/^    MVecmInitzMsb = 0x71,$/;"	e	enum:Registers
MVecmThsLsb	capsules/src/fxos8700cq.rs	/^    MVecmThsLsb = 0x6b,$/;"	e	enum:Registers
MVecmThsMsb	capsules/src/fxos8700cq.rs	/^    MVecmThsMsb = 0x6a,$/;"	e	enum:Registers
MX25R6435F	capsules/src/mx25r6435f.rs	/^impl<$/;"	c
MX25R6435F	capsules/src/mx25r6435f.rs	/^impl<'a, S: hil::spi::SpiMasterDevice + 'a, P: hil::gpio::Pin + 'a, A: hil::time::Alarm + 'a>$/;"	c
MX25R6435F	capsules/src/mx25r6435f.rs	/^pub struct MX25R6435F<$/;"	s
Mac	capsules/src/ieee802154/mac.rs	/^pub trait Mac {$/;"	i
MacAddr	capsules/src/net/ip.rs	/^pub enum MacAddr {$/;"	g
MacAddr	capsules/src/net/ipv6/ip_utils.rs	/^pub enum MacAddr {$/;"	g
MacAddress	capsules/src/net/ieee802154.rs	/^impl MacAddress {$/;"	c
MacAddress	capsules/src/net/ieee802154.rs	/^pub enum MacAddress {$/;"	g
MacDevice	capsules/src/ieee802154/device.rs	/^pub trait MacDevice<'a> {$/;"	i
MacUser	capsules/src/ieee802154/virtual_mac.rs	/^impl ListNode<'a, MacUser<'a>> for MacUser<'a> {$/;"	c
MacUser	capsules/src/ieee802154/virtual_mac.rs	/^impl MacUser<'a> {$/;"	c
MacUser	capsules/src/ieee802154/virtual_mac.rs	/^impl device::MacDevice<'a> for MacUser<'a> {$/;"	c
MacUser	capsules/src/ieee802154/virtual_mac.rs	/^pub struct MacUser<'a> {$/;"	s
Macros	kernel/target/doc/tock_registers/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	j
Macros	kernel/target/doc/tock_registers/index.html	/^<\/td><\/tr><\/table><h2 id='macros' class='section-header'><a href="#macros">Macros<\/a><\/h2>$/;"	i
MainClock	chips/sam4l/src/pm.rs	/^pub enum MainClock {$/;"	g
MainLoopCapability	kernel/src/capabilities.rs	/^pub unsafe trait MainLoopCapability {}$/;"	i
Manager	capsules/examples/traitobj_list.rs	/^impl<'a> Manager<'a> {$/;"	c
Manager	capsules/examples/traitobj_list.rs	/^pub struct Manager<'a> {$/;"	s
ManufacturerID	capsules/src/tmp006.rs	/^    ManufacturerID = 0xFE,$/;"	e	enum:Registers
MapCell	libraries/tock-cells/src/map_cell.rs	/^impl<T> MapCell<T> {$/;"	c
MapCell	libraries/tock-cells/src/map_cell.rs	/^pub struct MapCell<T> {$/;"	s
MasterAction	capsules/src/i2c_master_slave_driver.rs	/^enum MasterAction {$/;"	g
MaxXLsb	capsules/src/fxos8700cq.rs	/^    MaxXLsb = 0x46,$/;"	e	enum:Registers
MaxXMsb	capsules/src/fxos8700cq.rs	/^    MaxXMsb = 0x45,$/;"	e	enum:Registers
MaxYLsb	capsules/src/fxos8700cq.rs	/^    MaxYLsb = 0x48,$/;"	e	enum:Registers
MaxYMsb	capsules/src/fxos8700cq.rs	/^    MaxYMsb = 0x47,$/;"	e	enum:Registers
MaxZLsb	capsules/src/fxos8700cq.rs	/^    MaxZLsb = 0x4a,$/;"	e	enum:Registers
MaxZMsb	capsules/src/fxos8700cq.rs	/^    MaxZMsb = 0x49,$/;"	e	enum:Registers
Mcast32	boards/imix/src/ipv6_lowpan_test.rs	/^    Mcast32,$/;"	e	enum:DAC
Mcast32	boards/imix/src/sixlowpan_dummy.rs	/^    Mcast32,$/;"	e	enum:DAC
Mcast48	boards/imix/src/ipv6_lowpan_test.rs	/^    Mcast48,$/;"	e	enum:DAC
Mcast48	boards/imix/src/sixlowpan_dummy.rs	/^    Mcast48,$/;"	e	enum:DAC
Mcast8	boards/imix/src/ipv6_lowpan_test.rs	/^    Mcast8,$/;"	e	enum:DAC
Mcast8	boards/imix/src/sixlowpan_dummy.rs	/^    Mcast8,$/;"	e	enum:DAC
McastCtx	boards/imix/src/ipv6_lowpan_test.rs	/^    McastCtx,$/;"	e	enum:DAC
McastCtx	boards/imix/src/sixlowpan_dummy.rs	/^    McastCtx,$/;"	e	enum:DAC
McastInline	boards/imix/src/ipv6_lowpan_test.rs	/^    McastInline,$/;"	e	enum:DAC
McastInline	boards/imix/src/sixlowpan_dummy.rs	/^    McastInline,$/;"	e	enum:DAC
MeasRelativeHumidityHoldMode	capsules/src/si7021.rs	/^    MeasRelativeHumidityHoldMode = 0xe5,$/;"	e	enum:Registers
MeasRelativeHumidityNoHoldMode	capsules/src/si7021.rs	/^    MeasRelativeHumidityNoHoldMode = 0xf5,$/;"	e	enum:Registers
MeasTemperatureHoldMode	capsules/src/si7021.rs	/^    MeasTemperatureHoldMode = 0xe3,$/;"	e	enum:Registers
MeasTemperatureNoHoldMode	capsules/src/si7021.rs	/^    MeasTemperatureNoHoldMode = 0xf3,$/;"	e	enum:Registers
Medium	capsules/src/net/thread/tlv.rs	/^    Medium = 0b0000_0000,$/;"	e	enum:ParentPriority
MemoryAllocationCapability	kernel/src/capabilities.rs	/^pub unsafe trait MemoryAllocationCapability {}$/;"	i
Mic128	capsules/src/net/ieee802154.rs	/^    Mic128 = 0b011,$/;"	e	enum:SecurityLevel
Mic32	capsules/src/net/ieee802154.rs	/^    Mic32 = 0b001,$/;"	e	enum:SecurityLevel
Mic64	capsules/src/net/ieee802154.rs	/^    Mic64 = 0b010,$/;"	e	enum:SecurityLevel
MinXLsb	capsules/src/fxos8700cq.rs	/^    MinXLsb = 0x4c,$/;"	e	enum:Registers
MinXMsb	capsules/src/fxos8700cq.rs	/^    MinXMsb = 0x4b,$/;"	e	enum:Registers
MinYLsb	capsules/src/fxos8700cq.rs	/^    MinYLsb = 0x4e,$/;"	e	enum:Registers
MinYMsb	capsules/src/fxos8700cq.rs	/^    MinYMsb = 0x4d,$/;"	e	enum:Registers
MinZLsb	capsules/src/fxos8700cq.rs	/^    MinZLsb = 0x50,$/;"	e	enum:Registers
MinZMsb	capsules/src/fxos8700cq.rs	/^    MinZMsb = 0x4f,$/;"	e	enum:Registers
MleFrameCounter	capsules/src/net/thread/tlv.rs	/^    MleFrameCounter = 8,$/;"	e	enum:TlvType
MleFrameCounter	capsules/src/net/thread/tlv.rs	/^    MleFrameCounter(u32),$/;"	e	enum:Tlv
Mode	capsules/src/net/thread/tlv.rs	/^    Mode = 1,$/;"	e	enum:TlvType
Mode	capsules/src/net/thread/tlv.rs	/^    Mode(u8),$/;"	e	enum:Tlv
Mode	chips/sam4l/src/usbc/mod.rs	/^pub enum Mode {$/;"	g
Mode	chips/tm4c129x/src/gpio.rs	/^pub enum Mode {$/;"	g
Modules	kernel/target/doc/tock_cells/index.html	/^<\/div><h2 id='modules' class='section-header'><a href="#modules">Modules<\/a><\/h2>$/;"	i
Modules	kernel/target/doc/tock_registers/index.html	/^<\/div><h2 id='modules' class='section-header'><a href="#modules">Modules<\/a><\/h2>$/;"	i
More	kernel/src/hil/entropy.rs	/^    More,$/;"	e	enum:Continue
More	kernel/src/hil/rng.rs	/^    More,$/;"	e	enum:Continue
Mosc	chips/tm4c129x/src/sysctl.rs	/^    Mosc { frequency: OscillatorFrequency },$/;"	e	enum:SystemClockSource
MpuConfig	arch/cortex-m/src/mpu.rs	/^    type MpuConfig = CortexMConfig;$/;"	t	implementation:MPU
MpuConfig	kernel/src/platform/mpu.rs	/^    type MpuConfig: Default = ();$/;"	t	interface:MPU
MpuRegisters	arch/cortex-m/src/mpu.rs	/^pub struct MpuRegisters {$/;"	s
MtimeBased	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	a	object:local.0
MtimeBased	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	a	object:local.0
MtimeBased	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	a	object:local.0
MtimeBased	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	a	object:local.0
MtimeBased	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	a	object:local.0
MtimeBased	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a	object:local.0
MtimeBased	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	a	object:local.0
MtimeBased	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	a	object:local.0
MtimeBased	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	a	object:local.0
MtimeBased	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	a	object:local.0
MtimeBased	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	a	object:local.0
MtimeBased	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	a	object:local.0
MtimeBased	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	a	object:local.0
MtimeBased	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	a	object:local.0
MulticastResponder	capsules/src/net/thread/tlv.rs	/^pub enum MulticastResponder {$/;"	g
Multipurpose	capsules/src/net/ieee802154.rs	/^    Multipurpose = 0b101,$/;"	e	enum:FrameType
MuxAlarm	boards/imix/src/components/udp_6lowpan.rs	/^        alarm: &'static MuxAlarm<'static, sam4l::ast::Ast<'static>>,$/;"	v	implementation:UDPComponent
MuxAlarm	capsules/src/virtual_alarm.rs	/^impl<Alrm: Alarm> MuxAlarm<'a, Alrm> {$/;"	c
MuxAlarm	capsules/src/virtual_alarm.rs	/^impl<Alrm: Alarm> time::Client for MuxAlarm<'a, Alrm> {$/;"	c
MuxAlarm	capsules/src/virtual_alarm.rs	/^pub struct MuxAlarm<'a, Alrm: Alarm> {$/;"	s
MuxFlash	capsules/src/virtual_flash.rs	/^impl<F: hil::flash::Flash> MuxFlash<'a, F> {$/;"	c
MuxFlash	capsules/src/virtual_flash.rs	/^impl<F: hil::flash::Flash> hil::flash::Client<F> for MuxFlash<'a, F> {$/;"	c
MuxFlash	capsules/src/virtual_flash.rs	/^pub struct MuxFlash<'a, F: hil::flash::Flash + 'static> {$/;"	s
MuxI2C	capsules/src/virtual_i2c.rs	/^impl I2CHwMasterClient for MuxI2C<'a> {$/;"	c
MuxI2C	capsules/src/virtual_i2c.rs	/^impl MuxI2C<'a> {$/;"	c
MuxI2C	capsules/src/virtual_i2c.rs	/^pub struct MuxI2C<'a> {$/;"	s
MuxMac	capsules/src/ieee802154/virtual_mac.rs	/^impl MuxMac<'a> {$/;"	c
MuxMac	capsules/src/ieee802154/virtual_mac.rs	/^impl device::RxClient for MuxMac<'a> {$/;"	c
MuxMac	capsules/src/ieee802154/virtual_mac.rs	/^impl device::TxClient for MuxMac<'a> {$/;"	c
MuxMac	capsules/src/ieee802154/virtual_mac.rs	/^pub struct MuxMac<'a> {$/;"	s
MuxSpiMaster	capsules/src/virtual_spi.rs	/^impl<Spi: hil::spi::SpiMaster> MuxSpiMaster<'a, Spi> {$/;"	c
MuxSpiMaster	capsules/src/virtual_spi.rs	/^impl<Spi: hil::spi::SpiMaster> hil::spi::SpiMasterClient for MuxSpiMaster<'a, Spi> {$/;"	c
MuxSpiMaster	capsules/src/virtual_spi.rs	/^pub struct MuxSpiMaster<'a, Spi: hil::spi::SpiMaster> {$/;"	s
Mx25r6435fSector	capsules/src/mx25r6435f.rs	/^impl AsMut<[u8]> for Mx25r6435fSector {$/;"	c
Mx25r6435fSector	capsules/src/mx25r6435f.rs	/^impl Index<usize> for Mx25r6435fSector {$/;"	c
Mx25r6435fSector	capsules/src/mx25r6435f.rs	/^impl IndexMut<usize> for Mx25r6435fSector {$/;"	c
Mx25r6435fSector	capsules/src/mx25r6435f.rs	/^impl Mx25r6435fSector {$/;"	c
Mx25r6435fSector	capsules/src/mx25r6435f.rs	/^pub struct Mx25r6435fSector(pub [u8; SECTOR_SIZE as usize]);$/;"	s
N	capsules/src/net/thread/tlv.rs	/^    N = 0b0000_0000_1000_0000,   \/\/ NDDNS$/;"	e	enum:BorderRouterTlvValueBit
N	capsules/src/net/thread/tlv.rs	/^    N = 0b0100_0000, \/\/ Native commissioning using PSKc is allowed.$/;"	e	enum:SecurityPolicy
N	chips/tm4c129x/src/gpio.rs	/^    N = 14,$/;"	e	enum:PeripheralFunction
N	kernel/target/doc/search-index.js	/^var N = null;var searchIndex = {};$/;"	v
N52832	chips/nrf52/src/ficr.rs	/^    N52832 = 0x52832,$/;"	e	enum:Part
NO	chips/nrf51/src/clock.rs	/^    NO = 0,$/;"	e	enum:ClockTaskTriggered
NOP	chips/sam4l/src/flashcalw.rs	/^    NOP,$/;"	e	enum:FlashCMD
NORUN	chips/nrf51/src/clock.rs	/^    NORUN = 0,$/;"	e	enum:ClockRunning
NO_CLOCK_CONTROL	kernel/src/platform/mod.rs	/^pub static mut NO_CLOCK_CONTROL: NoClockControl = NoClockControl {};$/;"	v
NRF51	chips/nrf51/src/chip.rs	/^impl NRF51 {$/;"	c
NRF51	chips/nrf51/src/chip.rs	/^impl kernel::Chip for NRF51 {$/;"	c
NRF51	chips/nrf51/src/chip.rs	/^pub struct NRF51 {$/;"	s
NRF52	chips/nrf52/src/chip.rs	/^impl NRF52 {$/;"	c
NRF52	chips/nrf52/src/chip.rs	/^impl kernel::Chip for NRF52 {$/;"	c
NRF52	chips/nrf52/src/chip.rs	/^pub struct NRF52 {$/;"	s
NRomID	capsules/src/max17205.rs	/^    NRomID = 0x1BC, \/\/RomID - 64bit unique$/;"	e	enum:Registers
NULL	chips/sam4l/src/pm.rs	/^    NULL,$/;"	e	enum:PBAClock
NUM_ENABLED	chips/sam4l/src/dma.rs	/^static mut NUM_ENABLED: usize = 0;$/;"	v
NVMC	chips/nrf52/src/nvmc.rs	/^pub static mut NVMC: Nvmc = Nvmc::new();$/;"	v
Needed	capsules/src/net/stream.rs	/^    Needed(usize),$/;"	e	enum:SResult
Negative12dBm	chips/nrf5x/src/constants.rs	/^    Negative12dBm = 0xF4,$/;"	e	enum:TxPower
Negative16dBm	chips/nrf5x/src/constants.rs	/^    Negative16dBm = 0xF0,$/;"	e	enum:TxPower
Negative20dBm	chips/nrf5x/src/constants.rs	/^    Negative20dBm = 0xEC,$/;"	e	enum:TxPower
Negative40dBm	chips/nrf5x/src/constants.rs	/^    Negative40dBm = 0xD8,$/;"	e	enum:TxPower
Negative4dBm	chips/nrf5x/src/constants.rs	/^    Negative4dBm = 0xFC,$/;"	e	enum:TxPower
Negative8dBm	chips/nrf5x/src/constants.rs	/^    Negative8dBm = 0xF8,$/;"	e	enum:TxPower
NetworkData	capsules/src/net/thread/tlv.rs	/^    NetworkData = 12,$/;"	e	enum:TlvType
NetworkData	capsules/src/net/thread/tlv.rs	/^    NetworkData(&'a [u8]),$/;"	e	enum:Tlv
NetworkDataTlv	capsules/src/net/thread/tlv.rs	/^impl NetworkDataTlv<'a> {$/;"	c
NetworkDataTlv	capsules/src/net/thread/tlv.rs	/^pub enum NetworkDataTlv<'a> {$/;"	g
NetworkDataTlvType	capsules/src/net/thread/tlv.rs	/^impl From<u8> for NetworkDataTlvType {$/;"	c
NetworkDataTlvType	capsules/src/net/thread/tlv.rs	/^impl<'a, 'b> From<&'a NetworkDataTlv<'b>> for NetworkDataTlvType {$/;"	c
NetworkDataTlvType	capsules/src/net/thread/tlv.rs	/^pub enum NetworkDataTlvType {$/;"	g
NetworkKeySequenceCounter	capsules/src/net/thread/tlv.rs	/^    NetworkKeySequenceCounter = 6,$/;"	e	enum:NetworkManagementTlvType
NetworkKeySequenceCounter	capsules/src/net/thread/tlv.rs	/^    NetworkKeySequenceCounter([u8; 4]), \/\/ Counter length 4 bytes.$/;"	e	enum:NetworkManagementTlv
NetworkManagementTlv	capsules/src/net/thread/tlv.rs	/^impl NetworkManagementTlv<'a> {$/;"	c
NetworkManagementTlv	capsules/src/net/thread/tlv.rs	/^pub enum NetworkManagementTlv<'a> {$/;"	g
NetworkManagementTlvType	capsules/src/net/thread/tlv.rs	/^impl From<u8> for NetworkManagementTlvType {$/;"	c
NetworkManagementTlvType	capsules/src/net/thread/tlv.rs	/^impl<'a, 'b> From<&'a NetworkManagementTlv<'b>> for NetworkManagementTlvType {$/;"	c
NetworkManagementTlvType	capsules/src/net/thread/tlv.rs	/^pub enum NetworkManagementTlvType {$/;"	g
NetworkMasterKey	capsules/src/net/thread/tlv.rs	/^    NetworkMasterKey = 5,$/;"	e	enum:NetworkManagementTlvType
NetworkMasterKey	capsules/src/net/thread/tlv.rs	/^    NetworkMasterKey([u8; 16]),         \/\/ Master key length 128 bits = 16 bytes.$/;"	e	enum:NetworkManagementTlv
NetworkMeshLocalPrefix	capsules/src/net/thread/tlv.rs	/^    NetworkMeshLocalPrefix = 7,$/;"	e	enum:NetworkManagementTlvType
NetworkMeshLocalPrefix	capsules/src/net/thread/tlv.rs	/^    NetworkMeshLocalPrefix([u8; 8]),    \/\/ Mesh-Local Prefix length 8 bytes.$/;"	e	enum:NetworkManagementTlv
NetworkName	capsules/src/net/thread/tlv.rs	/^    NetworkName = 3,$/;"	e	enum:NetworkManagementTlvType
NetworkName	capsules/src/net/thread/tlv.rs	/^    NetworkName([u8; 16]),              \/\/ Network name max length 16 bytes.$/;"	e	enum:NetworkManagementTlv
NineDof	boards/imix/src/components/fxos8700.rs	/^    type Output = &'static NineDof<'static>;$/;"	v	implementation:NineDofComponent
NineDof	capsules/src/ninedof.rs	/^impl Driver for NineDof<'a> {$/;"	c
NineDof	capsules/src/ninedof.rs	/^impl NineDof<'a> {$/;"	c
NineDof	capsules/src/ninedof.rs	/^impl hil::sensors::NineDofClient for NineDof<'a> {$/;"	c
NineDof	capsules/src/ninedof.rs	/^pub struct NineDof<'a> {$/;"	s
NineDof	kernel/src/hil/ninedof.rs	/^pub trait NineDof<'a> {$/;"	i
NineDof	kernel/src/hil/sensors.rs	/^pub trait NineDof {$/;"	i
NineDofClient	kernel/src/hil/ninedof.rs	/^pub trait NineDofClient {$/;"	i
NineDofClient	kernel/src/hil/sensors.rs	/^pub trait NineDofClient {$/;"	i
NineDofCommand	capsules/src/ninedof.rs	/^pub enum NineDofCommand {$/;"	g
NineDofComponent	boards/imix/src/components/fxos8700.rs	/^impl Component for NineDofComponent {$/;"	c
NineDofComponent	boards/imix/src/components/fxos8700.rs	/^impl NineDofComponent {$/;"	c
NineDofComponent	boards/imix/src/components/fxos8700.rs	/^pub struct NineDofComponent {$/;"	s
NoClockControl	kernel/src/platform/mod.rs	/^impl ClockInterface for NoClockControl {$/;"	c
NoClockControl	kernel/src/platform/mod.rs	/^pub struct NoClockControl {}$/;"	s
NoMode	capsules/src/adc.rs	/^    NoMode = -1,$/;"	e	enum:AdcMode
NoSuchApp	kernel/src/process.rs	/^    NoSuchApp,$/;"	e	enum:Error
None	capsules/src/net/ieee802154.rs	/^    None = 0b000,$/;"	e	enum:SecurityLevel
None	kernel/src/hil/uart.rs	/^    None = 0,$/;"	e	enum:Parity
NonvolatileCommand	capsules/src/nonvolatile_storage_driver.rs	/^pub enum NonvolatileCommand {$/;"	g
NonvolatileStorage	boards/imix/src/components/nonvolatile_storage.rs	/^    type Output = &'static NonvolatileStorage<'static>;$/;"	v	implementation:NonvolatileStorageComponent
NonvolatileStorage	capsules/src/nonvolatile_storage_driver.rs	/^impl Driver for NonvolatileStorage<'a> {$/;"	c
NonvolatileStorage	capsules/src/nonvolatile_storage_driver.rs	/^impl NonvolatileStorage<'a> {$/;"	c
NonvolatileStorage	capsules/src/nonvolatile_storage_driver.rs	/^impl hil::nonvolatile_storage::NonvolatileStorage for NonvolatileStorage<'a> {$/;"	c
NonvolatileStorage	capsules/src/nonvolatile_storage_driver.rs	/^impl hil::nonvolatile_storage::NonvolatileStorageClient for NonvolatileStorage<'a> {$/;"	c
NonvolatileStorage	capsules/src/nonvolatile_storage_driver.rs	/^pub struct NonvolatileStorage<'a> {$/;"	s
NonvolatileStorage	kernel/src/hil/nonvolatile_storage.rs	/^pub trait NonvolatileStorage {$/;"	i
NonvolatileStorageClient	kernel/src/hil/nonvolatile_storage.rs	/^pub trait NonvolatileStorageClient {$/;"	i
NonvolatileStorageComponent	boards/imix/src/components/nonvolatile_storage.rs	/^impl Component for NonvolatileStorageComponent {$/;"	c
NonvolatileStorageComponent	boards/imix/src/components/nonvolatile_storage.rs	/^impl NonvolatileStorageComponent {$/;"	c
NonvolatileStorageComponent	boards/imix/src/components/nonvolatile_storage.rs	/^pub struct NonvolatileStorageComponent {$/;"	s
NonvolatileToPages	capsules/src/nonvolatile_to_pages.rs	/^impl<F: hil::flash::Flash> NonvolatileToPages<'a, F> {$/;"	c
NonvolatileToPages	capsules/src/nonvolatile_to_pages.rs	/^impl<F: hil::flash::Flash> hil::flash::Client<F> for NonvolatileToPages<'a, F> {$/;"	c
NonvolatileToPages	capsules/src/nonvolatile_to_pages.rs	/^impl<F: hil::flash::Flash> hil::nonvolatile_storage::NonvolatileStorage$/;"	c
NonvolatileToPages	capsules/src/nonvolatile_to_pages.rs	/^pub struct NonvolatileToPages<'a, F: hil::flash::Flash + 'static> {$/;"	s
NonvolatileUser	capsules/src/nonvolatile_storage_driver.rs	/^pub enum NonvolatileUser {$/;"	g
NotInitialized	capsules/src/ble_advertising_driver.rs	/^    NotInitialized,$/;"	e	enum:BLEState
NotPresent	capsules/src/net/ieee802154.rs	/^    NotPresent = 0b00,$/;"	e	enum:AddressMode
NotPresent	capsules/src/net/thread/tlv.rs	/^    NotPresent,$/;"	e	enum:NetworkDataTlvType
NotPresent	capsules/src/net/thread/tlv.rs	/^    NotPresent,$/;"	e	enum:NetworkManagementTlvType
NotPresent	capsules/src/net/thread/tlv.rs	/^    NotPresent,$/;"	e	enum:PrefixSubTlvType
NotPresent	capsules/src/net/thread/tlv.rs	/^    NotPresent,$/;"	e	enum:ServiceSubTlvType
NotPresent	capsules/src/net/thread/tlv.rs	/^    NotPresent,$/;"	e	enum:TlvType
NotPressed	capsules/src/button.rs	/^    NotPressed = 0,$/;"	e	enum:ButtonState
Nothing	capsules/src/si7021.rs	/^    Nothing,$/;"	e	enum:OnDeck
Nrf1Mbit	chips/nrf5x/src/constants.rs	/^    Nrf1Mbit = 0,$/;"	e	enum:RadioMode
Nrf2Mbit	chips/nrf5x/src/constants.rs	/^    Nrf2Mbit = 1,$/;"	e	enum:RadioMode
Nrf51822Component	boards/imix/src/components/nrf51822.rs	/^impl Component for Nrf51822Component {$/;"	c
Nrf51822Component	boards/imix/src/components/nrf51822.rs	/^impl Nrf51822Component {$/;"	c
Nrf51822Component	boards/imix/src/components/nrf51822.rs	/^pub struct Nrf51822Component {$/;"	s
Nrf51822Serialization	capsules/src/nrf51822_serialization.rs	/^impl<U: UARTReceiveAdvanced> Client for Nrf51822Serialization<'a, U> {$/;"	c
Nrf51822Serialization	capsules/src/nrf51822_serialization.rs	/^impl<U: UARTReceiveAdvanced> Driver for Nrf51822Serialization<'a, U> {$/;"	c
Nrf51822Serialization	capsules/src/nrf51822_serialization.rs	/^impl<U: UARTReceiveAdvanced> Nrf51822Serialization<'a, U> {$/;"	c
Nrf51822Serialization	capsules/src/nrf51822_serialization.rs	/^pub struct Nrf51822Serialization<'a, U: UARTReceiveAdvanced> {$/;"	s
NrfPage	chips/nrf52/src/nvmc.rs	/^impl AsMut<[u8]> for NrfPage {$/;"	c
NrfPage	chips/nrf52/src/nvmc.rs	/^impl Index<usize> for NrfPage {$/;"	c
NrfPage	chips/nrf52/src/nvmc.rs	/^impl IndexMut<usize> for NrfPage {$/;"	c
NrfPage	chips/nrf52/src/nvmc.rs	/^impl NrfPage {$/;"	c
NrfPage	chips/nrf52/src/nvmc.rs	/^pub struct NrfPage(pub [u8; PAGE_SIZE as usize]);$/;"	s
Nrt250Kbit	chips/nrf5x/src/constants.rs	/^    Nrt250Kbit = 2,$/;"	e	enum:RadioMode
NumCast	libraries/enum_primitive/src/cast.rs	/^pub trait NumCast: Sized + ToPrimitive {$/;"	i
NumericCellExt	libraries/tock-cells/src/numeric_cell_ext.rs	/^pub trait NumericCellExt<T>$/;"	i
Nvic	arch/cortex-m/src/nvic.rs	/^impl Nvic {$/;"	c
Nvic	arch/cortex-m/src/nvic.rs	/^pub struct Nvic(u32);$/;"	s
NvicRegisters	arch/cortex-m/src/nvic.rs	/^struct NvicRegisters {$/;"	s
Nvmc	chips/nrf52/src/deferred_call_tasks.rs	/^    Nvmc = 0,$/;"	e	enum:DeferredCallTask
Nvmc	chips/nrf52/src/nvmc.rs	/^impl Nvmc {$/;"	c
Nvmc	chips/nrf52/src/nvmc.rs	/^impl hil::flash::Flash for Nvmc {$/;"	c
Nvmc	chips/nrf52/src/nvmc.rs	/^impl<C: hil::flash::Client<Self>> hil::flash::HasClient<'static, C> for Nvmc {$/;"	c
Nvmc	chips/nrf52/src/nvmc.rs	/^pub struct Nvmc {$/;"	s
NvmcRegisters	chips/nrf52/src/nvmc.rs	/^struct NvmcRegisters {$/;"	s
O	capsules/src/net/thread/tlv.rs	/^    O = 0b0000_0001_0000_0000,   \/\/ On mesh$/;"	e	enum:BorderRouterTlvValueBit
O	capsules/src/net/thread/tlv.rs	/^    O = 0b1000_0000, \/\/ Out-of-band commissioning enabled.$/;"	e	enum:SecurityPolicy
O	chips/tm4c129x/src/gpio.rs	/^    O = 15,$/;"	e	enum:PeripheralFunction
OFB	chips/sam4l/src/aes.rs	/^    OFB = 3,$/;"	e	enum:ConfidentialityMode
OFF	capsules/src/rf233_const.rs	/^    OFF = 0x08,$/;"	e	enum:RF233TrxCmd
OLat	capsules/src/mcp230xx.rs	/^    OLat = 0x0a,$/;"	e	enum:Registers
ON	capsules/src/rf233_const.rs	/^    ON = 0x00,$/;"	e	enum:ExternalState
ON_PLL_SET	capsules/src/rf233.rs	/^    ON_PLL_SET,$/;"	e	enum:InternalState
ON_PLL_WAITING	capsules/src/rf233.rs	/^    ON_PLL_WAITING,$/;"	e	enum:InternalState
ON_STATUS_READ	capsules/src/rf233.rs	/^    ON_STATUS_READ,$/;"	e	enum:InternalState
OPENOCD	boards/ek-tm4c1294xl/Makefile	/^OPENOCD = openocd$/;"	m
OPENOCD	boards/launchxl/Makefile	/^OPENOCD ?= openocd$/;"	m
OPENOCD_OPTIONS	boards/ek-tm4c1294xl/Makefile	/^OPENOCD_OPTIONS = -f openocd.cfg$/;"	m
OSC0	chips/sam4l/src/pm.rs	/^    OSC0 = 0x08,$/;"	e	enum:ClockMask
OSC0	chips/sam4l/src/pm.rs	/^    OSC0,$/;"	e	enum:MainClock
OSC0	chips/sam4l/src/scif.rs	/^    OSC0 = 3,$/;"	e	enum:ClockSource
OSC32K	chips/sam4l/src/bpm.rs	/^    OSC32K = 0,$/;"	e	enum:CK32Source
OSC32K	chips/sam4l/src/scif.rs	/^    OSC32K = 1,$/;"	e	enum:ClockSource
OSCCTRL0	chips/sam4l/src/scif.rs	/^    OSCCTRL0 = 0x20,$/;"	e	enum:Register
OUTPUT_BUF	kernel/src/debug.rs	/^pub static mut OUTPUT_BUF: [u8; 64] = [0; 64];$/;"	v
OUT_BUF0	boards/launchxl/src/uart_echo.rs	/^pub static mut OUT_BUF0: [u8; MAX_PAYLOAD * 2] = [0; MAX_PAYLOAD * 2];$/;"	v
OUT_BUF1	boards/launchxl/src/uart_echo.rs	/^pub static mut OUT_BUF1: [u8; MAX_PAYLOAD * 2] = [0; MAX_PAYLOAD * 2];$/;"	v
Odd	kernel/src/hil/uart.rs	/^    Odd = 1,$/;"	e	enum:Parity
Off	capsules/src/ltc294x.rs	/^    Off = 0x00,$/;"	e	enum:VBatAlert
OffX	capsules/src/fxos8700cq.rs	/^    OffX = 0x2f,$/;"	e	enum:Registers
OffY	capsules/src/fxos8700cq.rs	/^    OffY = 0x30,$/;"	e	enum:Registers
OffZ	capsules/src/fxos8700cq.rs	/^    OffZ = 0x31,$/;"	e	enum:Registers
Ok	kernel/src/hil/usb.rs	/^    Ok,$/;"	e	enum:BulkOutResult
Ok	kernel/src/hil/usb.rs	/^    Ok,$/;"	e	enum:CtrlOutResult
Ok	kernel/src/hil/usb.rs	/^    Ok,$/;"	e	enum:CtrlSetupResult
OnDeck	capsules/src/si7021.rs	/^enum OnDeck {$/;"	g
One	kernel/src/hil/uart.rs	/^    One = 0,$/;"	e	enum:StopBits
Op	capsules/src/ieee802154/virtual_mac.rs	/^enum Op {$/;"	g
Op	capsules/src/virtual_flash.rs	/^enum Op {$/;"	g
Op	capsules/src/virtual_i2c.rs	/^enum Op {$/;"	g
Op	capsules/src/virtual_spi.rs	/^enum Op {$/;"	g
Opcodes	capsules/src/fm25cl.rs	/^enum Opcodes {$/;"	g
Opcodes	capsules/src/mx25r6435f.rs	/^enum Opcodes {$/;"	g
OpenDrain	chips/tm4c129x/src/gpio.rs	/^    OpenDrain,$/;"	e	enum:OutputMode
OpenDrainAfsel	chips/tm4c129x/src/gpio.rs	/^    OpenDrainAfsel,$/;"	e	enum:InputOutputMode
Operation	capsules/src/mx25r6435f.rs	/^enum Operation {$/;"	g
Operation	capsules/src/virtual_uart.rs	/^enum Operation {$/;"	g
OptionalCell	libraries/tock-cells/src/optional_cell.rs	/^impl<T: Copy> OptionalCell<T> {$/;"	c
OptionalCell	libraries/tock-cells/src/optional_cell.rs	/^pub struct OptionalCell<T: Copy> {$/;"	s
OscillatorFrequency	chips/sam4l/src/pm.rs	/^pub enum OscillatorFrequency {$/;"	g
OscillatorFrequency	chips/tm4c129x/src/sysctl.rs	/^pub enum OscillatorFrequency {$/;"	g
OscillatorStartup	chips/sam4l/src/pm.rs	/^pub enum OscillatorStartup {$/;"	g
Other	capsules/src/usb.rs	/^    Other,$/;"	e	enum:Recipient
OtherSpeedConfiguration	capsules/src/usb.rs	/^    OtherSpeedConfiguration,$/;"	e	enum:DescriptorType
OutOfMemory	kernel/src/process.rs	/^    OutOfMemory,$/;"	e	enum:Error
OutXLsb	capsules/src/fxos8700cq.rs	/^    OutXLsb = 0x02,$/;"	e	enum:Registers
OutXMsb	capsules/src/fxos8700cq.rs	/^    OutXMsb = 0x01,$/;"	e	enum:Registers
OutYLsb	capsules/src/fxos8700cq.rs	/^    OutYLsb = 0x04,$/;"	e	enum:Registers
OutYMsb	capsules/src/fxos8700cq.rs	/^    OutYMsb = 0x03,$/;"	e	enum:Registers
OutZLsb	capsules/src/fxos8700cq.rs	/^    OutZLsb = 0x06,$/;"	e	enum:Registers
OutZMsb	capsules/src/fxos8700cq.rs	/^    OutZMsb = 0x05,$/;"	e	enum:Registers
Output	boards/imix/src/components/adc.rs	/^    type Output = &'static adc::Adc<'static, sam4l::adc::Adc>;$/;"	t	implementation:AdcComponent
Output	boards/imix/src/components/alarm.rs	/^    type Output = &'static AlarmDriver<'static, VirtualMuxAlarm<'static, sam4l::ast::Ast<'static/;"	t	implementation:AlarmDriverComponent
Output	boards/imix/src/components/analog_comparator.rs	/^    type Output =$/;"	t	implementation:AcComponent
Output	boards/imix/src/components/button.rs	/^    type Output = &'static button::Button<'static, sam4l::gpio::GPIOPin>;$/;"	t	implementation:ButtonComponent
Output	boards/imix/src/components/console.rs	/^    type Output = &'static console::Console<'static, UartDevice<'static>>;$/;"	t	implementation:ConsoleComponent
Output	boards/imix/src/components/crc.rs	/^    type Output = &'static crc::Crc<'static, sam4l::crccu::Crccu<'static>>;$/;"	t	implementation:CrcComponent
Output	boards/imix/src/components/fxos8700.rs	/^    type Output = &'static NineDof<'static>;$/;"	t	implementation:NineDofComponent
Output	boards/imix/src/components/fxos8700.rs	/^    type Output = &'static fxos8700cq::Fxos8700cq<'static>;$/;"	t	implementation:Fxos8700Component
Output	boards/imix/src/components/gpio.rs	/^    type Output = &'static gpio::GPIO<'static, sam4l::gpio::GPIOPin>;$/;"	t	implementation:GpioComponent
Output	boards/imix/src/components/isl29035.rs	/^    type Output = &'static AmbientLight<'static>;$/;"	t	implementation:AmbientLightComponent
Output	boards/imix/src/components/isl29035.rs	/^    type Output = &'static Isl29035<'static, VirtualMuxAlarm<'static, sam4l::ast::Ast<'static>>>/;"	t	implementation:Isl29035Component
Output	boards/imix/src/components/led.rs	/^    type Output = &'static led::LED<'static, sam4l::gpio::GPIOPin>;$/;"	t	implementation:LedComponent
Output	boards/imix/src/components/nonvolatile_storage.rs	/^    type Output = &'static NonvolatileStorage<'static>;$/;"	t	implementation:NonvolatileStorageComponent
Output	boards/imix/src/components/nrf51822.rs	/^    type Output =$/;"	t	implementation:Nrf51822Component
Output	boards/imix/src/components/process_console.rs	/^    type Output =$/;"	t	implementation:ProcessConsoleComponent
Output	boards/imix/src/components/radio.rs	/^    type Output = ($/;"	t	implementation:RadioComponent
Output	boards/imix/src/components/rf233.rs	/^    type Output = &'static RF233<'static, VirtualSpiMasterDevice<'static, sam4l::spi::SpiHw>>;$/;"	t	implementation:RF233Component
Output	boards/imix/src/components/rng.rs	/^    type Output = &'static rng::RngDriver<'static>;$/;"	t	implementation:RngComponent
Output	boards/imix/src/components/si7021.rs	/^    type Output = &'static HumiditySensor<'static>;$/;"	t	implementation:HumidityComponent
Output	boards/imix/src/components/si7021.rs	/^    type Output = &'static SI7021<'static, VirtualMuxAlarm<'static, sam4l::ast::Ast<'static>>>;$/;"	t	implementation:SI7021Component
Output	boards/imix/src/components/si7021.rs	/^    type Output = &'static TemperatureSensor<'static>;$/;"	t	implementation:TemperatureComponent
Output	boards/imix/src/components/spi.rs	/^    type Output = &'static Spi<'static, VirtualSpiMasterDevice<'static, sam4l::spi::SpiHw>>;$/;"	t	implementation:SpiSyscallComponent
Output	boards/imix/src/components/spi.rs	/^    type Output = &'static VirtualSpiMasterDevice<'static, sam4l::spi::SpiHw>;$/;"	t	implementation:SpiComponent
Output	boards/imix/src/components/udp_6lowpan.rs	/^    type Output = &'static capsules::net::udp::UDPDriver<'static>;$/;"	t	implementation:UDPComponent
Output	boards/imix/src/components/usb.rs	/^    type Output = &'static UsbDevice;$/;"	t	implementation:UsbComponent
Output	capsules/src/mcp230xx.rs	/^    Output = 0x00,$/;"	e	enum:Direction
Output	capsules/src/mx25r6435f.rs	/^    type Output = u8;$/;"	t	implementation:Mx25r6435fSector
Output	chips/arty_exx/src/gpio.rs	/^    type Output = GpioPin;$/;"	t	implementation:Port
Output	chips/cc26x2/src/gpio.rs	/^    type Output = GPIOPin;$/;"	t	implementation:Port
Output	chips/e310x/src/gpio.rs	/^    type Output = GpioPin;$/;"	t	implementation:Port
Output	chips/nrf52/src/nvmc.rs	/^    type Output = u8;$/;"	t	implementation:NrfPage
Output	chips/nrf5x/src/gpio.rs	/^    type Output = GPIOPin;$/;"	t	implementation:Port
Output	chips/sam4l/src/flashcalw.rs	/^    type Output = u8;$/;"	t	implementation:Sam4lPage
Output	chips/sam4l/src/gpio.rs	/^    type Output = GPIOPin;$/;"	t	implementation:Port
Output	chips/tm4c129x/src/gpio.rs	/^    Output(OutputMode),$/;"	e	enum:Mode
Output	chips/tm4c129x/src/gpio.rs	/^    type Output = GPIOPin;$/;"	t	implementation:Port
Output	kernel/src/component.rs	/^    type Output;$/;"	t	interface:Component
Output	libraries/tock-register-interface/src/registers.rs	/^    type Output = Self;$/;"	t	implementation:FieldValue
OutputMode	chips/tm4c129x/src/gpio.rs	/^pub enum OutputMode {$/;"	g
Overrun	kernel/src/hil/i2c.rs	/^    Overrun,$/;"	e	enum:Error
OverrunError	kernel/src/hil/uart.rs	/^    OverrunError,$/;"	e	enum:Error
Owned	kernel/src/grant.rs	/^impl<T: ?Sized> Deref for Owned<T> {$/;"	c
Owned	kernel/src/grant.rs	/^impl<T: ?Sized> DerefMut for Owned<T> {$/;"	c
Owned	kernel/src/grant.rs	/^impl<T: ?Sized> Drop for Owned<T> {$/;"	c
Owned	kernel/src/grant.rs	/^impl<T: ?Sized> Owned<T> {$/;"	c
Owned	kernel/src/grant.rs	/^pub struct Owned<T: ?Sized> {$/;"	s
P	capsules/src/net/thread/tlv.rs	/^    P = 0b0010_0000_0000_0000,   \/\/ Preferred$/;"	e	enum:BorderRouterTlvValueBit
PA	chips/sam4l/src/gpio.rs	/^pub static mut PA: Port = Port {$/;"	v
PA	chips/tm4c129x/src/gpio.rs	/^pub static mut PA: Port = Port {$/;"	v
PA0	chips/tm4c129x/src/gpio.rs	/^    PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7,$/;"	e	enum:Pin
PA00	chips/sam4l/src/gpio.rs	/^    PA00, PA01, PA02, PA03, PA04, PA05, PA06, PA07,$/;"	e	enum:Pin
PA01	chips/sam4l/src/gpio.rs	/^    PA00, PA01, PA02, PA03, PA04, PA05, PA06, PA07,$/;"	e	enum:Pin
PA02	chips/sam4l/src/gpio.rs	/^    PA00, PA01, PA02, PA03, PA04, PA05, PA06, PA07,$/;"	e	enum:Pin
PA03	chips/sam4l/src/gpio.rs	/^    PA00, PA01, PA02, PA03, PA04, PA05, PA06, PA07,$/;"	e	enum:Pin
PA04	chips/sam4l/src/gpio.rs	/^    PA00, PA01, PA02, PA03, PA04, PA05, PA06, PA07,$/;"	e	enum:Pin
PA05	chips/sam4l/src/gpio.rs	/^    PA00, PA01, PA02, PA03, PA04, PA05, PA06, PA07,$/;"	e	enum:Pin
PA06	chips/sam4l/src/gpio.rs	/^    PA00, PA01, PA02, PA03, PA04, PA05, PA06, PA07,$/;"	e	enum:Pin
PA07	chips/sam4l/src/gpio.rs	/^    PA00, PA01, PA02, PA03, PA04, PA05, PA06, PA07,$/;"	e	enum:Pin
PA08	chips/sam4l/src/gpio.rs	/^    PA08, PA09, PA10, PA11, PA12, PA13, PA14, PA15,$/;"	e	enum:Pin
PA09	chips/sam4l/src/gpio.rs	/^    PA08, PA09, PA10, PA11, PA12, PA13, PA14, PA15,$/;"	e	enum:Pin
PA1	chips/tm4c129x/src/gpio.rs	/^    PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7,$/;"	e	enum:Pin
PA10	chips/sam4l/src/gpio.rs	/^    PA08, PA09, PA10, PA11, PA12, PA13, PA14, PA15,$/;"	e	enum:Pin
PA11	chips/sam4l/src/gpio.rs	/^    PA08, PA09, PA10, PA11, PA12, PA13, PA14, PA15,$/;"	e	enum:Pin
PA12	chips/sam4l/src/gpio.rs	/^    PA08, PA09, PA10, PA11, PA12, PA13, PA14, PA15,$/;"	e	enum:Pin
PA13	chips/sam4l/src/gpio.rs	/^    PA08, PA09, PA10, PA11, PA12, PA13, PA14, PA15,$/;"	e	enum:Pin
PA14	chips/sam4l/src/gpio.rs	/^    PA08, PA09, PA10, PA11, PA12, PA13, PA14, PA15,$/;"	e	enum:Pin
PA15	chips/sam4l/src/gpio.rs	/^    PA08, PA09, PA10, PA11, PA12, PA13, PA14, PA15,$/;"	e	enum:Pin
PA16	chips/sam4l/src/gpio.rs	/^    PA16, PA17, PA18, PA19, PA20, PA21, PA22, PA23,$/;"	e	enum:Pin
PA17	chips/sam4l/src/gpio.rs	/^    PA16, PA17, PA18, PA19, PA20, PA21, PA22, PA23,$/;"	e	enum:Pin
PA18	chips/sam4l/src/gpio.rs	/^    PA16, PA17, PA18, PA19, PA20, PA21, PA22, PA23,$/;"	e	enum:Pin
PA19	chips/sam4l/src/gpio.rs	/^    PA16, PA17, PA18, PA19, PA20, PA21, PA22, PA23,$/;"	e	enum:Pin
PA2	chips/tm4c129x/src/gpio.rs	/^    PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7,$/;"	e	enum:Pin
PA20	chips/sam4l/src/gpio.rs	/^    PA16, PA17, PA18, PA19, PA20, PA21, PA22, PA23,$/;"	e	enum:Pin
PA21	chips/sam4l/src/gpio.rs	/^    PA16, PA17, PA18, PA19, PA20, PA21, PA22, PA23,$/;"	e	enum:Pin
PA22	chips/sam4l/src/gpio.rs	/^    PA16, PA17, PA18, PA19, PA20, PA21, PA22, PA23,$/;"	e	enum:Pin
PA23	chips/sam4l/src/gpio.rs	/^    PA16, PA17, PA18, PA19, PA20, PA21, PA22, PA23,$/;"	e	enum:Pin
PA24	chips/sam4l/src/gpio.rs	/^    PA24, PA25, PA26, PA27, PA28, PA29, PA30, PA31,$/;"	e	enum:Pin
PA25	chips/sam4l/src/gpio.rs	/^    PA24, PA25, PA26, PA27, PA28, PA29, PA30, PA31,$/;"	e	enum:Pin
PA26	chips/sam4l/src/gpio.rs	/^    PA24, PA25, PA26, PA27, PA28, PA29, PA30, PA31,$/;"	e	enum:Pin
PA27	chips/sam4l/src/gpio.rs	/^    PA24, PA25, PA26, PA27, PA28, PA29, PA30, PA31,$/;"	e	enum:Pin
PA28	chips/sam4l/src/gpio.rs	/^    PA24, PA25, PA26, PA27, PA28, PA29, PA30, PA31,$/;"	e	enum:Pin
PA29	chips/sam4l/src/gpio.rs	/^    PA24, PA25, PA26, PA27, PA28, PA29, PA30, PA31,$/;"	e	enum:Pin
PA3	chips/tm4c129x/src/gpio.rs	/^    PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7,$/;"	e	enum:Pin
PA30	chips/sam4l/src/gpio.rs	/^    PA24, PA25, PA26, PA27, PA28, PA29, PA30, PA31,$/;"	e	enum:Pin
PA31	chips/sam4l/src/gpio.rs	/^    PA24, PA25, PA26, PA27, PA28, PA29, PA30, PA31,$/;"	e	enum:Pin
PA4	chips/tm4c129x/src/gpio.rs	/^    PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7,$/;"	e	enum:Pin
PA5	chips/tm4c129x/src/gpio.rs	/^    PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7,$/;"	e	enum:Pin
PA6	chips/tm4c129x/src/gpio.rs	/^    PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7,$/;"	e	enum:Pin
PA7	chips/tm4c129x/src/gpio.rs	/^    PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7,$/;"	e	enum:Pin
PACKAGE_NAME	doc/courses/2018-11-SenSys/exercises/app/Makefile	/^PACKAGE_NAME = tock-course-app$/;"	m
PAN_ID_0	capsules/src/rf233_const.rs	/^    PAN_ID_0 = 0x22,$/;"	e	enum:RF233Register
PAN_ID_1	capsules/src/rf233_const.rs	/^    PAN_ID_1 = 0x23,$/;"	e	enum:RF233Register
PARAMETER	chips/sam4l/src/flashcalw.rs	/^    PARAMETER,$/;"	e	enum:RegKey
PARC	chips/sam4l/src/pm.rs	/^    PARC,$/;"	e	enum:PBAClock
PARC_RX	chips/sam4l/src/dma.rs	/^    PARC_RX = 16,$/;"	e	enum:DMAPeripheral
PART_NUM	capsules/src/rf233_const.rs	/^    PART_NUM = 0x1C,$/;"	e	enum:RF233Register
PAYLOAD	chips/nrf51/src/radio.rs	/^static mut PAYLOAD: [u8; nrf5x::constants::RADIO_PAYLOAD_LENGTH] =$/;"	v
PAYLOAD	chips/nrf52/src/radio.rs	/^static mut PAYLOAD: [u8; nrf5x::constants::RADIO_PAYLOAD_LENGTH] =$/;"	v
PB	chips/sam4l/src/gpio.rs	/^pub static mut PB: Port = Port {$/;"	v
PB	chips/tm4c129x/src/gpio.rs	/^pub static mut PB: Port = Port {$/;"	v
PB0	chips/tm4c129x/src/gpio.rs	/^    PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7,$/;"	e	enum:Pin
PB00	chips/sam4l/src/gpio.rs	/^    PB00, PB01, PB02, PB03, PB04, PB05, PB06, PB07,$/;"	e	enum:Pin
PB01	chips/sam4l/src/gpio.rs	/^    PB00, PB01, PB02, PB03, PB04, PB05, PB06, PB07,$/;"	e	enum:Pin
PB02	chips/sam4l/src/gpio.rs	/^    PB00, PB01, PB02, PB03, PB04, PB05, PB06, PB07,$/;"	e	enum:Pin
PB03	chips/sam4l/src/gpio.rs	/^    PB00, PB01, PB02, PB03, PB04, PB05, PB06, PB07,$/;"	e	enum:Pin
PB04	chips/sam4l/src/gpio.rs	/^    PB00, PB01, PB02, PB03, PB04, PB05, PB06, PB07,$/;"	e	enum:Pin
PB05	chips/sam4l/src/gpio.rs	/^    PB00, PB01, PB02, PB03, PB04, PB05, PB06, PB07,$/;"	e	enum:Pin
PB06	chips/sam4l/src/gpio.rs	/^    PB00, PB01, PB02, PB03, PB04, PB05, PB06, PB07,$/;"	e	enum:Pin
PB07	chips/sam4l/src/gpio.rs	/^    PB00, PB01, PB02, PB03, PB04, PB05, PB06, PB07,$/;"	e	enum:Pin
PB08	chips/sam4l/src/gpio.rs	/^    PB08, PB09, PB10, PB11, PB12, PB13, PB14, PB15,$/;"	e	enum:Pin
PB09	chips/sam4l/src/gpio.rs	/^    PB08, PB09, PB10, PB11, PB12, PB13, PB14, PB15,$/;"	e	enum:Pin
PB1	chips/tm4c129x/src/gpio.rs	/^    PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7,$/;"	e	enum:Pin
PB10	chips/sam4l/src/gpio.rs	/^    PB08, PB09, PB10, PB11, PB12, PB13, PB14, PB15,$/;"	e	enum:Pin
PB11	chips/sam4l/src/gpio.rs	/^    PB08, PB09, PB10, PB11, PB12, PB13, PB14, PB15,$/;"	e	enum:Pin
PB12	chips/sam4l/src/gpio.rs	/^    PB08, PB09, PB10, PB11, PB12, PB13, PB14, PB15,$/;"	e	enum:Pin
PB13	chips/sam4l/src/gpio.rs	/^    PB08, PB09, PB10, PB11, PB12, PB13, PB14, PB15,$/;"	e	enum:Pin
PB14	chips/sam4l/src/gpio.rs	/^    PB08, PB09, PB10, PB11, PB12, PB13, PB14, PB15,$/;"	e	enum:Pin
PB15	chips/sam4l/src/gpio.rs	/^    PB08, PB09, PB10, PB11, PB12, PB13, PB14, PB15,$/;"	e	enum:Pin
PB16	chips/sam4l/src/gpio.rs	/^    PB16, PB17, PB18, PB19, PB20, PB21, PB22, PB23,$/;"	e	enum:Pin
PB17	chips/sam4l/src/gpio.rs	/^    PB16, PB17, PB18, PB19, PB20, PB21, PB22, PB23,$/;"	e	enum:Pin
PB18	chips/sam4l/src/gpio.rs	/^    PB16, PB17, PB18, PB19, PB20, PB21, PB22, PB23,$/;"	e	enum:Pin
PB19	chips/sam4l/src/gpio.rs	/^    PB16, PB17, PB18, PB19, PB20, PB21, PB22, PB23,$/;"	e	enum:Pin
PB2	chips/tm4c129x/src/gpio.rs	/^    PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7,$/;"	e	enum:Pin
PB20	chips/sam4l/src/gpio.rs	/^    PB16, PB17, PB18, PB19, PB20, PB21, PB22, PB23,$/;"	e	enum:Pin
PB21	chips/sam4l/src/gpio.rs	/^    PB16, PB17, PB18, PB19, PB20, PB21, PB22, PB23,$/;"	e	enum:Pin
PB22	chips/sam4l/src/gpio.rs	/^    PB16, PB17, PB18, PB19, PB20, PB21, PB22, PB23,$/;"	e	enum:Pin
PB23	chips/sam4l/src/gpio.rs	/^    PB16, PB17, PB18, PB19, PB20, PB21, PB22, PB23,$/;"	e	enum:Pin
PB24	chips/sam4l/src/gpio.rs	/^    PB24, PB25, PB26, PB27, PB28, PB29, PB30, PB31,$/;"	e	enum:Pin
PB25	chips/sam4l/src/gpio.rs	/^    PB24, PB25, PB26, PB27, PB28, PB29, PB30, PB31,$/;"	e	enum:Pin
PB26	chips/sam4l/src/gpio.rs	/^    PB24, PB25, PB26, PB27, PB28, PB29, PB30, PB31,$/;"	e	enum:Pin
PB27	chips/sam4l/src/gpio.rs	/^    PB24, PB25, PB26, PB27, PB28, PB29, PB30, PB31,$/;"	e	enum:Pin
PB28	chips/sam4l/src/gpio.rs	/^    PB24, PB25, PB26, PB27, PB28, PB29, PB30, PB31,$/;"	e	enum:Pin
PB29	chips/sam4l/src/gpio.rs	/^    PB24, PB25, PB26, PB27, PB28, PB29, PB30, PB31,$/;"	e	enum:Pin
PB3	chips/tm4c129x/src/gpio.rs	/^    PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7,$/;"	e	enum:Pin
PB30	chips/sam4l/src/gpio.rs	/^    PB24, PB25, PB26, PB27, PB28, PB29, PB30, PB31,$/;"	e	enum:Pin
PB31	chips/sam4l/src/gpio.rs	/^    PB24, PB25, PB26, PB27, PB28, PB29, PB30, PB31,$/;"	e	enum:Pin
PB4	chips/tm4c129x/src/gpio.rs	/^    PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7,$/;"	e	enum:Pin
PB5	chips/tm4c129x/src/gpio.rs	/^    PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7,$/;"	e	enum:Pin
PB6	chips/tm4c129x/src/gpio.rs	/^    PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7,$/;"	e	enum:Pin
PB7	chips/tm4c129x/src/gpio.rs	/^    PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7,$/;"	e	enum:Pin
PBA	chips/sam4l/src/pm.rs	/^    PBA(PBAClock),$/;"	e	enum:Clock
PBAClock	chips/sam4l/src/pm.rs	/^pub enum PBAClock {$/;"	g
PBB	chips/sam4l/src/pm.rs	/^    PBB(PBBClock),$/;"	e	enum:Clock
PBBClock	chips/sam4l/src/pm.rs	/^pub enum PBBClock {$/;"	g
PBC	chips/sam4l/src/pm.rs	/^    PBC(PBCClock),$/;"	e	enum:Clock
PBCClock	chips/sam4l/src/pm.rs	/^pub enum PBCClock {$/;"	g
PBD	chips/sam4l/src/pm.rs	/^    PBD(PBDClock),$/;"	e	enum:Clock
PBDClock	chips/sam4l/src/pm.rs	/^pub enum PBDClock {$/;"	g
PC	chips/sam4l/src/gpio.rs	/^pub static mut PC: Port = Port {$/;"	v
PC	chips/tm4c129x/src/gpio.rs	/^pub static mut PC: Port = Port {$/;"	v
PC0	chips/tm4c129x/src/gpio.rs	/^    PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7,$/;"	e	enum:Pin
PC00	chips/sam4l/src/gpio.rs	/^    PC00, PC01, PC02, PC03, PC04, PC05, PC06, PC07,$/;"	e	enum:Pin
PC01	chips/sam4l/src/gpio.rs	/^    PC00, PC01, PC02, PC03, PC04, PC05, PC06, PC07,$/;"	e	enum:Pin
PC02	chips/sam4l/src/gpio.rs	/^    PC00, PC01, PC02, PC03, PC04, PC05, PC06, PC07,$/;"	e	enum:Pin
PC03	chips/sam4l/src/gpio.rs	/^    PC00, PC01, PC02, PC03, PC04, PC05, PC06, PC07,$/;"	e	enum:Pin
PC04	chips/sam4l/src/gpio.rs	/^    PC00, PC01, PC02, PC03, PC04, PC05, PC06, PC07,$/;"	e	enum:Pin
PC05	chips/sam4l/src/gpio.rs	/^    PC00, PC01, PC02, PC03, PC04, PC05, PC06, PC07,$/;"	e	enum:Pin
PC06	chips/sam4l/src/gpio.rs	/^    PC00, PC01, PC02, PC03, PC04, PC05, PC06, PC07,$/;"	e	enum:Pin
PC07	chips/sam4l/src/gpio.rs	/^    PC00, PC01, PC02, PC03, PC04, PC05, PC06, PC07,$/;"	e	enum:Pin
PC08	chips/sam4l/src/gpio.rs	/^    PC08, PC09, PC10, PC11, PC12, PC13, PC14, PC15,$/;"	e	enum:Pin
PC09	chips/sam4l/src/gpio.rs	/^    PC08, PC09, PC10, PC11, PC12, PC13, PC14, PC15,$/;"	e	enum:Pin
PC1	chips/tm4c129x/src/gpio.rs	/^    PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7,$/;"	e	enum:Pin
PC10	chips/sam4l/src/gpio.rs	/^    PC08, PC09, PC10, PC11, PC12, PC13, PC14, PC15,$/;"	e	enum:Pin
PC11	chips/sam4l/src/gpio.rs	/^    PC08, PC09, PC10, PC11, PC12, PC13, PC14, PC15,$/;"	e	enum:Pin
PC12	chips/sam4l/src/gpio.rs	/^    PC08, PC09, PC10, PC11, PC12, PC13, PC14, PC15,$/;"	e	enum:Pin
PC13	chips/sam4l/src/gpio.rs	/^    PC08, PC09, PC10, PC11, PC12, PC13, PC14, PC15,$/;"	e	enum:Pin
PC14	chips/sam4l/src/gpio.rs	/^    PC08, PC09, PC10, PC11, PC12, PC13, PC14, PC15,$/;"	e	enum:Pin
PC15	chips/sam4l/src/gpio.rs	/^    PC08, PC09, PC10, PC11, PC12, PC13, PC14, PC15,$/;"	e	enum:Pin
PC16	chips/sam4l/src/gpio.rs	/^    PC16, PC17, PC18, PC19, PC20, PC21, PC22, PC23,$/;"	e	enum:Pin
PC17	chips/sam4l/src/gpio.rs	/^    PC16, PC17, PC18, PC19, PC20, PC21, PC22, PC23,$/;"	e	enum:Pin
PC18	chips/sam4l/src/gpio.rs	/^    PC16, PC17, PC18, PC19, PC20, PC21, PC22, PC23,$/;"	e	enum:Pin
PC19	chips/sam4l/src/gpio.rs	/^    PC16, PC17, PC18, PC19, PC20, PC21, PC22, PC23,$/;"	e	enum:Pin
PC2	chips/tm4c129x/src/gpio.rs	/^    PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7,$/;"	e	enum:Pin
PC20	chips/sam4l/src/gpio.rs	/^    PC16, PC17, PC18, PC19, PC20, PC21, PC22, PC23,$/;"	e	enum:Pin
PC21	chips/sam4l/src/gpio.rs	/^    PC16, PC17, PC18, PC19, PC20, PC21, PC22, PC23,$/;"	e	enum:Pin
PC22	chips/sam4l/src/gpio.rs	/^    PC16, PC17, PC18, PC19, PC20, PC21, PC22, PC23,$/;"	e	enum:Pin
PC23	chips/sam4l/src/gpio.rs	/^    PC16, PC17, PC18, PC19, PC20, PC21, PC22, PC23,$/;"	e	enum:Pin
PC24	chips/sam4l/src/gpio.rs	/^    PC24, PC25, PC26, PC27, PC28, PC29, PC30, PC31,$/;"	e	enum:Pin
PC25	chips/sam4l/src/gpio.rs	/^    PC24, PC25, PC26, PC27, PC28, PC29, PC30, PC31,$/;"	e	enum:Pin
PC26	chips/sam4l/src/gpio.rs	/^    PC24, PC25, PC26, PC27, PC28, PC29, PC30, PC31,$/;"	e	enum:Pin
PC27	chips/sam4l/src/gpio.rs	/^    PC24, PC25, PC26, PC27, PC28, PC29, PC30, PC31,$/;"	e	enum:Pin
PC28	chips/sam4l/src/gpio.rs	/^    PC24, PC25, PC26, PC27, PC28, PC29, PC30, PC31,$/;"	e	enum:Pin
PC29	chips/sam4l/src/gpio.rs	/^    PC24, PC25, PC26, PC27, PC28, PC29, PC30, PC31,$/;"	e	enum:Pin
PC3	chips/tm4c129x/src/gpio.rs	/^    PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7,$/;"	e	enum:Pin
PC30	chips/sam4l/src/gpio.rs	/^    PC24, PC25, PC26, PC27, PC28, PC29, PC30, PC31,$/;"	e	enum:Pin
PC31	chips/sam4l/src/gpio.rs	/^    PC24, PC25, PC26, PC27, PC28, PC29, PC30, PC31,$/;"	e	enum:Pin
PC4	chips/tm4c129x/src/gpio.rs	/^    PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7,$/;"	e	enum:Pin
PC5	chips/tm4c129x/src/gpio.rs	/^    PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7,$/;"	e	enum:Pin
PC6	chips/tm4c129x/src/gpio.rs	/^    PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7,$/;"	e	enum:Pin
PC7	chips/tm4c129x/src/gpio.rs	/^    PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7,$/;"	e	enum:Pin
PCA9544A	capsules/src/pca9544a.rs	/^impl Driver for PCA9544A<'a> {$/;"	c
PCA9544A	capsules/src/pca9544a.rs	/^impl PCA9544A<'a> {$/;"	c
PCA9544A	capsules/src/pca9544a.rs	/^impl i2c::I2CClient for PCA9544A<'a> {$/;"	c
PCA9544A	capsules/src/pca9544a.rs	/^pub struct PCA9544A<'a> {$/;"	s
PCLKSR	chips/sam4l/src/scif.rs	/^    PCLKSR = 0x14,$/;"	e	enum:Register
PD	chips/tm4c129x/src/gpio.rs	/^pub static mut PD: Port = Port {$/;"	v
PD0	chips/tm4c129x/src/gpio.rs	/^    PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7,$/;"	e	enum:Pin
PD1	chips/tm4c129x/src/gpio.rs	/^    PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7,$/;"	e	enum:Pin
PD2	chips/tm4c129x/src/gpio.rs	/^    PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7,$/;"	e	enum:Pin
PD3	chips/tm4c129x/src/gpio.rs	/^    PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7,$/;"	e	enum:Pin
PD4	chips/tm4c129x/src/gpio.rs	/^    PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7,$/;"	e	enum:Pin
PD5	chips/tm4c129x/src/gpio.rs	/^    PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7,$/;"	e	enum:Pin
PD6	chips/tm4c129x/src/gpio.rs	/^    PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7,$/;"	e	enum:Pin
PD7	chips/tm4c129x/src/gpio.rs	/^    PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7,$/;"	e	enum:Pin
PDCA	chips/sam4l/src/pm.rs	/^    PDCA,$/;"	e	enum:HSBClock
PDCA	chips/sam4l/src/pm.rs	/^    PDCA,$/;"	e	enum:PBBClock
PE	chips/tm4c129x/src/gpio.rs	/^pub static mut PE: Port = Port {$/;"	v
PE0	chips/tm4c129x/src/gpio.rs	/^    PE0, PE1, PE2, PE3, PE4, PE5, PE6, PE7,$/;"	e	enum:Pin
PE1	chips/tm4c129x/src/gpio.rs	/^    PE0, PE1, PE2, PE3, PE4, PE5, PE6, PE7,$/;"	e	enum:Pin
PE2	chips/tm4c129x/src/gpio.rs	/^    PE0, PE1, PE2, PE3, PE4, PE5, PE6, PE7,$/;"	e	enum:Pin
PE3	chips/tm4c129x/src/gpio.rs	/^    PE0, PE1, PE2, PE3, PE4, PE5, PE6, PE7,$/;"	e	enum:Pin
PE4	chips/tm4c129x/src/gpio.rs	/^    PE0, PE1, PE2, PE3, PE4, PE5, PE6, PE7,$/;"	e	enum:Pin
PE5	chips/tm4c129x/src/gpio.rs	/^    PE0, PE1, PE2, PE3, PE4, PE5, PE6, PE7,$/;"	e	enum:Pin
PE6	chips/tm4c129x/src/gpio.rs	/^    PE0, PE1, PE2, PE3, PE4, PE5, PE6, PE7,$/;"	e	enum:Pin
PE7	chips/tm4c129x/src/gpio.rs	/^    PE0, PE1, PE2, PE3, PE4, PE5, PE6, PE7,$/;"	e	enum:Pin
PEVC	chips/sam4l/src/pm.rs	/^    PEVC,$/;"	e	enum:PBBClock
PF	chips/tm4c129x/src/gpio.rs	/^pub static mut PF: Port = Port {$/;"	v
PF0	chips/tm4c129x/src/gpio.rs	/^    PF0, PF1, PF2, PF3, PF4, PF5, PF6, PF7,$/;"	e	enum:Pin
PF1	chips/tm4c129x/src/gpio.rs	/^    PF0, PF1, PF2, PF3, PF4, PF5, PF6, PF7,$/;"	e	enum:Pin
PF2	chips/tm4c129x/src/gpio.rs	/^    PF0, PF1, PF2, PF3, PF4, PF5, PF6, PF7,$/;"	e	enum:Pin
PF3	chips/tm4c129x/src/gpio.rs	/^    PF0, PF1, PF2, PF3, PF4, PF5, PF6, PF7,$/;"	e	enum:Pin
PF4	chips/tm4c129x/src/gpio.rs	/^    PF0, PF1, PF2, PF3, PF4, PF5, PF6, PF7,$/;"	e	enum:Pin
PF5	chips/tm4c129x/src/gpio.rs	/^    PF0, PF1, PF2, PF3, PF4, PF5, PF6, PF7,$/;"	e	enum:Pin
PF6	chips/tm4c129x/src/gpio.rs	/^    PF0, PF1, PF2, PF3, PF4, PF5, PF6, PF7,$/;"	e	enum:Pin
PF7	chips/tm4c129x/src/gpio.rs	/^    PF0, PF1, PF2, PF3, PF4, PF5, PF6, PF7,$/;"	e	enum:Pin
PG	chips/tm4c129x/src/gpio.rs	/^pub static mut PG: Port = Port {$/;"	v
PG0	chips/tm4c129x/src/gpio.rs	/^    PG0, PG1, PG2, PG3, PG4, PG5, PG6, PG7,$/;"	e	enum:Pin
PG1	chips/tm4c129x/src/gpio.rs	/^    PG0, PG1, PG2, PG3, PG4, PG5, PG6, PG7,$/;"	e	enum:Pin
PG2	chips/tm4c129x/src/gpio.rs	/^    PG0, PG1, PG2, PG3, PG4, PG5, PG6, PG7,$/;"	e	enum:Pin
PG3	chips/tm4c129x/src/gpio.rs	/^    PG0, PG1, PG2, PG3, PG4, PG5, PG6, PG7,$/;"	e	enum:Pin
PG4	chips/tm4c129x/src/gpio.rs	/^    PG0, PG1, PG2, PG3, PG4, PG5, PG6, PG7,$/;"	e	enum:Pin
PG5	chips/tm4c129x/src/gpio.rs	/^    PG0, PG1, PG2, PG3, PG4, PG5, PG6, PG7,$/;"	e	enum:Pin
PG6	chips/tm4c129x/src/gpio.rs	/^    PG0, PG1, PG2, PG3, PG4, PG5, PG6, PG7,$/;"	e	enum:Pin
PG7	chips/tm4c129x/src/gpio.rs	/^    PG0, PG1, PG2, PG3, PG4, PG5, PG6, PG7,$/;"	e	enum:Pin
PGPFB	chips/sam4l/src/flashcalw.rs	/^    PGPFB,$/;"	e	enum:FlashCMD
PH	chips/tm4c129x/src/gpio.rs	/^pub static mut PH: Port = Port {$/;"	v
PH0	chips/tm4c129x/src/gpio.rs	/^    PH0, PH1, PH2, PH3, PH4, PH5, PH6, PH7,$/;"	e	enum:Pin
PH1	chips/tm4c129x/src/gpio.rs	/^    PH0, PH1, PH2, PH3, PH4, PH5, PH6, PH7,$/;"	e	enum:Pin
PH2	chips/tm4c129x/src/gpio.rs	/^    PH0, PH1, PH2, PH3, PH4, PH5, PH6, PH7,$/;"	e	enum:Pin
PH3	chips/tm4c129x/src/gpio.rs	/^    PH0, PH1, PH2, PH3, PH4, PH5, PH6, PH7,$/;"	e	enum:Pin
PH4	chips/tm4c129x/src/gpio.rs	/^    PH0, PH1, PH2, PH3, PH4, PH5, PH6, PH7,$/;"	e	enum:Pin
PH5	chips/tm4c129x/src/gpio.rs	/^    PH0, PH1, PH2, PH3, PH4, PH5, PH6, PH7,$/;"	e	enum:Pin
PH6	chips/tm4c129x/src/gpio.rs	/^    PH0, PH1, PH2, PH3, PH4, PH5, PH6, PH7,$/;"	e	enum:Pin
PH7	chips/tm4c129x/src/gpio.rs	/^    PH0, PH1, PH2, PH3, PH4, PH5, PH6, PH7,$/;"	e	enum:Pin
PHY_CC_CCA	capsules/src/rf233_const.rs	/^    PHY_CC_CCA = 0x08,$/;"	e	enum:RF233Register
PHY_ED_LEVEL	capsules/src/rf233_const.rs	/^    PHY_ED_LEVEL = 0x07,$/;"	e	enum:RF233Register
PHY_RSSI	capsules/src/rf233_const.rs	/^    PHY_RSSI = 0x06,$/;"	e	enum:RF233Register
PHY_TX_PWR	capsules/src/rf233_const.rs	/^    PHY_TX_PWR = 0x05,$/;"	e	enum:RF233Register
PHY_TX_TIME	capsules/src/rf233_const.rs	/^    PHY_TX_TIME = 0x3B,$/;"	e	enum:RF233Register
PICOUART	chips/sam4l/src/pm.rs	/^    PICOUART,$/;"	e	enum:PBDClock
PJ	chips/tm4c129x/src/gpio.rs	/^pub static mut PJ: Port = Port {$/;"	v
PJ0	chips/tm4c129x/src/gpio.rs	/^    PJ0, PJ1, PJ2, PJ3, PJ4, PJ5, PJ6, PJ7,$/;"	e	enum:Pin
PJ1	chips/tm4c129x/src/gpio.rs	/^    PJ0, PJ1, PJ2, PJ3, PJ4, PJ5, PJ6, PJ7,$/;"	e	enum:Pin
PJ2	chips/tm4c129x/src/gpio.rs	/^    PJ0, PJ1, PJ2, PJ3, PJ4, PJ5, PJ6, PJ7,$/;"	e	enum:Pin
PJ3	chips/tm4c129x/src/gpio.rs	/^    PJ0, PJ1, PJ2, PJ3, PJ4, PJ5, PJ6, PJ7,$/;"	e	enum:Pin
PJ4	chips/tm4c129x/src/gpio.rs	/^    PJ0, PJ1, PJ2, PJ3, PJ4, PJ5, PJ6, PJ7,$/;"	e	enum:Pin
PJ5	chips/tm4c129x/src/gpio.rs	/^    PJ0, PJ1, PJ2, PJ3, PJ4, PJ5, PJ6, PJ7,$/;"	e	enum:Pin
PJ6	chips/tm4c129x/src/gpio.rs	/^    PJ0, PJ1, PJ2, PJ3, PJ4, PJ5, PJ6, PJ7,$/;"	e	enum:Pin
PJ7	chips/tm4c129x/src/gpio.rs	/^    PJ0, PJ1, PJ2, PJ3, PJ4, PJ5, PJ6, PJ7,$/;"	e	enum:Pin
PK	chips/tm4c129x/src/gpio.rs	/^pub static mut PK: Port = Port {$/;"	v
PK0	chips/tm4c129x/src/gpio.rs	/^    PK0, PK1, PK2, PK3, PK4, PK5, PK6, PK7,$/;"	e	enum:Pin
PK1	chips/tm4c129x/src/gpio.rs	/^    PK0, PK1, PK2, PK3, PK4, PK5, PK6, PK7,$/;"	e	enum:Pin
PK2	chips/tm4c129x/src/gpio.rs	/^    PK0, PK1, PK2, PK3, PK4, PK5, PK6, PK7,$/;"	e	enum:Pin
PK3	chips/tm4c129x/src/gpio.rs	/^    PK0, PK1, PK2, PK3, PK4, PK5, PK6, PK7,$/;"	e	enum:Pin
PK4	chips/tm4c129x/src/gpio.rs	/^    PK0, PK1, PK2, PK3, PK4, PK5, PK6, PK7,$/;"	e	enum:Pin
PK5	chips/tm4c129x/src/gpio.rs	/^    PK0, PK1, PK2, PK3, PK4, PK5, PK6, PK7,$/;"	e	enum:Pin
PK6	chips/tm4c129x/src/gpio.rs	/^    PK0, PK1, PK2, PK3, PK4, PK5, PK6, PK7,$/;"	e	enum:Pin
PK7	chips/tm4c129x/src/gpio.rs	/^    PK0, PK1, PK2, PK3, PK4, PK5, PK6, PK7,$/;"	e	enum:Pin
PL	chips/tm4c129x/src/gpio.rs	/^pub static mut PL: Port = Port {$/;"	v
PL0	chips/tm4c129x/src/gpio.rs	/^    PL0, PL1, PL2, PL3, PL4, PL5, PL6, PL7,$/;"	e	enum:Pin
PL1	chips/tm4c129x/src/gpio.rs	/^    PL0, PL1, PL2, PL3, PL4, PL5, PL6, PL7,$/;"	e	enum:Pin
PL2	chips/tm4c129x/src/gpio.rs	/^    PL0, PL1, PL2, PL3, PL4, PL5, PL6, PL7,$/;"	e	enum:Pin
PL3	chips/tm4c129x/src/gpio.rs	/^    PL0, PL1, PL2, PL3, PL4, PL5, PL6, PL7,$/;"	e	enum:Pin
PL4	chips/tm4c129x/src/gpio.rs	/^    PL0, PL1, PL2, PL3, PL4, PL5, PL6, PL7,$/;"	e	enum:Pin
PL5	chips/tm4c129x/src/gpio.rs	/^    PL0, PL1, PL2, PL3, PL4, PL5, PL6, PL7,$/;"	e	enum:Pin
PL6	chips/tm4c129x/src/gpio.rs	/^    PL0, PL1, PL2, PL3, PL4, PL5, PL6, PL7,$/;"	e	enum:Pin
PL7	chips/tm4c129x/src/gpio.rs	/^    PL0, PL1, PL2, PL3, PL4, PL5, PL6, PL7,$/;"	e	enum:Pin
PLATFORM	boards/arty-e21/Makefile	/^PLATFORM=arty-e21$/;"	m
PLATFORM	boards/ek-tm4c1294xl/Makefile	/^PLATFORM=ek-tm4c1294xl$/;"	m
PLATFORM	boards/hail/Makefile	/^PLATFORM=hail$/;"	m
PLATFORM	boards/hifive1/Makefile	/^PLATFORM=hifive1$/;"	m
PLATFORM	boards/imix/Makefile	/^PLATFORM=imix$/;"	m
PLATFORM	boards/launchxl/Makefile	/^PLATFORM=launchxl$/;"	m
PLATFORM	boards/nordic/nrf51dk/Makefile	/^PLATFORM=nrf51dk$/;"	m
PLATFORM	boards/nordic/nrf52840dk/Makefile	/^PLATFORM=nrf52840dk$/;"	m
PLATFORM	boards/nordic/nrf52dk/Makefile	/^PLATFORM=nrf52dk$/;"	m
PLL	chips/sam4l/src/pm.rs	/^    PLL = 0x20,$/;"	e	enum:ClockMask
PLL	chips/sam4l/src/pm.rs	/^    PLL,$/;"	e	enum:MainClock
PLL0	chips/sam4l/src/scif.rs	/^    PLL0 = 0x24,$/;"	e	enum:Register
PLL0	chips/sam4l/src/scif.rs	/^    PLL0 = 16,$/;"	e	enum:ClockSource
PLL_CF	capsules/src/rf233_const.rs	/^    PLL_CF = 0x1A,$/;"	e	enum:RF233Register
PLL_DCU	capsules/src/rf233_const.rs	/^    PLL_DCU = 0x1B,$/;"	e	enum:RF233Register
PLL_ON	capsules/src/rf233_const.rs	/^    PLL_ON = 0x09,$/;"	e	enum:ExternalState
PLL_ON	capsules/src/rf233_const.rs	/^    PLL_ON = 0x09,$/;"	e	enum:RF233TrxCmd
PM	chips/sam4l/src/pm.rs	/^    PM,$/;"	e	enum:PBCClock
PM	chips/sam4l/src/pm.rs	/^pub static mut PM: PowerManager = PowerManager {$/;"	v
PM	chips/tm4c129x/src/gpio.rs	/^pub static mut PM: Port = Port {$/;"	v
PM0	chips/tm4c129x/src/gpio.rs	/^    PM0, PM1, PM2, PM3, PM4, PM5, PM6, PM7,$/;"	e	enum:Pin
PM1	chips/tm4c129x/src/gpio.rs	/^    PM0, PM1, PM2, PM3, PM4, PM5, PM6, PM7,$/;"	e	enum:Pin
PM2	chips/tm4c129x/src/gpio.rs	/^    PM0, PM1, PM2, PM3, PM4, PM5, PM6, PM7,$/;"	e	enum:Pin
PM3	chips/tm4c129x/src/gpio.rs	/^    PM0, PM1, PM2, PM3, PM4, PM5, PM6, PM7,$/;"	e	enum:Pin
PM4	chips/tm4c129x/src/gpio.rs	/^    PM0, PM1, PM2, PM3, PM4, PM5, PM6, PM7,$/;"	e	enum:Pin
PM5	chips/tm4c129x/src/gpio.rs	/^    PM0, PM1, PM2, PM3, PM4, PM5, PM6, PM7,$/;"	e	enum:Pin
PM6	chips/tm4c129x/src/gpio.rs	/^    PM0, PM1, PM2, PM3, PM4, PM5, PM6, PM7,$/;"	e	enum:Pin
PM7	chips/tm4c129x/src/gpio.rs	/^    PM0, PM1, PM2, PM3, PM4, PM5, PM6, PM7,$/;"	e	enum:Pin
PN	chips/tm4c129x/src/gpio.rs	/^pub static mut PN: Port = Port {$/;"	v
PN0	chips/tm4c129x/src/gpio.rs	/^    PN0, PN1, PN2, PN3, PN4, PN5, PN6, PN7,$/;"	e	enum:Pin
PN1	chips/tm4c129x/src/gpio.rs	/^    PN0, PN1, PN2, PN3, PN4, PN5, PN6, PN7,$/;"	e	enum:Pin
PN2	chips/tm4c129x/src/gpio.rs	/^    PN0, PN1, PN2, PN3, PN4, PN5, PN6, PN7,$/;"	e	enum:Pin
PN3	chips/tm4c129x/src/gpio.rs	/^    PN0, PN1, PN2, PN3, PN4, PN5, PN6, PN7,$/;"	e	enum:Pin
PN4	chips/tm4c129x/src/gpio.rs	/^    PN0, PN1, PN2, PN3, PN4, PN5, PN6, PN7,$/;"	e	enum:Pin
PN5	chips/tm4c129x/src/gpio.rs	/^    PN0, PN1, PN2, PN3, PN4, PN5, PN6, PN7,$/;"	e	enum:Pin
PN6	chips/tm4c129x/src/gpio.rs	/^    PN0, PN1, PN2, PN3, PN4, PN5, PN6, PN7,$/;"	e	enum:Pin
PN7	chips/tm4c129x/src/gpio.rs	/^    PN0, PN1, PN2, PN3, PN4, PN5, PN6, PN7,$/;"	e	enum:Pin
PORT	chips/arty_exx/src/gpio.rs	/^pub static mut PORT: Port = Port {$/;"	v
PORT	chips/cc26x2/src/gpio.rs	/^pub static mut PORT: Port = Port {$/;"	v
PORT	chips/e310x/src/gpio.rs	/^pub static mut PORT: Port = Port {$/;"	v
PORT	chips/nrf5x/src/gpio.rs	/^pub static mut PORT: Port = Port {$/;"	v
PP	capsules/src/mx25r6435f.rs	/^    PP = 0x02,   \/\/ Page Program (write)$/;"	e	enum:Opcodes
PP	chips/tm4c129x/src/gpio.rs	/^pub static mut PP: Port = Port {$/;"	v
PP0	chips/tm4c129x/src/gpio.rs	/^    PP0, PP1, PP2, PP3, PP4, PP5, PP6, PP7,$/;"	e	enum:Pin
PP1	chips/tm4c129x/src/gpio.rs	/^    PP0, PP1, PP2, PP3, PP4, PP5, PP6, PP7,$/;"	e	enum:Pin
PP2	chips/tm4c129x/src/gpio.rs	/^    PP0, PP1, PP2, PP3, PP4, PP5, PP6, PP7,$/;"	e	enum:Pin
PP3	chips/tm4c129x/src/gpio.rs	/^    PP0, PP1, PP2, PP3, PP4, PP5, PP6, PP7,$/;"	e	enum:Pin
PP4	chips/tm4c129x/src/gpio.rs	/^    PP0, PP1, PP2, PP3, PP4, PP5, PP6, PP7,$/;"	e	enum:Pin
PP5	chips/tm4c129x/src/gpio.rs	/^    PP0, PP1, PP2, PP3, PP4, PP5, PP6, PP7,$/;"	e	enum:Pin
PP6	chips/tm4c129x/src/gpio.rs	/^    PP0, PP1, PP2, PP3, PP4, PP5, PP6, PP7,$/;"	e	enum:Pin
PP7	chips/tm4c129x/src/gpio.rs	/^    PP0, PP1, PP2, PP3, PP4, PP5, PP6, PP7,$/;"	e	enum:Pin
PPI	chips/nrf52/src/ppi.rs	/^pub static mut PPI: Ppi = Ppi::new();$/;"	v
PQ	chips/tm4c129x/src/gpio.rs	/^pub static mut PQ: Port = Port {$/;"	v
PQ0	chips/tm4c129x/src/gpio.rs	/^    PQ0, PQ1, PQ2, PQ3, PQ4, PQ5, PQ6, PQ7,$/;"	e	enum:Pin
PQ1	chips/tm4c129x/src/gpio.rs	/^    PQ0, PQ1, PQ2, PQ3, PQ4, PQ5, PQ6, PQ7,$/;"	e	enum:Pin
PQ2	chips/tm4c129x/src/gpio.rs	/^    PQ0, PQ1, PQ2, PQ3, PQ4, PQ5, PQ6, PQ7,$/;"	e	enum:Pin
PQ3	chips/tm4c129x/src/gpio.rs	/^    PQ0, PQ1, PQ2, PQ3, PQ4, PQ5, PQ6, PQ7,$/;"	e	enum:Pin
PQ4	chips/tm4c129x/src/gpio.rs	/^    PQ0, PQ1, PQ2, PQ3, PQ4, PQ5, PQ6, PQ7,$/;"	e	enum:Pin
PQ5	chips/tm4c129x/src/gpio.rs	/^    PQ0, PQ1, PQ2, PQ3, PQ4, PQ5, PQ6, PQ7,$/;"	e	enum:Pin
PQ6	chips/tm4c129x/src/gpio.rs	/^    PQ0, PQ1, PQ2, PQ3, PQ4, PQ5, PQ6, PQ7,$/;"	e	enum:Pin
PQ7	chips/tm4c129x/src/gpio.rs	/^    PQ0, PQ1, PQ2, PQ3, PQ4, PQ5, PQ6, PQ7,$/;"	e	enum:Pin
PRCI	chips/e310x/src/prci.rs	/^pub static mut PRCI: Prci = Prci::new(PRCI_BASE);$/;"	v
PREP_DEEP_SLEEP	capsules/src/rf233_const.rs	/^    PREP_DEEP_SLEEP = 0x10,$/;"	e	enum:ExternalState
PROCESSES	boards/arty-e21/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] =$/;"	v
PROCESSES	boards/ek-tm4c1294xl/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] =$/;"	v
PROCESSES	boards/hail/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] = [$/;"	v
PROCESSES	boards/hifive1/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] =$/;"	v
PROCESSES	boards/imix/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] = [None, None];$/;"	v
PROCESSES	boards/launchxl/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] = [None, None];$/;"	v
PROCESSES	boards/nordic/nrf51dk/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] = [None];$/;"	v
PROCESSES	boards/nordic/nrf52840dk/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] =$/;"	v
PROCESSES	boards/nordic/nrf52dk/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] =$/;"	v
PS0	chips/sam4l/src/bpm.rs	/^    PS0,$/;"	e	enum:PowerScaling
PS1	chips/sam4l/src/bpm.rs	/^    PS1,$/;"	e	enum:PowerScaling
PS2	chips/sam4l/src/bpm.rs	/^    PS2,$/;"	e	enum:PowerScaling
PSYSCTLM	chips/tm4c129x/src/sysctl.rs	/^pub static mut PSYSCTLM: SystemControl = SystemControl {$/;"	v
PWM0	chips/arty_exx/src/pwm.rs	/^pub static mut PWM0: Pwm = Pwm::new(PWM0_BASE);$/;"	v
PWM0	chips/e310x/src/pwm.rs	/^pub static mut PWM0: Pwm = Pwm::new(PWM0_BASE);$/;"	v
PWM1	chips/e310x/src/pwm.rs	/^pub static mut PWM1: Pwm = Pwm::new(PWM1_BASE);$/;"	v
PWM2	chips/e310x/src/pwm.rs	/^pub static mut PWM2: Pwm = Pwm::new(PWM2_BASE);$/;"	v
Package	chips/nrf52/src/ficr.rs	/^enum Package {$/;"	g
Packet	kernel/src/hil/usb.rs	/^    Packet(usize),$/;"	e	enum:BulkInResult
Packet	kernel/src/hil/usb.rs	/^    Packet(usize, bool),$/;"	e	enum:CtrlInResult
Padding	kernel/src/tbfheader.rs	/^    Padding(&'static TbfHeaderV2Base),$/;"	e	enum:TbfHeader
Page	capsules/src/mx25r6435f.rs	/^    type Page = Mx25r6435fSector;$/;"	t	implementation:MX25R6435F
Page	capsules/src/virtual_flash.rs	/^    type Page = F::Page;$/;"	t	implementation:FlashUser
Page	chips/nrf52/src/nvmc.rs	/^    type Page = NrfPage;$/;"	t	implementation:Nvmc
Page	chips/sam4l/src/flashcalw.rs	/^    type Page = Sam4lPage;$/;"	t	implementation:FLASHCALW
Page	kernel/src/hil/flash.rs	/^    type Page: AsMut<[u8]>;$/;"	t	interface:Flash
PanID	capsules/src/net/ieee802154.rs	/^pub type PanID = u16;$/;"	t
PanId	capsules/src/net/thread/tlv.rs	/^    PanId = 1,$/;"	e	enum:NetworkManagementTlvType
PanId	capsules/src/net/thread/tlv.rs	/^    PanId(u16),$/;"	e	enum:NetworkManagementTlv
Panic	kernel/src/process.rs	/^    Panic,$/;"	e	enum:FaultResponse
ParentPriority	capsules/src/net/thread/tlv.rs	/^pub enum ParentPriority {$/;"	g
Parity	kernel/src/hil/uart.rs	/^pub enum Parity {$/;"	g
ParityError	kernel/src/hil/uart.rs	/^    ParityError,$/;"	e	enum:Error
Part	chips/nrf52/src/ficr.rs	/^enum Part {$/;"	g
PayloadIE	capsules/src/net/ieee802154.rs	/^impl Default for PayloadIE<'a> {$/;"	c
PayloadIE	capsules/src/net/ieee802154.rs	/^impl PayloadIE<'a> {$/;"	c
PayloadIE	capsules/src/net/ieee802154.rs	/^pub enum PayloadIE<'a> {$/;"	g
PendingOperationalDataset	capsules/src/net/thread/tlv.rs	/^    PendingOperationalDataset = 25,$/;"	e	enum:TlvType
PendingOperationalDataset	capsules/src/net/thread/tlv.rs	/^    PendingOperationalDataset(&'a [u8]),$/;"	e	enum:Tlv
PendingTimestamp	capsules/src/net/thread/tlv.rs	/^    PendingTimestamp = 51,$/;"	e	enum:NetworkManagementTlvType
PendingTimestamp	capsules/src/net/thread/tlv.rs	/^    PendingTimestamp {$/;"	e	enum:NetworkManagementTlv
Peripheral	chips/sam4l/src/spi.rs	/^pub enum Peripheral {$/;"	g
Peripheral0	chips/sam4l/src/spi.rs	/^    Peripheral0,$/;"	e	enum:Peripheral
Peripheral1	chips/sam4l/src/spi.rs	/^    Peripheral1,$/;"	e	enum:Peripheral
Peripheral2	chips/sam4l/src/spi.rs	/^    Peripheral2,$/;"	e	enum:Peripheral
Peripheral3	chips/sam4l/src/spi.rs	/^    Peripheral3,$/;"	e	enum:Peripheral
PeripheralBaseDeclaration	tools/svd2regs.py	/^class PeripheralBaseDeclaration(CodeBlock):$/;"	c
PeripheralFunction	chips/sam4l/src/gpio.rs	/^pub enum PeripheralFunction {$/;"	g
PeripheralFunction	chips/tm4c129x/src/gpio.rs	/^pub enum PeripheralFunction {$/;"	g
PeripheralManagement	kernel/src/common/peripherals.rs	/^pub trait PeripheralManagement<C>$/;"	i
PeripheralManager	kernel/src/common/peripherals.rs	/^impl<H, C> Drop for PeripheralManager<'a, H, C>$/;"	c
PeripheralManager	kernel/src/common/peripherals.rs	/^impl<H, C> PeripheralManager<'a, H, C>$/;"	c
PeripheralManager	kernel/src/common/peripherals.rs	/^pub struct PeripheralManager<'a, H, C>$/;"	s
PeripheralStruct	tools/svd2regs.py	/^class PeripheralStruct(CodeBlock):$/;"	c
PeripheralStructField	tools/svd2regs.py	/^class PeripheralStructField(CodeBlock):$/;"	c
Peripherals	chips/cc26x2/src/prcm.rs	/^    Peripherals,$/;"	e	enum:PowerDomain
Permissions	kernel/src/platform/mpu.rs	/^pub enum Permissions {$/;"	g
Pin	chips/sam4l/src/gpio.rs	/^pub enum Pin {$/;"	g
Pin	chips/tm4c129x/src/gpio.rs	/^pub enum Pin {$/;"	g
Pin	kernel/src/hil/gpio.rs	/^pub trait Pin {$/;"	i
PinCtl	kernel/src/hil/gpio.rs	/^pub trait PinCtl {$/;"	i
PinState	capsules/src/mcp230xx.rs	/^enum PinState {$/;"	g
Pinmux	chips/nrf5x/src/pinmux.rs	/^impl Into<u32> for Pinmux {$/;"	c
Pinmux	chips/nrf5x/src/pinmux.rs	/^impl Pinmux {$/;"	c
Pinmux	chips/nrf5x/src/pinmux.rs	/^pub struct Pinmux(u32);$/;"	s
PioscAt16MHz	chips/tm4c129x/src/sysctl.rs	/^    PioscAt16MHz,$/;"	e	enum:SystemClockSource
PlBfZcomp	capsules/src/fxos8700cq.rs	/^    PlBfZcomp = 0x13,$/;"	e	enum:Registers
PlCfg	capsules/src/fxos8700cq.rs	/^    PlCfg = 0x11,$/;"	e	enum:Registers
PlCount	capsules/src/fxos8700cq.rs	/^    PlCount = 0x12,$/;"	e	enum:Registers
PlStatus	capsules/src/fxos8700cq.rs	/^    PlStatus = 0x10,$/;"	e	enum:Registers
PlThsReg	capsules/src/fxos8700cq.rs	/^    PlThsReg = 0x14,$/;"	e	enum:Registers
Platform	boards/launchxl/src/main.rs	/^impl kernel::Platform for Platform {$/;"	c
Platform	boards/launchxl/src/main.rs	/^pub struct Platform {$/;"	s
Platform	boards/nordic/nrf51dk/src/main.rs	/^impl kernel::Platform for Platform {$/;"	c
Platform	boards/nordic/nrf51dk/src/main.rs	/^pub struct Platform {$/;"	s
Platform	boards/nordic/nrf52dk_base/src/lib.rs	/^impl kernel::Platform for Platform {$/;"	c
Platform	boards/nordic/nrf52dk_base/src/lib.rs	/^pub struct Platform {$/;"	s
Platform	kernel/src/platform/mod.rs	/^pub trait Platform {$/;"	i
PlicRegisters	arch/riscv32i/src/plic.rs	/^struct PlicRegisters {$/;"	s
PllExternalOscillatorAt48MHz	chips/sam4l/src/pm.rs	/^    PllExternalOscillatorAt48MHz {$/;"	e	enum:SystemClockSource
PllMoscAt120MHz	chips/tm4c129x/src/sysctl.rs	/^    PllMoscAt120MHz,$/;"	e	enum:SystemClockSource
PllPioscAt120MHz	chips/tm4c129x/src/sysctl.rs	/^    PllPioscAt120MHz,$/;"	e	enum:SystemClockSource
PmRegisters	chips/sam4l/src/pm.rs	/^struct PmRegisters {$/;"	s
Port	chips/arty_exx/src/gpio.rs	/^impl Index<usize> for Port {$/;"	c
Port	chips/arty_exx/src/gpio.rs	/^impl IndexMut<usize> for Port {$/;"	c
Port	chips/arty_exx/src/gpio.rs	/^pub struct Port {$/;"	s
Port	chips/cc26x2/src/gpio.rs	/^impl Index<usize> for Port {$/;"	c
Port	chips/cc26x2/src/gpio.rs	/^impl IndexMut<usize> for Port {$/;"	c
Port	chips/cc26x2/src/gpio.rs	/^impl Port {$/;"	c
Port	chips/cc26x2/src/gpio.rs	/^pub struct Port {$/;"	s
Port	chips/e310x/src/gpio.rs	/^impl Index<usize> for Port {$/;"	c
Port	chips/e310x/src/gpio.rs	/^impl IndexMut<usize> for Port {$/;"	c
Port	chips/e310x/src/gpio.rs	/^pub struct Port {$/;"	s
Port	chips/nrf5x/src/gpio.rs	/^impl Index<usize> for Port {$/;"	c
Port	chips/nrf5x/src/gpio.rs	/^impl IndexMut<usize> for Port {$/;"	c
Port	chips/nrf5x/src/gpio.rs	/^impl Port {$/;"	c
Port	chips/nrf5x/src/gpio.rs	/^pub struct Port {$/;"	s
Port	chips/sam4l/src/gpio.rs	/^impl Index<usize> for Port {$/;"	c
Port	chips/sam4l/src/gpio.rs	/^impl IndexMut<usize> for Port {$/;"	c
Port	chips/sam4l/src/gpio.rs	/^impl Port {$/;"	c
Port	chips/sam4l/src/gpio.rs	/^pub struct Port {$/;"	s
Port	chips/tm4c129x/src/gpio.rs	/^impl Index<usize> for Port {$/;"	c
Port	chips/tm4c129x/src/gpio.rs	/^impl IndexMut<usize> for Port {$/;"	c
Port	chips/tm4c129x/src/gpio.rs	/^impl Port {$/;"	c
Port	chips/tm4c129x/src/gpio.rs	/^pub struct Port {$/;"	s
Port	kernel/src/hil/gpio_async.rs	/^pub trait Port {$/;"	i
Positive3dBM	chips/nrf5x/src/constants.rs	/^    Positive3dBM = 0x03,$/;"	e	enum:TxPower
Positive4dBM	chips/nrf5x/src/constants.rs	/^    Positive4dBM = 0x04,$/;"	e	enum:TxPower
Power	chips/cc26x2/src/prcm.rs	/^impl Power {$/;"	c
Power	chips/cc26x2/src/prcm.rs	/^pub struct Power(());$/;"	s
PowerClient	kernel/src/hil/radio.rs	/^pub trait PowerClient {$/;"	i
PowerDomain	chips/cc26x2/src/prcm.rs	/^impl From<u32> for PowerDomain {$/;"	c
PowerDomain	chips/cc26x2/src/prcm.rs	/^pub enum PowerDomain {$/;"	g
PowerManager	chips/sam4l/src/pm.rs	/^impl PowerManager {$/;"	c
PowerManager	chips/sam4l/src/pm.rs	/^pub struct PowerManager {$/;"	s
PowerOfTwo	kernel/src/common/math.rs	/^impl PowerOfTwo {$/;"	c
PowerOfTwo	kernel/src/common/math.rs	/^pub struct PowerOfTwo(u32);$/;"	s
PowerScaling	chips/sam4l/src/bpm.rs	/^pub enum PowerScaling {$/;"	g
Ppi	chips/nrf52/src/ppi.rs	/^impl Ppi {$/;"	c
Ppi	chips/nrf52/src/ppi.rs	/^pub struct Ppi {$/;"	s
PpiRegisters	chips/nrf52/src/ppi.rs	/^struct PpiRegisters {$/;"	s
Prci	chips/sifive/src/prci.rs	/^impl Prci {$/;"	c
Prci	chips/sifive/src/prci.rs	/^pub struct Prci {$/;"	s
PrciRegisters	chips/sifive/src/prci.rs	/^pub struct PrciRegisters {$/;"	s
PrcmRegisters	chips/cc26x2/src/prcm.rs	/^struct PrcmRegisters {$/;"	s
Precalculated	arch/riscv32i/target/debug/.fingerprint/bare-metal-24acc5d3590b7513/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0./;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/bare-metal-7dd6462cd7700cd7/lib-bare_metal-7dd6462cd7700cd7.json	/^{"rustc":10377385455325587324,"features":"[]","target":10318145944003877215,"profile":1187018370/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/bit_field-56ae9b63ca7874f1/lib-bit_field-56ae9b63ca7874f1.json	/^{"rustc":10377385455325587324,"features":"[]","target":6212214415640514931,"profile":11870183705/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/riscvregs-0c285ab8bbe41fa7/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"db/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/riscvregs-126b22abd70e245c/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0e/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/riscvregs-7b5528c14e2c7055/build-script-build_script_build-7b5528c14e2c7055.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/riscvregs-d6ebf6a6021a8976/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"78/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/riscvregs-e220008a48c83b01/build-script-build_script_build-e220008a48c83b01.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/riscvregs-e3787b41749bb5b0/build-script-build_script_build-e3787b41749bb5b0.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	s	object:local.0
Precalculated	arch/riscv32i/target/debug/.fingerprint/semver-parser-1d01b4b0efb84ec1/lib-semver_parser-1d01b4b0efb84ec1.json	/^{"rustc":10377385455325587324,"features":"[]","target":11042536386261824010,"profile":1187018370/;"	s	object:local.0
Precalculated	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	s	object:local.0
Precalculated	boards/hifive1/target/debug/.fingerprint/riscvregs-8a1ccaee318cf981/build-script-build_script_build-8a1ccaee318cf981.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	s	object:local.0
Precalculated	boards/hifive1/target/debug/.fingerprint/riscvregs-e5cf2a660cb8088f/build-script-build_script_build-e5cf2a660cb8088f.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	s	object:local.0
Precalculated	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	s	object:local.0
Precalculated	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	s	object:local.0
Precalculated	boards/hifive1/target/debug/.fingerprint/semver-parser-0cbc1426a8cfeede/lib-semver_parser-0cbc1426a8cfeede.json	/^{"rustc":4168008693276420879,"features":"[]","target":3650675185119913205,"profile":118386650091/;"	s	object:local.0
Precalculated	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-3818320f62d4b526/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	s	object:local.0
Precalculated	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	s	object:local.0
Precalculated	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	s	object:local.0
Precalculated	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-5a31f60d1aed50ae/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	s	object:local.0
Precalculated	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	object:local.0
Precalculated	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s	object:local.0
Precalculated	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-90db6ed0e5b8c3d4/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	s	object:local.0
Precalculated	kernel/target/debug/.fingerprint/tock-cells-816571e4fa975f6b/doc-lib-tock_cells-816571e4fa975f6b.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":3062756892/;"	s	object:local.0
Precalculated	kernel/target/debug/.fingerprint/tock-registers-e7eec879e9fa92db/doc-lib-tock_registers-e7eec879e9fa92db.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":30627568924/;"	s	object:local.0
Prefix	capsules/src/net/thread/tlv.rs	/^    Prefix = 1,$/;"	e	enum:NetworkDataTlvType
Prefix	capsules/src/net/thread/tlv.rs	/^    Prefix {$/;"	e	enum:NetworkDataTlv
PrefixSubTlv	capsules/src/net/thread/tlv.rs	/^impl PrefixSubTlv<'a> {$/;"	c
PrefixSubTlv	capsules/src/net/thread/tlv.rs	/^pub enum PrefixSubTlv<'a> {$/;"	g
PrefixSubTlvType	capsules/src/net/thread/tlv.rs	/^impl From<u8> for PrefixSubTlvType {$/;"	c
PrefixSubTlvType	capsules/src/net/thread/tlv.rs	/^impl<'a, 'b> From<&'a PrefixSubTlv<'b>> for PrefixSubTlvType {$/;"	c
PrefixSubTlvType	capsules/src/net/thread/tlv.rs	/^pub enum PrefixSubTlvType {$/;"	g
PressOutH	capsules/src/lps25hb.rs	/^    PressOutH = 0x2a,$/;"	e	enum:Registers
PressOutL	capsules/src/lps25hb.rs	/^    PressOutL = 0x29,$/;"	e	enum:Registers
PressOutXl	capsules/src/lps25hb.rs	/^    PressOutXl = 0x28,$/;"	e	enum:Registers
Pressed	capsules/src/button.rs	/^    Pressed = 1,$/;"	e	enum:ButtonState
Prf	capsules/src/net/thread/tlv.rs	/^    Prf = 0b1100_0000_0000_0000, \/\/ Preference$/;"	e	enum:BorderRouterTlvValueBit
Private	kernel/src/mem.rs	/^pub struct Private;$/;"	s
Process	kernel/src/process.rs	/^impl<C: 'static + Chip> Process<'a, C> {$/;"	c
Process	kernel/src/process.rs	/^impl<C: Chip> ProcessType for Process<'a, C> {$/;"	c
Process	kernel/src/process.rs	/^pub struct Process<'a, C: 'static + Chip> {$/;"	s
ProcessConsole	capsules/src/process_console.rs	/^impl<U: UART, C: ProcessManagementCapability> Client for ProcessConsole<'a, U, C> {$/;"	c
ProcessConsole	capsules/src/process_console.rs	/^impl<U: UART, C: ProcessManagementCapability> ProcessConsole<'a, U, C> {$/;"	c
ProcessConsole	capsules/src/process_console.rs	/^pub struct ProcessConsole<'a, U: UART, C: ProcessManagementCapability> {$/;"	s
ProcessConsoleCapability	boards/hail/src/main.rs	/^    pub struct ProcessConsoleCapability;$/;"	s	function:reset_handler
ProcessConsoleCapability	boards/hail/src/main.rs	/^    unsafe impl capabilities::ProcessManagementCapability for ProcessConsoleCapability {}$/;"	c	function:reset_handler
ProcessConsoleComponent	boards/imix/src/components/process_console.rs	/^impl Component for ProcessConsoleComponent {$/;"	c
ProcessConsoleComponent	boards/imix/src/components/process_console.rs	/^impl ProcessConsoleComponent {$/;"	c
ProcessConsoleComponent	boards/imix/src/components/process_console.rs	/^pub struct ProcessConsoleComponent {$/;"	s
ProcessDebug	kernel/src/process.rs	/^struct ProcessDebug {$/;"	s
ProcessManagementCapability	kernel/src/capabilities.rs	/^pub unsafe trait ProcessManagementCapability {}$/;"	i
ProcessType	kernel/src/process.rs	/^pub trait ProcessType {$/;"	i
ProtocolState	capsules/src/tmp006.rs	/^enum ProtocolState {$/;"	g
Pskc	capsules/src/net/thread/tlv.rs	/^    Pskc = 4,$/;"	e	enum:NetworkManagementTlvType
Pskc	capsules/src/net/thread/tlv.rs	/^    Pskc([u8; 16]),                     \/\/ PSKc max length 16 bytes.$/;"	e	enum:NetworkManagementTlv
PullDown	kernel/src/hil/gpio.rs	/^    PullDown,$/;"	e	enum:InputMode
PullNone	kernel/src/hil/gpio.rs	/^    PullNone,$/;"	e	enum:InputMode
PullUp	kernel/src/hil/gpio.rs	/^    PullUp,$/;"	e	enum:InputMode
PulseCfg	capsules/src/fxos8700cq.rs	/^    PulseCfg = 0x21,$/;"	e	enum:Registers
PulseLtcy	capsules/src/fxos8700cq.rs	/^    PulseLtcy = 0x27,$/;"	e	enum:Registers
PulseSrc	capsules/src/fxos8700cq.rs	/^    PulseSrc = 0x22,$/;"	e	enum:Registers
PulseThsx	capsules/src/fxos8700cq.rs	/^    PulseThsx = 0x23,$/;"	e	enum:Registers
PulseThsy	capsules/src/fxos8700cq.rs	/^    PulseThsy = 0x24,$/;"	e	enum:Registers
PulseThsz	capsules/src/fxos8700cq.rs	/^    PulseThsz = 0x25,$/;"	e	enum:Registers
PulseTmlt	capsules/src/fxos8700cq.rs	/^    PulseTmlt = 0x26,$/;"	e	enum:Registers
PulseWind	capsules/src/fxos8700cq.rs	/^    PulseWind = 0x28,$/;"	e	enum:Registers
Pwm	chips/sifive/src/pwm.rs	/^impl Pwm {$/;"	c
Pwm	chips/sifive/src/pwm.rs	/^pub struct Pwm {$/;"	s
PwmRegisters	chips/sifive/src/pwm.rs	/^pub struct PwmRegisters {$/;"	s
QF	chips/nrf52/src/ficr.rs	/^    QF = 0x2000,$/;"	e	enum:Package
QPR	chips/sam4l/src/flashcalw.rs	/^    QPR,$/;"	e	enum:FlashCMD
QPRUP	chips/sam4l/src/flashcalw.rs	/^    QPRUP,$/;"	e	enum:FlashCMD
Queue	kernel/src/common/queue.rs	/^pub trait Queue<T> {$/;"	i
R	capsules/src/net/thread/tlv.rs	/^    R = 0b0000_0010_0000_0000,   \/\/ Default$/;"	e	enum:BorderRouterTlvValueBit
R	capsules/src/net/thread/tlv.rs	/^    R = 0b0010_0000, \/\/ Thread 1.x Routers are enabled.$/;"	e	enum:SecurityPolicy
R1_Status	capsules/src/sdcard.rs	/^    R1_Status,         \/\/         Status response, single byte$/;"	e	enum:SDResponse
R2_ExtendedStatus	capsules/src/sdcard.rs	/^    R2_ExtendedStatus, \/\/ Extended response, two bytes, unused in practice$/;"	e	enum:SDResponse
R3_OCR	capsules/src/sdcard.rs	/^    R3_OCR,            \/\/            OCR response, status + four bytes$/;"	e	enum:SDResponse
R7_CheckVoltage	capsules/src/sdcard.rs	/^    R7_CheckVoltage,   \/\/   Check voltage response, status + four bytes$/;"	e	enum:SDResponse
RADIO	chips/nrf51/src/radio.rs	/^pub static mut RADIO: Radio = Radio::new();$/;"	v
RADIO	chips/nrf52/src/radio.rs	/^pub static mut RADIO: Radio = Radio::new();$/;"	v
RADIO_BUF	boards/imix/src/components/radio.rs	/^static mut RADIO_BUF: [u8; radio::MAX_BUF_SIZE] = [0x00; radio::MAX_BUF_SIZE];$/;"	v
RC	chips/nrf51/src/clock.rs	/^    RC = 0,$/;"	e	enum:HighClockSource
RC	chips/nrf51/src/clock.rs	/^    RC = 0,$/;"	e	enum:LowClockSource
RC	chips/nrf52/src/clock.rs	/^    RC = 0,$/;"	e	enum:HighClockSource
RC	chips/nrf52/src/clock.rs	/^    RC = 0,$/;"	e	enum:LowClockSource
RC1M	chips/sam4l/src/pm.rs	/^    RC1M = 0x02,$/;"	e	enum:ClockMask
RC1M	chips/sam4l/src/pm.rs	/^    RC1M,$/;"	e	enum:MainClock
RC1M	chips/sam4l/src/pm.rs	/^    RC1M,$/;"	e	enum:SystemClockSource
RC1M	chips/sam4l/src/scif.rs	/^    RC1M = 6,$/;"	e	enum:ClockSource
RC32K	chips/sam4l/src/bpm.rs	/^    RC32K = 1,$/;"	e	enum:CK32Source
RC32K	chips/sam4l/src/scif.rs	/^    RC32K = 13,$/;"	e	enum:ClockSource
RC80M	chips/sam4l/src/pm.rs	/^    RC80M = 0x40,$/;"	e	enum:ClockMask
RC80M	chips/sam4l/src/pm.rs	/^    RC80M,$/;"	e	enum:MainClock
RC80M	chips/sam4l/src/pm.rs	/^    RC80M,$/;"	e	enum:SystemClockSource
RC80M	chips/sam4l/src/scif.rs	/^    RC80M = 4,$/;"	e	enum:ClockSource
RC80MCR	chips/sam4l/src/scif.rs	/^    RC80MCR = 0x50,$/;"	e	enum:Register
RCFAST	chips/sam4l/src/pm.rs	/^    RCFAST = 0x04,$/;"	e	enum:ClockMask
RCFAST	chips/sam4l/src/pm.rs	/^    RCFAST {$/;"	e	enum:SystemClockSource
RCFAST	chips/sam4l/src/pm.rs	/^    RCFAST,$/;"	e	enum:MainClock
RCFAST	chips/sam4l/src/scif.rs	/^    RCFAST = 5,$/;"	e	enum:ClockSource
RCFASTCFG	chips/sam4l/src/scif.rs	/^    RCFASTCFG = 0x48,$/;"	e	enum:Register
RCGCGPIO	chips/tm4c129x/src/sysctl.rs	/^pub enum RCGCGPIO {$/;"	g
RCGCTIMER	chips/tm4c129x/src/sysctl.rs	/^pub enum RCGCTIMER {$/;"	g
RCGCUART	chips/tm4c129x/src/sysctl.rs	/^pub enum RCGCUART {$/;"	g
RCSYS	chips/sam4l/src/pm.rs	/^    RCSYS = 0x01,$/;"	e	enum:ClockMask
RCSYS	chips/sam4l/src/pm.rs	/^    RCSYS,$/;"	e	enum:MainClock
RCSYS	chips/sam4l/src/scif.rs	/^    RCSYS = 0,$/;"	e	enum:ClockSource
RDID	capsules/src/mx25r6435f.rs	/^    RDID = 0x9f, \/\/ Read Identification$/;"	e	enum:Opcodes
RDSR	capsules/src/mx25r6435f.rs	/^    RDSR = 0x05, \/\/ Read Status Register$/;"	e	enum:Opcodes
READ	capsules/src/mx25r6435f.rs	/^    READ = 0x03, \/\/ Normal Read$/;"	e	enum:Opcodes
READY	capsules/src/rf233.rs	/^    READY,$/;"	e	enum:InternalState
READ_BUF	capsules/src/console.rs	/^pub static mut READ_BUF: [u8; 64] = [0; 64];$/;"	v
READ_BUF	capsules/src/nrf51822_serialization.rs	/^pub static mut READ_BUF: [u8; 600] = [0; 600];$/;"	v
READ_BUF	capsules/src/process_console.rs	/^pub static mut READ_BUF: [u8; 4] = [0; 4];$/;"	v
REGISTER_READ	capsules/src/rf233_const.rs	/^    REGISTER_READ = 0x80,$/;"	e	enum:RF233BusCommand
REGISTER_WRITE	capsules/src/rf233_const.rs	/^    REGISTER_WRITE = 0xC0,$/;"	e	enum:RF233BusCommand
RESERVED1	chips/sam4l/src/scif.rs	/^    RESERVED1 = 14,$/;"	e	enum:ClockSource
RF233	boards/imix/src/components/rf233.rs	/^    type Output = &'static RF233<'static, VirtualSpiMasterDevice<'static, sam4l::spi::SpiHw>>;$/;"	v	implementation:RF233Component
RF233	capsules/src/rf233.rs	/^impl<S: spi::SpiMasterDevice> RF233<'a, S> {$/;"	c
RF233	capsules/src/rf233.rs	/^impl<S: spi::SpiMasterDevice> gpio::Client for RF233<'a, S> {$/;"	c
RF233	capsules/src/rf233.rs	/^impl<S: spi::SpiMasterDevice> radio::Radio for RF233<'a, S> {}$/;"	c
RF233	capsules/src/rf233.rs	/^impl<S: spi::SpiMasterDevice> radio::RadioConfig for RF233<'a, S> {$/;"	c
RF233	capsules/src/rf233.rs	/^impl<S: spi::SpiMasterDevice> radio::RadioData for RF233<'a, S> {$/;"	c
RF233	capsules/src/rf233.rs	/^impl<S: spi::SpiMasterDevice> spi::SpiMasterClient for RF233<'a, S> {$/;"	c
RF233	capsules/src/rf233.rs	/^pub struct RF233<'a, S: spi::SpiMasterDevice> {$/;"	s
RF233BusCommand	capsules/src/rf233_const.rs	/^pub enum RF233BusCommand {$/;"	g
RF233Component	boards/imix/src/components/rf233.rs	/^impl Component for RF233Component {$/;"	c
RF233Component	boards/imix/src/components/rf233.rs	/^impl RF233Component {$/;"	c
RF233Component	boards/imix/src/components/rf233.rs	/^pub struct RF233Component {$/;"	s
RF233Device	boards/imix/src/components/radio.rs	/^type RF233Device =$/;"	t
RF233Register	capsules/src/rf233_const.rs	/^pub enum RF233Register {$/;"	g
RF233TrxCmd	capsules/src/rf233_const.rs	/^pub enum RF233TrxCmd {$/;"	g
RF233_BUF	boards/imix/src/components/udp_6lowpan.rs	/^static mut RF233_BUF: [u8; radio::MAX_BUF_SIZE] = [0x00; radio::MAX_BUF_SIZE];$/;"	v
RF233_BUF	boards/imix/src/icmp_lowpan_test.rs	/^pub static mut RF233_BUF: [u8; radio::MAX_BUF_SIZE] = [0 as u8; radio::MAX_BUF_SIZE];$/;"	v
RF233_BUF	boards/imix/src/ipv6_lowpan_test.rs	/^pub static mut RF233_BUF: [u8; radio::MAX_BUF_SIZE] = [0 as u8; radio::MAX_BUF_SIZE];$/;"	v
RF233_BUF	boards/imix/src/main.rs	/^static mut RF233_BUF: [u8; radio::MAX_BUF_SIZE] = [0x00; radio::MAX_BUF_SIZE];$/;"	v
RF233_BUF	boards/imix/src/sixlowpan_dummy.rs	/^pub static mut RF233_BUF: [u8; radio::MAX_BUF_SIZE] = [0 as u8; radio::MAX_BUF_SIZE];$/;"	v
RF233_BUF	boards/imix/src/udp_lowpan_test.rs	/^pub static mut RF233_BUF: [u8; radio::MAX_BUF_SIZE] = [0 as u8; radio::MAX_BUF_SIZE];$/;"	v
RF233_REG_READ	boards/imix/src/main.rs	/^static mut RF233_REG_READ: [u8; 2] = [0x00; 2];$/;"	v
RF233_REG_WRITE	boards/imix/src/main.rs	/^static mut RF233_REG_WRITE: [u8; 2] = [0x00; 2];$/;"	v
RF233_RX_BUF	boards/imix/src/components/radio.rs	/^static mut RF233_RX_BUF: [u8; radio::MAX_BUF_SIZE] = [0x00; radio::MAX_BUF_SIZE];$/;"	v
RFC	chips/cc26x2/src/prcm.rs	/^    RFC,$/;"	e	enum:PowerDomain
RTC	chips/cc26x2/src/rtc.rs	/^pub static mut RTC: Rtc = Rtc::new();$/;"	v
RTC	chips/e310x/src/rtc.rs	/^pub static mut RTC: Rtc = Rtc::new(RTC_BASE);$/;"	v
RTC	chips/nrf5x/src/rtc.rs	/^pub static mut RTC: Rtc = Rtc {$/;"	v
RUN	chips/nrf51/src/clock.rs	/^    RUN = (1 << 16),$/;"	e	enum:ClockRunning
RUSTFLAGS_FOR_CARGO_LINKING	boards/hifive1/Makefile	/^RUSTFLAGS_FOR_CARGO_LINKING ?= -C link-arg=-Tlayout.ld -C linker=${TOOLCHAIN_PATH}\/riscv32-unkn/;"	m
RUST_KEYWORDS	tools/svd2regs.py	/^RUST_KEYWORDS = ["mod"]$/;"	v
RX	capsules/src/rf233.rs	/^    RX,$/;"	e	enum:InternalState
RXBUFFER	capsules/src/fm25cl.rs	/^pub static mut RXBUFFER: [u8; 512] = [0; 512];$/;"	v
RXBUFFER	capsules/src/mx25r6435f.rs	/^pub static mut RXBUFFER: [u8; PAGE_SIZE as usize + 4] = [0; PAGE_SIZE as usize + 4];$/;"	v
RXBUFFER	capsules/src/sdcard.rs	/^pub static mut RXBUFFER: [u8; 515] = [0; 515];$/;"	v
RX_AACK_ON	capsules/src/rf233_const.rs	/^    RX_AACK_ON = 0x16,$/;"	e	enum:ExternalState
RX_AACK_ON	capsules/src/rf233_const.rs	/^    RX_AACK_ON = 0x16,$/;"	e	enum:RF233TrxCmd
RX_BUF	capsules/src/virtual_uart.rs	/^pub static mut RX_BUF: [u8; RX_BUF_LEN] = [0; RX_BUF_LEN];$/;"	v
RX_CTRL	capsules/src/rf233_const.rs	/^    RX_CTRL = 0x0A,$/;"	e	enum:RF233Register
RX_ENABLING_RECEPTION	capsules/src/rf233.rs	/^    RX_ENABLING_RECEPTION, \/\/ Re-enabling reception$/;"	e	enum:InternalState
RX_ON	capsules/src/rf233_const.rs	/^    RX_ON = 0x06,$/;"	e	enum:ExternalState
RX_ON	capsules/src/rf233_const.rs	/^    RX_ON = 0x06,$/;"	e	enum:RF233TrxCmd
RX_READING_FRAME	capsules/src/rf233.rs	/^    RX_READING_FRAME,      \/\/ Reading the packet out of the radio$/;"	e	enum:InternalState
RX_READING_FRAME_DONE	capsules/src/rf233.rs	/^    RX_READING_FRAME_DONE, \/\/ Now read a register to verify FCS$/;"	e	enum:InternalState
RX_READING_FRAME_FCS_DONE	capsules/src/rf233.rs	/^    RX_READING_FRAME_FCS_DONE,$/;"	e	enum:InternalState
RX_READING_FRAME_LEN	capsules/src/rf233.rs	/^    RX_READING_FRAME_LEN, \/\/ We've read the length of the frame$/;"	e	enum:InternalState
RX_READING_FRAME_LEN_DONE	capsules/src/rf233.rs	/^    RX_READING_FRAME_LEN_DONE,$/;"	e	enum:InternalState
RX_READY_TO_READ	capsules/src/rf233.rs	/^    RX_READY_TO_READ,     \/\/ Reception disabled, handle interrupt and start reading$/;"	e	enum:InternalState
RX_START_READING	capsules/src/rf233.rs	/^    RX_START_READING,     \/\/ Starting to read a packet out of the radio$/;"	e	enum:InternalState
RX_STATE_BUF	boards/imix/src/icmp_lowpan_test.rs	/^static mut RX_STATE_BUF: [u8; 1280] = [0x0; 1280];$/;"	v
RX_STATE_BUF	boards/imix/src/ipv6_lowpan_test.rs	/^static mut RX_STATE_BUF: [u8; 1280] = [0x0; 1280];$/;"	v
RX_STATE_BUF	boards/imix/src/udp_lowpan_test.rs	/^static mut RX_STATE_BUF: [u8; 1280] = [0x0; 1280];$/;"	v
RX_SYN	capsules/src/rf233_const.rs	/^    RX_SYN = 0x15,$/;"	e	enum:RF233Register
RX_TURNING_OFF	capsules/src/rf233.rs	/^    RX_TURNING_OFF,       \/\/ Disabling packet reception$/;"	e	enum:InternalState
Radio	chips/nrf51/src/radio.rs	/^impl Radio {$/;"	c
Radio	chips/nrf51/src/radio.rs	/^impl ble_advertising::BleAdvertisementDriver for Radio {$/;"	c
Radio	chips/nrf51/src/radio.rs	/^impl ble_advertising::BleConfig for Radio {$/;"	c
Radio	chips/nrf51/src/radio.rs	/^pub struct Radio {$/;"	s
Radio	chips/nrf52/src/radio.rs	/^impl Radio {$/;"	c
Radio	chips/nrf52/src/radio.rs	/^impl ble_advertising::BleAdvertisementDriver for Radio {$/;"	c
Radio	chips/nrf52/src/radio.rs	/^impl ble_advertising::BleConfig for Radio {$/;"	c
Radio	chips/nrf52/src/radio.rs	/^pub struct Radio {$/;"	s
Radio	kernel/src/hil/radio.rs	/^pub trait Radio: RadioConfig + RadioData {}$/;"	i
RadioChannel	kernel/src/hil/ble_advertising.rs	/^impl RadioChannel {$/;"	c
RadioChannel	kernel/src/hil/ble_advertising.rs	/^pub enum RadioChannel {$/;"	g
RadioComponent	boards/imix/src/components/radio.rs	/^impl Component for RadioComponent {$/;"	c
RadioComponent	boards/imix/src/components/radio.rs	/^impl RadioComponent {$/;"	c
RadioComponent	boards/imix/src/components/radio.rs	/^pub struct RadioComponent {$/;"	s
RadioConfig	kernel/src/hil/radio.rs	/^pub trait RadioConfig {$/;"	i
RadioData	kernel/src/hil/radio.rs	/^pub trait RadioData {$/;"	i
RadioDriver	capsules/src/ieee802154/driver.rs	/^impl Driver for RadioDriver<'a> {$/;"	c
RadioDriver	capsules/src/ieee802154/driver.rs	/^impl RadioDriver<'a> {$/;"	c
RadioDriver	capsules/src/ieee802154/driver.rs	/^impl device::RxClient for RadioDriver<'a> {$/;"	c
RadioDriver	capsules/src/ieee802154/driver.rs	/^impl device::TxClient for RadioDriver<'a> {$/;"	c
RadioDriver	capsules/src/ieee802154/driver.rs	/^impl framer::DeviceProcedure for RadioDriver<'a> {$/;"	c
RadioDriver	capsules/src/ieee802154/driver.rs	/^impl framer::KeyProcedure for RadioDriver<'a> {$/;"	c
RadioDriver	capsules/src/ieee802154/driver.rs	/^pub struct RadioDriver<'a> {$/;"	s
RadioMode	chips/nrf5x/src/constants.rs	/^pub enum RadioMode {$/;"	g
RadioRegisters	chips/nrf51/src/radio.rs	/^struct RadioRegisters {$/;"	s
RadioRegisters	chips/nrf52/src/radio.rs	/^struct RadioRegisters {$/;"	s
Ram	chips/nrf52/src/ficr.rs	/^enum Ram {$/;"	g
Random	kernel/src/hil/rng.rs	/^pub trait Random<'a> {$/;"	i
RcfastFrequency	chips/sam4l/src/pm.rs	/^pub enum RcfastFrequency {$/;"	g
RcsysAt115kHz	chips/sam4l/src/pm.rs	/^    RcsysAt115kHz,$/;"	e	enum:SystemClockSource
Read	capsules/src/i2c_master_slave_driver.rs	/^    Read(u8),$/;"	e	enum:MasterAction
Read	capsules/src/nonvolatile_to_pages.rs	/^    Read,$/;"	e	enum:State
Read	capsules/src/virtual_flash.rs	/^    Read(usize),$/;"	e	enum:Op
Read	capsules/src/virtual_i2c.rs	/^    Read(u8),$/;"	e	enum:Op
Read	chips/nrf52/src/nvmc.rs	/^    Read,  \/\/ Performing a read operation.$/;"	e	enum:FlashState
Read	chips/sam4l/src/flashcalw.rs	/^    Read,                         \/\/ Performing a read operation.$/;"	e	enum:FlashState
Read	kernel/src/hil/i2c.rs	/^    Read,$/;"	e	enum:SlaveTransmissionType
ReadAccelDeactivating	capsules/src/fxos8700cq.rs	/^    ReadAccelDeactivating(i16, i16, i16),$/;"	e	enum:State
ReadAccelReading	capsules/src/fxos8700cq.rs	/^    ReadAccelReading,$/;"	e	enum:State
ReadAccelSetup	capsules/src/fxos8700cq.rs	/^    ReadAccelSetup,$/;"	e	enum:State
ReadAccelWait	capsules/src/fxos8700cq.rs	/^    ReadAccelWait,$/;"	e	enum:State
ReadAccelWaiting	capsules/src/fxos8700cq.rs	/^    ReadAccelWaiting,$/;"	e	enum:State
ReadAccelerometer	capsules/src/ninedof.rs	/^    ReadAccelerometer,$/;"	e	enum:NineDofCommand
ReadBlockComplete	capsules/src/sdcard.rs	/^    ReadBlockComplete,$/;"	e	enum:SpiState
ReadBlocksComplete	capsules/src/sdcard.rs	/^    ReadBlocksComplete,$/;"	e	enum:SpiState
ReadCap	capsules/src/max17205.rs	/^    ReadCap,$/;"	e	enum:State
ReadCharge	capsules/src/ltc294x.rs	/^    ReadCharge,$/;"	e	enum:State
ReadControl	capsules/src/pca9544a.rs	/^    ReadControl(ControlField),$/;"	e	enum:State
ReadCoulomb	capsules/src/max17205.rs	/^    ReadCoulomb,$/;"	e	enum:State
ReadCurrent	capsules/src/ltc294x.rs	/^    ReadCurrent,$/;"	e	enum:State
ReadCurrent	capsules/src/max17205.rs	/^    ReadCurrent,$/;"	e	enum:State
ReadElectronicId1	capsules/src/si7021.rs	/^    ReadElectronicId1,$/;"	e	enum:State
ReadElectronicId2	capsules/src/si7021.rs	/^    ReadElectronicId2,$/;"	e	enum:State
ReadElectronicIdByteOneA	capsules/src/si7021.rs	/^    ReadElectronicIdByteOneA = 0xfa,$/;"	e	enum:Registers
ReadElectronicIdByteOneB	capsules/src/si7021.rs	/^    ReadElectronicIdByteOneB = 0x0f,$/;"	e	enum:Registers
ReadElectronicIdByteTwoA	capsules/src/si7021.rs	/^    ReadElectronicIdByteTwoA = 0xfc,$/;"	e	enum:Registers
ReadElectronicIdByteTwoB	capsules/src/si7021.rs	/^    ReadElectronicIdByteTwoB = 0xc9,$/;"	e	enum:Registers
ReadExecuteOnly	kernel/src/platform/mpu.rs	/^    ReadExecuteOnly,$/;"	e	enum:Permissions
ReadFailure	capsules/src/sdcard.rs	/^    ReadFailure = -3,$/;"	e	enum:ErrorCode
ReadFirmwareVersionA	capsules/src/si7021.rs	/^    ReadFirmwareVersionA = 0x84,$/;"	e	enum:Registers
ReadFirmwareVersionB	capsules/src/si7021.rs	/^    ReadFirmwareVersionB = 0xb8,$/;"	e	enum:Registers
ReadGpPu	capsules/src/mcp230xx.rs	/^    ReadGpPu(u8, bool),$/;"	e	enum:State
ReadGpio	capsules/src/mcp230xx.rs	/^    ReadGpio(u8, PinState),$/;"	e	enum:State
ReadGpioRead	capsules/src/mcp230xx.rs	/^    ReadGpioRead(u8),$/;"	e	enum:State
ReadGpioToggle	capsules/src/mcp230xx.rs	/^    ReadGpioToggle(u8),$/;"	e	enum:State
ReadGyroscope	capsules/src/ninedof.rs	/^    ReadGyroscope,$/;"	e	enum:NineDofCommand
ReadHeaterControlRegister	capsules/src/si7021.rs	/^    ReadHeaterControlRegister = 0x11,$/;"	e	enum:Registers
ReadHumidity	capsules/src/humidity.rs	/^    ReadHumidity,$/;"	e	enum:HumidityCommand
ReadId	capsules/src/mx25r6435f.rs	/^    ReadId,$/;"	e	enum:State
ReadIn	chips/sam4l/src/usbc/mod.rs	/^    ReadIn,$/;"	e	enum:CtrlState
ReadInterruptSetup	capsules/src/mcp230xx.rs	/^    ReadInterruptSetup(u8),$/;"	e	enum:State
ReadInterruptValues	capsules/src/mcp230xx.rs	/^    ReadInterruptValues(u8),$/;"	e	enum:State
ReadIoDir	capsules/src/mcp230xx.rs	/^    ReadIoDir(u8, Direction),$/;"	e	enum:State
ReadIoDirForGpPu	capsules/src/mcp230xx.rs	/^    ReadIoDirForGpPu(u8, bool),$/;"	e	enum:State
ReadMagStart	capsules/src/fxos8700cq.rs	/^    ReadMagStart,$/;"	e	enum:State
ReadMagValues	capsules/src/fxos8700cq.rs	/^    ReadMagValues,$/;"	e	enum:State
ReadMagnetometer	capsules/src/ninedof.rs	/^    ReadMagnetometer,$/;"	e	enum:NineDofCommand
ReadMeasurement	capsules/src/lps25hb.rs	/^    ReadMeasurement,$/;"	e	enum:State
ReadMeasurement1	capsules/src/tsl2561.rs	/^    ReadMeasurement1,$/;"	e	enum:State
ReadMeasurement2	capsules/src/tsl2561.rs	/^    ReadMeasurement2,$/;"	e	enum:State
ReadMeasurement3	capsules/src/tsl2561.rs	/^    ReadMeasurement3,$/;"	e	enum:State
ReadMemory	capsules/src/fm25cl.rs	/^    ReadMemory = 0x03,$/;"	e	enum:Opcodes
ReadMemory	capsules/src/fm25cl.rs	/^    ReadMemory,$/;"	e	enum:State
ReadOnly	kernel/src/platform/mpu.rs	/^    ReadOnly,$/;"	e	enum:Permissions
ReadOnly	libraries/tock-register-interface/src/registers.rs	/^impl<T: IntLike, R: RegisterLongName> ReadOnly<T, R> {$/;"	c
ReadOnly	libraries/tock-register-interface/src/registers.rs	/^pub struct ReadOnly<T: IntLike, R: RegisterLongName = ()> {$/;"	s
ReadRHTUserRegister1	capsules/src/si7021.rs	/^    ReadRHTUserRegister1 = 0xe7,$/;"	e	enum:Registers
ReadRhMeasurement	capsules/src/si7021.rs	/^    ReadRhMeasurement,$/;"	e	enum:State
ReadRomID	capsules/src/max17205.rs	/^    ReadRomID,$/;"	e	enum:State
ReadSOC	capsules/src/max17205.rs	/^    ReadSOC,$/;"	e	enum:State
ReadSector	capsules/src/mx25r6435f.rs	/^    ReadSector {$/;"	e	enum:State
ReadShutdown	capsules/src/ltc294x.rs	/^    ReadShutdown,$/;"	e	enum:State
ReadStatus	capsules/src/fm25cl.rs	/^    ReadStatus,$/;"	e	enum:State
ReadStatus	capsules/src/ltc294x.rs	/^    ReadStatus,$/;"	e	enum:State
ReadStatus	capsules/src/max17205.rs	/^    ReadStatus,$/;"	e	enum:State
ReadStatus	chips/sam4l/src/usbc/mod.rs	/^    ReadStatus,$/;"	e	enum:CtrlState
ReadStatusRegister	capsules/src/fm25cl.rs	/^    ReadStatusRegister = 0x05,$/;"	e	enum:Opcodes
ReadTempMeasurement	capsules/src/si7021.rs	/^    ReadTempMeasurement,$/;"	e	enum:State
ReadTemperaturePreviousRHMeasurement	capsules/src/si7021.rs	/^    ReadTemperaturePreviousRHMeasurement = 0xe0,$/;"	e	enum:Registers
ReadVolt	capsules/src/max17205.rs	/^    ReadVolt,$/;"	e	enum:State
ReadVoltage	capsules/src/ltc294x.rs	/^    ReadVoltage,$/;"	e	enum:State
ReadWrite	libraries/tock-register-interface/src/registers.rs	/^impl<T: IntLike, R: RegisterLongName> ReadWrite<T, R> {$/;"	c
ReadWrite	libraries/tock-register-interface/src/registers.rs	/^pub struct ReadWrite<T: IntLike, R: RegisterLongName = ()> {$/;"	s
ReadWriteBytes	capsules/src/virtual_spi.rs	/^    ReadWriteBytes(usize),$/;"	e	enum:Op
ReadWriteExecute	kernel/src/platform/mpu.rs	/^    ReadWriteExecute,$/;"	e	enum:Permissions
ReadWriteOnly	kernel/src/platform/mpu.rs	/^    ReadWriteOnly,$/;"	e	enum:Permissions
ReadingAccelData	boards/imix/src/i2c_dummy.rs	/^    ReadingAccelData,$/;"	e	enum:AccelClientState
ReadingAccelData	boards/launchxl/src/i2c_tests.rs	/^    ReadingAccelData,$/;"	e	enum:AccelClientState
ReadingDieTemperature	capsules/src/tmp006.rs	/^    ReadingDieTemperature(SensorVoltage),$/;"	e	enum:ProtocolState
ReadingId	capsules/src/tsl2561.rs	/^    ReadingId,$/;"	e	enum:State
ReadingLI	boards/imix/src/i2c_dummy.rs	/^    ReadingLI,$/;"	e	enum:LiClientState
ReadingLI	capsules/src/isl29035.rs	/^    ReadingLI,$/;"	e	enum:State
ReadingSensorVoltage	capsules/src/tmp006.rs	/^    ReadingSensorVoltage,$/;"	e	enum:ProtocolState
ReadingWhoAmI	capsules/src/lps25hb.rs	/^    ReadingWhoAmI,$/;"	e	enum:State
ReadingWhoami	boards/imix/src/i2c_dummy.rs	/^    ReadingWhoami,$/;"	e	enum:AccelClientState
ReadingWhoami	boards/launchxl/src/i2c_tests.rs	/^    ReadingWhoami,$/;"	e	enum:AccelClientState
Ready	chips/nrf52/src/nvmc.rs	/^    Ready, \/\/ Flash is ready to complete a command.$/;"	e	enum:FlashState
Ready	chips/sam4l/src/flashcalw.rs	/^    Ready,                        \/\/ Flash is ready to complete a command.$/;"	e	enum:FlashState
ReadyToDecrypt	capsules/src/ieee802154/framer.rs	/^    ReadyToDecrypt(FrameInfo, &'static mut [u8]),$/;"	e	enum:RxState
ReadyToEncrypt	capsules/src/ieee802154/framer.rs	/^    ReadyToEncrypt(FrameInfo, &'static mut [u8]),$/;"	e	enum:TxState
ReadyToReturn	capsules/src/ieee802154/framer.rs	/^    ReadyToReturn(&'static mut [u8]),$/;"	e	enum:RxState
ReadyToTransmit	capsules/src/ieee802154/framer.rs	/^    ReadyToTransmit(FrameInfo, &'static mut [u8]),$/;"	e	enum:TxState
ReadyToYield	capsules/src/ieee802154/framer.rs	/^    ReadyToYield(FrameInfo, &'static mut [u8]),$/;"	e	enum:RxState
Receive	chips/cc26x2/src/i2c.rs	/^    Receive,$/;"	e	enum:TransferMode
ReceivedBlock	capsules/src/sdcard.rs	/^    ReceivedBlock { count: u32 },$/;"	e	enum:SpiState
ReceiverOnWhenIdle	capsules/src/net/thread/tlv.rs	/^    ReceiverOnWhenIdle = 0b0000_1000,$/;"	e	enum:LinkMode
Receiving	capsules/src/virtual_uart.rs	/^    Receiving,$/;"	e	enum:UartDeviceReceiveState
Recipient	capsules/src/usb.rs	/^pub enum Recipient {$/;"	g
RefPH	capsules/src/lps25hb.rs	/^    RefPH = 0x0a,$/;"	e	enum:Registers
RefPL	capsules/src/lps25hb.rs	/^    RefPL = 0x09,$/;"	e	enum:Registers
RefPXl	capsules/src/lps25hb.rs	/^    RefPXl = 0x08,$/;"	e	enum:Registers
ReferenceGround	chips/sam4l/src/adc.rs	/^    ReferenceGround = 0x17,$/;"	e	enum:Channel
RegKey	chips/sam4l/src/flashcalw.rs	/^enum RegKey {$/;"	g
Region	kernel/src/platform/mpu.rs	/^impl Region {$/;"	c
Region	kernel/src/platform/mpu.rs	/^pub struct Region {$/;"	s
Register	chips/sam4l/src/gpio.rs	/^struct Register {$/;"	s
Register	chips/sam4l/src/scif.rs	/^pub enum Register {$/;"	g
RegisterLongName	libraries/tock-register-interface/src/registers.rs	/^impl RegisterLongName for () {}$/;"	c
RegisterLongName	libraries/tock-register-interface/src/registers.rs	/^pub trait RegisterLongName {}$/;"	i
RegisterRC	chips/sam4l/src/gpio.rs	/^struct RegisterRC {$/;"	s
RegisterType	chips/sam4l/src/i2c.rs	/^    type RegisterType = TWIMRegisters;$/;"	t	implementation:I2CHw
RegisterType	chips/sam4l/src/i2c.rs	/^    type RegisterType = TWISRegisters;$/;"	t	implementation:I2CHw
RegisterType	chips/sam4l/src/spi.rs	/^    type RegisterType = SpiRegisters;$/;"	t	implementation:SpiHw
RegisterType	kernel/src/common/peripherals.rs	/^    type RegisterType;$/;"	t	interface:PeripheralManagement
Registers	capsules/src/fxos8700cq.rs	/^enum Registers {$/;"	g
Registers	capsules/src/lps25hb.rs	/^enum Registers {$/;"	g
Registers	capsules/src/ltc294x.rs	/^enum Registers {$/;"	g
Registers	capsules/src/max17205.rs	/^enum Registers {$/;"	g
Registers	capsules/src/mcp230xx.rs	/^enum Registers {$/;"	g
Registers	capsules/src/si7021.rs	/^enum Registers {$/;"	g
Registers	capsules/src/tmp006.rs	/^enum Registers {$/;"	g
Registers	capsules/src/tsl2561.rs	/^enum Registers {$/;"	g
RepCap	capsules/src/max17205.rs	/^    RepCap = 0x005, \/\/ Reported capacity, LSB = 0.5 mAh$/;"	e	enum:Registers
RepeatAppSpecificInit	capsules/src/sdcard.rs	/^    RepeatAppSpecificInit,$/;"	e	enum:AlarmState
RepeatCallError	kernel/src/hil/uart.rs	/^    RepeatCallError,$/;"	e	enum:Error
RepeatGenericInit	capsules/src/sdcard.rs	/^    RepeatGenericInit,$/;"	e	enum:AlarmState
RepeatHCSInit	capsules/src/sdcard.rs	/^    RepeatHCSInit,$/;"	e	enum:AlarmState
Request	capsules/src/usb_user.rs	/^enum Request {$/;"	g
RequestType	capsules/src/usb.rs	/^pub enum RequestType {$/;"	g
Requests	chips/sam4l/src/usbc/mod.rs	/^impl Requests {$/;"	c
Requests	chips/sam4l/src/usbc/mod.rs	/^pub struct Requests {$/;"	s
ResConf	capsules/src/lps25hb.rs	/^    ResConf = 0x10,$/;"	e	enum:Registers
Reserved	capsules/src/usb.rs	/^    Reserved,$/;"	e	enum:Recipient
Reserved	capsules/src/usb.rs	/^    Reserved,$/;"	e	enum:RequestType
ReservedStructField	tools/svd2regs.py	/^class ReservedStructField(CodeBlock):$/;"	c
Reset	capsules/src/si7021.rs	/^    Reset = 0xfe,$/;"	e	enum:Registers
Reset	chips/sam4l/src/usbc/mod.rs	/^    Reset,$/;"	e	enum:State
ResetError	kernel/src/hil/uart.rs	/^    ResetError,$/;"	e	enum:Error
Response	capsules/src/net/thread/tlv.rs	/^    Response = 4,$/;"	e	enum:TlvType
Response	capsules/src/net/thread/tlv.rs	/^    Response([u8; 8]),  \/\/ Byte string max length 8 bytes.$/;"	e	enum:Tlv
Restart	kernel/src/process.rs	/^    Restart,$/;"	e	enum:FaultResponse
ReturnCode	kernel/src/process.rs	/^impl From<Error> for ReturnCode {$/;"	c
ReturnCode	kernel/src/returncode.rs	/^pub enum ReturnCode {$/;"	g
RingBuffer	kernel/src/common/ring_buffer.rs	/^impl<T: Copy> RingBuffer<'a, T> {$/;"	c
RingBuffer	kernel/src/common/ring_buffer.rs	/^impl<T: Copy> queue::Queue<T> for RingBuffer<'a, T> {$/;"	c
RingBuffer	kernel/src/common/ring_buffer.rs	/^pub struct RingBuffer<'a, T: 'a> {$/;"	s
RiscvimacStoredState	arch/riscv32i/src/syscall.rs	/^pub struct RiscvimacStoredState {}$/;"	s
RisingEdge	kernel/src/hil/gpio.rs	/^    RisingEdge,$/;"	e	enum:InterruptMode
Rng	kernel/src/hil/rng.rs	/^pub trait Rng<'a> {$/;"	i
RngComponent	boards/imix/src/components/rng.rs	/^impl Component for RngComponent {$/;"	c
RngComponent	boards/imix/src/components/rng.rs	/^impl RngComponent {$/;"	c
RngComponent	boards/imix/src/components/rng.rs	/^pub struct RngComponent {$/;"	s
RngDriver	capsules/src/rng.rs	/^impl RngDriver<'a> {$/;"	c
RngDriver	capsules/src/rng.rs	/^impl<'a> Driver for RngDriver<'a> {$/;"	c
RngDriver	capsules/src/rng.rs	/^impl<'a> rng::Client for RngDriver<'a> {$/;"	c
RngDriver	capsules/src/rng.rs	/^pub struct RngDriver<'a> {$/;"	s
RngRegisters	chips/cc26x2/src/trng.rs	/^struct RngRegisters {$/;"	s
RngRegisters	chips/nrf5x/src/trng.rs	/^pub struct RngRegisters {$/;"	s
Router	capsules/src/net/thread/tlv.rs	/^    Router = 0b1000_0000,$/;"	e	enum:MulticastResponder
RpdsH	capsules/src/lps25hb.rs	/^    RpdsH = 0x3a,$/;"	e	enum:Registers
RpdsL	capsules/src/lps25hb.rs	/^    RpdsL = 0x39,$/;"	e	enum:Registers
Rtc	chips/cc26x2/src/rtc.rs	/^impl Alarm for Rtc {$/;"	c
Rtc	chips/cc26x2/src/rtc.rs	/^impl Rtc {$/;"	c
Rtc	chips/cc26x2/src/rtc.rs	/^impl Time for Rtc {$/;"	c
Rtc	chips/cc26x2/src/rtc.rs	/^pub struct Rtc {$/;"	s
Rtc	chips/nrf5x/src/rtc.rs	/^impl Alarm for Rtc {$/;"	c
Rtc	chips/nrf5x/src/rtc.rs	/^impl Controller for Rtc {$/;"	c
Rtc	chips/nrf5x/src/rtc.rs	/^impl Rtc {$/;"	c
Rtc	chips/nrf5x/src/rtc.rs	/^impl Time for Rtc {$/;"	c
Rtc	chips/nrf5x/src/rtc.rs	/^pub struct Rtc {$/;"	s
Rtc	chips/sifive/src/rtc.rs	/^impl Rtc {$/;"	c
Rtc	chips/sifive/src/rtc.rs	/^pub struct Rtc {$/;"	s
RtcFreq	chips/cc26x2/src/rtc.rs	/^impl Frequency for RtcFreq {$/;"	c
RtcFreq	chips/cc26x2/src/rtc.rs	/^pub struct RtcFreq(());$/;"	s
RtcRegisters	chips/cc26x2/src/rtc.rs	/^struct RtcRegisters {$/;"	s
RtcRegisters	chips/nrf5x/src/rtc.rs	/^struct RtcRegisters {$/;"	s
RtcRegisters	chips/sifive/src/rtc.rs	/^pub struct RtcRegisters {$/;"	s
Running	kernel/src/process.rs	/^    Running,$/;"	e	enum:State
Rustdoc settings	kernel/target/doc/settings.html	/^<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=/;"	h
RxClient	capsules/src/ieee802154/device.rs	/^pub trait RxClient {$/;"	i
RxClient	kernel/src/hil/ble_advertising.rs	/^pub trait RxClient {$/;"	i
RxClient	kernel/src/hil/radio.rs	/^pub trait RxClient {$/;"	i
RxState	capsules/src/ieee802154/framer.rs	/^enum RxState {$/;"	g
RxState	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^impl ListNode<'a, RxState<'a>> for RxState<'a> {$/;"	c
RxState	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^impl RxState<'a> {$/;"	c
RxState	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^pub struct RxState<'a> {$/;"	s
S	capsules/src/net/thread/tlv.rs	/^    S = 0b0001_0000_0000_0000,   \/\/ SLAAC$/;"	e	enum:BorderRouterTlvValueBit
SAC	boards/imix/src/ipv6_lowpan_test.rs	/^enum SAC {$/;"	g
SAC	boards/imix/src/sixlowpan_dummy.rs	/^enum SAC {$/;"	g
SAMPLE	chips/nrf52/src/adc.rs	/^static mut SAMPLE: [u16; 1] = [0; 1];$/;"	v
SCAN_CLIENT	boards/imix/src/i2c_dummy.rs	/^static mut SCAN_CLIENT: ScanClient = ScanClient {$/;"	v
SCAN_CLIENT	boards/launchxl/src/i2c_tests.rs	/^static mut SCAN_CLIENT: ScanClient = ScanClient {$/;"	v
SCB_REGISTERS	arch/cortex-m/src/syscall.rs	/^pub static mut SCB_REGISTERS: [u32; 5] = [0; 5];$/;"	v
SCIF	chips/sam4l/src/pm.rs	/^    SCIF,$/;"	e	enum:PBCClock
SDCard	capsules/src/sdcard.rs	/^impl<A: hil::time::Alarm> SDCard<'a, A> {$/;"	c
SDCard	capsules/src/sdcard.rs	/^impl<A: hil::time::Alarm> hil::gpio::Client for SDCard<'a, A> {$/;"	c
SDCard	capsules/src/sdcard.rs	/^impl<A: hil::time::Alarm> hil::spi::SpiMasterClient for SDCard<'a, A> {$/;"	c
SDCard	capsules/src/sdcard.rs	/^impl<A: hil::time::Alarm> hil::time::Client for SDCard<'a, A> {$/;"	c
SDCard	capsules/src/sdcard.rs	/^pub struct SDCard<'a, A: hil::time::Alarm> {$/;"	s
SDCardClient	capsules/src/sdcard.rs	/^pub trait SDCardClient {$/;"	i
SDCardDriver	capsules/src/sdcard.rs	/^impl<A: hil::time::Alarm> Driver for SDCardDriver<'a, A> {$/;"	c
SDCardDriver	capsules/src/sdcard.rs	/^impl<A: hil::time::Alarm> SDCardClient for SDCardDriver<'a, A> {$/;"	c
SDCardDriver	capsules/src/sdcard.rs	/^impl<A: hil::time::Alarm> SDCardDriver<'a, A> {$/;"	c
SDCardDriver	capsules/src/sdcard.rs	/^pub struct SDCardDriver<'a, A: hil::time::Alarm> {$/;"	s
SDCardType	capsules/src/sdcard.rs	/^enum SDCardType {$/;"	g
SDCmd	capsules/src/sdcard.rs	/^enum SDCmd {$/;"	g
SDResponse	capsules/src/sdcard.rs	/^enum SDResponse {$/;"	g
SDv1	capsules/src/sdcard.rs	/^    SDv1 = 0x02,$/;"	e	enum:SDCardType
SDv2	capsules/src/sdcard.rs	/^    SDv2 = 0x04,$/;"	e	enum:SDCardType
SDv2BlockAddressable	capsules/src/sdcard.rs	/^    SDv2BlockAddressable = 0x04 | 0x08,$/;"	e	enum:SDCardType
SE	capsules/src/mx25r6435f.rs	/^    SE = 0x20,   \/\/ Sector Erase$/;"	e	enum:Opcodes
SENSOR_HUMIDITY	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^  SENSOR_HUMIDITY = 2,$/;"	e	enum:__anon22758edd0103	file:
SENSOR_IRRADIANCE	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^  SENSOR_IRRADIANCE = 1,$/;"	e	enum:__anon22758edd0103	file:
SENSOR_TEMPERATURE	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^  SENSOR_TEMPERATURE = 0,$/;"	e	enum:__anon22758edd0103	file:
SFD_VALUE	capsules/src/rf233_const.rs	/^    SFD_VALUE = 0x0B,$/;"	e	enum:RF233Register
SHORT_ADDR_0	capsules/src/rf233_const.rs	/^    SHORT_ADDR_0 = 0x20,$/;"	e	enum:RF233Register
SHORT_ADDR_1	capsules/src/rf233_const.rs	/^    SHORT_ADDR_1 = 0x21,$/;"	e	enum:RF233Register
SI7021	boards/imix/src/components/si7021.rs	/^    type Output = &'static SI7021<'static, VirtualMuxAlarm<'static, sam4l::ast::Ast<'static>>>;$/;"	v	implementation:SI7021Component
SI7021	capsules/src/si7021.rs	/^impl<A: time::Alarm> SI7021<'a, A> {$/;"	c
SI7021	capsules/src/si7021.rs	/^impl<A: time::Alarm> i2c::I2CClient for SI7021<'a, A> {$/;"	c
SI7021	capsules/src/si7021.rs	/^impl<A: time::Alarm> kernel::hil::sensors::HumidityDriver for SI7021<'a, A> {$/;"	c
SI7021	capsules/src/si7021.rs	/^impl<A: time::Alarm> kernel::hil::sensors::TemperatureDriver for SI7021<'a, A> {$/;"	c
SI7021	capsules/src/si7021.rs	/^impl<A: time::Alarm> time::Client for SI7021<'a, A> {$/;"	c
SI7021	capsules/src/si7021.rs	/^pub struct SI7021<'a, A: time::Alarm> {$/;"	s
SI7021Component	boards/imix/src/components/si7021.rs	/^impl Component for SI7021Component {$/;"	c
SI7021Component	boards/imix/src/components/si7021.rs	/^impl SI7021Component {$/;"	c
SI7021Component	boards/imix/src/components/si7021.rs	/^pub struct SI7021Component {$/;"	s
SIXLOWPAN_RX_BUF	boards/imix/src/components/udp_6lowpan.rs	/^static mut SIXLOWPAN_RX_BUF: [u8; 1280] = [0x00; 1280];$/;"	v
SLEEP	capsules/src/ieee802154/xmac.rs	/^    SLEEP,       \/\/ Asleep and not receiving or transmitting$/;"	e	enum:XMacState
SLEEP	capsules/src/rf233.rs	/^    SLEEP,$/;"	e	enum:InternalState
SLEEP	capsules/src/rf233_const.rs	/^    SLEEP = 0x0F,$/;"	e	enum:ExternalState
SLEEP_TRX_OFF	capsules/src/rf233.rs	/^    SLEEP_TRX_OFF,$/;"	e	enum:InternalState
SLEEP_WAKE	capsules/src/rf233.rs	/^    SLEEP_WAKE,$/;"	e	enum:InternalState
SMALL	boards/imix/src/virtual_uart_rx_test.rs	/^    static mut SMALL: [u8; 3] = [0; 3];$/;"	v	function:static_init_test_receive_small
SPI	chips/sam4l/src/pm.rs	/^    SPI,$/;"	e	enum:PBAClock
SPI	chips/sam4l/src/spi.rs	/^pub static mut SPI: SpiHw = SpiHw::new();$/;"	v
SPICB	boards/imix/src/spi_dummy.rs	/^pub static mut SPICB: DummyCB = DummyCB { val: 0x55 as u8 };$/;"	v
SPIM	chips/nrf52/src/spi.rs	/^impl SPIM {$/;"	c
SPIM	chips/nrf52/src/spi.rs	/^impl hil::spi::SpiMaster for SPIM {$/;"	c
SPIM	chips/nrf52/src/spi.rs	/^pub struct SPIM {$/;"	s
SPIM0	chips/nrf52/src/spi.rs	/^pub static mut SPIM0: SPIM = SPIM::new(0);$/;"	v
SPIM1	chips/nrf52/src/spi.rs	/^pub static mut SPIM1: SPIM = SPIM::new(1);$/;"	v
SPIM2	chips/nrf52/src/spi.rs	/^pub static mut SPIM2: SPIM = SPIM::new(2);$/;"	v
SPISLAVECB	boards/imix/src/spi_slave_dummy.rs	/^pub static mut SPISLAVECB: SlaveCB = SlaveCB { val: 0x55 as u8 };$/;"	v
SPI_READ_BUF	boards/hail/src/main.rs	/^static mut SPI_READ_BUF: [u8; 64] = [0; 64];$/;"	v
SPI_READ_BUF	boards/imix/src/components/spi.rs	/^        static mut SPI_READ_BUF: [u8; 1024] = [0; 1024];$/;"	v	method:SpiSyscallComponent::finalize
SPI_RX	chips/sam4l/src/dma.rs	/^    SPI_RX = 4,$/;"	e	enum:DMAPeripheral
SPI_TX	chips/sam4l/src/dma.rs	/^    SPI_TX = 22,$/;"	e	enum:DMAPeripheral
SPI_WRITE_BUF	boards/hail/src/main.rs	/^static mut SPI_WRITE_BUF: [u8; 64] = [0; 64];$/;"	v
SPI_WRITE_BUF	boards/imix/src/components/spi.rs	/^        static mut SPI_WRITE_BUF: [u8; 1024] = [0; 1024];$/;"	v	method:SpiSyscallComponent::finalize
SRAM_READ	capsules/src/rf233_const.rs	/^    SRAM_READ = 0x00,$/;"	e	enum:RF233BusCommand
SRAM_WRITE	capsules/src/rf233_const.rs	/^    SRAM_WRITE = 0x40,$/;"	e	enum:RF233BusCommand
SResult	capsules/src/net/stream.rs	/^impl<Output, Error> SResult<Output, Error> {$/;"	c
SResult	capsules/src/net/stream.rs	/^pub enum SResult<Output = (), Error = ()> {$/;"	g
SSB	chips/sam4l/src/flashcalw.rs	/^    SSB,$/;"	e	enum:FlashCMD
STACK_MEMORY	boards/arty-e21/src/main.rs	/^pub static mut STACK_MEMORY: [u8; 0x1000] = [0; 0x1000];$/;"	v
STACK_MEMORY	boards/ek-tm4c1294xl/src/main.rs	/^pub static mut STACK_MEMORY: [u8; 0x1000] = [0; 0x1000];$/;"	v
STACK_MEMORY	boards/hail/src/main.rs	/^pub static mut STACK_MEMORY: [u8; 0x1000] = [0; 0x1000];$/;"	v
STACK_MEMORY	boards/hifive1/src/main.rs	/^pub static mut STACK_MEMORY: [u8; 0x1000] = [0; 0x1000];$/;"	v
STACK_MEMORY	boards/imix/src/main.rs	/^pub static mut STACK_MEMORY: [u8; 0x2000] = [0; 0x2000];$/;"	v
STACK_MEMORY	boards/launchxl/src/main.rs	/^pub static mut STACK_MEMORY: [u8; 0x1000] = [0; 0x1000];$/;"	v
STACK_MEMORY	boards/nordic/nrf51dk/src/main.rs	/^pub static mut STACK_MEMORY: [u8; 0x1000] = [0; 0x1000];$/;"	v
STACK_MEMORY	boards/nordic/nrf52840dk/src/main.rs	/^pub static mut STACK_MEMORY: [u8; 0x1000] = [0; 0x1000];$/;"	v
STACK_MEMORY	boards/nordic/nrf52dk/src/main.rs	/^pub static mut STACK_MEMORY: [u8; 0x1000] = [0; 0x1000];$/;"	v
START	capsules/src/rf233.rs	/^    START,$/;"	e	enum:InternalState
STARTUP	capsules/src/ieee802154/xmac.rs	/^    STARTUP,     \/\/ Radio waking up, PowerClient::on() transitions to next state$/;"	e	enum:XMacState
START_CCA_SET	capsules/src/rf233.rs	/^    START_CCA_SET,$/;"	e	enum:InternalState
START_CSMA_0_SEEDED	capsules/src/rf233.rs	/^    START_CSMA_0_SEEDED,$/;"	e	enum:InternalState
START_CSMA_1_SEEDED	capsules/src/rf233.rs	/^    START_CSMA_1_SEEDED,$/;"	e	enum:InternalState
START_CTRL1_SET	capsules/src/rf233.rs	/^    START_CTRL1_SET,$/;"	e	enum:InternalState
START_CTRL2_SET	capsules/src/rf233.rs	/^    START_CTRL2_SET,$/;"	e	enum:InternalState
START_IEEE0_SET	capsules/src/rf233.rs	/^    START_IEEE0_SET,$/;"	e	enum:InternalState
START_IEEE1_SET	capsules/src/rf233.rs	/^    START_IEEE1_SET,$/;"	e	enum:InternalState
START_IEEE2_SET	capsules/src/rf233.rs	/^    START_IEEE2_SET,$/;"	e	enum:InternalState
START_IEEE3_SET	capsules/src/rf233.rs	/^    START_IEEE3_SET,$/;"	e	enum:InternalState
START_IEEE4_SET	capsules/src/rf233.rs	/^    START_IEEE4_SET,$/;"	e	enum:InternalState
START_IEEE5_SET	capsules/src/rf233.rs	/^    START_IEEE5_SET,$/;"	e	enum:InternalState
START_IEEE6_SET	capsules/src/rf233.rs	/^    START_IEEE6_SET,$/;"	e	enum:InternalState
START_IEEE7_SET	capsules/src/rf233.rs	/^    START_IEEE7_SET,$/;"	e	enum:InternalState
START_IRQMASK_SET	capsules/src/rf233.rs	/^    START_IRQMASK_SET,$/;"	e	enum:InternalState
START_PANID0_SET	capsules/src/rf233.rs	/^    START_PANID0_SET,$/;"	e	enum:InternalState
START_PANID1_SET	capsules/src/rf233.rs	/^    START_PANID1_SET,$/;"	e	enum:InternalState
START_PART_READ	capsules/src/rf233.rs	/^    START_PART_READ,$/;"	e	enum:InternalState
START_PWR_SET	capsules/src/rf233.rs	/^    START_PWR_SET,$/;"	e	enum:InternalState
START_RPC_SET	capsules/src/rf233.rs	/^    START_RPC_SET,$/;"	e	enum:InternalState
START_SHORT0_SET	capsules/src/rf233.rs	/^    START_SHORT0_SET,$/;"	e	enum:InternalState
START_SHORT1_SET	capsules/src/rf233.rs	/^    START_SHORT1_SET,$/;"	e	enum:InternalState
START_STATUS_READ	capsules/src/rf233.rs	/^    START_STATUS_READ,$/;"	e	enum:InternalState
START_TURNING_OFF	capsules/src/rf233.rs	/^    START_TURNING_OFF,$/;"	e	enum:InternalState
START_XAH0_SET	capsules/src/rf233.rs	/^    START_XAH0_SET,$/;"	e	enum:InternalState
START_XAH1_SET	capsules/src/rf233.rs	/^    START_XAH1_SET,$/;"	e	enum:InternalState
STATE_TRANSITION_IN_PROGRESS	capsules/src/rf233_const.rs	/^    STATE_TRANSITION_IN_PROGRESS = 0x1F,$/;"	e	enum:ExternalState
STATUS	chips/sam4l/src/flashcalw.rs	/^    STATUS,$/;"	e	enum:RegKey
STRINGS	capsules/src/usbc_client.rs	/^static STRINGS: &'static [&'static str] = &[$/;"	v
SUBSCRIBE	kernel/src/syscall.rs	/^    SUBSCRIBE {$/;"	e	enum:Syscall
SUCCESS	kernel/src/returncode.rs	/^    SUCCESS,$/;"	e	enum:ReturnCode
SVC_Handler	arch/cortex-m0/src/lib.rs	/^pub unsafe extern "C" fn SVC_Handler() {$/;"	f
SYNTH	chips/nrf51/src/clock.rs	/^    SYNTH = 2,$/;"	e	enum:LowClockSource
SYNTH	chips/nrf52/src/clock.rs	/^    SYNTH = 2,$/;"	e	enum:LowClockSource
SYSCALL_FIRED	arch/cortex-m/src/syscall.rs	/^pub static mut SYSCALL_FIRED: usize = 0;$/;"	v
SYSTICK_EXPIRED	arch/cortex-m/src/syscall.rs	/^pub static mut SYSTICK_EXPIRED: usize = 0;$/;"	v
Sam4L16	kernel/src/hil/crc.rs	/^    Sam4L16,$/;"	e	enum:CrcAlg
Sam4L32	kernel/src/hil/crc.rs	/^    Sam4L32,$/;"	e	enum:CrcAlg
Sam4L32C	kernel/src/hil/crc.rs	/^    Sam4L32C,$/;"	e	enum:CrcAlg
Sam4l	chips/sam4l/src/chip.rs	/^impl Chip for Sam4l {$/;"	c
Sam4l	chips/sam4l/src/chip.rs	/^impl Sam4l {$/;"	c
Sam4l	chips/sam4l/src/chip.rs	/^pub struct Sam4l {$/;"	s
Sam4lPage	chips/sam4l/src/flashcalw.rs	/^impl AsMut<[u8]> for Sam4lPage {$/;"	c
Sam4lPage	chips/sam4l/src/flashcalw.rs	/^impl Index<usize> for Sam4lPage {$/;"	c
Sam4lPage	chips/sam4l/src/flashcalw.rs	/^impl IndexMut<usize> for Sam4lPage {$/;"	c
Sam4lPage	chips/sam4l/src/flashcalw.rs	/^impl Sam4lPage {$/;"	c
Sam4lPage	chips/sam4l/src/flashcalw.rs	/^pub struct Sam4lPage(pub [u8; PAGE_SIZE as usize]);$/;"	s
SampleLeading	kernel/src/hil/spi.rs	/^    SampleLeading,$/;"	e	enum:ClockPhase
SampleTrailing	kernel/src/hil/spi.rs	/^    SampleTrailing,$/;"	e	enum:ClockPhase
ScaledVCC	chips/sam4l/src/adc.rs	/^    ScaledVCC = 0x12,$/;"	e	enum:Channel
ScanClient	boards/imix/src/i2c_dummy.rs	/^impl hil::i2c::I2CHwMasterClient for ScanClient {$/;"	c
ScanClient	boards/imix/src/i2c_dummy.rs	/^struct ScanClient {$/;"	s
ScanClient	boards/launchxl/src/i2c_tests.rs	/^impl hil::i2c::I2CHwMasterClient for ScanClient {$/;"	c
ScanClient	boards/launchxl/src/i2c_tests.rs	/^struct ScanClient {$/;"	s
ScanMask	capsules/src/net/thread/tlv.rs	/^    ScanMask = 14,$/;"	e	enum:TlvType
ScanMask	capsules/src/net/thread/tlv.rs	/^    ScanMask(u8),$/;"	e	enum:Tlv
Scanning	capsules/src/ble_advertising_driver.rs	/^    Scanning(RadioChannel),$/;"	e	enum:BLEState
ScanningIdle	capsules/src/ble_advertising_driver.rs	/^    ScanningIdle,$/;"	e	enum:BLEState
ScbRegisters	arch/cortex-m/src/scb.rs	/^struct ScbRegisters {$/;"	s
ScifRegisters	chips/sam4l/src/scif.rs	/^struct ScifRegisters {$/;"	s
Search Tricks	kernel/target/doc/settings.html	/^<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=/;"	i
Search Tricks	kernel/target/doc/src/tock_cells/lib.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Search Tricks	kernel/target/doc/src/tock_cells/map_cell.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Search Tricks	kernel/target/doc/src/tock_cells/numeric_cell_ext.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Search Tricks	kernel/target/doc/src/tock_cells/optional_cell.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Search Tricks	kernel/target/doc/src/tock_cells/take_cell.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Search Tricks	kernel/target/doc/src/tock_cells/volatile_cell.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Search Tricks	kernel/target/doc/src/tock_registers/lib.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Search Tricks	kernel/target/doc/src/tock_registers/macros.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Search Tricks	kernel/target/doc/src/tock_registers/registers.rs.html	/^<\/section><section id="search" class="content hidden"><\/section><section class="footer"><\/sec/;"	i
Search Tricks	kernel/target/doc/tock_cells/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	i
Search Tricks	kernel/target/doc/tock_cells/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
Search Tricks	kernel/target/doc/tock_cells/map_cell/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
Search Tricks	kernel/target/doc/tock_cells/numeric_cell_ext/index.html	/^<table><tr class='module-item'><td><a class="trait" href="trait.NumericCellExt.html" title='tock/;"	i
Search Tricks	kernel/target/doc/tock_cells/optional_cell/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
Search Tricks	kernel/target/doc/tock_cells/take_cell/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
Search Tricks	kernel/target/doc/tock_cells/volatile_cell/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
Search Tricks	kernel/target/doc/tock_registers/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	i
Search Tricks	kernel/target/doc/tock_registers/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
Search Tricks	kernel/target/doc/tock_registers/macro.register_bitfields.html	/^<\/div><\/section><section id="search" class="content hidden"><\/section><section class="footer"/;"	i
Search Tricks	kernel/target/doc/tock_registers/macro.register_bitmasks.html	/^<\/div><\/section><section id="search" class="content hidden"><\/section><section class="footer"/;"	i
Search Tricks	kernel/target/doc/tock_registers/macros/index.html	/^<\/div><\/section><section id="search" class="content hidden"><\/section><section class="footer"/;"	i
Search Tricks	kernel/target/doc/tock_registers/registers/index.html	/^<\/td><\/tr><\/table><\/section><section id="search" class="content hidden"><\/section><section /;"	i
SecureDataRequests	capsules/src/net/thread/tlv.rs	/^    SecureDataRequests = 0b0000_0100,$/;"	e	enum:LinkMode
Security	capsules/src/net/ieee802154.rs	/^impl Security {$/;"	c
Security	capsules/src/net/ieee802154.rs	/^pub struct Security {$/;"	s
SecurityLevel	capsules/src/net/ieee802154.rs	/^impl SecurityLevel {$/;"	c
SecurityLevel	capsules/src/net/ieee802154.rs	/^pub enum SecurityLevel {$/;"	g
SecurityPolicy	capsules/src/net/thread/tlv.rs	/^    SecurityPolicy = 12,$/;"	e	enum:NetworkManagementTlvType
SecurityPolicy	capsules/src/net/thread/tlv.rs	/^    SecurityPolicy {$/;"	e	enum:NetworkManagementTlv
SecurityPolicy	capsules/src/net/thread/tlv.rs	/^pub enum SecurityPolicy {$/;"	g
SeggerRtt	capsules/src/segger_rtt.rs	/^impl<A: hil::time::Alarm> SeggerRtt<'a, A> {$/;"	c
SeggerRtt	capsules/src/segger_rtt.rs	/^impl<A: hil::time::Alarm> hil::time::Client for SeggerRtt<'a, A> {$/;"	c
SeggerRtt	capsules/src/segger_rtt.rs	/^impl<A: hil::time::Alarm> hil::uart::UART for SeggerRtt<'a, A> {$/;"	c
SeggerRtt	capsules/src/segger_rtt.rs	/^pub struct SeggerRtt<'a, A: hil::time::Alarm> {$/;"	s
SeggerRttBuffer	capsules/src/segger_rtt.rs	/^pub struct SeggerRttBuffer {$/;"	s
SeggerRttMemory	capsules/src/segger_rtt.rs	/^impl SeggerRttMemory {$/;"	c
SeggerRttMemory	capsules/src/segger_rtt.rs	/^pub struct SeggerRttMemory {$/;"	s
SelectElectronicId1	capsules/src/si7021.rs	/^    SelectElectronicId1,$/;"	e	enum:State
SelectElectronicId2	capsules/src/si7021.rs	/^    SelectElectronicId2,$/;"	e	enum:State
SelectGpio	capsules/src/mcp230xx.rs	/^    SelectGpio(u8, PinState),$/;"	e	enum:State
SelectGpioRead	capsules/src/mcp230xx.rs	/^    SelectGpioRead(u8),$/;"	e	enum:State
SelectGpioToggle	capsules/src/mcp230xx.rs	/^    SelectGpioToggle(u8),$/;"	e	enum:State
SelectId	capsules/src/tsl2561.rs	/^    SelectId,$/;"	e	enum:State
SelectIoDir	capsules/src/mcp230xx.rs	/^    SelectIoDir(u8, Direction),$/;"	e	enum:State
SelectIoDirForGpPu	capsules/src/mcp230xx.rs	/^    SelectIoDirForGpPu(u8, bool),$/;"	e	enum:State
SelectWhoAmI	capsules/src/lps25hb.rs	/^    SelectWhoAmI,$/;"	e	enum:State
SelectedChannels	capsules/src/pca9544a.rs	/^    SelectedChannels,$/;"	e	enum:ControlField
SendManufSpecificCmd	capsules/src/sdcard.rs	/^    SendManufSpecificCmd { cmd: SDCmd, arg: u32 },$/;"	e	enum:SpiState
SensorVoltage	capsules/src/tmp006.rs	/^    SensorVoltage = 0x00,$/;"	e	enum:Registers
SensorVoltage	capsules/src/tmp006.rs	/^type SensorVoltage = i16;$/;"	t
Serial	chips/cc26x2/src/prcm.rs	/^    Serial,$/;"	e	enum:PowerDomain
SerialNum	chips/sam4l/src/serial_num.rs	/^impl SerialNum {$/;"	c
SerialNum	chips/sam4l/src/serial_num.rs	/^pub struct SerialNum {$/;"	s
Server	capsules/src/net/thread/tlv.rs	/^    Server = 6,$/;"	e	enum:ServiceSubTlvType
Server	capsules/src/net/thread/tlv.rs	/^    Server {$/;"	e	enum:ServiceSubTlv
Service	capsules/src/net/thread/tlv.rs	/^    Service = 5,$/;"	e	enum:NetworkDataTlvType
Service	capsules/src/net/thread/tlv.rs	/^    Service {$/;"	e	enum:NetworkDataTlv
Service	kernel/src/process.rs	/^    Service,$/;"	e	enum:IPCType
ServiceSubTlv	capsules/src/net/thread/tlv.rs	/^impl ServiceSubTlv {$/;"	c
ServiceSubTlv	capsules/src/net/thread/tlv.rs	/^pub enum ServiceSubTlv {$/;"	g
ServiceSubTlvType	capsules/src/net/thread/tlv.rs	/^impl From<&'a ServiceSubTlv> for ServiceSubTlvType {$/;"	c
ServiceSubTlvType	capsules/src/net/thread/tlv.rs	/^impl From<u8> for ServiceSubTlvType {$/;"	c
ServiceSubTlvType	capsules/src/net/thread/tlv.rs	/^pub enum ServiceSubTlvType {$/;"	g
SetAddress	capsules/src/usb.rs	/^    SetAddress {$/;"	e	enum:StandardDeviceRequest
SetAddress	capsules/src/usbc_client.rs	/^    SetAddress,$/;"	e	enum:State
SetConfiguration	capsules/src/usb.rs	/^    SetConfiguration {$/;"	e	enum:StandardDeviceRequest
SetDescriptor	capsules/src/usb.rs	/^    SetDescriptor {$/;"	e	enum:StandardDeviceRequest
SetFeature	capsules/src/usb.rs	/^    SetFeature {$/;"	e	enum:StandardDeviceRequest
SetInterface	capsules/src/usb.rs	/^    SetInterface,$/;"	e	enum:StandardDeviceRequest
SetIoDirForGpPu	capsules/src/mcp230xx.rs	/^    SetIoDirForGpPu(u8, bool),$/;"	e	enum:State
SetPhase	capsules/src/virtual_spi.rs	/^    SetPhase(hil::spi::ClockPhase),$/;"	e	enum:Op
SetPolarity	capsules/src/virtual_spi.rs	/^    SetPolarity(hil::spi::ClockPolarity),$/;"	e	enum:Op
SetRate	capsules/src/virtual_spi.rs	/^    SetRate(u32),$/;"	e	enum:Op
SetRegDieTemperature	capsules/src/tmp006.rs	/^    SetRegDieTemperature(SensorVoltage),$/;"	e	enum:ProtocolState
SetRegSensorVoltage	capsules/src/tmp006.rs	/^    SetRegSensorVoltage,$/;"	e	enum:ProtocolState
SetupData	capsules/src/usb.rs	/^impl SetupData {$/;"	c
SetupData	capsules/src/usb.rs	/^pub struct SetupData {$/;"	s
SetupReadCap	capsules/src/max17205.rs	/^    SetupReadCap,$/;"	e	enum:State
SetupReadCoulomb	capsules/src/max17205.rs	/^    SetupReadCoulomb,$/;"	e	enum:State
SetupReadCurrent	capsules/src/max17205.rs	/^    SetupReadCurrent,$/;"	e	enum:State
SetupReadRomID	capsules/src/max17205.rs	/^    SetupReadRomID,$/;"	e	enum:State
SetupReadSOC	capsules/src/max17205.rs	/^    SetupReadSOC,$/;"	e	enum:State
SetupReadStatus	capsules/src/max17205.rs	/^    SetupReadStatus,$/;"	e	enum:State
SetupReadVolt	capsules/src/max17205.rs	/^    SetupReadVolt,$/;"	e	enum:State
Shared	kernel/src/mem.rs	/^pub struct Shared;$/;"	s
Short	capsules/src/net/ieee802154.rs	/^    Short = 0b10,$/;"	e	enum:AddressMode
Short	capsules/src/net/ieee802154.rs	/^    Short(u16),$/;"	e	enum:MacAddress
ShortAddr	capsules/src/net/ip.rs	/^    ShortAddr(u16),$/;"	e	enum:MacAddr
ShortAddr	capsules/src/net/ipv6/ip_utils.rs	/^    ShortAddr(u16),$/;"	e	enum:MacAddr
SingleBuffer	capsules/src/adc.rs	/^    SingleBuffer = 2,$/;"	e	enum:AdcMode
SingleSample	capsules/src/adc.rs	/^    SingleSample = 0,$/;"	e	enum:AdcMode
SixLoWpanId	capsules/src/net/thread/tlv.rs	/^    SixLoWpanId = 3,$/;"	e	enum:PrefixSubTlvType
SixLoWpanId	capsules/src/net/thread/tlv.rs	/^    SixLoWpanId {$/;"	e	enum:PrefixSubTlv
Sixlowpan	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^impl<A: time::Alarm, C: ContextStore> RxClient for Sixlowpan<'a, A, C> {$/;"	c
Sixlowpan	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^impl<A: time::Alarm, C: ContextStore> Sixlowpan<'a, A, C> {$/;"	c
Sixlowpan	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^impl<A: time::Alarm, C: ContextStore> SixlowpanState<'a> for Sixlowpan<'a, A, C> {$/;"	c
Sixlowpan	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^pub struct Sixlowpan<'a, A: time::Alarm, C: ContextStore> {$/;"	s
SixlowpanRxClient	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^pub trait SixlowpanRxClient {$/;"	i
SixlowpanState	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^pub trait SixlowpanState<'a> {$/;"	i
Size16Bits	chips/nrf5x/src/timer.rs	/^    Size16Bits = 0,$/;"	e	enum:BitmodeValue
Size24Bits	chips/nrf5x/src/timer.rs	/^    Size24Bits = 2,$/;"	e	enum:BitmodeValue
Size32Bits	chips/nrf5x/src/timer.rs	/^    Size32Bits = 3,$/;"	e	enum:BitmodeValue
Size8Bits	chips/nrf5x/src/timer.rs	/^    Size8Bits = 1,$/;"	e	enum:BitmodeValue
SlaveApp	capsules/src/spi.rs	/^struct SlaveApp {$/;"	s
SlaveCB	boards/imix/src/spi_slave_dummy.rs	/^impl spi::SpiSlaveClient for SlaveCB {$/;"	c
SlaveCB	boards/imix/src/spi_slave_dummy.rs	/^pub struct SlaveCB {$/;"	s
SlaveTransmissionType	kernel/src/hil/i2c.rs	/^pub enum SlaveTransmissionType {$/;"	g
SlowStart	chips/sam4l/src/pm.rs	/^    SlowStart,$/;"	e	enum:OscillatorStartup
Source4Index	capsules/src/ieee802154/driver.rs	/^    Source4Index = 2,$/;"	e	enum:KeyIdModeUserland
Source4Index	capsules/src/net/ieee802154.rs	/^    Source4Index = 0x10,$/;"	e	enum:KeyIdMode
Source4Index	capsules/src/net/ieee802154.rs	/^    Source4Index([u8; 4], u8),$/;"	e	enum:KeyId
Source8Index	capsules/src/ieee802154/driver.rs	/^    Source8Index = 3,$/;"	e	enum:KeyIdModeUserland
Source8Index	capsules/src/net/ieee802154.rs	/^    Source8Index = 0x18,$/;"	e	enum:KeyIdMode
Source8Index	capsules/src/net/ieee802154.rs	/^    Source8Index([u8; 8], u8),$/;"	e	enum:KeyId
SourceAddress	capsules/src/net/thread/tlv.rs	/^    SourceAddress = 0,$/;"	e	enum:TlvType
SourceAddress	capsules/src/net/thread/tlv.rs	/^    SourceAddress(u16),$/;"	e	enum:Tlv
Speed	chips/nrf52/src/i2c.rs	/^pub enum Speed {$/;"	g
Speed	chips/sam4l/src/i2c.rs	/^pub enum Speed {$/;"	g
Speed	chips/sam4l/src/usbc/mod.rs	/^pub enum Speed {$/;"	g
Spi	boards/imix/src/components/spi.rs	/^    type Output = &'static Spi<'static, VirtualSpiMasterDevice<'static, sam4l::spi::SpiHw>>;$/;"	v	implementation:SpiSyscallComponent
Spi	capsules/src/spi.rs	/^impl<S: SpiMasterDevice> Driver for Spi<'a, S> {$/;"	c
Spi	capsules/src/spi.rs	/^impl<S: SpiMasterDevice> Spi<'a, S> {$/;"	c
Spi	capsules/src/spi.rs	/^impl<S: SpiMasterDevice> SpiMasterClient for Spi<'a, S> {$/;"	c
Spi	capsules/src/spi.rs	/^pub struct Spi<'a, S: SpiMasterDevice> {$/;"	s
Spi	chips/sam4l/src/usart.rs	/^    Spi,$/;"	e	enum:UsartMode
SpiComponent	boards/imix/src/components/spi.rs	/^impl Component for SpiComponent {$/;"	c
SpiComponent	boards/imix/src/components/spi.rs	/^impl SpiComponent {$/;"	c
SpiComponent	boards/imix/src/components/spi.rs	/^pub struct SpiComponent {$/;"	s
SpiHw	chips/sam4l/src/spi.rs	/^impl DMAClient for SpiHw {$/;"	c
SpiHw	chips/sam4l/src/spi.rs	/^impl PeripheralManagement<pm::Clock> for SpiHw {$/;"	c
SpiHw	chips/sam4l/src/spi.rs	/^impl SpiHw {$/;"	c
SpiHw	chips/sam4l/src/spi.rs	/^impl spi::SpiMaster for SpiHw {$/;"	c
SpiHw	chips/sam4l/src/spi.rs	/^impl spi::SpiSlave for SpiHw {$/;"	c
SpiHw	chips/sam4l/src/spi.rs	/^pub struct SpiHw {$/;"	s
SpiMX25R6435FPins	boards/nordic/nrf52dk_base/src/lib.rs	/^impl SpiMX25R6435FPins {$/;"	c
SpiMX25R6435FPins	boards/nordic/nrf52dk_base/src/lib.rs	/^pub struct SpiMX25R6435FPins {$/;"	s
SpiMaster	chips/sam4l/src/spi.rs	/^    SpiMaster,$/;"	e	enum:SpiRole
SpiMaster	chips/sam4l/src/usart.rs	/^    SpiMaster(&'a hil::spi::SpiMasterClient),$/;"	e	enum:UsartClient
SpiMaster	kernel/src/hil/spi.rs	/^pub trait SpiMaster {$/;"	i
SpiMasterClient	kernel/src/hil/spi.rs	/^pub trait SpiMasterClient {$/;"	i
SpiMasterDevice	kernel/src/hil/spi.rs	/^pub trait SpiMasterDevice {$/;"	i
SpiPins	boards/nordic/nrf52dk_base/src/lib.rs	/^impl SpiPins {$/;"	c
SpiPins	boards/nordic/nrf52dk_base/src/lib.rs	/^pub struct SpiPins {$/;"	s
SpiRegisterManager	chips/sam4l/src/spi.rs	/^type SpiRegisterManager<'a> = PeripheralManager<'a, SpiHw, pm::Clock>;$/;"	t
SpiRegisters	chips/sam4l/src/spi.rs	/^pub struct SpiRegisters {$/;"	s
SpiRole	chips/sam4l/src/spi.rs	/^pub enum SpiRole {$/;"	g
SpiSlave	capsules/src/spi.rs	/^impl<S: SpiSlaveDevice> Driver for SpiSlave<'a, S> {$/;"	c
SpiSlave	capsules/src/spi.rs	/^impl<S: SpiSlaveDevice> SpiSlave<'a, S> {$/;"	c
SpiSlave	capsules/src/spi.rs	/^impl<S: SpiSlaveDevice> SpiSlaveClient for SpiSlave<'a, S> {$/;"	c
SpiSlave	capsules/src/spi.rs	/^pub struct SpiSlave<'a, S: SpiSlaveDevice> {$/;"	s
SpiSlave	chips/sam4l/src/spi.rs	/^    SpiSlave,$/;"	e	enum:SpiRole
SpiSlave	kernel/src/hil/spi.rs	/^pub trait SpiSlave {$/;"	i
SpiSlaveClient	kernel/src/hil/spi.rs	/^pub trait SpiSlaveClient {$/;"	i
SpiSlaveDevice	kernel/src/hil/spi.rs	/^pub trait SpiSlaveDevice {$/;"	i
SpiState	capsules/src/sdcard.rs	/^enum SpiState {$/;"	g
SpiSyscallComponent	boards/imix/src/components/spi.rs	/^impl Component for SpiSyscallComponent {$/;"	c
SpiSyscallComponent	boards/imix/src/components/spi.rs	/^impl SpiSyscallComponent {$/;"	c
SpiSyscallComponent	boards/imix/src/components/spi.rs	/^pub struct SpiSyscallComponent {$/;"	s
SpimRegisters	chips/nrf52/src/spi.rs	/^struct SpimRegisters {$/;"	s
StackFrame	arch/riscv32i/src/lib.rs	/^struct StackFrame {$/;"	s
Standard	capsules/src/usb.rs	/^    Standard,$/;"	e	enum:RequestType
Standard100k	chips/sam4l/src/i2c.rs	/^    Standard100k,$/;"	e	enum:Speed
StandardDeviceRequest	capsules/src/usb.rs	/^pub enum StandardDeviceRequest {$/;"	g
StartReadBlocks	capsules/src/sdcard.rs	/^    StartReadBlocks { count: u32 },$/;"	e	enum:SpiState
StartWriteBlocks	capsules/src/sdcard.rs	/^    StartWriteBlocks { count: u32 },$/;"	e	enum:SpiState
State	capsules/src/fm25cl.rs	/^enum State {$/;"	g
State	capsules/src/fxos8700cq.rs	/^enum State {$/;"	g
State	capsules/src/isl29035.rs	/^enum State {$/;"	g
State	capsules/src/lps25hb.rs	/^enum State {$/;"	g
State	capsules/src/ltc294x.rs	/^enum State {$/;"	g
State	capsules/src/max17205.rs	/^enum State {$/;"	g
State	capsules/src/mcp230xx.rs	/^enum State {$/;"	g
State	capsules/src/mx25r6435f.rs	/^enum State {$/;"	g
State	capsules/src/nonvolatile_to_pages.rs	/^enum State {$/;"	g
State	capsules/src/pca9544a.rs	/^enum State {$/;"	g
State	capsules/src/si7021.rs	/^enum State {$/;"	g
State	capsules/src/tsl2561.rs	/^enum State {$/;"	g
State	capsules/src/usbc_client.rs	/^enum State {$/;"	g
State	capsules/src/usbc_client.rs	/^impl Default for State {$/;"	c
State	chips/sam4l/src/crccu.rs	/^enum State {$/;"	g
State	chips/sam4l/src/usbc/mod.rs	/^pub enum State {$/;"	g
State	kernel/src/process.rs	/^pub enum State {$/;"	g
StaticRef	kernel/src/common/static_ref.rs	/^impl<T> Clone for StaticRef<T> {$/;"	c
StaticRef	kernel/src/common/static_ref.rs	/^impl<T> Copy for StaticRef<T> {}$/;"	c
StaticRef	kernel/src/common/static_ref.rs	/^impl<T> Deref for StaticRef<T> {$/;"	c
StaticRef	kernel/src/common/static_ref.rs	/^impl<T> StaticRef<T> {$/;"	c
StaticRef	kernel/src/common/static_ref.rs	/^pub struct StaticRef<T> {$/;"	s
Status	capsules/src/fxos8700cq.rs	/^    Status = 0x00,$/;"	e	enum:Registers
Status	capsules/src/ltc294x.rs	/^    Status = 0x00,$/;"	e	enum:Registers
Status	capsules/src/max17205.rs	/^    Status = 0x000,$/;"	e	enum:Registers
Status	capsules/src/net/thread/tlv.rs	/^    Status = 17,$/;"	e	enum:TlvType
Status	capsules/src/net/thread/tlv.rs	/^    Status(u8),$/;"	e	enum:Tlv
StatusReg	capsules/src/lps25hb.rs	/^    StatusReg = 0x27,$/;"	e	enum:Registers
SteeringData	capsules/src/net/thread/tlv.rs	/^    SteeringData = 8,$/;"	e	enum:NetworkManagementTlvType
SteeringData	capsules/src/net/thread/tlv.rs	/^    SteeringData([u8; 16]),             \/\/ Bloom filter max length 16 bytes.$/;"	e	enum:NetworkManagementTlv
StopBits	kernel/src/hil/uart.rs	/^pub enum StopBits {$/;"	g
StoppedRunning	kernel/src/process.rs	/^    StoppedRunning,$/;"	e	enum:State
StoppedYielded	kernel/src/process.rs	/^    StoppedYielded,$/;"	e	enum:State
StoredState	arch/cortex-m/src/syscall.rs	/^    type StoredState = CortexMStoredState;$/;"	t	implementation:SysCall
StoredState	arch/riscv32i/src/syscall.rs	/^    type StoredState = RiscvimacStoredState;$/;"	t	implementation:SysCall
StoredState	kernel/src/syscall.rs	/^    type StoredState: Default + Copy;$/;"	t	interface:UserspaceKernelBoundary
String	capsules/src/usb.rs	/^    String,$/;"	e	enum:DescriptorType
String	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	c
StringDescriptor	capsules/src/usb.rs	/^impl Descriptor for StringDescriptor<'a> {$/;"	c
StringDescriptor	capsules/src/usb.rs	/^pub struct StringDescriptor<'a> {$/;"	s
Structs	kernel/target/doc/tock_cells/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	j
Structs	kernel/target/doc/tock_registers/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	j
Submodule	boards/imix/src/power.rs	/^impl<'a> Submodule<'a> {$/;"	c
Submodule	boards/imix/src/power.rs	/^struct Submodule<'a> {$/;"	s
SubmoduleConfig	boards/imix/src/power.rs	/^pub struct SubmoduleConfig {$/;"	s
SubscribeMap	capsules/src/button.rs	/^pub type SubscribeMap = u32;$/;"	t
SuccessWithValue	kernel/src/returncode.rs	/^    SuccessWithValue { value: usize },$/;"	e	enum:ReturnCode
SynchFrame	capsules/src/usb.rs	/^    SynchFrame,$/;"	e	enum:StandardDeviceRequest
SynchronousRandom	capsules/src/rng.rs	/^impl Client for SynchronousRandom<'a> {$/;"	c
SynchronousRandom	capsules/src/rng.rs	/^impl Random<'a> for SynchronousRandom<'a> {$/;"	c
SynchronousRandom	capsules/src/rng.rs	/^impl SynchronousRandom<'a> {$/;"	c
SynchronousRandom	capsules/src/rng.rs	/^pub struct SynchronousRandom<'a> {$/;"	s
SysCall	arch/cortex-m/src/syscall.rs	/^impl SysCall {$/;"	c
SysCall	arch/cortex-m/src/syscall.rs	/^impl kernel::syscall::UserspaceKernelBoundary for SysCall {$/;"	c
SysCall	arch/cortex-m/src/syscall.rs	/^pub struct SysCall();$/;"	s
SysCall	arch/riscv32i/src/syscall.rs	/^impl SysCall {$/;"	c
SysCall	arch/riscv32i/src/syscall.rs	/^impl kernel::syscall::UserspaceKernelBoundary for SysCall {$/;"	c
SysCall	arch/riscv32i/src/syscall.rs	/^pub struct SysCall();$/;"	s
SysTick	arch/cortex-m/src/systick.rs	/^impl SysTick {$/;"	c
SysTick	arch/cortex-m/src/systick.rs	/^impl kernel::SysTick for SysTick {$/;"	c
SysTick	arch/cortex-m/src/systick.rs	/^pub struct SysTick {$/;"	s
SysTick	chips/arty_exx/src/chip.rs	/^    type SysTick = ();$/;"	t	implementation:ArtyExx
SysTick	chips/cc26x2/src/chip.rs	/^    type SysTick = cortexm4::systick::SysTick;$/;"	t	implementation:Cc26X2
SysTick	chips/e310x/src/chip.rs	/^    type SysTick = ();$/;"	t	implementation:E310x
SysTick	chips/nrf51/src/chip.rs	/^    type SysTick = ();$/;"	t	implementation:NRF51
SysTick	chips/nrf52/src/chip.rs	/^    type SysTick = cortexm4::systick::SysTick;$/;"	t	implementation:NRF52
SysTick	chips/sam4l/src/chip.rs	/^    type SysTick = cortexm4::systick::SysTick;$/;"	t	implementation:Sam4l
SysTick	chips/tm4c129x/src/chip.rs	/^    type SysTick = cortexm4::systick::SysTick;$/;"	t	implementation:Tm4c129x
SysTick	kernel/src/platform/mod.rs	/^    type SysTick: systick::SysTick;$/;"	t	interface:Chip
SysTick	kernel/src/platform/systick.rs	/^impl SysTick for () {$/;"	c
SysTick	kernel/src/platform/systick.rs	/^pub trait SysTick {$/;"	i
Syscall	kernel/src/syscall.rs	/^pub enum Syscall {$/;"	g
SyscallFired	kernel/src/syscall.rs	/^    SyscallFired,$/;"	e	enum:ContextSwitchReason
SysctlRegisters	chips/tm4c129x/src/sysctl.rs	/^struct SysctlRegisters {$/;"	s
Sysmod	capsules/src/fxos8700cq.rs	/^    Sysmod = 0x0b,$/;"	e	enum:Registers
SystemClockSource	chips/sam4l/src/pm.rs	/^pub enum SystemClockSource {$/;"	g
SystemClockSource	chips/tm4c129x/src/sysctl.rs	/^pub enum SystemClockSource {$/;"	g
SystemControl	chips/tm4c129x/src/sysctl.rs	/^impl SystemControl {$/;"	c
SystemControl	chips/tm4c129x/src/sysctl.rs	/^pub struct SystemControl {$/;"	s
SystickRegisters	arch/cortex-m/src/systick.rs	/^struct SystickRegisters {$/;"	s
TARGET	boards/arty-e21/Makefile	/^TARGET=riscv32imac-unknown-none-elf$/;"	m
TARGET	boards/ek-tm4c1294xl/Makefile	/^TARGET=thumbv7em-none-eabihf$/;"	m
TARGET	boards/hail/Makefile	/^TARGET=thumbv7em-none-eabi$/;"	m
TARGET	boards/hifive1/Makefile	/^TARGET=riscv32imac-unknown-none-elf$/;"	m
TARGET	boards/imix/Makefile	/^TARGET=thumbv7em-none-eabi$/;"	m
TARGET	boards/launchxl/Makefile	/^TARGET=thumbv7em-none-eabi$/;"	m
TARGET	boards/nordic/nrf51dk/Makefile	/^TARGET=thumbv6m-none-eabi$/;"	m
TARGET	boards/nordic/nrf52840dk/Makefile	/^TARGET=thumbv7em-none-eabi$/;"	m
TARGET	boards/nordic/nrf52dk/Makefile	/^TARGET=thumbv7em-none-eabi$/;"	m
TARGET_PRODUCT_ID	tools/usb/bulk-echo-fast/main.c	/^static const uint16_t TARGET_PRODUCT_ID = 0xabcd;$/;"	v	typeref:typename:const uint16_t	file:
TARGET_VENDOR_ID	tools/usb/bulk-echo-fast/main.c	/^static const uint16_t TARGET_VENDOR_ID = 0x6667;$/;"	v	typeref:typename:const uint16_t	file:
TC0	chips/sam4l/src/pm.rs	/^    TC0,$/;"	e	enum:PBAClock
TC1	chips/sam4l/src/pm.rs	/^    TC1,$/;"	e	enum:PBAClock
TCP	capsules/src/net/ipv6/ipv6.rs	/^    TCP(TCPHeader),$/;"	e	enum:TransportHeader
TCPHeader	capsules/src/net/tcp.rs	/^pub struct TCPHeader {$/;"	s
TCR	chips/sam4l/src/crccu.rs	/^impl TCR {$/;"	c
TCR	chips/sam4l/src/crccu.rs	/^struct TCR(u32);$/;"	s
TEMP	chips/nrf5x/src/temperature.rs	/^pub static mut TEMP: Temp = Temp::new();$/;"	v
TEMPLATE	tools/svd2regs.py	/^    TEMPLATE = """        {comment}$/;"	v	class:BitfieldFieldEnum
TEMPLATE	tools/svd2regs.py	/^    TEMPLATE = """    {comment}$/;"	v	class:BitfieldField
TEMPLATE	tools/svd2regs.py	/^    TEMPLATE = """$/;"	v	class:Bitfield
TEMPLATE	tools/svd2regs.py	/^    TEMPLATE = """$/;"	v	class:Includes
TEMPLATE	tools/svd2regs.py	/^    TEMPLATE = """$/;"	v	class:PeripheralBaseDeclaration
TEMPLATE	tools/svd2regs.py	/^    TEMPLATE = """_reserved{cnt}: [u8; {size}],"""$/;"	v	class:ReservedStructField
TEMPLATE	tools/svd2regs.py	/^    TEMPLATE = """register_bitfields![u{size},{bitfields}$/;"	v	class:BitfieldsMacro
TEMPLATE	tools/svd2regs.py	/^    TEMPLATE = """{comment}$/;"	v	class:PeripheralStruct
TEMPLATE	tools/svd2regs.py	/^    TEMPLATE = """{comment}$/;"	v	class:PeripheralStructField
TEMPLATE	tools/svd2regs.py	/^    TEMPLATE = ""$/;"	v	class:CodeBlock
TF	boards/imix/src/ipv6_lowpan_test.rs	/^enum TF {$/;"	g
TF	boards/imix/src/sixlowpan_dummy.rs	/^enum TF {$/;"	g
TIMER	chips/tm4c129x/src/sysctl.rs	/^    TIMER(RCGCTIMER),$/;"	e	enum:Clock
TIMER0	chips/nrf5x/src/timer.rs	/^pub static mut TIMER0: Timer = Timer::new(0);$/;"	v
TIMER0	chips/tm4c129x/src/gpt.rs	/^pub static mut TIMER0: AlarmTimer =$/;"	v
TIMER0	chips/tm4c129x/src/sysctl.rs	/^    TIMER0,$/;"	e	enum:RCGCTIMER
TIMER1	chips/tm4c129x/src/sysctl.rs	/^    TIMER1,$/;"	e	enum:RCGCTIMER
TIMER2	chips/nrf5x/src/timer.rs	/^pub static mut TIMER2: Timer = Timer::new(2);$/;"	v
TIMER2	chips/tm4c129x/src/sysctl.rs	/^    TIMER2,$/;"	e	enum:RCGCTIMER
TIMER3	chips/tm4c129x/src/sysctl.rs	/^    TIMER3,$/;"	e	enum:RCGCTIMER
TIMER4	chips/tm4c129x/src/sysctl.rs	/^    TIMER4,$/;"	e	enum:RCGCTIMER
TIMER5	chips/tm4c129x/src/sysctl.rs	/^    TIMER5,$/;"	e	enum:RCGCTIMER
TIMER6	chips/tm4c129x/src/sysctl.rs	/^    TIMER6,$/;"	e	enum:RCGCTIMER
TIMER7	chips/tm4c129x/src/sysctl.rs	/^    TIMER7,$/;"	e	enum:RCGCTIMER
TMP006	capsules/src/tmp006.rs	/^impl Client for TMP006<'a> {$/;"	c
TMP006	capsules/src/tmp006.rs	/^impl Driver for TMP006<'a> {$/;"	c
TMP006	capsules/src/tmp006.rs	/^impl TMP006<'a> {$/;"	c
TMP006	capsules/src/tmp006.rs	/^impl i2c::I2CClient for TMP006<'a> {$/;"	c
TMP006	capsules/src/tmp006.rs	/^pub struct TMP006<'a> {$/;"	s
TOCKLOADER	boards/hail/Makefile	/^TOCKLOADER=tockloader$/;"	m
TOCKLOADER	boards/imix/Makefile	/^TOCKLOADER=tockloader$/;"	m
TOCKLOADER	boards/nordic/nrf51dk/Makefile	/^TOCKLOADER=tockloader$/;"	m
TOCKLOADER	boards/nordic/nrf52840dk/Makefile	/^TOCKLOADER=tockloader$/;"	m
TOCKLOADER	boards/nordic/nrf52dk/Makefile	/^TOCKLOADER=tockloader$/;"	m
TOCKLOADER_JTAG_FLAGS	boards/hail/Makefile	/^TOCKLOADER_JTAG_FLAGS = --jtag --board hail --arch cortex-m4 --jtag-device ATSAM4LC8C$/;"	m
TOCKLOADER_JTAG_FLAGS	boards/imix/Makefile	/^TOCKLOADER_JTAG_FLAGS = --jtag --board imix --arch cortex-m4 --jtag-device ATSAM4LC8C$/;"	m
TOCKLOADER_JTAG_FLAGS	boards/nordic/nrf51dk/Makefile	/^TOCKLOADER_JTAG_FLAGS = --jlink --board nrf51dk$/;"	m
TOCKLOADER_JTAG_FLAGS	boards/nordic/nrf52840dk/Makefile	/^TOCKLOADER_JTAG_FLAGS = --jlink --board nrf52dk$/;"	m
TOCKLOADER_JTAG_FLAGS	boards/nordic/nrf52dk/Makefile	/^TOCKLOADER_JTAG_FLAGS = --jlink --board nrf52dk$/;"	m
TOCK_ARCH	boards/ek-tm4c1294xl/Makefile	/^TOCK_ARCH=cortex-m4$/;"	m
TOCK_ARCH	boards/launchxl/Makefile	/^TOCK_ARCH=cortex-m4$/;"	m
TOCK_ARCH	boards/nordic/nrf51dk/Makefile	/^TOCK_ARCH=cortex-m0$/;"	m
TOCK_ARCH	boards/nordic/nrf52840dk/Makefile	/^TOCK_ARCH=cortex-m4$/;"	m
TOCK_ARCH	boards/nordic/nrf52dk/Makefile	/^TOCK_ARCH=cortex-m4$/;"	m
TOCK_BOARD	boards/launchxl/Makefile	/^TOCK_BOARD=launchxl$/;"	m
TOCK_USERLAND_BASE_DIR	doc/courses/2018-11-SenSys/exercises/app/Makefile	/^TOCK_USERLAND_BASE_DIR = ..\/..\/..\/..\/..\/userland$/;"	m
TOOLCHAIN	boards/hifive1/Makefile	/^TOOLCHAIN ?= ${TOOLCHAIN_PATH}\/riscv32-unknown-linux-gnu$/;"	m
TOOLCHAIN_PATH	boards/hifive1/Makefile	/^TOOLCHAIN_PATH=\/home\/dieraca\/school\/fall_2018\/urop\/riscv-toolchain\/bin$/;"	m
TRNG	chips/cc26x2/src/trng.rs	/^pub static mut TRNG: Trng = Trng::new();$/;"	v
TRNG	chips/nrf5x/src/trng.rs	/^pub static mut TRNG: Trng<'static> = Trng::new();$/;"	v
TRNG	chips/sam4l/src/pm.rs	/^    TRNG,$/;"	e	enum:PBAClock
TRNG	chips/sam4l/src/trng.rs	/^pub static mut TRNG: Trng<'static> = Trng::new();$/;"	v
TRX_CTRL_0	capsules/src/rf233_const.rs	/^    TRX_CTRL_0 = 0x03,$/;"	e	enum:RF233Register
TRX_CTRL_1	capsules/src/rf233_const.rs	/^    TRX_CTRL_1 = 0x04,$/;"	e	enum:RF233Register
TRX_CTRL_2	capsules/src/rf233_const.rs	/^    TRX_CTRL_2 = 0x0C,$/;"	e	enum:RF233Register
TRX_OFF	capsules/src/rf233_const.rs	/^    TRX_OFF = 0x08,$/;"	e	enum:ExternalState
TRX_RPC	capsules/src/rf233_const.rs	/^    TRX_RPC = 0x16,$/;"	e	enum:RF233Register
TRX_STATE	capsules/src/rf233_const.rs	/^    TRX_STATE = 0x02,$/;"	e	enum:RF233Register
TRX_STATUS	capsules/src/rf233_const.rs	/^    TRX_STATUS = 0x01,$/;"	e	enum:RF233Register
TSL2561	capsules/src/tsl2561.rs	/^impl Driver for TSL2561<'a> {$/;"	c
TSL2561	capsules/src/tsl2561.rs	/^impl TSL2561<'a> {$/;"	c
TSL2561	capsules/src/tsl2561.rs	/^impl gpio::Client for TSL2561<'a> {$/;"	c
TSL2561	capsules/src/tsl2561.rs	/^impl i2c::I2CClient for TSL2561<'a> {$/;"	c
TSL2561	capsules/src/tsl2561.rs	/^pub struct TSL2561<'a> {$/;"	s
TST_AGC	capsules/src/rf233_const.rs	/^    TST_AGC = 0x3C,$/;"	e	enum:RF233Register
TST_CTRL_DIGI	capsules/src/rf233_const.rs	/^    TST_CTRL_DIGI = 0x36,$/;"	e	enum:RF233Register
TST_SDM	capsules/src/rf233_const.rs	/^    TST_SDM = 0x3D,$/;"	e	enum:RF233Register
TWIM	chips/nrf51/src/i2c.rs	/^impl TWIM {$/;"	c
TWIM	chips/nrf51/src/i2c.rs	/^impl i2c::I2CMaster for TWIM {$/;"	c
TWIM	chips/nrf51/src/i2c.rs	/^impl i2c::I2CMasterSlave for TWIM {}$/;"	c
TWIM	chips/nrf51/src/i2c.rs	/^impl i2c::I2CSlave for TWIM {$/;"	c
TWIM	chips/nrf51/src/i2c.rs	/^pub struct TWIM {$/;"	s
TWIM	chips/nrf52/src/i2c.rs	/^impl TWIM {$/;"	c
TWIM	chips/nrf52/src/i2c.rs	/^impl hil::i2c::I2CMaster for TWIM {$/;"	c
TWIM	chips/nrf52/src/i2c.rs	/^impl hil::i2c::I2CMasterSlave for TWIM {}$/;"	c
TWIM	chips/nrf52/src/i2c.rs	/^impl hil::i2c::I2CSlave for TWIM {$/;"	c
TWIM	chips/nrf52/src/i2c.rs	/^pub struct TWIM {$/;"	s
TWIM0	chips/nrf51/src/i2c.rs	/^pub static mut TWIM0: TWIM = TWIM::new(0);$/;"	v
TWIM0	chips/nrf52/src/i2c.rs	/^pub static mut TWIM0: TWIM = TWIM::new(INSTANCES[0]);$/;"	v
TWIM0	chips/sam4l/src/pm.rs	/^    TWIM0,$/;"	e	enum:PBAClock
TWIM0_RX	chips/sam4l/src/dma.rs	/^    TWIM0_RX = 5,$/;"	e	enum:DMAPeripheral
TWIM0_TX	chips/sam4l/src/dma.rs	/^    TWIM0_TX = 23,$/;"	e	enum:DMAPeripheral
TWIM1	chips/nrf51/src/i2c.rs	/^pub static mut TWIM1: TWIM = TWIM::new(1);$/;"	v
TWIM1	chips/nrf52/src/i2c.rs	/^pub static mut TWIM1: TWIM = TWIM::new(INSTANCES[1]);$/;"	v
TWIM1	chips/sam4l/src/pm.rs	/^    TWIM1,$/;"	e	enum:PBAClock
TWIM1_RX	chips/sam4l/src/dma.rs	/^    TWIM1_RX = 6,$/;"	e	enum:DMAPeripheral
TWIM1_TX	chips/sam4l/src/dma.rs	/^    TWIM1_TX = 24,$/;"	e	enum:DMAPeripheral
TWIM2	chips/sam4l/src/pm.rs	/^    TWIM2,$/;"	e	enum:PBAClock
TWIM2_RX	chips/sam4l/src/dma.rs	/^    TWIM2_RX = 7,$/;"	e	enum:DMAPeripheral
TWIM2_TX	chips/sam4l/src/dma.rs	/^    TWIM2_TX = 25,$/;"	e	enum:DMAPeripheral
TWIM3	chips/sam4l/src/pm.rs	/^    TWIM3,$/;"	e	enum:PBAClock
TWIM3_RX	chips/sam4l/src/dma.rs	/^    TWIM3_RX = 8,$/;"	e	enum:DMAPeripheral
TWIM3_TX	chips/sam4l/src/dma.rs	/^    TWIM3_TX = 26,$/;"	e	enum:DMAPeripheral
TWIMClock	chips/sam4l/src/i2c.rs	/^impl ClockInterface for TWIMClock {$/;"	c
TWIMClock	chips/sam4l/src/i2c.rs	/^struct TWIMClock {$/;"	s
TWIMRegisterManager	chips/sam4l/src/i2c.rs	/^type TWIMRegisterManager<'a> = PeripheralManager<'a, I2CHw, TWIMClock>;$/;"	t
TWIMRegisters	chips/sam4l/src/i2c.rs	/^struct TWIMRegisters {$/;"	s
TWIS0	chips/sam4l/src/pm.rs	/^    TWIS0,$/;"	e	enum:PBAClock
TWIS0_RX	chips/sam4l/src/dma.rs	/^    TWIS0_RX = 9,$/;"	e	enum:DMAPeripheral
TWIS0_TX	chips/sam4l/src/dma.rs	/^    TWIS0_TX = 27,$/;"	e	enum:DMAPeripheral
TWIS1	chips/sam4l/src/pm.rs	/^    TWIS1,$/;"	e	enum:PBAClock
TWIS1_RX	chips/sam4l/src/dma.rs	/^    TWIS1_RX = 10,$/;"	e	enum:DMAPeripheral
TWIS1_TX	chips/sam4l/src/dma.rs	/^    TWIS1_TX = 28,$/;"	e	enum:DMAPeripheral
TWISClock	chips/sam4l/src/i2c.rs	/^impl ClockInterface for TWISClock {$/;"	c
TWISClock	chips/sam4l/src/i2c.rs	/^struct TWISClock {$/;"	s
TWISRegisterManager	chips/sam4l/src/i2c.rs	/^type TWISRegisterManager<'a> = PeripheralManager<'a, I2CHw, TWISClock>;$/;"	t
TWISRegisters	chips/sam4l/src/i2c.rs	/^struct TWISRegisters {$/;"	s
TX	capsules/src/ieee802154/xmac.rs	/^    TX,          \/\/ Transmitting data packet to the destination node$/;"	e	enum:XMacState
TXBUFFER	capsules/src/fm25cl.rs	/^pub static mut TXBUFFER: [u8; 512] = [0; 512];$/;"	v
TXBUFFER	capsules/src/mx25r6435f.rs	/^pub static mut TXBUFFER: [u8; PAGE_SIZE as usize + 4] = [0; PAGE_SIZE as usize + 4];$/;"	v
TXBUFFER	capsules/src/sdcard.rs	/^pub static mut TXBUFFER: [u8; 515] = [0; 515];$/;"	v
TX_ARET_ON	capsules/src/rf233.rs	/^    TX_ARET_ON,$/;"	e	enum:InternalState
TX_ARET_ON	capsules/src/rf233_const.rs	/^    TX_ARET_ON = 0x19,$/;"	e	enum:ExternalState
TX_ARET_ON	capsules/src/rf233_const.rs	/^    TX_ARET_ON = 0x19,$/;"	e	enum:RF233TrxCmd
TX_BUF	boards/imix/src/sixlowpan_dummy.rs	/^static TX_BUF: [u8; 128] = [0; 128];$/;"	v
TX_DELAY	capsules/src/ieee802154/xmac.rs	/^    TX_DELAY,    \/\/ Backing off to send data directly without preamble$/;"	e	enum:XMacState
TX_DONE	capsules/src/rf233.rs	/^    TX_DONE,$/;"	e	enum:InternalState
TX_PENDING	capsules/src/rf233.rs	/^    TX_PENDING,$/;"	e	enum:InternalState
TX_PLL_START	capsules/src/rf233.rs	/^    TX_PLL_START,$/;"	e	enum:InternalState
TX_PLL_WAIT	capsules/src/rf233.rs	/^    TX_PLL_WAIT,$/;"	e	enum:InternalState
TX_PREAMBLE	capsules/src/ieee802154/xmac.rs	/^    TX_PREAMBLE, \/\/ Transmitting preambles and waiting for an ACK$/;"	e	enum:XMacState
TX_READ_ACK	capsules/src/rf233.rs	/^    TX_READ_ACK,$/;"	e	enum:InternalState
TX_RETURN_TO_RX	capsules/src/rf233.rs	/^    TX_RETURN_TO_RX,$/;"	e	enum:InternalState
TX_START	capsules/src/rf233_const.rs	/^    TX_START = 0x02,$/;"	e	enum:RF233TrxCmd
TX_STATUS_PRECHECK1	capsules/src/rf233.rs	/^    TX_STATUS_PRECHECK1,$/;"	e	enum:InternalState
TX_STATUS_PRECHECK2	capsules/src/rf233.rs	/^    TX_STATUS_PRECHECK2,$/;"	e	enum:InternalState
TX_TRANSMITTING	capsules/src/rf233.rs	/^    TX_TRANSMITTING,$/;"	e	enum:InternalState
TX_WRITING_FRAME	capsules/src/rf233.rs	/^    TX_WRITING_FRAME,$/;"	e	enum:InternalState
TX_WRITING_FRAME_DONE	capsules/src/rf233.rs	/^    TX_WRITING_FRAME_DONE,$/;"	e	enum:InternalState
TakeCell	libraries/tock-cells/src/take_cell.rs	/^impl<'a, T: ?Sized> TakeCell<'a, T> {$/;"	c
TakeCell	libraries/tock-cells/src/take_cell.rs	/^pub struct TakeCell<'a, T: 'a + ?Sized> {$/;"	s
TakeMeasurementClear	capsules/src/lps25hb.rs	/^    TakeMeasurementClear,$/;"	e	enum:State
TakeMeasurementConfigMeasurement	capsules/src/tsl2561.rs	/^    TakeMeasurementConfigMeasurement,$/;"	e	enum:State
TakeMeasurementConfigure	capsules/src/lps25hb.rs	/^    TakeMeasurementConfigure,$/;"	e	enum:State
TakeMeasurementInit	capsules/src/lps25hb.rs	/^    TakeMeasurementInit,$/;"	e	enum:State
TakeMeasurementReset1	capsules/src/tsl2561.rs	/^    TakeMeasurementReset1,$/;"	e	enum:State
TakeMeasurementReset2	capsules/src/tsl2561.rs	/^    TakeMeasurementReset2,$/;"	e	enum:State
TakeMeasurementTurnOn	capsules/src/tsl2561.rs	/^    TakeMeasurementTurnOn,$/;"	e	enum:State
TakeRhMeasurementInit	capsules/src/si7021.rs	/^    TakeRhMeasurementInit,$/;"	e	enum:State
TakeTempMeasurementInit	capsules/src/si7021.rs	/^    TakeTempMeasurementInit,$/;"	e	enum:State
Target	kernel/src/common/static_ref.rs	/^    type Target = T;$/;"	t	implementation:StaticRef
Target	kernel/src/grant.rs	/^    type Target = T;$/;"	t	implementation:Borrowed
Target	kernel/src/grant.rs	/^    type Target = T;$/;"	t	implementation:Owned
Target	kernel/src/mem.rs	/^    type Target = T;$/;"	t	implementation:AppPtr
Task	chips/sam4l/src/deferred_call_tasks.rs	/^impl Into<usize> for Task {$/;"	c
Task	chips/sam4l/src/deferred_call_tasks.rs	/^impl TryFrom<usize> for Task {$/;"	c
Task	chips/sam4l/src/deferred_call_tasks.rs	/^pub enum Task {$/;"	g
Task	kernel/src/process.rs	/^    tasks: MapCell<RingBuffer<'a, Task>>,$/;"	m	struct:Process
Task	kernel/src/process.rs	/^pub enum Task {$/;"	g
TbfHeader	kernel/src/tbfheader.rs	/^crate enum TbfHeader {$/;"	g
TbfHeader	kernel/src/tbfheader.rs	/^impl TbfHeader {$/;"	c
TbfHeaderMain	kernel/src/tbfheader.rs	/^    TbfHeaderMain = 1,$/;"	e	enum:TbfHeaderTypes
TbfHeaderPackageName	kernel/src/tbfheader.rs	/^    TbfHeaderPackageName = 3,$/;"	e	enum:TbfHeaderTypes
TbfHeaderTlv	kernel/src/tbfheader.rs	/^crate struct TbfHeaderTlv {$/;"	s
TbfHeaderTypes	kernel/src/tbfheader.rs	/^crate enum TbfHeaderTypes {$/;"	g
TbfHeaderV2	kernel/src/tbfheader.rs	/^    TbfHeaderV2(TbfHeaderV2),$/;"	e	enum:TbfHeader
TbfHeaderV2	kernel/src/tbfheader.rs	/^crate struct TbfHeaderV2 {$/;"	s
TbfHeaderV2Base	kernel/src/tbfheader.rs	/^crate struct TbfHeaderV2Base {$/;"	s
TbfHeaderV2Main	kernel/src/tbfheader.rs	/^crate struct TbfHeaderV2Main {$/;"	s
TbfHeaderV2WriteableFlashRegion	kernel/src/tbfheader.rs	/^crate struct TbfHeaderV2WriteableFlashRegion {$/;"	s
TbfHeaderWriteableFlashRegions	kernel/src/tbfheader.rs	/^    TbfHeaderWriteableFlashRegions = 2,$/;"	e	enum:TbfHeaderTypes
Temp	capsules/src/fxos8700cq.rs	/^    Temp = 0x51,$/;"	e	enum:Registers
Temp	chips/nrf5x/src/temperature.rs	/^impl Temp {$/;"	c
Temp	chips/nrf5x/src/temperature.rs	/^impl kernel::hil::sensors::TemperatureDriver for Temp {$/;"	c
Temp	chips/nrf5x/src/temperature.rs	/^pub struct Temp {$/;"	s
TempOutH	capsules/src/lps25hb.rs	/^    TempOutH = 0x2c,$/;"	e	enum:Registers
TempOutL	capsules/src/lps25hb.rs	/^    TempOutL = 0x2b,$/;"	e	enum:Registers
TempRegisters	chips/nrf5x/src/temperature.rs	/^struct TempRegisters {$/;"	s
Temperature	capsules/src/si7021.rs	/^    Temperature,$/;"	e	enum:OnDeck
TemperatureClient	kernel/src/hil/sensors.rs	/^pub trait TemperatureClient {$/;"	i
TemperatureComponent	boards/imix/src/components/si7021.rs	/^impl Component for TemperatureComponent {$/;"	c
TemperatureComponent	boards/imix/src/components/si7021.rs	/^impl TemperatureComponent {$/;"	c
TemperatureComponent	boards/imix/src/components/si7021.rs	/^pub struct TemperatureComponent {$/;"	s
TemperatureDriver	kernel/src/hil/sensors.rs	/^pub trait TemperatureDriver {$/;"	i
TemperatureSensor	boards/imix/src/components/si7021.rs	/^    type Output = &'static TemperatureSensor<'static>;$/;"	v	implementation:TemperatureComponent
TemperatureSensor	capsules/src/temperature.rs	/^impl Driver for TemperatureSensor<'a> {$/;"	c
TemperatureSensor	capsules/src/temperature.rs	/^impl TemperatureSensor<'a> {$/;"	c
TemperatureSensor	capsules/src/temperature.rs	/^impl hil::sensors::TemperatureClient for TemperatureSensor<'a> {$/;"	c
TemperatureSensor	capsules/src/temperature.rs	/^pub struct TemperatureSensor<'a> {$/;"	s
Termination	capsules/src/net/ieee802154.rs	/^    Termination,$/;"	e	enum:PayloadIE
Termination1	capsules/src/net/ieee802154.rs	/^    Termination1,$/;"	e	enum:HeaderIE
Termination2	capsules/src/net/ieee802154.rs	/^    Termination2,$/;"	e	enum:HeaderIE
Test	capsules/src/test/aes_ccm.rs	/^impl<A: AES128CCM<'a>> CCMClient for Test<'a, A> {$/;"	c
Test	capsules/src/test/aes_ccm.rs	/^impl<A: AES128CCM<'a>> Test<'a, A> {$/;"	c
Test	capsules/src/test/aes_ccm.rs	/^pub struct Test<'a, A: AES128CCM<'a>> {$/;"	s
TestAes128Cbc	capsules/src/test/aes.rs	/^impl<A: AES128<'a> + AES128CBC> TestAes128Cbc<'a, A> {$/;"	c
TestAes128Cbc	capsules/src/test/aes.rs	/^impl<A: AES128<'a> + AES128CBC> hil::symmetric_encryption::Client<'a> for TestAes128Cbc<'a, A> {$/;"	c
TestAes128Cbc	capsules/src/test/aes.rs	/^pub struct TestAes128Cbc<'a, A: 'a> {$/;"	s
TestAes128Ctr	capsules/src/test/aes.rs	/^impl<A: AES128<'a> + AES128Ctr> TestAes128Ctr<'a, A> {$/;"	c
TestAes128Ctr	capsules/src/test/aes.rs	/^impl<A: AES128<'a> + AES128Ctr> hil::symmetric_encryption::Client<'a> for TestAes128Ctr<'a, A> {$/;"	c
TestAes128Ctr	capsules/src/test/aes.rs	/^pub struct TestAes128Ctr<'a, A: 'a> {$/;"	s
TestEntropy32	capsules/src/test/rng.rs	/^impl<'a> TestEntropy32<'a> {$/;"	c
TestEntropy32	capsules/src/test/rng.rs	/^impl<'a> entropy::Client32 for TestEntropy32<'a> {$/;"	c
TestEntropy32	capsules/src/test/rng.rs	/^pub struct TestEntropy32<'a> {$/;"	s
TestEntropy8	capsules/src/test/rng.rs	/^impl<'a> TestEntropy8<'a> {$/;"	c
TestEntropy8	capsules/src/test/rng.rs	/^impl<'a> entropy::Client8 for TestEntropy8<'a> {$/;"	c
TestEntropy8	capsules/src/test/rng.rs	/^pub struct TestEntropy8<'a> {$/;"	s
TestMode	capsules/src/usb.rs	/^    TestMode,$/;"	e	enum:FeatureSelector
TestRandom	capsules/src/test/rng.rs	/^impl<'a> TestRandom<'a> {$/;"	c
TestRandom	capsules/src/test/rng.rs	/^pub struct TestRandom<'a> {$/;"	s
TestRng	capsules/src/test/rng.rs	/^impl<'a> TestRng<'a> {$/;"	c
TestRng	capsules/src/test/rng.rs	/^impl<'a> rng::Client for TestRng<'a> {$/;"	c
TestRng	capsules/src/test/rng.rs	/^pub struct TestRng<'a> {$/;"	s
TestVirtualUartReceive	capsules/src/test/virtual_uart.rs	/^impl Client for TestVirtualUartReceive {$/;"	c
TestVirtualUartReceive	capsules/src/test/virtual_uart.rs	/^impl TestVirtualUartReceive {$/;"	c
TestVirtualUartReceive	capsules/src/test/virtual_uart.rs	/^pub struct TestVirtualUartReceive {$/;"	s
Threshold2V8	capsules/src/ltc294x.rs	/^    Threshold2V8 = 0x01,$/;"	e	enum:VBatAlert
Threshold2V9	capsules/src/ltc294x.rs	/^    Threshold2V9 = 0x02,$/;"	e	enum:VBatAlert
Threshold3V0	capsules/src/ltc294x.rs	/^    Threshold3V0 = 0x03,$/;"	e	enum:VBatAlert
ThresholdHighHigh	capsules/src/tsl2561.rs	/^    ThresholdHighHigh = 0x05,$/;"	e	enum:Registers
ThresholdHighLow	capsules/src/tsl2561.rs	/^    ThresholdHighLow = 0x04,$/;"	e	enum:Registers
ThresholdLowHigh	capsules/src/tsl2561.rs	/^    ThresholdLowHigh = 0x03,$/;"	e	enum:Registers
ThresholdLowLow	capsules/src/tsl2561.rs	/^    ThresholdLowLow = 0x02,$/;"	e	enum:Registers
ThsPH	capsules/src/lps25hb.rs	/^    ThsPH = 0x31,$/;"	e	enum:Registers
ThsPL	capsules/src/lps25hb.rs	/^    ThsPL = 0x30,$/;"	e	enum:Registers
Time	kernel/src/hil/time.rs	/^pub trait Time {$/;"	i
Timeout	capsules/src/net/thread/tlv.rs	/^    Timeout = 2,$/;"	e	enum:TlvType
Timeout	capsules/src/net/thread/tlv.rs	/^    Timeout(u32),$/;"	e	enum:Tlv
TimeoutFailure	capsules/src/sdcard.rs	/^    TimeoutFailure = -5,$/;"	e	enum:ErrorCode
Timer	chips/nrf5x/src/timer.rs	/^impl Timer {$/;"	c
Timer	chips/nrf5x/src/timer.rs	/^pub struct Timer {$/;"	s
Timer	kernel/src/hil/time.rs	/^pub trait Timer: Time {$/;"	i
TimerAlarm	chips/nrf5x/src/timer.rs	/^impl TimerAlarm {$/;"	c
TimerAlarm	chips/nrf5x/src/timer.rs	/^impl hil::time::Alarm for TimerAlarm {$/;"	c
TimerAlarm	chips/nrf5x/src/timer.rs	/^impl hil::time::Time for TimerAlarm {$/;"	c
TimerAlarm	chips/nrf5x/src/timer.rs	/^pub struct TimerAlarm {$/;"	s
TimerRegisters	chips/nrf5x/src/timer.rs	/^struct TimerRegisters {$/;"	s
TimesliceExpired	kernel/src/syscall.rs	/^    TimesliceExpired,$/;"	e	enum:ContextSwitchReason
Timing	capsules/src/tsl2561.rs	/^    Timing = 0x01,$/;"	e	enum:Registers
Tlv	capsules/src/net/thread/tlv.rs	/^impl Tlv<'a> {$/;"	c
Tlv	capsules/src/net/thread/tlv.rs	/^pub enum Tlv<'a> {$/;"	g
TlvRequest	capsules/src/net/thread/tlv.rs	/^    TlvRequest = 13,$/;"	e	enum:TlvType
TlvRequest	capsules/src/net/thread/tlv.rs	/^    TlvRequest(&'a [u8]),$/;"	e	enum:Tlv
TlvType	capsules/src/net/thread/tlv.rs	/^impl From<u8> for TlvType {$/;"	c
TlvType	capsules/src/net/thread/tlv.rs	/^impl<'a, 'b> From<&'a Tlv<'b>> for TlvType {$/;"	c
TlvType	capsules/src/net/thread/tlv.rs	/^pub enum TlvType {$/;"	g
Tm4c129x	chips/tm4c129x/src/chip.rs	/^impl Chip for Tm4c129x {$/;"	c
Tm4c129x	chips/tm4c129x/src/chip.rs	/^impl Tm4c129x {$/;"	c
Tm4c129x	chips/tm4c129x/src/chip.rs	/^pub struct Tm4c129x {$/;"	s
ToPrimitive	libraries/enum_primitive/src/cast.rs	/^pub trait ToPrimitive {$/;"	i
TrWidth	chips/sam4l/src/crccu.rs	/^enum TrWidth {$/;"	g
Traffic	boards/imix/src/ipv6_lowpan_test.rs	/^    Traffic = 0b01,$/;"	e	enum:TF
Traffic	boards/imix/src/sixlowpan_dummy.rs	/^    Traffic = 0b01,$/;"	e	enum:TF
TrafficFlow	boards/imix/src/ipv6_lowpan_test.rs	/^    TrafficFlow = 0b11,$/;"	e	enum:TF
TrafficFlow	boards/imix/src/sixlowpan_dummy.rs	/^    TrafficFlow = 0b11,$/;"	e	enum:TF
Traits	kernel/target/doc/tock_cells/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	j
Traits	kernel/target/doc/tock_registers/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	j
Transaction	capsules/src/i2c_master.rs	/^struct Transaction {$/;"	s
Transaction	chips/cc26x2/src/uart.rs	/^struct Transaction {$/;"	s
Transfer	chips/cc26x2/src/i2c.rs	/^struct Transfer {$/;"	s
TransferDirection	capsules/src/usb.rs	/^pub enum TransferDirection {$/;"	g
TransferMode	chips/cc26x2/src/i2c.rs	/^enum TransferMode {$/;"	g
TransferType	capsules/src/usb.rs	/^pub enum TransferType {$/;"	g
Transfer_Completing	chips/sam4l/src/usart.rs	/^    Transfer_Completing, \/\/ DMA finished, but not all bytes sent$/;"	e	enum:USARTStateTX
TransientCfg	capsules/src/fxos8700cq.rs	/^    TransientCfg = 0x1d,$/;"	e	enum:Registers
TransientCount	capsules/src/fxos8700cq.rs	/^    TransientCount = 0x20,$/;"	e	enum:Registers
TransientSrc	capsules/src/fxos8700cq.rs	/^    TransientSrc = 0x1e,$/;"	e	enum:Registers
TransientThs	capsules/src/fxos8700cq.rs	/^    TransientThs = 0x1f,$/;"	e	enum:Registers
Transmit	capsules/src/ieee802154/virtual_mac.rs	/^    Transmit(framer::Frame),$/;"	e	enum:Op
Transmit	capsules/src/virtual_uart.rs	/^    Transmit { len: usize },$/;"	e	enum:Operation
Transmit	chips/cc26x2/src/i2c.rs	/^    Transmit,$/;"	e	enum:TransferMode
TransmitThenReceive	chips/cc26x2/src/i2c.rs	/^    TransmitThenReceive(usize),$/;"	e	enum:TransferMode
TransportHeader	capsules/src/net/ipv6/ipv6.rs	/^pub enum TransportHeader {$/;"	g
TrigCfg	capsules/src/fxos8700cq.rs	/^    TrigCfg = 0x0a,$/;"	e	enum:Registers
Trng	chips/cc26x2/src/trng.rs	/^impl<'a> Trng<'a> {$/;"	c
Trng	chips/cc26x2/src/trng.rs	/^impl<'a> entropy::Entropy32<'a> for Trng<'a> {$/;"	c
Trng	chips/cc26x2/src/trng.rs	/^pub struct Trng<'a> {$/;"	s
Trng	chips/nrf5x/src/trng.rs	/^impl Trng<'a> {$/;"	c
Trng	chips/nrf5x/src/trng.rs	/^impl<'a> entropy::Entropy32<'a> for Trng<'a> {$/;"	c
Trng	chips/nrf5x/src/trng.rs	/^pub struct Trng<'a> {$/;"	s
Trng	chips/sam4l/src/trng.rs	/^impl Trng<'a> {$/;"	c
Trng	chips/sam4l/src/trng.rs	/^impl entropy::Entropy32<'a> for Trng<'a> {$/;"	c
Trng	chips/sam4l/src/trng.rs	/^pub struct Trng<'a> {$/;"	s
TrngIter	chips/cc26x2/src/trng.rs	/^impl<'a, 'b> Iterator for TrngIter<'a, 'b> {$/;"	c
TrngIter	chips/cc26x2/src/trng.rs	/^struct TrngIter<'a, 'b: 'a>(&'a Trng<'b>);$/;"	s
TrngIter	chips/nrf5x/src/trng.rs	/^impl Iterator for TrngIter<'a, 'b> {$/;"	c
TrngIter	chips/nrf5x/src/trng.rs	/^struct TrngIter<'a, 'b: 'a>(&'a Trng<'b>);$/;"	s
TrngIter	chips/sam4l/src/trng.rs	/^impl Iterator for TrngIter<'a, 'b> {$/;"	c
TrngIter	chips/sam4l/src/trng.rs	/^struct TrngIter<'a, 'b: 'a>(&'a Trng<'b>);$/;"	s
TrngRegisters	chips/sam4l/src/trng.rs	/^struct TrngRegisters {$/;"	s
TryFromValue	libraries/tock-register-interface/src/registers.rs	/^pub trait TryFromValue<V> {$/;"	i
TwimRegisters	chips/nrf51/src/i2c.rs	/^struct TwimRegisters {$/;"	s
TwimRegisters	chips/nrf52/src/i2c.rs	/^struct TwimRegisters {$/;"	s
Two	kernel/src/hil/uart.rs	/^    Two = 2,$/;"	e	enum:StopBits
TxClient	capsules/src/ieee802154/device.rs	/^pub trait TxClient {$/;"	i
TxClient	kernel/src/hil/ble_advertising.rs	/^pub trait TxClient {$/;"	i
TxClient	kernel/src/hil/radio.rs	/^pub trait TxClient {$/;"	i
TxPower	chips/nrf5x/src/constants.rs	/^impl TryFrom<u8> for TxPower {$/;"	c
TxPower	chips/nrf5x/src/constants.rs	/^pub enum TxPower {$/;"	g
TxState	capsules/src/ieee802154/framer.rs	/^enum TxState {$/;"	g
TxState	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^impl TxState<'a> {$/;"	c
TxState	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^pub struct TxState<'a> {$/;"	s
Type1	capsules/src/net/icmpv6/icmpv6.rs	/^    Type1 { unused: u32 },$/;"	e	enum:ICMP6HeaderOptions
Type1	capsules/src/net/icmpv6/icmpv6.rs	/^    Type1,   \/\/ Destination Unreachable$/;"	e	enum:ICMP6Type
Type128	capsules/src/net/icmpv6/icmpv6.rs	/^    Type128 { id: u16, seqno: u16 },$/;"	e	enum:ICMP6HeaderOptions
Type128	capsules/src/net/icmpv6/icmpv6.rs	/^    Type128, \/\/ Echo Request$/;"	e	enum:ICMP6Type
Type129	capsules/src/net/icmpv6/icmpv6.rs	/^    Type129 { id: u16, seqno: u16 },$/;"	e	enum:ICMP6HeaderOptions
Type129	capsules/src/net/icmpv6/icmpv6.rs	/^    Type129, \/\/ Echo Reply$/;"	e	enum:ICMP6Type
Type3	capsules/src/net/icmpv6/icmpv6.rs	/^    Type3 { unused: u32 },$/;"	e	enum:ICMP6HeaderOptions
Type3	capsules/src/net/icmpv6/icmpv6.rs	/^    Type3,   \/\/ Time Exceeded$/;"	e	enum:ICMP6Type
UART	chips/cc26x2/src/uart.rs	/^impl UART {$/;"	c
UART	chips/cc26x2/src/uart.rs	/^impl kernel::hil::uart::UART for UART {$/;"	c
UART	chips/cc26x2/src/uart.rs	/^pub struct UART {$/;"	s
UART	chips/nrf51/src/uart.rs	/^impl UART {$/;"	c
UART	chips/nrf51/src/uart.rs	/^impl uart::UART for UART {$/;"	c
UART	chips/nrf51/src/uart.rs	/^pub struct UART {$/;"	s
UART	chips/tm4c129x/src/sysctl.rs	/^    UART(RCGCUART),$/;"	e	enum:Clock
UART	chips/tm4c129x/src/uart.rs	/^impl UART {$/;"	c
UART	chips/tm4c129x/src/uart.rs	/^impl hil::uart::UART for UART {$/;"	c
UART	chips/tm4c129x/src/uart.rs	/^pub struct UART {$/;"	s
UART	kernel/src/hil/uart.rs	/^pub trait UART {$/;"	i
UART0	chips/arty_exx/src/uart.rs	/^pub static mut UART0: Uart = Uart::new(UART0_BASE);$/;"	v
UART0	chips/cc26x2/src/uart.rs	/^pub static mut UART0: UART = UART::new(&UART0_BASE);$/;"	v
UART0	chips/e310x/src/uart.rs	/^pub static mut UART0: Uart = Uart::new(UART0_BASE);$/;"	v
UART0	chips/nrf51/src/uart.rs	/^pub static mut UART0: UART = UART::new();$/;"	v
UART0	chips/tm4c129x/src/sysctl.rs	/^    UART0,$/;"	e	enum:RCGCUART
UART0	chips/tm4c129x/src/uart.rs	/^pub static mut UART0: UART = UART::new(UART_BASES[0], sysctl::Clock::UART(sysctl::RCGCUART::UART/;"	v
UART1	chips/cc26x2/src/uart.rs	/^pub static mut UART1: UART = UART::new(&UART1_BASE);$/;"	v
UART1	chips/tm4c129x/src/sysctl.rs	/^    UART1,$/;"	e	enum:RCGCUART
UART2	chips/tm4c129x/src/sysctl.rs	/^    UART2,$/;"	e	enum:RCGCUART
UART3	chips/tm4c129x/src/sysctl.rs	/^    UART3,$/;"	e	enum:RCGCUART
UART4	chips/tm4c129x/src/sysctl.rs	/^    UART4,$/;"	e	enum:RCGCUART
UART5	chips/tm4c129x/src/sysctl.rs	/^    UART5,$/;"	e	enum:RCGCUART
UART6	chips/tm4c129x/src/sysctl.rs	/^    UART6,$/;"	e	enum:RCGCUART
UART7	chips/tm4c129x/src/sysctl.rs	/^    UART7,$/;"	e	enum:RCGCUART
UARTE0	chips/nrf52/src/uart.rs	/^pub static mut UARTE0: Uarte = Uarte::new();$/;"	v
UARTParameters	kernel/src/hil/uart.rs	/^pub struct UARTParameters {$/;"	s
UARTParams	chips/nrf51/src/uart.rs	/^pub struct UARTParams {$/;"	s
UARTParams	chips/nrf52/src/uart.rs	/^pub struct UARTParams {$/;"	s
UARTReceiveAdvanced	kernel/src/hil/uart.rs	/^pub trait UARTReceiveAdvanced: UART {$/;"	i
UDP	capsules/src/net/ipv6/ipv6.rs	/^    UDP(UDPHeader),$/;"	e	enum:TransportHeader
UDPComponent	boards/imix/src/components/udp_6lowpan.rs	/^impl Component for UDPComponent {$/;"	c
UDPComponent	boards/imix/src/components/udp_6lowpan.rs	/^impl UDPComponent {$/;"	c
UDPComponent	boards/imix/src/components/udp_6lowpan.rs	/^pub struct UDPComponent {$/;"	s
UDPDriver	capsules/src/net/udp/driver.rs	/^impl<'a> Driver for UDPDriver<'a> {$/;"	c
UDPDriver	capsules/src/net/udp/driver.rs	/^impl<'a> UDPDriver<'a> {$/;"	c
UDPDriver	capsules/src/net/udp/driver.rs	/^impl<'a> UDPRecvClient for UDPDriver<'a> {$/;"	c
UDPDriver	capsules/src/net/udp/driver.rs	/^impl<'a> UDPSendClient for UDPDriver<'a> {$/;"	c
UDPDriver	capsules/src/net/udp/driver.rs	/^pub struct UDPDriver<'a> {$/;"	s
UDPEndpoint	capsules/src/net/udp/driver.rs	/^impl UDPEndpoint {$/;"	c
UDPEndpoint	capsules/src/net/udp/driver.rs	/^pub struct UDPEndpoint {$/;"	s
UDPHeader	capsules/src/net/udp/udp.rs	/^impl Default for UDPHeader {$/;"	c
UDPHeader	capsules/src/net/udp/udp.rs	/^impl UDPHeader {$/;"	c
UDPHeader	capsules/src/net/udp/udp.rs	/^pub struct UDPHeader {$/;"	s
UDPReceiver	capsules/src/net/udp/udp_recv.rs	/^impl<'a> IP6RecvClient for UDPReceiver<'a> {$/;"	c
UDPReceiver	capsules/src/net/udp/udp_recv.rs	/^impl<'a> UDPReceiver<'a> {$/;"	c
UDPReceiver	capsules/src/net/udp/udp_recv.rs	/^pub struct UDPReceiver<'a> {$/;"	s
UDPRecvClient	capsules/src/net/udp/udp_recv.rs	/^pub trait UDPRecvClient {$/;"	i
UDPSendClient	capsules/src/net/udp/udp_send.rs	/^pub trait UDPSendClient {$/;"	i
UDPSendStruct	capsules/src/net/udp/udp_send.rs	/^impl<T: IP6Sender<'a>> IP6SendClient for UDPSendStruct<'a, T> {$/;"	c
UDPSendStruct	capsules/src/net/udp/udp_send.rs	/^impl<T: IP6Sender<'a>> UDPSendStruct<'a, T> {$/;"	c
UDPSendStruct	capsules/src/net/udp/udp_send.rs	/^impl<T: IP6Sender<'a>> UDPSender<'a> for UDPSendStruct<'a, T> {$/;"	c
UDPSendStruct	capsules/src/net/udp/udp_send.rs	/^pub struct UDPSendStruct<'a, T: IP6Sender<'a>> {$/;"	s
UDPSender	capsules/src/net/udp/udp_send.rs	/^pub trait UDPSender<'a> {$/;"	i
UDP_DGRAM	boards/imix/src/components/udp_6lowpan.rs	/^static mut UDP_DGRAM: [u8; PAYLOAD_LEN - UDP_HDR_SIZE] = [0; PAYLOAD_LEN - UDP_HDR_SIZE];$/;"	v
UDP_DGRAM	boards/imix/src/ipv6_lowpan_test.rs	/^static mut UDP_DGRAM: [u8; PAYLOAD_LEN - UDP_HDR_SIZE] = [0; PAYLOAD_LEN - UDP_HDR_SIZE]; \/\/Be/;"	v
UDP_PAYLOAD	boards/imix/src/udp_lowpan_test.rs	/^static mut UDP_PAYLOAD: [u8; PAYLOAD_LEN] = [0; PAYLOAD_LEN]; \/\/Becomes payload of UDP$/;"	v
UNLOCK	chips/sam4l/src/scif.rs	/^    UNLOCK = 0x18,$/;"	e	enum:Register
UP	chips/sam4l/src/flashcalw.rs	/^    UP,$/;"	e	enum:FlashCMD
UP_BUFFER	capsules/src/segger_rtt.rs	/^pub static mut UP_BUFFER: [u8; 1024] = [0; 1024];$/;"	v
USART	chips/sam4l/src/usart.rs	/^impl USART {$/;"	c
USART	chips/sam4l/src/usart.rs	/^impl dma::DMAClient for USART {$/;"	c
USART	chips/sam4l/src/usart.rs	/^impl hil::spi::SpiMaster for USART {$/;"	c
USART	chips/sam4l/src/usart.rs	/^impl hil::uart::UART for USART {$/;"	c
USART	chips/sam4l/src/usart.rs	/^impl hil::uart::UARTReceiveAdvanced for USART {$/;"	c
USART	chips/sam4l/src/usart.rs	/^pub struct USART {$/;"	s
USART0	chips/sam4l/src/pm.rs	/^    USART0,$/;"	e	enum:PBAClock
USART0	chips/sam4l/src/usart.rs	/^pub static mut USART0: USART = USART::new($/;"	v
USART0_RX	chips/sam4l/src/dma.rs	/^    USART0_RX = 0,$/;"	e	enum:DMAPeripheral
USART0_TX	chips/sam4l/src/dma.rs	/^    USART0_TX = 18,$/;"	e	enum:DMAPeripheral
USART1	chips/sam4l/src/pm.rs	/^    USART1,$/;"	e	enum:PBAClock
USART1	chips/sam4l/src/usart.rs	/^pub static mut USART1: USART = USART::new($/;"	v
USART1_RX	chips/sam4l/src/dma.rs	/^    USART1_RX = 1,$/;"	e	enum:DMAPeripheral
USART1_TX	chips/sam4l/src/dma.rs	/^    USART1_TX = 19,$/;"	e	enum:DMAPeripheral
USART2	chips/sam4l/src/pm.rs	/^    USART2,$/;"	e	enum:PBAClock
USART2	chips/sam4l/src/usart.rs	/^pub static mut USART2: USART = USART::new($/;"	v
USART2_RX	chips/sam4l/src/dma.rs	/^    USART2_RX = 2,$/;"	e	enum:DMAPeripheral
USART2_TX	chips/sam4l/src/dma.rs	/^    USART2_TX = 20,$/;"	e	enum:DMAPeripheral
USART3	chips/sam4l/src/pm.rs	/^    USART3,$/;"	e	enum:PBAClock
USART3	chips/sam4l/src/usart.rs	/^pub static mut USART3: USART = USART::new($/;"	v
USART3_RX	chips/sam4l/src/dma.rs	/^    USART3_RX = 3,$/;"	e	enum:DMAPeripheral
USART3_TX	chips/sam4l/src/dma.rs	/^    USART3_TX = 21,$/;"	e	enum:DMAPeripheral
USARTRegManager	chips/sam4l/src/usart.rs	/^impl Drop for USARTRegManager<'a> {$/;"	c
USARTRegManager	chips/sam4l/src/usart.rs	/^impl USARTRegManager<'a> {$/;"	c
USARTRegManager	chips/sam4l/src/usart.rs	/^pub struct USARTRegManager<'a> {$/;"	s
USARTStateRX	chips/sam4l/src/usart.rs	/^pub enum USARTStateRX {$/;"	g
USARTStateTX	chips/sam4l/src/usart.rs	/^pub enum USARTStateTX {$/;"	g
USBC	chips/sam4l/src/pm.rs	/^    USBC,$/;"	e	enum:HSBClock
USBC	chips/sam4l/src/pm.rs	/^    USBC,$/;"	e	enum:PBBClock
USBC	chips/sam4l/src/usbc/mod.rs	/^pub static mut USBC: Usbc<'static> = Usbc::new();$/;"	v
USED_PINS	chips/nrf5x/src/pinmux.rs	/^static mut USED_PINS: VolatileCell<u32> = VolatileCell::new(0);$/;"	v
Uart	chips/sam4l/src/usart.rs	/^    Uart(&'a hil::uart::Client),$/;"	e	enum:UsartClient
Uart	chips/sam4l/src/usart.rs	/^    Uart,$/;"	e	enum:UsartMode
Uart	chips/sifive/src/uart.rs	/^impl Uart {$/;"	c
Uart	chips/sifive/src/uart.rs	/^impl hil::uart::UART for Uart {$/;"	c
Uart	chips/sifive/src/uart.rs	/^pub struct Uart {$/;"	s
UartDevice	capsules/src/virtual_uart.rs	/^impl<'a> ListNode<'a, UartDevice<'a>> for UartDevice<'a> {$/;"	c
UartDevice	capsules/src/virtual_uart.rs	/^impl<'a> UartDevice<'a> {$/;"	c
UartDevice	capsules/src/virtual_uart.rs	/^impl<'a> hil::uart::Client for UartDevice<'a> {$/;"	c
UartDevice	capsules/src/virtual_uart.rs	/^impl<'a> hil::uart::UART for UartDevice<'a> {$/;"	c
UartDevice	capsules/src/virtual_uart.rs	/^pub struct UartDevice<'a> {$/;"	s
UartDeviceReceiveState	capsules/src/virtual_uart.rs	/^enum UartDeviceReceiveState {$/;"	g
UartEcho	boards/launchxl/src/uart_echo.rs	/^impl<UTx: 'static + UART, URx: 'static + UART> Client for UartEcho<UTx, URx> {$/;"	c
UartEcho	boards/launchxl/src/uart_echo.rs	/^impl<UTx: 'static + UART, URx: 'static + UART> UartEcho<UTx, URx> {$/;"	c
UartEcho	boards/launchxl/src/uart_echo.rs	/^pub struct UartEcho<UTx: 'static + UART, URx: 'static + UART> {$/;"	s
UartMux	capsules/src/virtual_uart.rs	/^impl<'a> UartMux<'a> {$/;"	c
UartMux	capsules/src/virtual_uart.rs	/^impl<'a> hil::uart::Client for UartMux<'a> {$/;"	c
UartMux	capsules/src/virtual_uart.rs	/^pub struct UartMux<'a> {$/;"	s
UartParams	chips/sifive/src/uart.rs	/^pub struct UartParams {$/;"	s
UartPins	boards/nordic/nrf52dk_base/src/lib.rs	/^impl UartPins {$/;"	c
UartPins	boards/nordic/nrf52dk_base/src/lib.rs	/^pub struct UartPins {$/;"	s
UartRegisters	chips/cc26x2/src/uart.rs	/^struct UartRegisters {$/;"	s
UartRegisters	chips/nrf51/src/uart.rs	/^struct UartRegisters {$/;"	s
UartRegisters	chips/sifive/src/uart.rs	/^pub struct UartRegisters {$/;"	s
UartRegisters	chips/tm4c129x/src/uart.rs	/^struct UartRegisters {$/;"	s
Uarte	chips/nrf52/src/uart.rs	/^impl Uarte {$/;"	c
Uarte	chips/nrf52/src/uart.rs	/^impl kernel::hil::uart::UART for Uarte {$/;"	c
Uarte	chips/nrf52/src/uart.rs	/^pub struct Uarte {$/;"	s
UarteRegisters	chips/nrf52/src/uart.rs	/^struct UarteRegisters {$/;"	s
UdintFlags	chips/sam4l/src/usbc/debug.rs	/^impl fmt::Debug for UdintFlags {$/;"	c
UdintFlags	chips/sam4l/src/usbc/debug.rs	/^pub struct UdintFlags(pub u32);$/;"	s
UestaFlags	chips/sam4l/src/usbc/debug.rs	/^impl fmt::Debug for UestaFlags {$/;"	c
UestaFlags	chips/sam4l/src/usbc/debug.rs	/^pub struct UestaFlags(pub u32);$/;"	s
Uicr	chips/nrf52/src/uicr.rs	/^impl Uicr {$/;"	c
Uicr	chips/nrf52/src/uicr.rs	/^pub struct Uicr {$/;"	s
UicrRegisters	chips/nrf52/src/uicr.rs	/^struct UicrRegisters {$/;"	s
Unconfigured	chips/sam4l/src/flashcalw.rs	/^    Unconfigured,                 \/\/ Flash is unconfigured, call configure().$/;"	e	enum:FlashState
Undissected	capsules/src/net/ieee802154.rs	/^    Undissected { element_id: u8, content: &'a [u8] },$/;"	e	enum:HeaderIE
Undissected	capsules/src/net/ieee802154.rs	/^    Undissected { group_id: u8, content: &'a [u8] },$/;"	e	enum:PayloadIE
Uninitialized	capsules/src/sdcard.rs	/^    Uninitialized = 0x00,$/;"	e	enum:SDCardType
Unknown	capsules/src/usb.rs	/^    Unknown,$/;"	e	enum:FeatureSelector
Unspecified	boards/imix/src/ipv6_lowpan_test.rs	/^    Unspecified,$/;"	e	enum:SAC
Unspecified	boards/imix/src/sixlowpan_dummy.rs	/^    Unspecified,$/;"	e	enum:SAC
Unspecified	chips/nrf52/src/ficr.rs	/^    Unspecified = 0xffffffff,$/;"	e	enum:Flash
Unspecified	chips/nrf52/src/ficr.rs	/^    Unspecified = 0xffffffff,$/;"	e	enum:Package
Unspecified	chips/nrf52/src/ficr.rs	/^    Unspecified = 0xffffffff,$/;"	e	enum:Part
Unspecified	chips/nrf52/src/ficr.rs	/^    Unspecified = 0xffffffff,$/;"	e	enum:Ram
Unspecified	chips/nrf52/src/ficr.rs	/^    Unspecified = 0xffffffff,$/;"	e	enum:Variant
Unused	chips/sam4l/src/usart.rs	/^    Unused,$/;"	e	enum:UsartMode
Unused	kernel/src/tbfheader.rs	/^    Unused = 5,$/;"	e	enum:TbfHeaderTypes
UsartClient	chips/sam4l/src/usart.rs	/^enum UsartClient<'a> {$/;"	g
UsartMode	chips/sam4l/src/usart.rs	/^pub enum UsartMode {$/;"	g
UsartRegisters	chips/sam4l/src/usart.rs	/^struct UsartRegisters {$/;"	s
UsbComponent	boards/imix/src/components/usb.rs	/^impl Component for UsbComponent {$/;"	c
UsbComponent	boards/imix/src/components/usb.rs	/^impl UsbComponent {$/;"	c
UsbComponent	boards/imix/src/components/usb.rs	/^pub struct UsbComponent {$/;"	s
UsbController	kernel/src/hil/usb.rs	/^pub trait UsbController {$/;"	i
UsbDevice	boards/imix/src/components/usb.rs	/^    type Output = &'static UsbDevice;$/;"	v	implementation:UsbComponent
UsbDevice	boards/imix/src/components/usb.rs	/^type UsbDevice = capsules::usb_user::UsbSyscallDriver<$/;"	t
UsbSyscallDriver	capsules/src/usb_user.rs	/^impl<C> Driver for UsbSyscallDriver<'a, C>$/;"	c
UsbSyscallDriver	capsules/src/usb_user.rs	/^impl<C> UsbSyscallDriver<'a, C>$/;"	c
UsbSyscallDriver	capsules/src/usb_user.rs	/^pub struct UsbSyscallDriver<'a, C: hil::usb::Client> {$/;"	s
Usbc	chips/sam4l/src/usbc/mod.rs	/^impl Usbc<'a> {$/;"	c
Usbc	chips/sam4l/src/usbc/mod.rs	/^impl hil::usb::UsbController for Usbc<'a> {$/;"	c
Usbc	chips/sam4l/src/usbc/mod.rs	/^pub struct Usbc<'a> {$/;"	s
UsbcRegisters	chips/sam4l/src/usbc/mod.rs	/^struct UsbcRegisters {$/;"	s
UserspaceKernelBoundary	chips/arty_exx/src/chip.rs	/^    type UserspaceKernelBoundary = riscv32i::syscall::SysCall;$/;"	t	implementation:ArtyExx
UserspaceKernelBoundary	chips/cc26x2/src/chip.rs	/^    type UserspaceKernelBoundary = cortexm4::syscall::SysCall;$/;"	t	implementation:Cc26X2
UserspaceKernelBoundary	chips/e310x/src/chip.rs	/^    type UserspaceKernelBoundary = riscv32i::syscall::SysCall;$/;"	t	implementation:E310x
UserspaceKernelBoundary	chips/nrf51/src/chip.rs	/^    type UserspaceKernelBoundary = cortexm0::syscall::SysCall;$/;"	t	implementation:NRF51
UserspaceKernelBoundary	chips/nrf52/src/chip.rs	/^    type UserspaceKernelBoundary = cortexm4::syscall::SysCall;$/;"	t	implementation:NRF52
UserspaceKernelBoundary	chips/sam4l/src/chip.rs	/^    type UserspaceKernelBoundary = cortexm4::syscall::SysCall;$/;"	t	implementation:Sam4l
UserspaceKernelBoundary	chips/tm4c129x/src/chip.rs	/^    type UserspaceKernelBoundary = cortexm4::syscall::SysCall;$/;"	t	implementation:Tm4c129x
UserspaceKernelBoundary	kernel/src/platform/mod.rs	/^    type UserspaceKernelBoundary: syscall::UserspaceKernelBoundary;$/;"	t	interface:Chip
UserspaceKernelBoundary	kernel/src/syscall.rs	/^pub trait UserspaceKernelBoundary {$/;"	i
UserspaceRead	capsules/src/nonvolatile_storage_driver.rs	/^    UserspaceRead,$/;"	e	enum:NonvolatileCommand
UserspaceWrite	capsules/src/nonvolatile_storage_driver.rs	/^    UserspaceWrite,$/;"	e	enum:NonvolatileCommand
V2003	capsules/src/net/ieee802154.rs	/^    V2003 = 0x0000,$/;"	e	enum:FrameVersion
V2006	capsules/src/net/ieee802154.rs	/^    V2006 = 0x1000,$/;"	e	enum:FrameVersion
V2015	capsules/src/net/ieee802154.rs	/^    V2015 = 0x2000,$/;"	e	enum:FrameVersion
VBatAlert	capsules/src/ltc294x.rs	/^pub enum VBatAlert {$/;"	g
VCTRL	capsules/src/rf233_const.rs	/^    VCTRL = 0x10,$/;"	e	enum:RF233Register
VDD	chips/nrf52/src/adc.rs	/^    VDD = 9,$/;"	e	enum:AdcChannel
VDDHDIV5	chips/nrf52/src/adc.rs	/^    VDDHDIV5 = 0xD,$/;"	e	enum:AdcChannel
VERSION	chips/sam4l/src/flashcalw.rs	/^    VERSION,$/;"	e	enum:RegKey
VERSION_NUM	capsules/src/rf233_const.rs	/^    VERSION_NUM = 0x1D,$/;"	e	enum:RF233Register
VIMS	chips/cc26x2/src/prcm.rs	/^    VIMS,$/;"	e	enum:PowerDomain
Variant	chips/nrf52/src/ficr.rs	/^enum Variant {$/;"	g
Vendor	capsules/src/usb.rs	/^    Vendor,$/;"	e	enum:RequestType
Version	capsules/src/net/thread/tlv.rs	/^    Version = 18,$/;"	e	enum:TlvType
Version	capsules/src/net/thread/tlv.rs	/^    Version(u16),$/;"	e	enum:Tlv
VirtualMuxAlarm	capsules/src/virtual_alarm.rs	/^impl<A: Alarm> ListNode<'a, VirtualMuxAlarm<'a, A>> for VirtualMuxAlarm<'a, A> {$/;"	c
VirtualMuxAlarm	capsules/src/virtual_alarm.rs	/^impl<Alrm: Alarm> Alarm for VirtualMuxAlarm<'a, Alrm> {$/;"	c
VirtualMuxAlarm	capsules/src/virtual_alarm.rs	/^impl<Alrm: Alarm> Time for VirtualMuxAlarm<'a, Alrm> {$/;"	c
VirtualMuxAlarm	capsules/src/virtual_alarm.rs	/^impl<Alrm: Alarm> VirtualMuxAlarm<'a, Alrm> {$/;"	c
VirtualMuxAlarm	capsules/src/virtual_alarm.rs	/^impl<Alrm: Alarm> time::Client for VirtualMuxAlarm<'a, Alrm> {$/;"	c
VirtualMuxAlarm	capsules/src/virtual_alarm.rs	/^pub struct VirtualMuxAlarm<'a, Alrm: Alarm> {$/;"	s
VirtualSpiMasterDevice	boards/imix/src/components/spi.rs	/^    type Output = &'static VirtualSpiMasterDevice<'static, sam4l::spi::SpiHw>;$/;"	v	implementation:SpiComponent
VirtualSpiMasterDevice	capsules/src/virtual_spi.rs	/^impl<Spi: hil::spi::SpiMaster> ListNode<'a, VirtualSpiMasterDevice<'a, Spi>>$/;"	c
VirtualSpiMasterDevice	capsules/src/virtual_spi.rs	/^impl<Spi: hil::spi::SpiMaster> VirtualSpiMasterDevice<'a, Spi> {$/;"	c
VirtualSpiMasterDevice	capsules/src/virtual_spi.rs	/^impl<Spi: hil::spi::SpiMaster> hil::spi::SpiMasterClient for VirtualSpiMasterDevice<'a, Spi> {$/;"	c
VirtualSpiMasterDevice	capsules/src/virtual_spi.rs	/^impl<Spi: hil::spi::SpiMaster> hil::spi::SpiMasterDevice for VirtualSpiMasterDevice<'a, Spi> {$/;"	c
VirtualSpiMasterDevice	capsules/src/virtual_spi.rs	/^pub struct VirtualSpiMasterDevice<'a, Spi: hil::spi::SpiMaster> {$/;"	s
VirtualSpiSlaveDevice	capsules/src/virtual_spi.rs	/^impl<Spi: hil::spi::SpiSlave> VirtualSpiSlaveDevice<'a, Spi> {$/;"	c
VirtualSpiSlaveDevice	capsules/src/virtual_spi.rs	/^impl<Spi: hil::spi::SpiSlave> hil::spi::SpiSlaveClient for VirtualSpiSlaveDevice<'a, Spi> {$/;"	c
VirtualSpiSlaveDevice	capsules/src/virtual_spi.rs	/^impl<Spi: hil::spi::SpiSlave> hil::spi::SpiSlaveDevice for VirtualSpiSlaveDevice<'a, Spi> {$/;"	c
VirtualSpiSlaveDevice	capsules/src/virtual_spi.rs	/^pub struct VirtualSpiSlaveDevice<'a, Spi: hil::spi::SpiSlave> {$/;"	s
VolatileCell	libraries/tock-cells/src/volatile_cell.rs	/^impl<T: Default> Default for VolatileCell<T> {$/;"	c
VolatileCell	libraries/tock-cells/src/volatile_cell.rs	/^impl<T> VolatileCell<T> {$/;"	c
VolatileCell	libraries/tock-cells/src/volatile_cell.rs	/^pub struct VolatileCell<T> {$/;"	s
VoltageLSB	capsules/src/ltc294x.rs	/^    VoltageLSB = 0x09,$/;"	e	enum:Registers
VoltageMSB	capsules/src/ltc294x.rs	/^    VoltageMSB = 0x08,$/;"	e	enum:Registers
Vsingle	chips/sam4l/src/adc.rs	/^    Vsingle = 0x16,$/;"	e	enum:Channel
WATCHDOG	chips/e310x/src/watchdog.rs	/^pub static mut WATCHDOG: Watchdog = Watchdog::new(WATCHDOG_BASE);$/;"	v
WDT	chips/sam4l/src/pm.rs	/^    WDT,$/;"	e	enum:PBDClock
WDT	chips/sam4l/src/wdt.rs	/^pub static mut WDT: Wdt = Wdt::new();$/;"	v
WGPB	chips/sam4l/src/flashcalw.rs	/^    WGPB,$/;"	e	enum:FlashCMD
WP	chips/sam4l/src/flashcalw.rs	/^    WP,$/;"	e	enum:FlashCMD
WRDI	capsules/src/mx25r6435f.rs	/^    WRDI = 0x04, \/\/ Write Disable$/;"	e	enum:Opcodes
WREN	capsules/src/mx25r6435f.rs	/^    WREN = 0x06, \/\/ Write Enable$/;"	e	enum:Opcodes
WRITER	boards/arty-e21/src/io.rs	/^static mut WRITER: Writer = Writer {};$/;"	v
WRITER	boards/ek-tm4c1294xl/src/io.rs	/^pub static mut WRITER: Writer = Writer { initialized: false };$/;"	v
WRITER	boards/hail/src/io.rs	/^static mut WRITER: Writer = Writer { initialized: false };$/;"	v
WRITER	boards/hifive1/src/io.rs	/^static mut WRITER: Writer = Writer {};$/;"	v
WRITER	boards/imix/src/io.rs	/^static mut WRITER: Writer = Writer { initialized: false };$/;"	v
WRITER	boards/launchxl/src/io.rs	/^static mut WRITER: Writer = Writer { initialized: false };$/;"	v
WRITER	boards/nordic/nrf51dk/src/io.rs	/^static mut WRITER: Writer = Writer { initialized: false };$/;"	v
WRITER	boards/nordic/nrf52840dk/src/io.rs	/^static mut WRITER: Writer = Writer { initialized: false };$/;"	v
WRITER	boards/nordic/nrf52dk/src/io.rs	/^static mut WRITER: Writer = Writer { initialized: false };$/;"	v
WRITE_BUF	capsules/src/console.rs	/^pub static mut WRITE_BUF: [u8; 64] = [0; 64];$/;"	v
WRITE_BUF	capsules/src/nrf51822_serialization.rs	/^pub static mut WRITE_BUF: [u8; 600] = [0; 600];$/;"	v
WRITE_BUF	capsules/src/process_console.rs	/^pub static mut WRITE_BUF: [u8; 4] = [0; 4];$/;"	v
WUP	chips/sam4l/src/flashcalw.rs	/^    WUP,$/;"	e	enum:FlashCMD
WaitForDataBlock	capsules/src/sdcard.rs	/^    WaitForDataBlock,$/;"	e	enum:AlarmState
WaitForDataBlocks	capsules/src/sdcard.rs	/^    WaitForDataBlocks { count: u32 },$/;"	e	enum:AlarmState
WaitForWriteBusy	capsules/src/sdcard.rs	/^    WaitForWriteBusy,$/;"	e	enum:AlarmState
WaitReadBlock	capsules/src/sdcard.rs	/^    WaitReadBlock,$/;"	e	enum:SpiState
WaitReadBlocks	capsules/src/sdcard.rs	/^    WaitReadBlocks { count: u32 },$/;"	e	enum:SpiState
WaitRh	capsules/src/si7021.rs	/^    WaitRh,$/;"	e	enum:State
WaitTemp	capsules/src/si7021.rs	/^    WaitTemp,$/;"	e	enum:State
WaitWriteBlockBusy	capsules/src/sdcard.rs	/^    WaitWriteBlockBusy,$/;"	e	enum:SpiState
Watchdog	chips/sifive/src/watchdog.rs	/^impl Watchdog {$/;"	c
Watchdog	chips/sifive/src/watchdog.rs	/^pub struct Watchdog {$/;"	s
Watchdog	kernel/src/hil/watchdog.rs	/^pub trait Watchdog {$/;"	i
WatchdogRegisters	chips/sifive/src/watchdog.rs	/^pub struct WatchdogRegisters {$/;"	s
Wdt	chips/sam4l/src/wdt.rs	/^impl Wdt {$/;"	c
Wdt	chips/sam4l/src/wdt.rs	/^impl hil::watchdog::Watchdog for Wdt {$/;"	c
Wdt	chips/sam4l/src/wdt.rs	/^pub struct Wdt {$/;"	s
WdtClockSource	chips/sam4l/src/wdt.rs	/^pub enum WdtClockSource {$/;"	g
WdtRegisters	chips/sam4l/src/wdt.rs	/^pub struct WdtRegisters {$/;"	s
WhoAmI	capsules/src/fxos8700cq.rs	/^    WhoAmI = 0x0d,$/;"	e	enum:Registers
WhoAmI	capsules/src/lps25hb.rs	/^    WhoAmI = 0x0f,$/;"	e	enum:Registers
Width16Bit	chips/sam4l/src/dma.rs	/^    Width16Bit = 1,$/;"	e	enum:DMAWidth
Width32Bit	chips/sam4l/src/dma.rs	/^    Width32Bit = 2,$/;"	e	enum:DMAWidth
Width8Bit	chips/sam4l/src/dma.rs	/^    Width8Bit = 0,$/;"	e	enum:DMAWidth
Word	chips/sam4l/src/crccu.rs	/^    Word,$/;"	e	enum:TrWidth
Wrapping	libraries/enum_primitive/src/cast.rs	/^impl<T: FromPrimitive> FromPrimitive for Wrapping<T> {$/;"	c
Wrapping	libraries/enum_primitive/src/cast.rs	/^impl<T: NumCast> NumCast for Wrapping<T> {$/;"	c
Wrapping	libraries/enum_primitive/src/cast.rs	/^impl<T: ToPrimitive> ToPrimitive for Wrapping<T> {$/;"	c
Write	capsules/src/i2c_master_slave_driver.rs	/^    Write,$/;"	e	enum:MasterAction
Write	capsules/src/mx25r6435f.rs	/^    Write { sector_index: u32 },$/;"	e	enum:Operation
Write	capsules/src/nonvolatile_to_pages.rs	/^    Write,$/;"	e	enum:State
Write	capsules/src/virtual_flash.rs	/^    Write(usize),$/;"	e	enum:Op
Write	capsules/src/virtual_i2c.rs	/^    Write(u8),$/;"	e	enum:Op
Write	chips/nrf52/src/nvmc.rs	/^    Write, \/\/ Performing a write operation.$/;"	e	enum:FlashState
Write	kernel/src/hil/i2c.rs	/^    Write,$/;"	e	enum:SlaveTransmissionType
WriteBlockBusy	capsules/src/sdcard.rs	/^    WriteBlockBusy,$/;"	e	enum:SpiState
WriteBlockResponse	capsules/src/sdcard.rs	/^    WriteBlockResponse,$/;"	e	enum:SpiState
WriteDisable	capsules/src/fm25cl.rs	/^    WriteDisable = 0x04,$/;"	e	enum:Opcodes
WriteEnable	capsules/src/fm25cl.rs	/^    WriteEnable = 0x06,$/;"	e	enum:Opcodes
WriteEnable	capsules/src/fm25cl.rs	/^    WriteEnable,$/;"	e	enum:State
WriteErasing	chips/sam4l/src/flashcalw.rs	/^    WriteErasing { page: i32 },   \/\/ Waiting on the page to erase.$/;"	e	enum:FlashState
WriteFailure	capsules/src/sdcard.rs	/^    WriteFailure = -4,$/;"	e	enum:ErrorCode
WriteHeaterControlRegister	capsules/src/si7021.rs	/^    WriteHeaterControlRegister = 0x51,$/;"	e	enum:Registers
WriteMemory	capsules/src/fm25cl.rs	/^    WriteMemory = 0x02,$/;"	e	enum:Opcodes
WriteMemory	capsules/src/fm25cl.rs	/^    WriteMemory,$/;"	e	enum:State
WriteOnly	libraries/tock-register-interface/src/registers.rs	/^impl<T: IntLike, R: RegisterLongName> WriteOnly<T, R> {$/;"	c
WriteOnly	libraries/tock-register-interface/src/registers.rs	/^pub struct WriteOnly<T: IntLike, R: RegisterLongName = ()> {$/;"	s
WriteOut	chips/sam4l/src/usbc/mod.rs	/^    WriteOut,$/;"	e	enum:CtrlState
WriteRHTUserRegister1	capsules/src/si7021.rs	/^    WriteRHTUserRegister1 = 0xe6,$/;"	e	enum:Registers
WriteRead	capsules/src/i2c_master_slave_driver.rs	/^    WriteRead(u8),$/;"	e	enum:MasterAction
WriteRead	capsules/src/virtual_i2c.rs	/^    WriteRead(u8, u8),$/;"	e	enum:Op
WriteSectorCheckDone	capsules/src/mx25r6435f.rs	/^    WriteSectorCheckDone {$/;"	e	enum:State
WriteSectorWaitDone	capsules/src/mx25r6435f.rs	/^    WriteSectorWaitDone {$/;"	e	enum:State
WriteSectorWrite	capsules/src/mx25r6435f.rs	/^    WriteSectorWrite {$/;"	e	enum:State
WriteSectorWriteEnable	capsules/src/mx25r6435f.rs	/^    WriteSectorWriteEnable {$/;"	e	enum:State
WriteStatus	chips/sam4l/src/usbc/mod.rs	/^    WriteStatus,$/;"	e	enum:CtrlState
WriteStatusRegister	capsules/src/fm25cl.rs	/^    WriteStatusRegister = 0x01,$/;"	e	enum:Opcodes
WriteStatusWait	chips/sam4l/src/usbc/mod.rs	/^    WriteStatusWait,$/;"	e	enum:CtrlState
WriteUnlocking	chips/sam4l/src/flashcalw.rs	/^    WriteUnlocking { page: i32 }, \/\/ Started a write operation.$/;"	e	enum:FlashState
WriteWriting	chips/sam4l/src/flashcalw.rs	/^    WriteWriting,                 \/\/ Waiting on the page to actually be written.$/;"	e	enum:FlashState
Writer	boards/arty-e21/src/io.rs	/^impl Write for Writer {$/;"	c
Writer	boards/arty-e21/src/io.rs	/^struct Writer {}$/;"	s
Writer	boards/ek-tm4c1294xl/src/io.rs	/^impl Write for Writer {$/;"	c
Writer	boards/ek-tm4c1294xl/src/io.rs	/^pub struct Writer {$/;"	s
Writer	boards/hail/src/io.rs	/^impl Write for Writer {$/;"	c
Writer	boards/hail/src/io.rs	/^struct Writer {$/;"	s
Writer	boards/hifive1/src/io.rs	/^impl Write for Writer {$/;"	c
Writer	boards/hifive1/src/io.rs	/^struct Writer {}$/;"	s
Writer	boards/imix/src/io.rs	/^impl Write for Writer {$/;"	c
Writer	boards/imix/src/io.rs	/^struct Writer {$/;"	s
Writer	boards/launchxl/src/io.rs	/^impl Write for Writer {$/;"	c
Writer	boards/launchxl/src/io.rs	/^struct Writer {$/;"	s
Writer	boards/nordic/nrf51dk/src/io.rs	/^impl Write for Writer {$/;"	c
Writer	boards/nordic/nrf51dk/src/io.rs	/^struct Writer {$/;"	s
Writer	boards/nordic/nrf52840dk/src/io.rs	/^impl Write for Writer {$/;"	c
Writer	boards/nordic/nrf52840dk/src/io.rs	/^struct Writer {$/;"	s
Writer	boards/nordic/nrf52dk/src/io.rs	/^impl Write for Writer {$/;"	c
Writer	boards/nordic/nrf52dk/src/io.rs	/^struct Writer {$/;"	s
XAH_CTRL_0	capsules/src/rf233_const.rs	/^    XAH_CTRL_0 = 0x2C,$/;"	e	enum:RF233Register
XAH_CTRL_1	capsules/src/rf233_const.rs	/^    XAH_CTRL_1 = 0x17,$/;"	e	enum:RF233Register
XAH_CTRL_2	capsules/src/rf233_const.rs	/^    XAH_CTRL_2 = 0x19,$/;"	e	enum:RF233Register
XMac	capsules/src/ieee802154/xmac.rs	/^impl<R: radio::Radio, A: Alarm> Mac for XMac<'a, R, A> {$/;"	c
XMac	capsules/src/ieee802154/xmac.rs	/^impl<R: radio::Radio, A: Alarm> XMac<'a, R, A> {$/;"	c
XMac	capsules/src/ieee802154/xmac.rs	/^impl<R: radio::Radio, A: Alarm> radio::PowerClient for XMac<'a, R, A> {$/;"	c
XMac	capsules/src/ieee802154/xmac.rs	/^impl<R: radio::Radio, A: Alarm> radio::RxClient for XMac<'a, R, A> {$/;"	c
XMac	capsules/src/ieee802154/xmac.rs	/^impl<R: radio::Radio, A: Alarm> radio::TxClient for XMac<'a, R, A> {$/;"	c
XMac	capsules/src/ieee802154/xmac.rs	/^impl<R: radio::Radio, A: Alarm> rng::Client for XMac<'a, R, A> {$/;"	c
XMac	capsules/src/ieee802154/xmac.rs	/^impl<R: radio::Radio, A: Alarm> time::Client for XMac<'a, R, A> {$/;"	c
XMac	capsules/src/ieee802154/xmac.rs	/^pub struct XMac<'a, R: radio::Radio, A: Alarm> {$/;"	s
XMacHeaderInfo	capsules/src/ieee802154/xmac.rs	/^pub struct XMacHeaderInfo {$/;"	s
XMacState	capsules/src/ieee802154/xmac.rs	/^enum XMacState {$/;"	g
XOSC_CTRL	capsules/src/rf233_const.rs	/^    XOSC_CTRL = 0x12,$/;"	e	enum:RF233Register
XTAL	chips/nrf51/src/clock.rs	/^    XTAL = 1,$/;"	e	enum:HighClockSource
XTAL	chips/nrf51/src/clock.rs	/^    XTAL = 1,$/;"	e	enum:LowClockSource
XTAL	chips/nrf52/src/clock.rs	/^    XTAL = 1,$/;"	e	enum:HighClockSource
XTAL	chips/nrf52/src/clock.rs	/^    XTAL = 1,$/;"	e	enum:LowClockSource
XtalFreq	chips/nrf51/src/clock.rs	/^pub enum XtalFreq {$/;"	g
XyzDataCfg	capsules/src/fxos8700cq.rs	/^    XyzDataCfg = 0x0e,$/;"	e	enum:Registers
YES	chips/nrf51/src/clock.rs	/^    YES = 1,$/;"	e	enum:ClockTaskTriggered
YIELD	kernel/src/syscall.rs	/^    YIELD,$/;"	e	enum:Syscall
Yielded	kernel/src/process.rs	/^    Yielded,$/;"	e	enum:State
ZerodBm	chips/nrf5x/src/constants.rs	/^    ZerodBm = 0x00,$/;"	e	enum:TxPower
[&#x2212;] List of all items	kernel/target/doc/tock_cells/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	h
[&#x2212;] List of all items	kernel/target/doc/tock_registers/all.html	/^     <span class='in-band'>List of all items<\/span><\/h1><h3 id='Structs'>Structs<\/h3><ul clas/;"	h
[&#x2212;][src]Crate tock_cells	kernel/target/doc/tock_cells/index.html	/^<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=/;"	h
[&#x2212;][src]Crate tock_registers	kernel/target/doc/tock_registers/index.html	/^<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=/;"	h
_9bitaddr	chips/tm4c129x/src/uart.rs	/^    _9bitaddr: VolatileCell<u32>,$/;"	m	struct:UartRegisters
_9bitamask	chips/tm4c129x/src/uart.rs	/^    _9bitamask: VolatileCell<u32>,$/;"	m	struct:UartRegisters
__anon22758edd0103	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^typedef enum {$/;"	g	file:
__anon22758edd0208	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^typedef struct {$/;"	s	file:
__errno	kernel/src/common/math.rs	/^    fn __errno() -> &'static mut i32;$/;"	f
__new__	tools/svd2regs.py	/^    def __new__(cls, *args):$/;"	m	class:CodeBlock
_alarm_mask	chips/cc26x2/src/trng.rs	/^    _alarm_mask: ReadOnly<u32>,$/;"	m	struct:RngRegisters
_alarm_stop	chips/cc26x2/src/trng.rs	/^    _alarm_stop: ReadOnly<u32>,$/;"	m	struct:RngRegisters
_attach	chips/sam4l/src/usbc/mod.rs	/^    fn _attach(&self) {$/;"	F	implementation:Usbc
_channel0_cmp	chips/cc26x2/src/rtc.rs	/^    _channel0_cmp: ReadOnly<u32>,$/;"	m	struct:RtcRegisters
_channel1_capture	chips/cc26x2/src/rtc.rs	/^    _channel1_capture: ReadOnly<u32>,$/;"	m	struct:RtcRegisters
_channel2_cmp	chips/cc26x2/src/rtc.rs	/^    _channel2_cmp: ReadOnly<u32>,$/;"	m	struct:RtcRegisters
_channel2_cmp_inc	chips/cc26x2/src/rtc.rs	/^    _channel2_cmp_inc: ReadOnly<u32>,$/;"	m	struct:RtcRegisters
_detach	chips/sam4l/src/usbc/mod.rs	/^    fn _detach(&self) {$/;"	F	implementation:Usbc
_disable	chips/sam4l/src/usbc/mod.rs	/^    fn _disable(&self) {$/;"	F	implementation:Usbc
_down_buffer	capsules/src/segger_rtt.rs	/^    _down_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:SeggerRtt
_enable	chips/sam4l/src/usbc/mod.rs	/^    fn _enable(&self, mode: Mode) {$/;"	F	implementation:Usbc
_endpoint_bank_set_buffer	chips/sam4l/src/usbc/mod.rs	/^    fn _endpoint_bank_set_buffer($/;"	F	implementation:Usbc
_endpoint_enable	chips/sam4l/src/usbc/mod.rs	/^    fn _endpoint_enable(&self, endpoint: usize, endpoint_config: EndpointConfigValue) {$/;"	F	implementation:Usbc
_endpoint_init	chips/sam4l/src/usbc/mod.rs	/^    fn _endpoint_init(&self, endpoint: usize, config: EndpointConfigValue) {$/;"	F	implementation:Usbc
_endpoint_init_with_device_state	chips/sam4l/src/usbc/mod.rs	/^    fn _endpoint_init_with_device_state($/;"	F	implementation:Usbc
_endpoint_record_config	chips/sam4l/src/usbc/mod.rs	/^    fn _endpoint_record_config(&self, endpoint: usize, endpoint_config: EndpointConfigValue) {$/;"	F	implementation:Usbc
_endpoint_resume	chips/sam4l/src/usbc/mod.rs	/^    fn _endpoint_resume(&self, endpoint: usize) {$/;"	F	implementation:Usbc
_endpoint_write_config	chips/sam4l/src/usbc/mod.rs	/^    fn _endpoint_write_config(&self, endpoint: usize, config: EndpointConfigValue) {$/;"	F	implementation:Usbc
_erelocate	arch/cortex-m3/src/lib.rs	/^    static mut _erelocate: u32;$/;"	v
_erelocate	arch/cortex-m4/src/lib.rs	/^    static mut _erelocate: u32;$/;"	v
_erelocate	arch/riscv32i/src/lib.rs	/^    static mut _erelocate: u32;$/;"	v
_erelocate	chips/cc26x2/src/crt1.rs	/^    static mut _erelocate: u32;$/;"	v
_erelocate	chips/nrf51/src/crt1.rs	/^    static mut _erelocate: u32;$/;"	v
_erelocate	chips/nrf52/src/crt1.rs	/^    static mut _erelocate: u32;$/;"	v
_erelocate	chips/sam4l/src/lib.rs	/^    static mut _erelocate: u32;$/;"	v
_erelocate	chips/tm4c129x/src/lib.rs	/^    static mut _erelocate: u32;$/;"	v
_estack	arch/cortex-m3/src/lib.rs	/^    fn _estack();$/;"	f
_estack	arch/cortex-m4/src/lib.rs	/^    fn _estack();$/;"	f
_estack	arch/riscv32i/src/lib.rs	/^    static _estack: u32;$/;"	v
_estack	chips/cc26x2/src/crt1.rs	/^    fn _estack();$/;"	f
_estack	chips/nrf51/src/crt1.rs	/^    fn _estack();$/;"	f
_estack	chips/nrf52/src/crt1.rs	/^    fn _estack();$/;"	f
_estack	chips/sam4l/src/lib.rs	/^    fn _estack();$/;"	f
_estack	chips/tm4c129x/src/lib.rs	/^    fn _estack();$/;"	f
_estorage	boards/imix/src/components/nonvolatile_storage.rs	/^            static _estorage: u8;$/;"	v	method:NonvolatileStorageComponent::finalize
_etext	arch/cortex-m3/src/lib.rs	/^    static mut _etext: u32;$/;"	v
_etext	arch/cortex-m4/src/lib.rs	/^    static mut _etext: u32;$/;"	v
_etext	arch/riscv32i/src/lib.rs	/^    static mut _etext: u32;$/;"	v
_etext	chips/cc26x2/src/crt1.rs	/^    static mut _etext: u32;$/;"	v
_etext	chips/nrf51/src/crt1.rs	/^    static mut _etext: u32;$/;"	v
_etext	chips/nrf52/src/crt1.rs	/^    static mut _etext: u32;$/;"	v
_etext	chips/sam4l/src/lib.rs	/^    static mut _etext: u32;$/;"	v
_etext	chips/tm4c129x/src/lib.rs	/^    static mut _etext: u32;$/;"	v
_ezero	arch/cortex-m3/src/lib.rs	/^    static mut _ezero: u32;$/;"	v
_ezero	arch/cortex-m4/src/lib.rs	/^    static mut _ezero: u32;$/;"	v
_ezero	arch/riscv32i/src/lib.rs	/^    static mut _ezero: u32;$/;"	v
_ezero	chips/cc26x2/src/crt1.rs	/^    static mut _ezero: u32;$/;"	v
_ezero	chips/nrf51/src/crt1.rs	/^    static mut _ezero: u32;$/;"	v
_ezero	chips/nrf52/src/crt1.rs	/^    static mut _ezero: u32;$/;"	v
_ezero	chips/sam4l/src/lib.rs	/^    static mut _ezero: u32;$/;"	v
_ezero	chips/tm4c129x/src/lib.rs	/^    static mut _ezero: u32;$/;"	v
_fro_detune	chips/cc26x2/src/trng.rs	/^    _fro_detune: ReadOnly<u32>,$/;"	m	struct:RngRegisters
_fro_en	chips/cc26x2/src/trng.rs	/^    _fro_en: ReadOnly<u32>,$/;"	m	struct:RngRegisters
_irq_flag_mask	chips/cc26x2/src/trng.rs	/^    _irq_flag_mask: ReadOnly<u32>,$/;"	m	struct:RngRegisters
_lfsr0	chips/cc26x2/src/trng.rs	/^    _lfsr0: ReadOnly<u32>,$/;"	m	struct:RngRegisters
_lfsr1	chips/cc26x2/src/trng.rs	/^    _lfsr1: ReadOnly<u32>,$/;"	m	struct:RngRegisters
_lfsr2	chips/cc26x2/src/trng.rs	/^    _lfsr2: ReadOnly<u32>,$/;"	m	struct:RngRegisters
_phantom	kernel/src/grant.rs	/^    _phantom: PhantomData<T>,$/;"	m	struct:AppliedGrant
_phantom	kernel/src/mem.rs	/^    _phantom: PhantomData<L>,$/;"	m	struct:AppPtr
_protctrl	chips/sam4l/src/pm.rs	/^    _protctrl: u32, \/\/ This register is named, but undocumented in the datasheet$/;"	m	struct:PmRegisters
_psr_padding	chips/sam4l/src/dma.rs	/^    _psr_padding: [u8; 3],$/;"	m	struct:DMARegisters
_r0	chips/cc26x2/src/trng.rs	/^    _r0: [u8; 0x1FB4],$/;"	m	struct:RngRegisters
_recharge	chips/cc26x2/src/aon.rs	/^    _recharge: [u32; 4],$/;"	m	struct:AonPmCtlRegisters
_res	chips/sam4l/src/crccu.rs	/^    _res: [u32; 2],$/;"	m	struct:Descriptor
_reserved	chips/cc26x2/src/i2c.rs	/^    _reserved: [u8; 3],$/;"	m	struct:I2CMasterRegisters
_reserved	chips/sam4l/src/usbc/mod.rs	/^    _reserved: u32,$/;"	m	struct:Bank
_reserved0	arch/cortex-m/src/scb.rs	/^    _reserved0: [u32; 5],$/;"	m	struct:ScbRegisters
_reserved0	arch/riscv32i/src/plic.rs	/^    _reserved0: u32,$/;"	m	struct:PlicRegisters
_reserved0	chips/cc26x2/src/aon.rs	/^    _reserved0: [u32; 3],$/;"	m	struct:AonIocRegisters
_reserved0	chips/cc26x2/src/gpio.rs	/^    _reserved0: [u8; 0x90],$/;"	m	struct:GpioRegisters
_reserved0	chips/cc26x2/src/prcm.rs	/^    _reserved0: [ReadOnly<u8>; 0x0C],$/;"	m	struct:PrcmRegisters
_reserved0	chips/cc26x2/src/uart.rs	/^    _reserved0: [u32; 0x4],$/;"	m	struct:UartRegisters
_reserved0	chips/nrf52/src/adc.rs	/^    _reserved0: [u8; 240],$/;"	m	struct:AdcRegisters
_reserved0	chips/nrf52/src/ficr.rs	/^    _reserved0: [u32; 4],$/;"	m	struct:FicrRegisters
_reserved0	chips/nrf52/src/i2c.rs	/^    _reserved0: [u8; 4],$/;"	m	struct:TwimRegisters
_reserved0	chips/nrf52/src/spi.rs	/^    _reserved0: [u8; 16],                            \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved0	chips/nrf5x/src/gpio.rs	/^    _reserved0: [u8; 0x100 - (0x0 + NUM_GPIOTE * 4)],$/;"	m	struct:GpioteRegisters
_reserved0	chips/nrf5x/src/rtc.rs	/^    _reserved0: [u8; 240],$/;"	m	struct:RtcRegisters
_reserved0	chips/nrf5x/src/timer.rs	/^    _reserved0: [u8; 44],$/;"	m	struct:TimerRegisters
_reserved0	chips/sam4l/src/acifc.rs	/^    _reserved0: [ReadOnly<u32>; 2],$/;"	m	struct:AcifcRegisters
_reserved0	chips/sam4l/src/adc.rs	/^    _reserved0: u32,$/;"	m	struct:AdcRegisters
_reserved0	chips/sam4l/src/aes.rs	/^    _reserved0: [u32; 1],                            \/\/   0x1c$/;"	m	struct:AesRegisters
_reserved0	chips/sam4l/src/ast.rs	/^    _reserved0: [u32; 2],$/;"	m	struct:AstRegisters
_reserved0	chips/sam4l/src/bpm.rs	/^    _reserved0: [u32; 2],$/;"	m	struct:BpmRegisters
_reserved0	chips/sam4l/src/bscif.rs	/^    _reserved0: u32,$/;"	m	struct:BscifRegisters
_reserved0	chips/sam4l/src/crccu.rs	/^    _reserved0: u32,$/;"	m	struct:CrccuRegisters
_reserved0	chips/sam4l/src/dac.rs	/^    _reserved0: [u32; 50], \/\/                                                               (0/;"	m	struct:DacRegisters
_reserved0	chips/sam4l/src/gpio.rs	/^    _reserved0: [u32; 3],$/;"	m	struct:GpioRegisters
_reserved0	chips/sam4l/src/scif.rs	/^    _reserved0: [u32; 4],$/;"	m	struct:ScifRegisters
_reserved0	chips/sam4l/src/spi.rs	/^    _reserved0: [ReadOnly<u32>; 4],$/;"	m	struct:SpiRegisters
_reserved0	chips/sam4l/src/trng.rs	/^    _reserved0: [u32; 3],$/;"	m	struct:TrngRegisters
_reserved0	chips/sam4l/src/usart.rs	/^    _reserved0: [ReadOnly<u32>; 5],$/;"	m	struct:UsartRegisters
_reserved0	chips/sam4l/src/usbc/mod.rs	/^    _reserved0: [u8; 0xdc], \/\/ 220 bytes$/;"	m	struct:UsbcRegisters
_reserved0	chips/sifive/src/pwm.rs	/^    _reserved0: [u8; 8],$/;"	m	struct:PwmRegisters
_reserved0	chips/sifive/src/watchdog.rs	/^    _reserved0: [u8; 4],$/;"	m	struct:WatchdogRegisters
_reserved0	chips/tm4c129x/src/gpio.rs	/^    _reserved0: [u32; 255],$/;"	m	struct:GpioRegisters
_reserved0	chips/tm4c129x/src/gpt.rs	/^    _reserved0: [u32; 1],$/;"	m	struct:GptRegisters
_reserved0	chips/tm4c129x/src/sysctl.rs	/^    _reserved0: [u32; 12],$/;"	m	struct:SysctlRegisters
_reserved0	chips/tm4c129x/src/uart.rs	/^    _reserved0: [u32; 4],$/;"	m	struct:UartRegisters
_reserved1	arch/cortex-m/src/nvic.rs	/^    _reserved1: [u32; 24],$/;"	m	struct:NvicRegisters
_reserved1	arch/riscv32i/src/plic.rs	/^    _reserved1: [u32; (0x210 - 0x4 + 0x4)\/0x4],$/;"	m	struct:PlicRegisters
_reserved1	chips/cc26x2/src/gpio.rs	/^    _reserved1: [u8; 0xC],$/;"	m	struct:GpioRegisters
_reserved1	chips/cc26x2/src/prcm.rs	/^    _reserved1: [ReadOnly<u8>; 0x18],$/;"	m	struct:PrcmRegisters
_reserved1	chips/cc26x2/src/uart.rs	/^    _reserved1: [u32; 0x2],$/;"	m	struct:UartRegisters
_reserved1	chips/nrf51/src/clock.rs	/^    _reserved1: [u32; 57],                           \/\/ 0x01c - 0x100$/;"	m	struct:ClockRegisters
_reserved1	chips/nrf51/src/radio.rs	/^    _reserved1: [u32; 55],                       \/\/ 0x024 ---> 0x100$/;"	m	struct:RadioRegisters
_reserved1	chips/nrf51/src/uart.rs	/^    _reserved1: [u32; 3],$/;"	m	struct:UartRegisters
_reserved1	chips/nrf52/src/adc.rs	/^    _reserved1: [u8; 424],$/;"	m	struct:AdcRegisters
_reserved1	chips/nrf52/src/clock.rs	/^    _reserved1: [u32; 57],$/;"	m	struct:ClockRegisters
_reserved1	chips/nrf52/src/ficr.rs	/^    _reserved1: [u32; 18],$/;"	m	struct:FicrRegisters
_reserved1	chips/nrf52/src/i2c.rs	/^    _reserved1: [u8; 8],$/;"	m	struct:TwimRegisters
_reserved1	chips/nrf52/src/nvmc.rs	/^    _reserved1: [u32; 64],$/;"	m	struct:NvmcRegisters
_reserved1	chips/nrf52/src/ppi.rs	/^    _reserved1: [u32; 308],$/;"	m	struct:PpiRegisters
_reserved1	chips/nrf52/src/radio.rs	/^    _reserved1: [u32; 55],$/;"	m	struct:RadioRegisters
_reserved1	chips/nrf52/src/spi.rs	/^    _reserved1: [u8; 4],                             \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved1	chips/nrf52/src/uart.rs	/^    _reserved1: [u32; 7],$/;"	m	struct:UarteRegisters
_reserved1	chips/nrf5x/src/aes.rs	/^    _reserved1: [u32; 62],$/;"	m	struct:AesEcbRegisters
_reserved1	chips/nrf5x/src/gpio.rs	/^    _reserved1: [u32; 321],$/;"	m	struct:GpioRegisters
_reserved1	chips/nrf5x/src/gpio.rs	/^    _reserved1: [u8; 0x17C - (0x100 + NUM_GPIOTE * 4)],$/;"	m	struct:GpioteRegisters
_reserved1	chips/nrf5x/src/rtc.rs	/^    _reserved1: [u8; 56],$/;"	m	struct:RtcRegisters
_reserved1	chips/nrf5x/src/temperature.rs	/^    pub _reserved1: [u32; 62],$/;"	m	struct:TempRegisters
_reserved1	chips/nrf5x/src/timer.rs	/^    _reserved1: [u8; 240],$/;"	m	struct:TimerRegisters
_reserved1	chips/nrf5x/src/trng.rs	/^    pub _reserved1: [u32; 62],$/;"	m	struct:RngRegisters
_reserved1	chips/sam4l/src/acifc.rs	/^    _reserved1: [ReadOnly<u32>; 2],$/;"	m	struct:AcifcRegisters
_reserved1	chips/sam4l/src/aes.rs	/^    _reserved1: [u32; 3],                            \/\/          0x54 - 0x5c$/;"	m	struct:AesRegisters
_reserved1	chips/sam4l/src/ast.rs	/^    _reserved1: [u32; 2],$/;"	m	struct:AstRegisters
_reserved1	chips/sam4l/src/bscif.rs	/^    _reserved1: [u32; 4],$/;"	m	struct:BscifRegisters
_reserved1	chips/sam4l/src/crccu.rs	/^    _reserved1: [u32; 4],$/;"	m	struct:CrccuRegisters
_reserved1	chips/sam4l/src/dac.rs	/^    _reserved1: [u32; 4], \/\/                                                                (0/;"	m	struct:DacRegisters
_reserved1	chips/sam4l/src/flashcalw.rs	/^    _reserved1: [u32; 251],$/;"	m	struct:FlashcalwRegisters
_reserved1	chips/sam4l/src/gpio.rs	/^    _reserved1: [u32; 8],$/;"	m	struct:GpioRegisters
_reserved1	chips/sam4l/src/pm.rs	/^    _reserved1: u32,$/;"	m	struct:PmRegisters
_reserved1	chips/sam4l/src/spi.rs	/^    _reserved1: [ReadOnly<u32>; 41],$/;"	m	struct:SpiRegisters
_reserved1	chips/sam4l/src/trng.rs	/^    _reserved1: [u32; 12],$/;"	m	struct:TrngRegisters
_reserved1	chips/sam4l/src/usart.rs	/^    _reserved1: ReadOnly<u32>,$/;"	m	struct:UsartRegisters
_reserved1	chips/sam4l/src/usbc/mod.rs	/^    _reserved1: [u8; 0x1b0], \/\/ 432 bytes$/;"	m	struct:UsbcRegisters
_reserved1	chips/sifive/src/pwm.rs	/^    _reserved1: [u8; 12],$/;"	m	struct:PwmRegisters
_reserved1	chips/sifive/src/rtc.rs	/^    _reserved1: [u8; 4],$/;"	m	struct:RtcRegisters
_reserved1	chips/sifive/src/watchdog.rs	/^    _reserved1: [u8; 4],$/;"	m	struct:WatchdogRegisters
_reserved1	chips/tm4c129x/src/gpio.rs	/^    _reserved1: [u32; 55],$/;"	m	struct:GpioRegisters
_reserved1	chips/tm4c129x/src/gpt.rs	/^    _reserved1: [u32; 2],$/;"	m	struct:GptRegisters
_reserved1	chips/tm4c129x/src/sysctl.rs	/^    _reserved1: [u32; 5],$/;"	m	struct:SysctlRegisters
_reserved1	chips/tm4c129x/src/uart.rs	/^    _reserved1: [u32; 1],$/;"	m	struct:UartRegisters
_reserved10	chips/nrf51/src/radio.rs	/^    _reserved10: [u32; 39],                      \/\/ 0x560 - 0x600$/;"	m	struct:RadioRegisters
_reserved10	chips/nrf51/src/uart.rs	/^    _reserved10: [u32; 1],$/;"	m	struct:UartRegisters
_reserved10	chips/nrf52/src/i2c.rs	/^    _reserved10: [u8; 56],$/;"	m	struct:TwimRegisters
_reserved10	chips/nrf52/src/radio.rs	/^    _reserved10: [u32; 1],$/;"	m	struct:RadioRegisters
_reserved10	chips/nrf52/src/spi.rs	/^    _reserved10: [u8; 4],                            \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved10	chips/nrf52/src/uart.rs	/^    _reserved10: [u32; 64],$/;"	m	struct:UarteRegisters
_reserved10	chips/tm4c129x/src/sysctl.rs	/^    _reserved10: [u32; 4],$/;"	m	struct:SysctlRegisters
_reserved11	chips/nrf51/src/radio.rs	/^    _reserved11: [u32; 56],                      \/\/ 0x644 - 0x724$/;"	m	struct:RadioRegisters
_reserved11	chips/nrf51/src/uart.rs	/^    _reserved11: [u32; 1],$/;"	m	struct:UartRegisters
_reserved11	chips/nrf52/src/i2c.rs	/^    _reserved11: [u8; 4],$/;"	m	struct:TwimRegisters
_reserved11	chips/nrf52/src/radio.rs	/^    _reserved11: [u32; 2],$/;"	m	struct:RadioRegisters
_reserved11	chips/nrf52/src/spi.rs	/^    _reserved11: [u8; 16],                           \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved11	chips/nrf52/src/uart.rs	/^    _reserved11: [u32; 93],$/;"	m	struct:UarteRegisters
_reserved11	chips/tm4c129x/src/sysctl.rs	/^    _reserved11: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved12	chips/nrf51/src/radio.rs	/^    _reserved12: [u32; 561],                     \/\/ 0x738 - 0x724$/;"	m	struct:RadioRegisters
_reserved12	chips/nrf51/src/uart.rs	/^    _reserved12: [u32; 17],$/;"	m	struct:UartRegisters
_reserved12	chips/nrf52/src/radio.rs	/^    _reserved12: [u32; 39],$/;"	m	struct:RadioRegisters
_reserved12	chips/nrf52/src/spi.rs	/^    _reserved12: [u8; 12],                           \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved12	chips/nrf52/src/uart.rs	/^    _reserved12: [u32; 31],$/;"	m	struct:UarteRegisters
_reserved12	chips/tm4c129x/src/sysctl.rs	/^    _reserved12: [u32; 6],$/;"	m	struct:SysctlRegisters
_reserved13	chips/nrf52/src/i2c.rs	/^    _reserved13: [u8; 12],$/;"	m	struct:TwimRegisters
_reserved13	chips/nrf52/src/radio.rs	/^    _reserved13: [u32; 3],$/;"	m	struct:RadioRegisters
_reserved13	chips/nrf52/src/spi.rs	/^    _reserved13: [u8; 104],                          \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved13	chips/nrf52/src/uart.rs	/^    _reserved13: [u32; 1],$/;"	m	struct:UarteRegisters
_reserved13	chips/tm4c129x/src/sysctl.rs	/^    _reserved13: [u32; 6],$/;"	m	struct:SysctlRegisters
_reserved14	chips/nrf52/src/radio.rs	/^    _reserved14: [u32; 618],$/;"	m	struct:RadioRegisters
_reserved14	chips/nrf52/src/uart.rs	/^    _reserved14: [u32; 3],$/;"	m	struct:UarteRegisters
_reserved14	chips/tm4c129x/src/sysctl.rs	/^    _reserved14: [u32; 34],$/;"	m	struct:SysctlRegisters
_reserved15	chips/nrf52/src/uart.rs	/^    _reserved15: [u32; 3],$/;"	m	struct:UarteRegisters
_reserved15	chips/tm4c129x/src/sysctl.rs	/^    _reserved15: [u32; 28],$/;"	m	struct:SysctlRegisters
_reserved16	chips/nrf52/src/uart.rs	/^    _reserved16: [u32; 1],$/;"	m	struct:UarteRegisters
_reserved16	chips/tm4c129x/src/sysctl.rs	/^    _reserved16: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved17	chips/nrf52/src/uart.rs	/^    _reserved17: [u32; 7],$/;"	m	struct:UarteRegisters
_reserved17	chips/tm4c129x/src/sysctl.rs	/^    _reserved17: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved18	chips/tm4c129x/src/sysctl.rs	/^    _reserved18: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved19	chips/tm4c129x/src/sysctl.rs	/^    _reserved19: [u32; 4],$/;"	m	struct:SysctlRegisters
_reserved2	arch/cortex-m/src/nvic.rs	/^    _reserved2: [u32; 24],$/;"	m	struct:NvicRegisters
_reserved2	arch/riscv32i/src/plic.rs	/^    _reserved2: [u32; (0x1000 - 0x214)\/0x4],$/;"	m	struct:PlicRegisters
_reserved2	chips/cc26x2/src/gpio.rs	/^    _reserved2: [u8; 0xC],$/;"	m	struct:GpioRegisters
_reserved2	chips/cc26x2/src/prcm.rs	/^    _reserved2: [ReadOnly<u8>; 0xC],$/;"	m	struct:PrcmRegisters
_reserved2	chips/nrf51/src/clock.rs	/^    _reserved2: [u32; 1],                            \/\/ 0x108$/;"	m	struct:ClockRegisters
_reserved2	chips/nrf51/src/radio.rs	/^    _reserved2: [u32; 2],                        \/\/ 0x120 ---> 0x128$/;"	m	struct:RadioRegisters
_reserved2	chips/nrf51/src/uart.rs	/^    _reserved2: [u32; 56],$/;"	m	struct:UartRegisters
_reserved2	chips/nrf52/src/adc.rs	/^    _reserved2: [u8; 244],$/;"	m	struct:AdcRegisters
_reserved2	chips/nrf52/src/ficr.rs	/^    _reserved2: [u32; 6],$/;"	m	struct:FicrRegisters
_reserved2	chips/nrf52/src/i2c.rs	/^    _reserved2: [u8; 4],$/;"	m	struct:TwimRegisters
_reserved2	chips/nrf52/src/nvmc.rs	/^    _reserved2: u32,$/;"	m	struct:NvmcRegisters
_reserved2	chips/nrf52/src/ppi.rs	/^    _reserved2: [u32; 148],$/;"	m	struct:PpiRegisters
_reserved2	chips/nrf52/src/radio.rs	/^    _reserved2: [u32; 2],$/;"	m	struct:RadioRegisters
_reserved2	chips/nrf52/src/spi.rs	/^    _reserved2: [u8; 224],                           \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved2	chips/nrf52/src/uart.rs	/^    _reserved2: [u32; 52],$/;"	m	struct:UarteRegisters
_reserved2	chips/nrf5x/src/aes.rs	/^    _reserved2: [u32; 127],$/;"	m	struct:AesEcbRegisters
_reserved2	chips/nrf5x/src/gpio.rs	/^    _reserved2: [u32; 118],$/;"	m	struct:GpioRegisters
_reserved2	chips/nrf5x/src/gpio.rs	/^    _reserved2: [u32; 120],$/;"	m	struct:GpioRegisters
_reserved2	chips/nrf5x/src/gpio.rs	/^    _reserved2: [u8; 0x184],$/;"	m	struct:GpioteRegisters
_reserved2	chips/nrf5x/src/rtc.rs	/^    _reserved2: [u8; 436],$/;"	m	struct:RtcRegisters
_reserved2	chips/nrf5x/src/temperature.rs	/^    pub _reserved2: [u32; 128],$/;"	m	struct:TempRegisters
_reserved2	chips/nrf5x/src/timer.rs	/^    _reserved2: [u8; 176],$/;"	m	struct:TimerRegisters
_reserved2	chips/nrf5x/src/trng.rs	/^    pub _reserved2: [u32; 63],$/;"	m	struct:RngRegisters
_reserved2	chips/sam4l/src/acifc.rs	/^    _reserved2: [ReadOnly<u32>; 18],$/;"	m	struct:AcifcRegisters
_reserved2	chips/sam4l/src/aes.rs	/^    _reserved2: [u32; 3],                            \/\/          0x64 - 0x6c$/;"	m	struct:AesRegisters
_reserved2	chips/sam4l/src/bscif.rs	/^    _reserved2: u32,$/;"	m	struct:BscifRegisters
_reserved2	chips/sam4l/src/flashcalw.rs	/^    _reserved2: [u32; 4],$/;"	m	struct:FlashcalwRegisters
_reserved2	chips/sam4l/src/gpio.rs	/^    _reserved2: [u32; 4],$/;"	m	struct:GpioRegisters
_reserved2	chips/sam4l/src/pm.rs	/^    _reserved2: u32,$/;"	m	struct:PmRegisters
_reserved2	chips/sam4l/src/spi.rs	/^    _reserved2: [ReadOnly<u32>; 3],$/;"	m	struct:SpiRegisters
_reserved2	chips/sam4l/src/usart.rs	/^    _reserved2: [ReadOnly<u32>; 33],$/;"	m	struct:UsartRegisters
_reserved2	chips/sam4l/src/usbc/mod.rs	/^    _reserved2: [u8; 0xd8], \/\/ 216 bytes$/;"	m	struct:UsbcRegisters
_reserved2	chips/sifive/src/rtc.rs	/^    _reserved2: [u8; 12],$/;"	m	struct:RtcRegisters
_reserved2	chips/sifive/src/watchdog.rs	/^    _reserved2: [u8; 4],$/;"	m	struct:WatchdogRegisters
_reserved2	chips/tm4c129x/src/gpio.rs	/^    _reserved2: [u32; 669],$/;"	m	struct:GpioRegisters
_reserved2	chips/tm4c129x/src/gpt.rs	/^    _reserved2: [u32; 979],$/;"	m	struct:GptRegisters
_reserved2	chips/tm4c129x/src/sysctl.rs	/^    _reserved2: [u32; 5],$/;"	m	struct:SysctlRegisters
_reserved2	chips/tm4c129x/src/uart.rs	/^    _reserved2: [u32; 22],$/;"	m	struct:UartRegisters
_reserved20	chips/tm4c129x/src/sysctl.rs	/^    _reserved20: [u32; 6],$/;"	m	struct:SysctlRegisters
_reserved21	chips/tm4c129x/src/sysctl.rs	/^    _reserved21: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved22	chips/tm4c129x/src/sysctl.rs	/^    _reserved22: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved23	chips/tm4c129x/src/sysctl.rs	/^    _reserved23: [u32; 86],$/;"	m	struct:SysctlRegisters
_reserved24	chips/tm4c129x/src/sysctl.rs	/^    _reserved24: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved25	chips/tm4c129x/src/sysctl.rs	/^    _reserved25: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved26	chips/tm4c129x/src/sysctl.rs	/^    _reserved26: [u32; 4],$/;"	m	struct:SysctlRegisters
_reserved27	chips/tm4c129x/src/sysctl.rs	/^    _reserved27: [u32; 6],$/;"	m	struct:SysctlRegisters
_reserved28	chips/tm4c129x/src/sysctl.rs	/^    _reserved28: [u32; 9],$/;"	m	struct:SysctlRegisters
_reserved29	chips/tm4c129x/src/sysctl.rs	/^    _reserved29: [u32; 24],$/;"	m	struct:SysctlRegisters
_reserved3	arch/cortex-m/src/nvic.rs	/^    _reserved3: [VolatileCell<u32>; 24],$/;"	m	struct:NvicRegisters
_reserved3	arch/riscv32i/src/plic.rs	/^    _reserved3: [u32; (0x2000 - 0x1014)\/0x4],$/;"	m	struct:PlicRegisters
_reserved3	chips/cc26x2/src/gpio.rs	/^    _reserved3: [u8; 0xC],$/;"	m	struct:GpioRegisters
_reserved3	chips/nrf51/src/clock.rs	/^    _reserved3: [u32; 124],                          \/\/ 0x110 - 0x304$/;"	m	struct:ClockRegisters
_reserved3	chips/nrf51/src/radio.rs	/^    _reserved3: [u32; 53],                       \/\/ 0x12c ---> 0x200$/;"	m	struct:RadioRegisters
_reserved3	chips/nrf51/src/uart.rs	/^    _reserved3: [u32; 4],$/;"	m	struct:UartRegisters
_reserved3	chips/nrf52/src/adc.rs	/^    _reserved3: [u8; 252],$/;"	m	struct:AdcRegisters
_reserved3	chips/nrf52/src/clock.rs	/^    _reserved3: [u32; 124],$/;"	m	struct:ClockRegisters
_reserved3	chips/nrf52/src/ficr.rs	/^    _reserved3: [u32; 21],$/;"	m	struct:FicrRegisters
_reserved3	chips/nrf52/src/i2c.rs	/^    _reserved3: [u8; 224],$/;"	m	struct:TwimRegisters
_reserved3	chips/nrf52/src/nvmc.rs	/^    _reserved3: [u32; 10],$/;"	m	struct:NvmcRegisters
_reserved3	chips/nrf52/src/ppi.rs	/^    _reserved3: [u32; 62],$/;"	m	struct:PpiRegisters
_reserved3	chips/nrf52/src/radio.rs	/^    _reserved3: [u32; 1],$/;"	m	struct:RadioRegisters
_reserved3	chips/nrf52/src/spi.rs	/^    _reserved3: [u8; 8],                             \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved3	chips/nrf52/src/uart.rs	/^    _reserved3: [u32; 2],$/;"	m	struct:UarteRegisters
_reserved3	chips/nrf5x/src/aes.rs	/^    _reserved3: [u32; 126],$/;"	m	struct:AesEcbRegisters
_reserved3	chips/nrf5x/src/gpio.rs	/^    _reserved3: [u8; 0x204],$/;"	m	struct:GpioteRegisters
_reserved3	chips/nrf5x/src/rtc.rs	/^    _reserved3: [u8; 52],$/;"	m	struct:RtcRegisters
_reserved3	chips/nrf5x/src/temperature.rs	/^    pub _reserved3: [u32; 127],$/;"	m	struct:TempRegisters
_reserved3	chips/nrf5x/src/timer.rs	/^    _reserved3: [u8; 256],$/;"	m	struct:TimerRegisters
_reserved3	chips/nrf5x/src/trng.rs	/^    pub _reserved3: [u32; 64],$/;"	m	struct:RngRegisters
_reserved3	chips/sam4l/src/acifc.rs	/^    _reserved3: [ReadOnly<u32>; 16],$/;"	m	struct:AcifcRegisters
_reserved3	chips/sam4l/src/bscif.rs	/^    _reserved3: [u32; 4],$/;"	m	struct:BscifRegisters
_reserved3	chips/sam4l/src/gpio.rs	/^    _reserved3: [u32; 8],$/;"	m	struct:GpioRegisters
_reserved3	chips/sam4l/src/pm.rs	/^    _reserved3: [u32; 2],$/;"	m	struct:PmRegisters
_reserved3	chips/sam4l/src/usart.rs	/^    _reserved3: [ReadOnly<u32>; 4],$/;"	m	struct:UsartRegisters
_reserved3	chips/sam4l/src/usbc/mod.rs	/^    _reserved3: [u8; 0x180], \/\/ 384 bytes$/;"	m	struct:UsbcRegisters
_reserved3	chips/tm4c129x/src/gpt.rs	/^    _reserved3: [u32; 1],$/;"	m	struct:GptRegisters
_reserved3	chips/tm4c129x/src/sysctl.rs	/^    _reserved3: [u32; 12],$/;"	m	struct:SysctlRegisters
_reserved3	chips/tm4c129x/src/uart.rs	/^    _reserved3: [u32; 965],$/;"	m	struct:UartRegisters
_reserved30	chips/tm4c129x/src/sysctl.rs	/^    _reserved30: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved31	chips/tm4c129x/src/sysctl.rs	/^    _reserved31: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved32	chips/tm4c129x/src/sysctl.rs	/^    _reserved32: [u32; 4],$/;"	m	struct:SysctlRegisters
_reserved33	chips/tm4c129x/src/sysctl.rs	/^    _reserved33: [u32; 6],$/;"	m	struct:SysctlRegisters
_reserved34	chips/tm4c129x/src/sysctl.rs	/^    _reserved34: [u32; 9],$/;"	m	struct:SysctlRegisters
_reserved35	chips/tm4c129x/src/sysctl.rs	/^    _reserved35: [u32; 24],$/;"	m	struct:SysctlRegisters
_reserved36	chips/tm4c129x/src/sysctl.rs	/^    _reserved36: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved37	chips/tm4c129x/src/sysctl.rs	/^    _reserved37: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved38	chips/tm4c129x/src/sysctl.rs	/^    _reserved38: [u32; 4],$/;"	m	struct:SysctlRegisters
_reserved39	chips/tm4c129x/src/sysctl.rs	/^    _reserved39: [u32; 6],$/;"	m	struct:SysctlRegisters
_reserved4	arch/riscv32i/src/plic.rs	/^    _reserved4: [u32; (0x20_0000-0x2094)\/0x4],$/;"	m	struct:PlicRegisters
_reserved4	chips/cc26x2/src/gpio.rs	/^    _reserved4: [u8; 0xC],$/;"	m	struct:GpioRegisters
_reserved4	chips/cc26x2/src/prcm.rs	/^    _reserved4: [ReadOnly<u8>; 0xB4],$/;"	m	struct:PrcmRegisters
_reserved4	chips/nrf51/src/clock.rs	/^    _reserved4: [u32; 63],                           \/\/ 0x308 - 0x408$/;"	m	struct:ClockRegisters
_reserved4	chips/nrf51/src/radio.rs	/^    _reserved4: [u32; 64],                       \/\/ 0x204 ---> 0x304$/;"	m	struct:RadioRegisters
_reserved4	chips/nrf51/src/uart.rs	/^    _reserved4: [u32; 1],$/;"	m	struct:UartRegisters
_reserved4	chips/nrf52/src/adc.rs	/^    _reserved4: [u8; 12],$/;"	m	struct:AdcRegisters
_reserved4	chips/nrf52/src/clock.rs	/^    _reserved4: [u32; 63],$/;"	m	struct:ClockRegisters
_reserved4	chips/nrf52/src/i2c.rs	/^    _reserved4: [u8; 28],$/;"	m	struct:TwimRegisters
_reserved4	chips/nrf52/src/nvmc.rs	/^    _reserved4: u32,$/;"	m	struct:NvmcRegisters
_reserved4	chips/nrf52/src/radio.rs	/^    _reserved4: [u32; 50],$/;"	m	struct:RadioRegisters
_reserved4	chips/nrf52/src/spi.rs	/^    _reserved4: [u8; 4],                             \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved4	chips/nrf52/src/uart.rs	/^    _reserved4: [u32; 3],$/;"	m	struct:UarteRegisters
_reserved4	chips/nrf5x/src/rtc.rs	/^    _reserved4: [u8; 440],$/;"	m	struct:RtcRegisters
_reserved4	chips/nrf5x/src/temperature.rs	/^    pub _reserved4: [u32; 5],$/;"	m	struct:TempRegisters
_reserved4	chips/nrf5x/src/timer.rs	/^    _reserved4: [u8; 504],$/;"	m	struct:TimerRegisters
_reserved4	chips/nrf5x/src/trng.rs	/^    pub _reserved4: [u32; 126],$/;"	m	struct:RngRegisters
_reserved4	chips/sam4l/src/gpio.rs	/^    _reserved4: [u32; 4],$/;"	m	struct:GpioRegisters
_reserved4	chips/sam4l/src/pm.rs	/^    _reserved4: [u32; 4],$/;"	m	struct:PmRegisters
_reserved4	chips/sam4l/src/usbc/mod.rs	/^    _reserved4: [u8; 8],$/;"	m	struct:UsbcRegisters
_reserved4	chips/tm4c129x/src/sysctl.rs	/^    _reserved4: [u32; 3],$/;"	m	struct:SysctlRegisters
_reserved4	chips/tm4c129x/src/uart.rs	/^    _reserved4: [u32; 1],$/;"	m	struct:UartRegisters
_reserved40	chips/tm4c129x/src/sysctl.rs	/^    _reserved40: [u32; 9],$/;"	m	struct:SysctlRegisters
_reserved41	chips/tm4c129x/src/sysctl.rs	/^    _reserved41: [u32; 24],$/;"	m	struct:SysctlRegisters
_reserved42	chips/tm4c129x/src/sysctl.rs	/^    _reserved42: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved43	chips/tm4c129x/src/sysctl.rs	/^    _reserved43: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved44	chips/tm4c129x/src/sysctl.rs	/^    _reserved44: [u32; 4],$/;"	m	struct:SysctlRegisters
_reserved45	chips/tm4c129x/src/sysctl.rs	/^    _reserved45: [u32; 6],$/;"	m	struct:SysctlRegisters
_reserved46	chips/tm4c129x/src/sysctl.rs	/^    _reserved46: [u32; 9],$/;"	m	struct:SysctlRegisters
_reserved47	chips/tm4c129x/src/sysctl.rs	/^    _reserved47: [u32; 24],$/;"	m	struct:SysctlRegisters
_reserved48	chips/tm4c129x/src/sysctl.rs	/^    _reserved48: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved49	chips/tm4c129x/src/sysctl.rs	/^    _reserved49: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved5	arch/riscv32i/src/plic.rs	/^    _reserved5: [u32; (0x1000-0x8)\/0x4],$/;"	m	struct:PlicRegisters
_reserved5	chips/cc26x2/src/gpio.rs	/^    _reserved5: [u8; 0xC],$/;"	m	struct:GpioRegisters
_reserved5	chips/cc26x2/src/prcm.rs	/^    _reserved5: [ReadOnly<u8>; 0x04],$/;"	m	struct:PrcmRegisters
_reserved5	chips/nrf51/src/clock.rs	/^    _reserved5: [u32; 1],                            \/\/ 0x410$/;"	m	struct:ClockRegisters
_reserved5	chips/nrf51/src/radio.rs	/^    _reserved5: [u32; 61],                       \/\/ 0x30c ---> 0x400$/;"	m	struct:RadioRegisters
_reserved5	chips/nrf51/src/uart.rs	/^    _reserved5: [u32; 7],$/;"	m	struct:UartRegisters
_reserved5	chips/nrf52/src/adc.rs	/^    _reserved5: [u8; 96],$/;"	m	struct:AdcRegisters
_reserved5	chips/nrf52/src/clock.rs	/^    _reserved5: [u32; 1],$/;"	m	struct:ClockRegisters
_reserved5	chips/nrf52/src/i2c.rs	/^    _reserved5: [u8; 32],$/;"	m	struct:TwimRegisters
_reserved5	chips/nrf52/src/radio.rs	/^    _reserved5: [u32; 64],$/;"	m	struct:RadioRegisters
_reserved5	chips/nrf52/src/spi.rs	/^    _reserved5: [u8; 4],                             \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved5	chips/nrf5x/src/rtc.rs	/^    _reserved5: [u8; 52],$/;"	m	struct:RtcRegisters
_reserved5	chips/nrf5x/src/temperature.rs	/^    pub _reserved5: [u32; 2],$/;"	m	struct:TempRegisters
_reserved5	chips/nrf5x/src/timer.rs	/^    _reserved5: [u8; 4],$/;"	m	struct:TimerRegisters
_reserved5	chips/sam4l/src/gpio.rs	/^    _reserved5: [u32; 26],$/;"	m	struct:GpioRegisters
_reserved5	chips/sam4l/src/pm.rs	/^    _reserved5: [u32; 25],                            \/\/ 0x60$/;"	m	struct:PmRegisters
_reserved5	chips/tm4c129x/src/sysctl.rs	/^    _reserved5: [u32; 29],$/;"	m	struct:SysctlRegisters
_reserved50	chips/tm4c129x/src/sysctl.rs	/^    _reserved50: [u32; 4],$/;"	m	struct:SysctlRegisters
_reserved51	chips/tm4c129x/src/sysctl.rs	/^    _reserved51: [u32; 6],$/;"	m	struct:SysctlRegisters
_reserved52	chips/tm4c129x/src/sysctl.rs	/^    _reserved52: [u32; 9],$/;"	m	struct:SysctlRegisters
_reserved53	chips/tm4c129x/src/sysctl.rs	/^    _reserved53: [u32; 24],$/;"	m	struct:SysctlRegisters
_reserved54	chips/tm4c129x/src/sysctl.rs	/^    _reserved54: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved55	chips/tm4c129x/src/sysctl.rs	/^    _reserved55: [u32; 1],$/;"	m	struct:SysctlRegisters
_reserved56	chips/tm4c129x/src/sysctl.rs	/^    _reserved56: [u32; 4],$/;"	m	struct:SysctlRegisters
_reserved57	chips/tm4c129x/src/sysctl.rs	/^    _reserved57: [u32; 6],$/;"	m	struct:SysctlRegisters
_reserved58	chips/tm4c129x/src/sysctl.rs	/^    _reserved58: [u32; 9],$/;"	m	struct:SysctlRegisters
_reserved6	arch/riscv32i/src/plic.rs	/^    _reserved6: [u32; (0x10000000-0xC201008)\/0x4],$/;"	m	struct:PlicRegisters
_reserved6	chips/nrf51/src/clock.rs	/^    _reserved6: [u32; 62],                           \/\/ 0x420 - 0x518$/;"	m	struct:ClockRegisters
_reserved6	chips/nrf51/src/radio.rs	/^    _reserved6: [u32; 1],                        \/\/ 0x404 - 0x408$/;"	m	struct:RadioRegisters
_reserved6	chips/nrf51/src/uart.rs	/^    _reserved6: [u32; 46],$/;"	m	struct:UartRegisters
_reserved6	chips/nrf52/src/adc.rs	/^    _reserved6: [u8; 48],$/;"	m	struct:AdcRegisters
_reserved6	chips/nrf52/src/clock.rs	/^    _reserved6: [u32; 62],$/;"	m	struct:ClockRegisters
_reserved6	chips/nrf52/src/i2c.rs	/^    _reserved6: [u8; 8],$/;"	m	struct:TwimRegisters
_reserved6	chips/nrf52/src/radio.rs	/^    _reserved6: [u32; 61],$/;"	m	struct:RadioRegisters
_reserved6	chips/nrf52/src/spi.rs	/^    _reserved6: [u8; 40],                            \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved6	chips/nrf52/src/uart.rs	/^    _reserved6: [u32; 7],$/;"	m	struct:UarteRegisters
_reserved6	chips/nrf5x/src/rtc.rs	/^    _reserved6: [u8; 2732],$/;"	m	struct:RtcRegisters
_reserved6	chips/nrf5x/src/temperature.rs	/^    pub _reserved6: [u32; 2],$/;"	m	struct:TempRegisters
_reserved6	chips/nrf5x/src/timer.rs	/^    _reserved6: [u8; 44],$/;"	m	struct:TimerRegisters
_reserved6	chips/sam4l/src/pm.rs	/^    _reserved6: [u32; 34],                                  \/\/ 0x100$/;"	m	struct:PmRegisters
_reserved6	chips/tm4c129x/src/sysctl.rs	/^    _reserved6: [u32; 2],$/;"	m	struct:SysctlRegisters
_reserved7	chips/cc26x2/src/prcm.rs	/^    _reserved7: [ReadOnly<u8>; 0x2C],$/;"	m	struct:PrcmRegisters
_reserved7	chips/nrf51/src/clock.rs	/^    _reserved7: [u32; 7],                            \/\/ 0x51c - 0x538$/;"	m	struct:ClockRegisters
_reserved7	chips/nrf51/src/radio.rs	/^    _reserved7: [u32; 60],                       \/\/ 0x414 - 0x504$/;"	m	struct:RadioRegisters
_reserved7	chips/nrf51/src/uart.rs	/^    _reserved7: [u32; 63],$/;"	m	struct:UartRegisters
_reserved7	chips/nrf52/src/clock.rs	/^    _reserved7: [u32; 7],$/;"	m	struct:ClockRegisters
_reserved7	chips/nrf52/src/i2c.rs	/^    _reserved7: [u8; 156],$/;"	m	struct:TwimRegisters
_reserved7	chips/nrf52/src/radio.rs	/^    _reserved7: [u32; 1],$/;"	m	struct:RadioRegisters
_reserved7	chips/nrf52/src/spi.rs	/^    _reserved7: [u8; 176],                           \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved7	chips/nrf52/src/uart.rs	/^    _reserved7: [u32; 1],$/;"	m	struct:UarteRegisters
_reserved7	chips/sam4l/src/pm.rs	/^    _reserved7: [u32; 7],$/;"	m	struct:PmRegisters
_reserved7	chips/tm4c129x/src/sysctl.rs	/^    _reserved7: [u32; 2],$/;"	m	struct:SysctlRegisters
_reserved8	chips/cc26x2/src/prcm.rs	/^    _reserved8: [ReadOnly<u8>; 0x14],$/;"	m	struct:PrcmRegisters
_reserved8	chips/nrf51/src/clock.rs	/^    _reserved8: [u32; 5],                            \/\/ 0x53c - 0x550$/;"	m	struct:ClockRegisters
_reserved8	chips/nrf51/src/radio.rs	/^    _reserved8: [u32; 1],                        \/\/ 0x54c - 0x550$/;"	m	struct:RadioRegisters
_reserved8	chips/nrf51/src/uart.rs	/^    _reserved8: [u32; 93],$/;"	m	struct:UartRegisters
_reserved8	chips/nrf52/src/clock.rs	/^    _reserved8: [u32; 8],$/;"	m	struct:ClockRegisters
_reserved8	chips/nrf52/src/i2c.rs	/^    _reserved8: [u8; 252],$/;"	m	struct:TwimRegisters
_reserved8	chips/nrf52/src/radio.rs	/^    _reserved8: [u32; 60],$/;"	m	struct:RadioRegisters
_reserved8	chips/nrf52/src/spi.rs	/^    _reserved8: [u8; 256],                           \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved8	chips/nrf52/src/uart.rs	/^    _reserved8: [u32; 1],$/;"	m	struct:UarteRegisters
_reserved8	chips/sam4l/src/pm.rs	/^    _reserved8: u32,$/;"	m	struct:PmRegisters
_reserved8	chips/tm4c129x/src/sysctl.rs	/^    _reserved8: [u32; 7],$/;"	m	struct:SysctlRegisters
_reserved9	chips/cc26x2/src/prcm.rs	/^    _reserved9: [ReadOnly<u8>; 0x38],$/;"	m	struct:PrcmRegisters
_reserved9	chips/nrf51/src/radio.rs	/^    _reserved9: [u32; 2],                        \/\/ 0x558 - 0x560$/;"	m	struct:RadioRegisters
_reserved9	chips/nrf51/src/uart.rs	/^    _reserved9: [u32; 31],$/;"	m	struct:UartRegisters
_reserved9	chips/nrf52/src/i2c.rs	/^    _reserved9: [u8; 440],$/;"	m	struct:TwimRegisters
_reserved9	chips/nrf52/src/radio.rs	/^    _reserved9: [u32; 1],$/;"	m	struct:RadioRegisters
_reserved9	chips/nrf52/src/spi.rs	/^    _reserved9: [u8; 500],                           \/\/ reserved$/;"	m	struct:SpimRegisters
_reserved9	chips/nrf52/src/uart.rs	/^    _reserved9: [u32; 41],$/;"	m	struct:UarteRegisters
_reserved9	chips/sam4l/src/pm.rs	/^    _reserved9: [u32; 152],$/;"	m	struct:PmRegisters
_reserved9	chips/tm4c129x/src/sysctl.rs	/^    _reserved9: [u32; 4],$/;"	m	struct:SysctlRegisters
_reserved_0	chips/nrf51/src/i2c.rs	/^    _reserved_0: [u32; 1],$/;"	m	struct:TwimRegisters
_reserved_1	chips/nrf51/src/i2c.rs	/^    _reserved_1: [u32; 2],$/;"	m	struct:TwimRegisters
_reserved_10	chips/nrf51/src/i2c.rs	/^    _reserved_10: [u32; 14],$/;"	m	struct:TwimRegisters
_reserved_11	chips/nrf51/src/i2c.rs	/^    _reserved_11: [u32; 1],$/;"	m	struct:TwimRegisters
_reserved_12	chips/nrf51/src/i2c.rs	/^    _reserved_12: [u32; 2],$/;"	m	struct:TwimRegisters
_reserved_12	chips/nrf52/src/i2c.rs	/^    _reserved_12: [u8; 20],$/;"	m	struct:TwimRegisters
_reserved_13	chips/nrf51/src/i2c.rs	/^    _reserved_13: [u32; 1],$/;"	m	struct:TwimRegisters
_reserved_14	chips/nrf51/src/i2c.rs	/^    _reserved_14: [u32; 24],$/;"	m	struct:TwimRegisters
_reserved_14	chips/nrf52/src/i2c.rs	/^    _reserved_14: [u8; 52],$/;"	m	struct:TwimRegisters
_reserved_2	chips/nrf51/src/i2c.rs	/^    _reserved_2: [u32; 1],$/;"	m	struct:TwimRegisters
_reserved_3	chips/nrf51/src/i2c.rs	/^    _reserved_3: [u32; 56],$/;"	m	struct:TwimRegisters
_reserved_4	chips/nrf51/src/i2c.rs	/^    _reserved_4: [u32; 4],$/;"	m	struct:TwimRegisters
_reserved_5	chips/nrf51/src/i2c.rs	/^    _reserved_5: [u32; 1],$/;"	m	struct:TwimRegisters
_reserved_6	chips/nrf51/src/i2c.rs	/^    _reserved_6: [u32; 4],$/;"	m	struct:TwimRegisters
_reserved_7	chips/nrf51/src/i2c.rs	/^    _reserved_7: [u32; 49],$/;"	m	struct:TwimRegisters
_reserved_8	chips/nrf51/src/i2c.rs	/^    _reserved_8: [u32; 63],$/;"	m	struct:TwimRegisters
_reserved_9	chips/nrf51/src/i2c.rs	/^    _reserved_9: [u32; 110],$/;"	m	struct:TwimRegisters
_reserverd2	chips/nrf52/src/clock.rs	/^    _reserverd2: u32,$/;"	m	struct:ClockRegisters
_sapps	boards/arty-e21/src/main.rs	/^        static _sapps: u8;$/;"	v	function:reset_handler
_sapps	boards/ek-tm4c1294xl/src/main.rs	/^        static _sapps: u8;$/;"	v	function:reset_handler
_sapps	boards/hail/src/main.rs	/^        static _sapps: u8;$/;"	v	function:reset_handler
_sapps	boards/imix/src/main.rs	/^        static _sapps: u8;$/;"	v	function:reset_handler
_sapps	boards/launchxl/src/main.rs	/^        static _sapps: u8;$/;"	v	function:reset_handler
_sapps	boards/nordic/nrf51dk/src/main.rs	/^        static _sapps: u8;$/;"	v	function:reset_handler
_sapps	boards/nordic/nrf52dk_base/src/lib.rs	/^        static _sapps: u8;$/;"	v	function:setup_board
_shorts	chips/nrf51/src/uart.rs	/^    _shorts: [u32; 1], \/\/.............................. 0x200$/;"	m	struct:UartRegisters
_srelocate	arch/cortex-m3/src/lib.rs	/^    static mut _srelocate: u32;$/;"	v
_srelocate	arch/cortex-m4/src/lib.rs	/^    static mut _srelocate: u32;$/;"	v
_srelocate	arch/riscv32i/src/lib.rs	/^    static mut _srelocate: u32;$/;"	v
_srelocate	chips/cc26x2/src/crt1.rs	/^    static mut _srelocate: u32;$/;"	v
_srelocate	chips/nrf51/src/crt1.rs	/^    static mut _srelocate: u32;$/;"	v
_srelocate	chips/nrf52/src/crt1.rs	/^    static mut _srelocate: u32;$/;"	v
_srelocate	chips/sam4l/src/lib.rs	/^    static mut _srelocate: u32;$/;"	v
_srelocate	chips/tm4c129x/src/lib.rs	/^    static mut _srelocate: u32;$/;"	v
_sstack	arch/cortex-m3/src/lib.rs	/^    static mut _sstack: u32;$/;"	v
_sstack	arch/cortex-m4/src/lib.rs	/^    static mut _sstack: u32;$/;"	v
_sstorage	boards/imix/src/components/nonvolatile_storage.rs	/^            static _sstorage: u8;$/;"	v	method:NonvolatileStorageComponent::finalize
_start	example_program/loop.S	/^_start:$/;"	l
_start_trap	arch/riscv32i/src/lib.rs	/^    static _start_trap: u32;$/;"	v
_subsec_inc	chips/cc26x2/src/rtc.rs	/^    _subsec_inc: ReadOnly<u32>,$/;"	m	struct:RtcRegisters
_svc_num	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^int _svc_num = 0;$/;"	v	typeref:typename:int
_szero	arch/cortex-m3/src/lib.rs	/^    static mut _szero: u32;$/;"	v
_szero	arch/cortex-m4/src/lib.rs	/^    static mut _szero: u32;$/;"	v
_szero	arch/riscv32i/src/lib.rs	/^    static mut _szero: u32;$/;"	v
_szero	chips/cc26x2/src/crt1.rs	/^    static mut _szero: u32;$/;"	v
_szero	chips/nrf51/src/crt1.rs	/^    static mut _szero: u32;$/;"	v
_szero	chips/nrf52/src/crt1.rs	/^    static mut _szero: u32;$/;"	v
_szero	chips/sam4l/src/lib.rs	/^    static mut _szero: u32;$/;"	v
_szero	chips/tm4c129x/src/lib.rs	/^    static mut _szero: u32;$/;"	v
a	chips/nrf5x/src/temperature.rs	/^    pub a: [ReadWrite<u32, A::Register>; 6],$/;"	m	struct:TempRegisters
a	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
a	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
a	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
a	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
a.source	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
a.test-arrow	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
a.test-arrow	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
a.test-arrow	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
a.test-arrow:hover	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
a.test-arrow:hover	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
a.test-arrow:hover	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
a0	arch/riscv32i/src/lib.rs	/^    a0: u32,$/;"	m	struct:StackFrame
a1	arch/riscv32i/src/lib.rs	/^    a1: u32,$/;"	m	struct:StackFrame
a2	arch/riscv32i/src/lib.rs	/^    a2: u32,$/;"	m	struct:StackFrame
a3	arch/riscv32i/src/lib.rs	/^    a3: u32,$/;"	m	struct:StackFrame
a4	arch/riscv32i/src/lib.rs	/^    a4: u32,$/;"	m	struct:StackFrame
a5	arch/riscv32i/src/lib.rs	/^    a5: u32,$/;"	m	struct:StackFrame
a6	arch/riscv32i/src/lib.rs	/^    a6: u32,$/;"	m	struct:StackFrame
a7	arch/riscv32i/src/lib.rs	/^    a7: u32,$/;"	m	struct:StackFrame
a:active	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
a:hover	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
abbr[title]	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
abort_receive	capsules/src/segger_rtt.rs	/^    fn abort_receive(&self) {}$/;"	F	implementation:SeggerRtt
abort_receive	capsules/src/virtual_uart.rs	/^    fn abort_receive(&self) {$/;"	F	implementation:UartDevice
abort_receive	chips/cc26x2/src/uart.rs	/^    fn abort_receive(&self) {$/;"	F	implementation:UART
abort_receive	chips/nrf51/src/uart.rs	/^    fn abort_receive(&self) {$/;"	F	implementation:UART
abort_receive	chips/nrf52/src/uart.rs	/^    fn abort_receive(&self) {$/;"	F	implementation:Uarte
abort_receive	chips/sam4l/src/usart.rs	/^    fn abort_receive(&self) {$/;"	F	implementation:USART
abort_receive	chips/sifive/src/uart.rs	/^    fn abort_receive(&self) {$/;"	F	implementation:Uart
abort_receive	chips/tm4c129x/src/uart.rs	/^    fn abort_receive(&self) {$/;"	F	implementation:UART
abort_receive	kernel/src/hil/uart.rs	/^    fn abort_receive(&self);$/;"	F	interface:UART
abort_rx	chips/sam4l/src/usart.rs	/^    fn abort_rx(&self, usart: &USARTRegManager, error: hil::uart::Error) {$/;"	F	implementation:USART
abort_transfer	chips/sam4l/src/dma.rs	/^    pub fn abort_transfer(&self) -> Option<&'static mut [u8]> {$/;"	F	implementation:DMAChannel
abort_tx	chips/sam4l/src/usart.rs	/^    fn abort_tx(&self, usart: &USARTRegManager, error: hil::uart::Error) {$/;"	F	implementation:USART
acifc	chips/sam4l/src/lib.rs	/^pub mod acifc;$/;"	n
ack_num	capsules/src/net/tcp.rs	/^    pub ack_num: u32,$/;"	m	struct:TCPHeader
ack_requested	capsules/src/net/ieee802154.rs	/^    pub ack_requested: bool,$/;"	m	struct:Header
acquire_uldo	chips/cc26x2/src/prcm.rs	/^pub fn acquire_uldo() {$/;"	f
active	capsules/src/adc.rs	/^    active: Cell<bool>,$/;"	m	struct:Adc
active	chips/sam4l/src/adc.rs	/^    active: Cell<bool>,$/;"	m	struct:Adc
active_len	kernel/src/debug.rs	/^    active_len: Cell<usize>,$/;"	m	struct:DebugWriter
adc	boards/hail/src/main.rs	/^    adc: &'static capsules::adc::Adc<'static, sam4l::adc::Adc>,$/;"	m	struct:Hail
adc	boards/imix/src/components/adc.rs	/^    type Output = &'static adc::Adc<'static, sam4l::adc::Adc>;$/;"	v	implementation:AdcComponent
adc	boards/imix/src/components/mod.rs	/^pub mod adc;$/;"	n
adc	boards/imix/src/main.rs	/^    adc: &'static capsules::adc::Adc<'static, sam4l::adc::Adc>,$/;"	m	struct:Imix
adc	capsules/src/adc.rs	/^    adc: &'a A,$/;"	m	struct:Adc
adc	capsules/src/lib.rs	/^pub mod adc;$/;"	n
adc	chips/nrf52/src/lib.rs	/^pub mod adc;$/;"	n
adc	chips/sam4l/src/lib.rs	/^pub mod adc;$/;"	n
adc	kernel/src/hil/mod.rs	/^pub mod adc;$/;"	n
adc_buf1	capsules/src/adc.rs	/^    adc_buf1: TakeCell<'static, [u16]>,$/;"	m	struct:Adc
adc_buf2	capsules/src/adc.rs	/^    adc_buf2: TakeCell<'static, [u16]>,$/;"	m	struct:Adc
adc_buf3	capsules/src/adc.rs	/^    adc_buf3: TakeCell<'static, [u16]>,$/;"	m	struct:Adc
adc_clk_freq	chips/sam4l/src/adc.rs	/^    adc_clk_freq: Cell<u32>,$/;"	m	struct:Adc
adcctl	chips/tm4c129x/src/gpio.rs	/^    adcctl: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
adcev	chips/tm4c129x/src/gpt.rs	/^    adcev: VolatileCell<u32>,$/;"	m	struct:GptRegisters
add	libraries/tock-cells/src/numeric_cell_ext.rs	/^    fn add(&self, val: T) {$/;"	f
add	libraries/tock-cells/src/numeric_cell_ext.rs	/^    fn add(&self, val: T);$/;"	F	interface:NumericCellExt
add	libraries/tock-register-interface/src/registers.rs	/^    fn add(self, rhs: Self) -> Self {$/;"	F	implementation:FieldValue
addClass	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
addTab	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
add_assign	libraries/tock-register-interface/src/registers.rs	/^    fn add_assign(&mut self, rhs: FieldValue<T, R>) {$/;"	F	implementation:FieldValue
add_board	tools/build-all-docs.sh	/^function add_board {$/;"	f
add_key	capsules/src/ieee802154/driver.rs	/^    fn add_key(&self, new_key: KeyDescriptor) -> Option<usize> {$/;"	F	implementation:RadioDriver
add_mpu_region	kernel/src/process.rs	/^    fn add_mpu_region($/;"	F	implementation:Process
add_mpu_region	kernel/src/process.rs	/^    fn add_mpu_region($/;"	F	interface:ProcessType
add_neighbor	capsules/src/ieee802154/driver.rs	/^    fn add_neighbor(&self, new_neighbor: DeviceDescriptor) -> Option<usize> {$/;"	F	implementation:RadioDriver
add_rx_state	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn add_rx_state(&self, rx_state: &'a RxState<'a>) {$/;"	F	implementation:Sixlowpan
add_rx_state	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn add_rx_state(&self, rx_state: &'a RxState<'a>);$/;"	F	interface:SixlowpanState
add_user	capsules/src/ieee802154/virtual_mac.rs	/^    pub fn add_user(&self, user: &'a MacUser<'a>) {$/;"	F	implementation:MuxMac
addr	capsules/src/net/udp/driver.rs	/^    addr: IPAddr,$/;"	m	struct:UDPEndpoint
addr	capsules/src/rf233.rs	/^    addr: Cell<u16>,$/;"	m	struct:RF233
addr	capsules/src/virtual_i2c.rs	/^    addr: u8,$/;"	m	struct:I2CDevice
addr	chips/sam4l/src/crccu.rs	/^    addr: u32, \/\/ Transfer Address Register (RW): Address of memory block to compute$/;"	m	struct:Descriptor
addr	chips/sam4l/src/usbc/mod.rs	/^    addr: VolatileCell<*mut u8>,$/;"	m	struct:Bank
addr_long	capsules/src/rf233.rs	/^    addr_long: Cell<[u8; 8]>,$/;"	m	struct:RF233
address	capsules/src/ble_advertising_driver.rs	/^    address: [u8; PACKET_ADDR_LEN],$/;"	m	struct:App
address	capsules/src/nonvolatile_to_pages.rs	/^    address: Cell<usize>,$/;"	m	struct:NonvolatileToPages
address	chips/nrf51/src/i2c.rs	/^    address: ReadWrite<u32, Address::Register>,$/;"	m	struct:TwimRegisters
address	chips/nrf51/src/radio.rs	/^    address: ReadWrite<u32, Event::Register>,    \/\/ 0x104 ---> 0x108$/;"	m	struct:RadioRegisters
address	chips/nrf52/src/i2c.rs	/^    address: ReadWrite<u32, ADDRESS::Register>,$/;"	m	struct:TwimRegisters
adjustToggle	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f	function:collapseDocs
adr	arch/cortex-m/src/scb.rs	/^    adr: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
adv_data	capsules/src/ble_advertising_driver.rs	/^    adv_data: Option<kernel::AppSlice<kernel::Shared, u8>>,$/;"	m	struct:App
advertisement_interval_ms	capsules/src/ble_advertising_driver.rs	/^    advertisement_interval_ms: u32,$/;"	m	struct:App
aes	boards/nordic/nrf52dk/src/tests/mod.rs	/^pub mod aes;$/;"	n
aes	capsules/src/aes_ccm.rs	/^    aes: &'a A,$/;"	m	struct:AES128CCM
aes	capsules/src/test/aes.rs	/^    aes: &'a A,$/;"	m	struct:TestAes128Cbc
aes	capsules/src/test/aes.rs	/^    aes: &'a A,$/;"	m	struct:TestAes128Ctr
aes	capsules/src/test/mod.rs	/^pub mod aes;$/;"	n
aes	chips/nrf5x/src/lib.rs	/^pub mod aes;$/;"	n
aes	chips/sam4l/src/lib.rs	/^pub mod aes;$/;"	n
aes_ccm	capsules/src/ieee802154/framer.rs	/^    aes_ccm: &'a A,$/;"	m	struct:Framer
aes_ccm	capsules/src/lib.rs	/^pub mod aes_ccm;$/;"	n
aes_ccm	capsules/src/test/aes_ccm.rs	/^    aes_ccm: &'a A,$/;"	m	struct:Test
aes_ccm	capsules/src/test/mod.rs	/^pub mod aes_ccm;$/;"	n
aes_ccm_test	boards/imix/src/main.rs	/^mod aes_ccm_test;$/;"	n
aes_test	boards/imix/src/main.rs	/^mod aes_test;$/;"	n
aes_test	boards/nordic/nrf51dk/src/main.rs	/^mod aes_test;$/;"	n
afsel	chips/tm4c129x/src/gpio.rs	/^    afsel: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
afsr	arch/cortex-m/src/scb.rs	/^    afsr: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
after_peripheral_access	chips/sam4l/src/i2c.rs	/^    fn after_peripheral_access(&self, clock: &TWIMClock, registers: &TWIMRegisters) {$/;"	F	implementation:I2CHw
after_peripheral_access	chips/sam4l/src/i2c.rs	/^    fn after_peripheral_access(&self, clock: &TWISClock, registers: &TWISRegisters) {$/;"	F	implementation:I2CHw
after_peripheral_access	chips/sam4l/src/spi.rs	/^    fn after_peripheral_access(&self, clock: &pm::Clock, registers: &SpiRegisters) {$/;"	F	implementation:SpiHw
after_peripheral_access	kernel/src/common/peripherals.rs	/^    fn after_peripheral_access(&self, &C, &Self::RegisterType);$/;"	F	interface:PeripheralManagement
after_state	capsules/src/sdcard.rs	/^    after_state: Cell<SpiState>,$/;"	m	struct:SDCard
ahb_clock	chips/sam4l/src/flashcalw.rs	/^    ahb_clock: pm::Clock,$/;"	m	struct:FLASHCALW
aircr	arch/cortex-m/src/scb.rs	/^    aircr: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
alarm	boards/ek-tm4c1294xl/src/main.rs	/^    alarm: &'static capsules::alarm::AlarmDriver<$/;"	m	struct:EkTm4c1294xl
alarm	boards/hail/src/main.rs	/^    alarm: &'static capsules::alarm::AlarmDriver<$/;"	m	struct:Hail
alarm	boards/imix/src/components/mod.rs	/^pub mod alarm;$/;"	n
alarm	boards/imix/src/icmp_lowpan_test.rs	/^    alarm: A,$/;"	m	struct:LowpanICMPTest
alarm	boards/imix/src/ipv6_lowpan_test.rs	/^    alarm: A,$/;"	m	struct:LowpanTest
alarm	boards/imix/src/main.rs	/^    alarm: &'static AlarmDriver<'static, VirtualMuxAlarm<'static, sam4l::ast::Ast<'static>>>,$/;"	m	struct:Imix
alarm	boards/imix/src/sixlowpan_dummy.rs	/^    alarm: &'a A,$/;"	m	struct:LowpanTest
alarm	boards/imix/src/udp_lowpan_test.rs	/^    alarm: A,$/;"	m	struct:LowpanTest
alarm	boards/launchxl/src/main.rs	/^    alarm: &'static capsules::alarm::AlarmDriver<$/;"	m	struct:Platform
alarm	boards/nordic/nrf51dk/src/main.rs	/^    alarm: &'static AlarmDriver<'static, VirtualMuxAlarm<'static, Rtc>>,$/;"	m	struct:Platform
alarm	boards/nordic/nrf52dk_base/src/lib.rs	/^    alarm: &'static capsules::alarm::AlarmDriver<$/;"	m	struct:Platform
alarm	capsules/src/alarm.rs	/^    alarm: &'a A,$/;"	m	struct:AlarmDriver
alarm	capsules/src/ble_advertising_driver.rs	/^    alarm: &'a A,$/;"	m	struct:BLE
alarm	capsules/src/ieee802154/xmac.rs	/^    alarm: &'a A,$/;"	m	struct:XMac
alarm	capsules/src/isl29035.rs	/^    alarm: &'a A,$/;"	m	struct:Isl29035
alarm	capsules/src/lib.rs	/^pub mod alarm;$/;"	n
alarm	capsules/src/mx25r6435f.rs	/^    alarm: &'a A,$/;"	m	struct:MX25R6435F
alarm	capsules/src/net/ipv6/ipv6_send.rs	/^    alarm: &'a A, \/\/ Alarm so we can introduce a small delay between fragments to ensure$/;"	m	struct:IP6SendStruct
alarm	capsules/src/sdcard.rs	/^    alarm: &'a A,$/;"	m	struct:SDCard
alarm	capsules/src/segger_rtt.rs	/^    alarm: &'a A, \/\/ Dummy alarm so we can get a callback.$/;"	m	struct:SeggerRtt
alarm	capsules/src/si7021.rs	/^    alarm: &'a A,$/;"	m	struct:SI7021
alarm	capsules/src/virtual_alarm.rs	/^    alarm: &'a Alrm,$/;"	m	struct:MuxAlarm
alarm_count	capsules/src/sdcard.rs	/^    alarm_count: Cell<u8>,$/;"	m	struct:SDCard
alarm_ctl	chips/cc26x2/src/trng.rs	/^    alarm_ctl: ReadWrite<u32, AlarmControl::Register>,$/;"	m	struct:RngRegisters
alarm_data	capsules/src/ble_advertising_driver.rs	/^    alarm_data: AlarmData,$/;"	m	struct:App
alarm_mux	boards/imix/src/components/alarm.rs	/^    alarm_mux: &'static MuxAlarm<'static, sam4l::ast::Ast<'static>>,$/;"	m	struct:AlarmDriverComponent
alarm_mux	boards/imix/src/components/isl29035.rs	/^    alarm_mux: &'static MuxAlarm<'static, sam4l::ast::Ast<'static>>,$/;"	m	struct:AmbientLightComponent
alarm_mux	boards/imix/src/components/isl29035.rs	/^    alarm_mux: &'static MuxAlarm<'static, sam4l::ast::Ast<'static>>,$/;"	m	struct:Isl29035Component
alarm_mux	boards/imix/src/components/si7021.rs	/^    alarm_mux: &'static MuxAlarm<'static, sam4l::ast::Ast<'static>>,$/;"	m	struct:SI7021Component
alarm_mux	boards/imix/src/components/udp_6lowpan.rs	/^    alarm_mux: &'static MuxAlarm<'static, sam4l::ast::Ast<'static>>,$/;"	m	struct:UDPComponent
alarm_state	capsules/src/sdcard.rs	/^    alarm_state: Cell<AlarmState>,$/;"	m	struct:SDCard
alert_empty	capsules/src/usbc_client.rs	/^    fn alert_empty(&self) {$/;"	F	implementation:Client
alert_full	capsules/src/usbc_client.rs	/^    fn alert_full(&self) {$/;"	F	implementation:Client
alg	chips/sam4l/src/crccu.rs	/^    alg: Cell<CrcAlg>,$/;"	m	struct:Crccu
alg_from_user_int	capsules/src/crc.rs	/^fn alg_from_user_int(i: usize) -> Option<hil::crc::CrcAlg> {$/;"	f
align4	kernel/src/tbfheader.rs	/^macro_rules! align4 {$/;"	M
all	doc/courses/2018-11-SenSys/presentation/Makefile	/^all: presentation.pdf$/;"	t
allboards	Makefile	/^allboards:$/;"	t
allcheck	Makefile	/^allcheck:$/;"	t
alldoc	Makefile	/^alldoc:$/;"	t
alloc	kernel/src/grant.rs	/^    pub fn alloc<T>(&mut self, data: T) -> Result<Owned<T>, Error> {$/;"	F	implementation:Allocator
alloc	kernel/src/process.rs	/^    unsafe fn alloc(&self, size: usize) -> Option<&mut [u8]> {$/;"	F	implementation:Process
alloc	kernel/src/process.rs	/^    unsafe fn alloc(&self, size: usize) -> Option<&mut [u8]>;$/;"	F	interface:ProcessType
allocate_app_memory_region	arch/cortex-m/src/mpu.rs	/^    fn allocate_app_memory_region($/;"	F	implementation:MPU
allocate_app_memory_region	kernel/src/platform/mpu.rs	/^    fn allocate_app_memory_region($/;"	F	interface:MPU
allocate_channel	chips/nrf5x/src/gpio.rs	/^    fn allocate_channel(&self) -> Result<usize, ()> {$/;"	F	implementation:GPIOPin
allocate_region	arch/cortex-m/src/mpu.rs	/^    fn allocate_region($/;"	F	implementation:MPU
allocate_region	kernel/src/platform/mpu.rs	/^    fn allocate_region($/;"	F	interface:MPU
allow	capsules/src/adc.rs	/^    fn allow($/;"	F	implementation:Adc
allow	capsules/src/app_flash_driver.rs	/^    fn allow($/;"	F	implementation:AppFlash
allow	capsules/src/ble_advertising_driver.rs	/^    fn allow($/;"	f
allow	capsules/src/console.rs	/^    fn allow($/;"	F	implementation:Console
allow	capsules/src/crc.rs	/^    fn allow($/;"	F	implementation:Crc
allow	capsules/src/i2c_master.rs	/^    fn allow($/;"	F	implementation:I2CMasterDriver
allow	capsules/src/i2c_master_slave_driver.rs	/^    fn allow($/;"	F	implementation:I2CMasterSlaveDriver
allow	capsules/src/ieee802154/driver.rs	/^    fn allow($/;"	F	implementation:RadioDriver
allow	capsules/src/net/udp/driver.rs	/^    fn allow($/;"	F	implementation:UDPDriver
allow	capsules/src/nonvolatile_storage_driver.rs	/^    fn allow($/;"	F	implementation:NonvolatileStorage
allow	capsules/src/nrf51822_serialization.rs	/^    fn allow($/;"	F	implementation:Nrf51822Serialization
allow	capsules/src/rng.rs	/^    fn allow($/;"	F	implementation:RngDriver
allow	capsules/src/sdcard.rs	/^    fn allow($/;"	F	implementation:SDCardDriver
allow	capsules/src/spi.rs	/^    fn allow($/;"	F	implementation:Spi
allow	capsules/src/spi.rs	/^    fn allow($/;"	F	implementation:SpiSlave
allow	kernel/src/driver.rs	/^    fn allow($/;"	F	interface:Driver
allow	kernel/src/ipc.rs	/^    fn allow($/;"	F	implementation:IPC
allow	kernel/src/process.rs	/^    fn allow($/;"	F	implementation:Process
allow	kernel/src/process.rs	/^    fn allow($/;"	F	interface:ProcessType
allow_high_water_mark	kernel/src/process.rs	/^    allow_high_water_mark: Cell<*const u8>,$/;"	m	struct:Process
altclkcfg	chips/tm4c129x/src/sysctl.rs	/^    altclkcfg: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
alternate_setting	capsules/src/usb.rs	/^    pub alternate_setting: u8,$/;"	m	struct:InterfaceDescriptor
ambient_light	boards/hail/src/main.rs	/^    ambient_light: &'static capsules::ambient_light::AmbientLight<'static>,$/;"	m	struct:Hail
ambient_light	boards/imix/src/main.rs	/^    ambient_light: &'static capsules::ambient_light::AmbientLight<'static>,$/;"	m	struct:Imix
ambient_light	capsules/src/lib.rs	/^pub mod ambient_light;$/;"	n
amsel	chips/tm4c129x/src/gpio.rs	/^    amsel: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
analog_comparator	boards/imix/src/components/analog_comparator.rs	/^        &'static analog_comparator::AnalogComparator<'static, sam4l::acifc::Acifc<'static>>;$/;"	v	implementation:AcComponent
analog_comparator	boards/imix/src/components/mod.rs	/^pub mod analog_comparator;$/;"	n
analog_comparator	boards/imix/src/main.rs	/^    analog_comparator: &'static capsules::analog_comparator::AnalogComparator<$/;"	m	struct:Imix
analog_comparator	capsules/src/analog_comparator.rs	/^    analog_comparator: &'a A,$/;"	m	struct:AnalogComparator
analog_comparator	capsules/src/lib.rs	/^pub mod analog_comparator;$/;"	n
analog_comparator	kernel/src/hil/mod.rs	/^pub mod analog_comparator;$/;"	n
and	libraries/tock-cells/src/optional_cell.rs	/^    pub fn and<U>(self, optb: Option<U>) -> Option<U> {$/;"	F	implementation:OptionalCell
and_then	libraries/tock-cells/src/map_cell.rs	/^    pub fn and_then<F, R>(&self, closure: F) -> Option<R>$/;"	F	implementation:MapCell
and_then	libraries/tock-cells/src/optional_cell.rs	/^    pub fn and_then<U, F: FnOnce(T) -> Option<U>>(&self, f: F) -> Option<U> {$/;"	F	implementation:OptionalCell
and_then	libraries/tock-cells/src/take_cell.rs	/^    pub fn and_then<F, R>(&self, closure: F) -> Option<R>$/;"	F	implementation:TakeCell
aon	chips/cc26x2/src/lib.rs	/^pub mod aon;$/;"	n
app	capsules/src/adc.rs	/^    app: MapCell<App>,$/;"	m	struct:Adc
app	capsules/src/ble_advertising_driver.rs	/^    app: kernel::Grant<App>,$/;"	m	struct:BLE
app	capsules/src/i2c_master_slave_driver.rs	/^    app: MapCell<App>,$/;"	m	struct:I2CMasterSlaveDriver
app	capsules/src/nrf51822_serialization.rs	/^    app: MapCell<App>,$/;"	m	struct:Nrf51822Serialization
app	capsules/src/sdcard.rs	/^    app: MapCell<App>,$/;"	m	struct:SDCardDriver
app	capsules/src/spi.rs	/^    app: MapCell<App>,$/;"	m	struct:Spi
app	capsules/src/spi.rs	/^    app: MapCell<SlaveApp>,$/;"	m	struct:SpiSlave
app_alarm	capsules/src/alarm.rs	/^    app_alarm: Grant<AlarmData>,$/;"	m	struct:AlarmDriver
app_break	kernel/src/process.rs	/^    app_break: Cell<*const u8>,$/;"	m	struct:Process
app_buf1	capsules/src/adc.rs	/^    app_buf1: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
app_buf2	capsules/src/adc.rs	/^    app_buf2: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
app_buf_offset	capsules/src/adc.rs	/^    app_buf_offset: Cell<usize>,$/;"	m	struct:Adc
app_cfg	capsules/src/ieee802154/driver.rs	/^    app_cfg: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
app_cfg	capsules/src/net/udp/driver.rs	/^    app_cfg: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
app_flash_driver	capsules/src/lib.rs	/^pub mod app_flash_driver;$/;"	n
app_heap_start_pointer	kernel/src/process.rs	/^    app_heap_start_pointer: Option<*const u8>,$/;"	m	struct:ProcessDebug
app_id	capsules/src/i2c_master.rs	/^    app_id: AppId,$/;"	m	struct:Transaction
app_id	kernel/src/callback.rs	/^    app_id: AppId,$/;"	m	struct:Callback
app_idx	kernel/src/process.rs	/^    app_idx: usize,$/;"	m	struct:Process
app_read	capsules/src/ieee802154/driver.rs	/^    app_read: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
app_read	capsules/src/net/udp/driver.rs	/^    app_read: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
app_read	capsules/src/spi.rs	/^    app_read: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
app_read	capsules/src/spi.rs	/^    app_read: Option<AppSlice<Shared, u8>>,$/;"	m	struct:SlaveApp
app_rx_cfg	capsules/src/net/udp/driver.rs	/^    app_rx_cfg: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
app_stack_start_pointer	kernel/src/process.rs	/^    app_stack_start_pointer: Option<*const u8>,$/;"	m	struct:ProcessDebug
app_write	capsules/src/ieee802154/driver.rs	/^    app_write: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
app_write	capsules/src/net/udp/driver.rs	/^    app_write: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
app_write	capsules/src/spi.rs	/^    app_write: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
app_write	capsules/src/spi.rs	/^    app_write: Option<AppSlice<Shared, u8>>,$/;"	m	struct:SlaveApp
appdata	kernel/src/callback.rs	/^    appdata: usize,$/;"	m	struct:Callback
append_payload	capsules/src/ieee802154/framer.rs	/^    pub fn append_payload(&mut self, payload: &[u8]) -> ReturnCode {$/;"	F	implementation:Frame
appid	kernel/src/grant.rs	/^    appid: AppId,$/;"	m	struct:Allocator
appid	kernel/src/grant.rs	/^    appid: AppId,$/;"	m	struct:AppliedGrant
appid	kernel/src/grant.rs	/^    appid: AppId,$/;"	m	struct:Borrowed
appid	kernel/src/grant.rs	/^    appid: AppId,$/;"	m	struct:Owned
appid	kernel/src/grant.rs	/^    pub fn appid(&self) -> AppId {$/;"	F	implementation:Borrowed
appid	kernel/src/grant.rs	/^    pub fn appid(&self) -> AppId {$/;"	F	implementation:Owned
appid	kernel/src/process.rs	/^    fn appid(&self) -> AppId {$/;"	F	implementation:Process
appid	kernel/src/process.rs	/^    fn appid(&self) -> AppId;$/;"	F	interface:ProcessType
approtect	chips/nrf52/src/uicr.rs	/^    approtect: ReadWrite<u32, ApProtect::Register>,$/;"	m	struct:UicrRegisters
apps	capsules/src/ambient_light.rs	/^    apps: Grant<App>,$/;"	m	struct:AmbientLight
apps	capsules/src/app_flash_driver.rs	/^    apps: Grant<App>,$/;"	m	struct:AppFlash
apps	capsules/src/button.rs	/^    apps: Grant<(Option<Callback>, SubscribeMap)>,$/;"	m	struct:Button
apps	capsules/src/console.rs	/^    apps: Grant<App>,$/;"	m	struct:Console
apps	capsules/src/crc.rs	/^    apps: Grant<App>,$/;"	m	struct:Crc
apps	capsules/src/humidity.rs	/^    apps: Grant<App>,$/;"	m	struct:HumiditySensor
apps	capsules/src/i2c_master.rs	/^    apps: Grant<App>,$/;"	m	struct:I2CMasterDriver
apps	capsules/src/ieee802154/driver.rs	/^    apps: Grant<App>,$/;"	m	struct:RadioDriver
apps	capsules/src/net/udp/driver.rs	/^    apps: Grant<App>,$/;"	m	struct:UDPDriver
apps	capsules/src/ninedof.rs	/^    apps: Grant<App>,$/;"	m	struct:NineDof
apps	capsules/src/nonvolatile_storage_driver.rs	/^    apps: Grant<App>,$/;"	m	struct:NonvolatileStorage
apps	capsules/src/rng.rs	/^    apps: Grant<App>,$/;"	m	struct:RngDriver
apps	capsules/src/temperature.rs	/^    apps: Grant<App>,$/;"	m	struct:TemperatureSensor
apps	capsules/src/usb_user.rs	/^    apps: Grant<App>,$/;"	m	struct:UsbSyscallDriver
apps/$(APP)/build/$(TOCK_ARCH)/app.bin	boards/ek-tm4c1294xl/Makefile	/^apps\/$(APP)\/build\/$(TOCK_ARCH)\/app.bin:$/;"	t
ar0	chips/sam4l/src/ast.rs	/^    ar0: ReadWrite<u32, Value::Register>,$/;"	m	struct:AstRegisters
ar1	chips/sam4l/src/ast.rs	/^    ar1: ReadWrite<u32, Value::Register>,$/;"	m	struct:AstRegisters
arg1	capsules/src/ninedof.rs	/^    arg1: usize,$/;"	m	struct:App
argument0	kernel/src/process.rs	/^    pub argument0: usize,$/;"	m	struct:FunctionCall
argument1	kernel/src/process.rs	/^    pub argument1: usize,$/;"	m	struct:FunctionCall
argument2	kernel/src/process.rs	/^    pub argument2: usize,$/;"	m	struct:FunctionCall
argument3	kernel/src/process.rs	/^    pub argument3: usize,$/;"	m	struct:FunctionCall
armed	capsules/src/virtual_alarm.rs	/^    armed: Cell<bool>,$/;"	m	struct:VirtualMuxAlarm
article	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
as_	libraries/enum_primitive/src/cast.rs	/^    fn as_(self) -> T;$/;"	F	interface:AsPrimitive
as_mut	capsules/src/mx25r6435f.rs	/^    fn as_mut(&mut self) -> &mut [u8] {$/;"	F	implementation:Mx25r6435fSector
as_mut	chips/nrf52/src/nvmc.rs	/^    fn as_mut(&mut self) -> &mut [u8] {$/;"	F	implementation:NrfPage
as_mut	chips/sam4l/src/flashcalw.rs	/^    fn as_mut(&mut self) -> &mut [u8] {$/;"	F	implementation:Sam4lPage
as_mut	kernel/src/mem.rs	/^    fn as_mut(&mut self) -> &mut [T] {$/;"	F	implementation:AppSlice
as_num	kernel/src/common/math.rs	/^    pub fn as_num<F: From<u32>>(self) -> F {$/;"	F	implementation:PowerOfTwo
as_ref	kernel/src/mem.rs	/^    fn as_ref(&self) -> &[T] {$/;"	F	implementation:AppSlice
aside	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
asn_in_nonce	capsules/src/net/ieee802154.rs	/^    pub asn_in_nonce: bool,$/;"	m	struct:Security
assign_gpios	kernel/src/debug.rs	/^pub unsafe fn assign_gpios($/;"	f
associated_register	libraries/tock-register-interface/src/registers.rs	/^    associated_register: PhantomData<R>,$/;"	m	struct:Field
associated_register	libraries/tock-register-interface/src/registers.rs	/^    associated_register: PhantomData<R>,$/;"	m	struct:FieldValue
associated_register	libraries/tock-register-interface/src/registers.rs	/^    associated_register: PhantomData<R>,$/;"	m	struct:LocalRegisterCopy
associated_register	libraries/tock-register-interface/src/registers.rs	/^    associated_register: PhantomData<R>,$/;"	m	struct:ReadOnly
associated_register	libraries/tock-register-interface/src/registers.rs	/^    associated_register: PhantomData<R>,$/;"	m	struct:ReadWrite
associated_register	libraries/tock-register-interface/src/registers.rs	/^    associated_register: PhantomData<R>,$/;"	m	struct:WriteOnly
ast	chips/sam4l/src/lib.rs	/^pub mod ast;$/;"	n
atomic	arch/cortex-m/src/support.rs	/^pub unsafe fn atomic<F, R>(f: F) -> R$/;"	f
atomic	arch/riscv32i/src/support.rs	/^pub unsafe fn atomic<F, R>(f: F) -> R$/;"	f
atomic	chips/arty_exx/src/chip.rs	/^    unsafe fn atomic<F, R>(&self, f: F) -> R$/;"	F	implementation:ArtyExx
atomic	chips/cc26x2/src/chip.rs	/^    unsafe fn atomic<F, R>(&self, f: F) -> R$/;"	F	implementation:Cc26X2
atomic	chips/e310x/src/chip.rs	/^    unsafe fn atomic<F, R>(&self, f: F) -> R$/;"	F	implementation:E310x
atomic	chips/nrf51/src/chip.rs	/^    unsafe fn atomic<F, R>(&self, f: F) -> R$/;"	F	implementation:NRF51
atomic	chips/nrf52/src/chip.rs	/^    unsafe fn atomic<F, R>(&self, f: F) -> R$/;"	F	implementation:NRF52
atomic	chips/sam4l/src/chip.rs	/^    unsafe fn atomic<F, R>(&self, f: F) -> R$/;"	F	implementation:Sam4l
atomic	chips/tm4c129x/src/chip.rs	/^    unsafe fn atomic<F, R>(&self, f: F) -> R$/;"	F	implementation:Tm4c129x
atomic	kernel/src/platform/mod.rs	/^    unsafe fn atomic<F, R>(&self, f: F) -> R$/;"	F	interface:Chip
attach	capsules/src/usbc_client.rs	/^    fn attach(&self) {$/;"	F	implementation:Client
attach	chips/sam4l/src/usbc/mod.rs	/^    fn attach(&self) {$/;"	F	implementation:Usbc
attach	kernel/src/hil/usb.rs	/^    fn attach(&self);$/;"	F	interface:Client
attach	kernel/src/hil/usb.rs	/^    fn attach(&self);$/;"	F	interface:UsbController
attributes	arch/cortex-m/src/mpu.rs	/^    attributes: FieldValue<u32, RegionAttributes::Register>,$/;"	m	struct:CortexMRegion
attributes	arch/cortex-m/src/mpu.rs	/^    fn attributes(&self) -> FieldValue<u32, RegionAttributes::Register> {$/;"	F	implementation:CortexMRegion
attributes	capsules/src/usb.rs	/^    pub attributes: ConfigurationAttributes,$/;"	m	struct:ConfigurationDescriptor
audio	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
audio:not([controls] )	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
autoCollapse	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
aux_clk	chips/cc26x2/src/aon.rs	/^    aux_clk: ReadWrite<u32, AuxClk::Register>,$/;"	m	struct:AonPmCtlRegisters
aux_set_ram_retention	chips/cc26x2/src/aon.rs	/^    pub fn aux_set_ram_retention(&self, enabled: bool) {$/;"	F	implementation:Aon
aux_wu_sel	chips/cc26x2/src/aon.rs	/^    aux_wu_sel: ReadWrite<u32>,       \/\/ AUX Wake-up selector$/;"	m	struct:AonEventRegisters
awaiting	capsules/src/usb_user.rs	/^    awaiting: Option<Request>,$/;"	m	struct:App
awen	chips/sam4l/src/pm.rs	/^    awen: ReadWrite<u32, AsynchronousWakeUpEnable::Register>,$/;"	m	struct:PmRegisters
b	chips/nrf5x/src/temperature.rs	/^    pub b: [ReadWrite<u32, B::Register>; 6],$/;"	m	struct:TempRegisters
b	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
bank_size	capsules/src/mcp230xx.rs	/^    bank_size: u8,       \/\/ How many GPIO pins per bank (likely 8)$/;"	m	struct:MCP230xx
base	doc/courses/rustconf/console.svg	/^     fit-margin-bottom="0">$/;"	i
base	doc/courses/rustconf/presentation/ipc.svg	/^     inkscape:window-maximized="0" \/>$/;"	i
base	doc/courses/rustconf/rustconf.svg	/^     inkscape:window-maximized="0" \/>$/;"	i
base	kernel/src/tbfheader.rs	/^    base: &'static TbfHeaderV2Base,$/;"	m	struct:TbfHeaderV2
base0	chips/nrf51/src/radio.rs	/^    base0: ReadWrite<u32, Base::Register>,       \/\/ 0x51c - 0x520$/;"	m	struct:RadioRegisters
base0	chips/nrf52/src/radio.rs	/^    base0: ReadWrite<u32, BaseAddress::Register>,$/;"	m	struct:RadioRegisters
base1	chips/nrf51/src/radio.rs	/^    base1: ReadWrite<u32, Base::Register>,       \/\/ 0x520 - 0x524$/;"	m	struct:RadioRegisters
base1	chips/nrf52/src/radio.rs	/^    base1: ReadWrite<u32, BaseAddress::Register>,$/;"	m	struct:RadioRegisters
base_address	arch/cortex-m/src/mpu.rs	/^    base_address: FieldValue<u32, RegionBaseAddress::Register>,$/;"	m	struct:CortexMRegion
base_address	arch/cortex-m/src/mpu.rs	/^    fn base_address(&self) -> FieldValue<u32, RegionBaseAddress::Register> {$/;"	F	implementation:CortexMRegion
baud	boards/launchxl/src/uart_echo.rs	/^    baud: u32,$/;"	m	struct:UartEcho
baud_rate	boards/imix/src/components/console.rs	/^    baud_rate: u32,$/;"	m	struct:ConsoleComponent
baud_rate	boards/imix/src/components/process_console.rs	/^    baud_rate: u32,$/;"	m	struct:ProcessConsoleComponent
baud_rate	capsules/src/console.rs	/^    baud_rate: u32,$/;"	m	struct:Console
baud_rate	capsules/src/process_console.rs	/^    baud_rate: u32,$/;"	m	struct:ProcessConsole
baud_rate	chips/nrf51/src/uart.rs	/^    pub baud_rate: u32,$/;"	m	struct:UARTParams
baud_rate	chips/nrf52/src/uart.rs	/^    pub baud_rate: u32,$/;"	m	struct:UARTParams
baud_rate	chips/sifive/src/uart.rs	/^    pub baud_rate: u32,$/;"	m	struct:UartParams
baud_rate	kernel/src/hil/uart.rs	/^    pub baud_rate: u32, \/\/ baud rate in bit\/s$/;"	m	struct:UARTParameters
baudrate	chips/nrf51/src/uart.rs	/^    baudrate: ReadWrite<u32, Baudrate::Register>, \/\/... 0x524$/;"	m	struct:UartRegisters
baudrate	chips/nrf52/src/uart.rs	/^    baudrate: ReadWrite<u32, Baudrate::Register>,$/;"	m	struct:UarteRegisters
bcc	chips/nrf51/src/radio.rs	/^    bcc: ReadWrite<u32, BitCounterCompare::Register>, \/\/ 0x560 - 0x564$/;"	m	struct:RadioRegisters
bcc	chips/nrf52/src/radio.rs	/^    bcc: ReadWrite<u32, BitCounterCompare::Register>,$/;"	m	struct:RadioRegisters
bcmatch	chips/nrf51/src/radio.rs	/^    bcmatch: ReadWrite<u32, Event::Register>,    \/\/ 0x128 ---> 0x12c$/;"	m	struct:RadioRegisters
bcstart	chips/nrf51/src/radio.rs	/^    bcstart: WriteOnly<u32, Task::Register>,     \/\/ 0x01c ---> 0x020$/;"	m	struct:RadioRegisters
bcstop	chips/nrf51/src/radio.rs	/^    bcstop: WriteOnly<u32, Task::Register>,      \/\/ 0x020 ---> 0x024$/;"	m	struct:RadioRegisters
before_peripheral_access	chips/sam4l/src/i2c.rs	/^    fn before_peripheral_access(&self, clock: &TWIMClock, _: &TWIMRegisters) {$/;"	F	implementation:I2CHw
before_peripheral_access	chips/sam4l/src/i2c.rs	/^    fn before_peripheral_access(&self, clock: &TWISClock, _: &TWISRegisters) {$/;"	F	implementation:I2CHw
before_peripheral_access	chips/sam4l/src/spi.rs	/^    fn before_peripheral_access(&self, clock: &pm::Clock, _: &SpiRegisters) {$/;"	F	implementation:SpiHw
before_peripheral_access	kernel/src/common/peripherals.rs	/^    fn before_peripheral_access(&self, &C, &Self::RegisterType);$/;"	F	interface:PeripheralManagement
begin_debug_fmt	kernel/src/debug.rs	/^pub fn begin_debug_fmt(args: Arguments) {$/;"	f
begin_debug_verbose_fmt	kernel/src/debug.rs	/^pub fn begin_debug_verbose_fmt(args: Arguments, file_line: &(&'static str, u32)) {$/;"	f
bfar	arch/cortex-m/src/scb.rs	/^    bfar: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
bgctrl	chips/sam4l/src/bscif.rs	/^    bgctrl: ReadWrite<u32, BandgapControl::Register>,$/;"	m	struct:BscifRegisters
bgsr	chips/sam4l/src/bscif.rs	/^    bgsr: ReadOnly<u32, BandgapStatus::Register>,$/;"	m	struct:BscifRegisters
bitand	libraries/tock-register-interface/src/registers.rs	/^    pub fn bitand(&self, rhs: T) -> LocalRegisterCopy<T, R> {$/;"	F	implementation:LocalRegisterCopy
bitmap	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    bitmap: MapCell<Bitmap>,$/;"	m	struct:RxState
bitmode	chips/nrf5x/src/timer.rs	/^    bitmode: ReadWrite<u32, Bitmode::Register>,$/;"	m	struct:TimerRegisters
bkuppmux	chips/sam4l/src/bpm.rs	/^    bkuppmux: ReadWrite<u32, BackupPinMuxing::Register>,$/;"	m	struct:BpmRegisters
bkupwcause	chips/sam4l/src/bpm.rs	/^    bkupwcause: ReadOnly<u32, BackupWakeup::Register>,$/;"	m	struct:BpmRegisters
bkupwen	chips/sam4l/src/bpm.rs	/^    bkupwen: ReadWrite<u32, BackupWakeup::Register>,$/;"	m	struct:BpmRegisters
ble_advertising	kernel/src/hil/mod.rs	/^pub mod ble_advertising;$/;"	n
ble_advertising_driver	capsules/src/lib.rs	/^pub mod ble_advertising_driver;$/;"	n
ble_initialize	chips/nrf51/src/radio.rs	/^    fn ble_initialize(&self, channel: RadioChannel) {$/;"	F	implementation:Radio
ble_initialize	chips/nrf52/src/radio.rs	/^    fn ble_initialize(&self, channel: RadioChannel) {$/;"	F	implementation:Radio
ble_radio	boards/nordic/nrf51dk/src/main.rs	/^    ble_radio: &'static capsules::ble_advertising_driver::BLE<$/;"	m	struct:Platform
ble_radio	boards/nordic/nrf52dk_base/src/lib.rs	/^    ble_radio: &'static capsules::ble_advertising_driver::BLE<$/;"	m	struct:Platform
ble_set_advertising_access_address	chips/nrf52/src/radio.rs	/^    fn ble_set_advertising_access_address(&self) {$/;"	F	implementation:Radio
ble_set_channel_freq	chips/nrf52/src/radio.rs	/^    fn ble_set_channel_freq(&self, channel: RadioChannel) {$/;"	F	implementation:Radio
ble_set_channel_rate	chips/nrf52/src/radio.rs	/^    fn ble_set_channel_rate(&self) {$/;"	F	implementation:Radio
ble_set_crc_config	chips/nrf52/src/radio.rs	/^    fn ble_set_crc_config(&self) {$/;"	F	implementation:Radio
ble_set_data_whitening	chips/nrf52/src/radio.rs	/^    fn ble_set_data_whitening(&self, channel: RadioChannel) {$/;"	F	implementation:Radio
ble_set_packet_config	chips/nrf52/src/radio.rs	/^    fn ble_set_packet_config(&self) {$/;"	F	implementation:Radio
ble_set_tx_power	chips/nrf52/src/radio.rs	/^    fn ble_set_tx_power(&self) {$/;"	F	implementation:Radio
block	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:initSidebarItems
board_kernel	boards/imix/src/components/alarm.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:AlarmDriverComponent
board_kernel	boards/imix/src/components/button.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:ButtonComponent
board_kernel	boards/imix/src/components/console.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:ConsoleComponent
board_kernel	boards/imix/src/components/crc.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:CrcComponent
board_kernel	boards/imix/src/components/fxos8700.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:NineDofComponent
board_kernel	boards/imix/src/components/isl29035.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:AmbientLightComponent
board_kernel	boards/imix/src/components/nonvolatile_storage.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:NonvolatileStorageComponent
board_kernel	boards/imix/src/components/process_console.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:ProcessConsoleComponent
board_kernel	boards/imix/src/components/radio.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:RadioComponent
board_kernel	boards/imix/src/components/rng.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:RngComponent
board_kernel	boards/imix/src/components/si7021.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:HumidityComponent
board_kernel	boards/imix/src/components/si7021.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:TemperatureComponent
board_kernel	boards/imix/src/components/udp_6lowpan.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:UDPComponent
board_kernel	boards/imix/src/components/usb.rs	/^    board_kernel: &'static kernel::Kernel,$/;"	m	struct:UsbComponent
bod18ctrl	chips/sam4l/src/bscif.rs	/^    bod18ctrl: ReadWrite<u32, BodControl::Register>,$/;"	m	struct:BscifRegisters
bod18sampling	chips/sam4l/src/bscif.rs	/^    bod18sampling: ReadWrite<u32, BodSamplingControl::Register>,$/;"	m	struct:BscifRegisters
bod33ctrl	chips/sam4l/src/bscif.rs	/^    bod33ctrl: ReadWrite<u32, BodControl::Register>,$/;"	m	struct:BscifRegisters
bod33level	chips/sam4l/src/bscif.rs	/^    bod33level: ReadWrite<u32, BodLevel::Register>,$/;"	m	struct:BscifRegisters
bod33sampling	chips/sam4l/src/bscif.rs	/^    bod33sampling: ReadWrite<u32, BodSamplingControl::Register>,$/;"	m	struct:BscifRegisters
body	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
body	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
body	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
body	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
body.blur>:not(#help)	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	i
body:not(.source) .example-wrap	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
body:not(.source) .example-wrap>pre	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
body:not(.source) .example-wrap>pre.rust	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
body>.sidebar	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
bot18level	chips/sam4l/src/bscif.rs	/^    bot18level: ReadWrite<u32, BodLevel::Register>,$/;"	m	struct:BscifRegisters
bound_port	capsules/src/net/udp/driver.rs	/^    bound_port: Option<UDPEndpoint>,$/;"	m	struct:App
bpm	chips/sam4l/src/lib.rs	/^pub mod bpm;$/;"	n
br0	chips/sam4l/src/bscif.rs	/^    br0: ReadOnly<u32, Backup::Register>,$/;"	m	struct:BscifRegisters
br1	chips/sam4l/src/bscif.rs	/^    br1: ReadOnly<u32, Backup::Register>,$/;"	m	struct:BscifRegisters
br2	chips/sam4l/src/bscif.rs	/^    br2: ReadOnly<u32, Backup::Register>,$/;"	m	struct:BscifRegisters
br3	chips/sam4l/src/bscif.rs	/^    br3: ReadOnly<u32, Backup::Register>,$/;"	m	struct:BscifRegisters
brgr	chips/sam4l/src/usart.rs	/^    brgr: ReadWrite<u32, BaudRate::Register>,    \/\/ 0x20$/;"	m	struct:UsartRegisters
brk	kernel/src/process.rs	/^    fn brk(&self, new_break: *const u8) -> Result<*const u8, Error> {$/;"	F	implementation:Process
brk	kernel/src/process.rs	/^    fn brk(&self, new_break: *const u8) -> Result<*const u8, Error>;$/;"	F	interface:ProcessType
browserSupportsHistoryApi	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
bscif	chips/sam4l/src/lib.rs	/^pub mod bscif;$/;"	n
buf	capsules/src/aes_ccm.rs	/^    buf: TakeCell<'static, [u8]>,$/;"	m	struct:AES128CCM
buf	capsules/src/i2c_master.rs	/^    buf: TakeCell<'static, [u8]>,$/;"	m	struct:I2CMasterDriver
buf	capsules/src/ieee802154/framer.rs	/^    buf: &'static mut [u8],$/;"	m	struct:Frame
buf	capsules/src/test/aes_ccm.rs	/^    buf: TakeCell<'static, [u8]>,$/;"	m	struct:Test
buf	chips/cc26x2/src/i2c.rs	/^    buf: &'static mut [u8],$/;"	m	struct:Transfer
buf	chips/nrf51/src/i2c.rs	/^    buf: TakeCell<'static, [u8]>,$/;"	m	struct:TWIM
buf	chips/nrf52/src/i2c.rs	/^    buf: TakeCell<'static, [u8]>,$/;"	m	struct:TWIM
buf	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^char buf[64] __attribute__((aligned(64)));$/;"	v	typeref:typename:char[64]
buffer	capsules/src/app_flash_driver.rs	/^    buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
buffer	capsules/src/app_flash_driver.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:AppFlash
buffer	capsules/src/crc.rs	/^    buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
buffer	capsules/src/fxos8700cq.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:Fxos8700cq
buffer	capsules/src/isl29035.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:Isl29035
buffer	capsules/src/lps25hb.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:LPS25HB
buffer	capsules/src/ltc294x.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:LTC294X
buffer	capsules/src/max17205.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:MAX17205
buffer	capsules/src/mcp230xx.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:MCP230xx
buffer	capsules/src/nonvolatile_storage_driver.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:NonvolatileStorage
buffer	capsules/src/nonvolatile_to_pages.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:NonvolatileToPages
buffer	capsules/src/pca9544a.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:PCA9544A
buffer	capsules/src/rng.rs	/^    buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
buffer	capsules/src/segger_rtt.rs	/^    buffer: *const u8, \/\/ Pointer to the buffer for this channel.$/;"	m	struct:SeggerRttBuffer
buffer	capsules/src/si7021.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:SI7021
buffer	capsules/src/test/virtual_uart.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:TestVirtualUartReceive
buffer	capsules/src/tmp006.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:TMP006
buffer	capsules/src/tsl2561.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:TSL2561
buffer	capsules/src/virtual_flash.rs	/^    buffer: TakeCell<'static, F::Page>,$/;"	m	struct:FlashUser
buffer	capsules/src/virtual_i2c.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:I2CDevice
buffer	capsules/src/virtual_uart.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:UartMux
buffer	chips/cc26x2/src/uart.rs	/^    buffer: &'static mut [u8],$/;"	m	struct:Transaction
buffer	chips/nrf51/src/uart.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:UART
buffer	chips/nrf52/src/nvmc.rs	/^    buffer: TakeCell<'static, NrfPage>,$/;"	m	struct:Nvmc
buffer	chips/sam4l/src/dma.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:DMAChannel
buffer	chips/sam4l/src/flashcalw.rs	/^    buffer: TakeCell<'static, Sam4lPage>,$/;"	m	struct:FLASHCALW
buffer	chips/sifive/src/uart.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:Uart
buffer	chips/tm4c129x/src/uart.rs	/^    buffer: TakeCell<'static, [u8]>,$/;"	m	struct:UART
buffer_index	capsules/src/nonvolatile_to_pages.rs	/^    buffer_index: Cell<usize>,$/;"	m	struct:NonvolatileToPages
buffer_read	capsules/src/nonvolatile_storage_driver.rs	/^    buffer_read: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
buffer_write	capsules/src/nonvolatile_storage_driver.rs	/^    buffer_write: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
buffers	capsules/src/usbc_client.rs	/^    buffers: [[VolatileCell<u8>; 8]; N_ENDPOINTS],$/;"	m	struct:Client
buildHrefAndPath	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
buildIndex	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
buildToggleWrapper	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
bulk_in	capsules/src/usbc_client.rs	/^    fn bulk_in(&self, endpoint: usize) -> hil::usb::BulkInResult {$/;"	F	implementation:Client
bulk_in	kernel/src/hil/usb.rs	/^    fn bulk_in(&self, endpoint: usize) -> BulkInResult;$/;"	F	interface:Client
bulk_out	capsules/src/usbc_client.rs	/^    fn bulk_out(&self, endpoint: usize, packet_bytes: u32) -> hil::usb::BulkOutResult {$/;"	F	implementation:Client
bulk_out	kernel/src/hil/usb.rs	/^    fn bulk_out(&self, endpoint: usize, packet_bytes: u32) -> BulkOutResult;$/;"	F	interface:Client
bus_reset	capsules/src/usbc_client.rs	/^    fn bus_reset(&self) {$/;"	F	implementation:Client
bus_reset	kernel/src/hil/usb.rs	/^    fn bus_reset(&self);$/;"	F	interface:Client
busy	capsules/src/ble_advertising_driver.rs	/^    busy: Cell<bool>,$/;"	m	struct:BLE
busy	capsules/src/humidity.rs	/^    busy: Cell<bool>,$/;"	m	struct:HumiditySensor
busy	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    busy: Cell<bool>,$/;"	m	struct:RxState
busy	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    busy: Cell<bool>,$/;"	m	struct:TxState
busy	capsules/src/rf233.rs	/^    fn busy(&self) -> bool {$/;"	F	implementation:RF233
busy	capsules/src/spi.rs	/^    busy: Cell<bool>,$/;"	m	struct:Spi
busy	capsules/src/spi.rs	/^    busy: Cell<bool>,$/;"	m	struct:SpiSlave
busy	capsules/src/temperature.rs	/^    busy: Cell<bool>,$/;"	m	struct:TemperatureSensor
busy	chips/nrf52/src/spi.rs	/^    busy: Cell<bool>,$/;"	m	struct:SPIM
busy	chips/sam4l/src/aes.rs	/^    fn busy(&self) -> bool {$/;"	F	implementation:Aes
busy	chips/sam4l/src/ast.rs	/^    fn busy(&self) -> bool {$/;"	F	implementation:Ast
busy	kernel/src/hil/radio.rs	/^    fn busy(&self) -> bool;$/;"	F	interface:RadioConfig
button	boards/ek-tm4c1294xl/src/main.rs	/^    button: &'static capsules::button::Button<'static, tm4c129x::gpio::GPIOPin>,$/;"	m	struct:EkTm4c1294xl
button	boards/hail/src/main.rs	/^    button: &'static capsules::button::Button<'static, sam4l::gpio::GPIOPin>,$/;"	m	struct:Hail
button	boards/imix/src/components/button.rs	/^    type Output = &'static button::Button<'static, sam4l::gpio::GPIOPin>;$/;"	v	implementation:ButtonComponent
button	boards/imix/src/components/mod.rs	/^pub mod button;$/;"	n
button	boards/imix/src/main.rs	/^    button: &'static capsules::button::Button<'static, sam4l::gpio::GPIOPin>,$/;"	m	struct:Imix
button	boards/launchxl/src/main.rs	/^    button: &'static capsules::button::Button<'static, cc26x2::gpio::GPIOPin>,$/;"	m	struct:Platform
button	boards/nordic/nrf51dk/src/main.rs	/^    button: &'static capsules::button::Button<'static, nrf5x::gpio::GPIOPin>,$/;"	m	struct:Platform
button	boards/nordic/nrf52dk_base/src/lib.rs	/^    button: &'static capsules::button::Button<'static, nrf5x::gpio::GPIOPin>,$/;"	m	struct:Platform
button	capsules/src/lib.rs	/^pub mod button;$/;"	n
button	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
button::-moz-focus-inner	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
button[disabled]	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
bytes	capsules/src/rng.rs	/^    bytes: Cell<u32>,$/;"	m	struct:Entropy8To32
bytes_consumed	capsules/src/rng.rs	/^    bytes_consumed: Cell<usize>,$/;"	m	struct:Entropy32To8
bytes_in	tools/usb/bulk-echo-fast/main.c	/^static size_t bytes_in = 0;$/;"	v	typeref:typename:size_t	file:
bytes_out	tools/usb/bulk-echo-fast/main.c	/^static size_t bytes_out = 0;$/;"	v	typeref:typename:size_t	file:
cal	chips/nrf51/src/clock.rs	/^    cal: WriteOnly<u32, Task::Register>,             \/\/ 0x010$/;"	m	struct:ClockRegisters
calc_register_addr	capsules/src/mcp230xx.rs	/^    fn calc_register_addr(&self, register: Registers, pin_number: u8) -> u8 {$/;"	F	implementation:MCP230xx
calculate_lux	capsules/src/tsl2561.rs	/^    fn calculate_lux(&self, chan0: u16, chan1: u16) -> usize {$/;"	F	implementation:TSL2561
calculate_temperature	capsules/src/tmp006.rs	/^fn calculate_temperature(sensor_voltage: i16, die_temperature: i16) -> f32 {$/;"	f
calib	chips/sam4l/src/adc.rs	/^    calib: ReadWrite<u32>,$/;"	m	struct:AdcRegisters
call_driver	capsules/src/humidity.rs	/^    fn call_driver(&self, command: HumidityCommand, _: usize) -> ReturnCode {$/;"	F	implementation:HumiditySensor
call_driver	capsules/src/ninedof.rs	/^    fn call_driver(&self, command: NineDofCommand, _: usize) -> ReturnCode {$/;"	F	implementation:NineDof
call_rx_client	capsules/src/ieee802154/xmac.rs	/^    fn call_rx_client($/;"	F	implementation:XMac
call_tx_client	capsules/src/ieee802154/xmac.rs	/^    fn call_tx_client(&self, buf: &'static mut [u8], acked: bool, result: ReturnCode) {$/;"	F	implementation:XMac
callback	capsules/src/adc.rs	/^    callback: OptionalCell<Callback>,$/;"	m	struct:Adc
callback	capsules/src/alarm.rs	/^    callback: Option<Callback>,$/;"	m	struct:AlarmData
callback	capsules/src/ambient_light.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	capsules/src/ambient_light.rs	/^    fn callback(&self, lux: usize) {$/;"	F	implementation:AmbientLight
callback	capsules/src/analog_comparator.rs	/^    callback: Cell<Option<Callback>>,$/;"	m	struct:AnalogComparator
callback	capsules/src/app_flash_driver.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	capsules/src/crc.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	capsules/src/fxos8700cq.rs	/^    callback: OptionalCell<&'static hil::sensors::NineDofClient>,$/;"	m	struct:Fxos8700cq
callback	capsules/src/gpio.rs	/^    callback: OptionalCell<Callback>,$/;"	m	struct:GPIO
callback	capsules/src/gpio_async.rs	/^    callback: OptionalCell<Callback>,$/;"	m	struct:GPIOAsync
callback	capsules/src/humidity.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	capsules/src/humidity.rs	/^    fn callback(&self, tmp_val: usize) {$/;"	F	implementation:HumiditySensor
callback	capsules/src/i2c_master.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	capsules/src/i2c_master_slave_driver.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	capsules/src/lps25hb.rs	/^    callback: OptionalCell<Callback>,$/;"	m	struct:LPS25HB
callback	capsules/src/ltc294x.rs	/^    callback: OptionalCell<Callback>,$/;"	m	struct:LTC294XDriver
callback	capsules/src/max17205.rs	/^    callback: OptionalCell<Callback>,$/;"	m	struct:MAX17205Driver
callback	capsules/src/ninedof.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	capsules/src/ninedof.rs	/^    fn callback(&self, arg1: usize, arg2: usize, arg3: usize) {$/;"	F	implementation:NineDof
callback	capsules/src/nrf51822_serialization.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	capsules/src/pca9544a.rs	/^    callback: OptionalCell<Callback>,$/;"	m	struct:PCA9544A
callback	capsules/src/rng.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	capsules/src/sdcard.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	capsules/src/spi.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	capsules/src/spi.rs	/^    callback: Option<Callback>,$/;"	m	struct:SlaveApp
callback	capsules/src/temperature.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	capsules/src/temperature.rs	/^    fn callback(&self, temp_val: usize) {$/;"	F	implementation:TemperatureSensor
callback	capsules/src/tmp006.rs	/^    callback: OptionalCell<Callback>,$/;"	m	struct:TMP006
callback	capsules/src/tsl2561.rs	/^    callback: OptionalCell<Callback>,$/;"	m	struct:TSL2561
callback	capsules/src/usb_user.rs	/^    callback: Option<Callback>,$/;"	m	struct:App
callback	chips/cc26x2/src/rtc.rs	/^    callback: OptionalCell<&'static time::Client>,$/;"	m	struct:Rtc
callback	chips/nrf5x/src/rtc.rs	/^    callback: OptionalCell<&'static time::Client>,$/;"	m	struct:Rtc
callback	chips/sam4l/src/ast.rs	/^    callback: OptionalCell<&'a time::Client>,$/;"	m	struct:Ast
callback	kernel/src/hil/ninedof.rs	/^    fn callback(&self, x: usize, y: usize, z: usize);$/;"	F	interface:NineDofClient
callback	kernel/src/hil/sensors.rs	/^    fn callback(&self, arg1: usize, arg2: usize, arg3: usize);$/;"	F	interface:NineDofClient
callback	kernel/src/hil/sensors.rs	/^    fn callback(&self, lux: usize);$/;"	F	interface:AmbientLightClient
callback	kernel/src/hil/sensors.rs	/^    fn callback(&self, value: usize);$/;"	F	interface:HumidityClient
callback	kernel/src/hil/sensors.rs	/^    fn callback(&self, value: usize);$/;"	F	interface:TemperatureClient
callback	kernel/src/ipc.rs	/^    callback: Option<Callback>,$/;"	m	struct:IPCData
callback	kernel/src/lib.rs	/^mod callback;$/;"	n
callback	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:startSearch
callback_read	capsules/src/nonvolatile_storage_driver.rs	/^    callback_read: Option<Callback>,$/;"	m	struct:App
callback_write	capsules/src/nonvolatile_storage_driver.rs	/^    callback_write: Option<Callback>,$/;"	m	struct:App
calv	chips/sam4l/src/ast.rs	/^    calv: ReadWrite<u32, Calendar::Register>, \/\/ we leave out parameter and version$/;"	m	struct:AstRegisters
cancel	capsules/src/rng.rs	/^    fn cancel(&self) -> ReturnCode {$/;"	F	implementation:Entropy32To8
cancel	capsules/src/rng.rs	/^    fn cancel(&self) -> ReturnCode {$/;"	F	implementation:Entropy32ToRandom
cancel	capsules/src/rng.rs	/^    fn cancel(&self) -> ReturnCode {$/;"	F	implementation:Entropy8To32
cancel	chips/cc26x2/src/trng.rs	/^    fn cancel(&self) -> ReturnCode {$/;"	F	implementation:Trng
cancel	chips/nrf5x/src/trng.rs	/^    fn cancel(&self) -> ReturnCode {$/;"	F	implementation:Trng
cancel	chips/sam4l/src/trng.rs	/^    fn cancel(&self) -> ReturnCode {$/;"	F	implementation:Trng
cancel	kernel/src/hil/entropy.rs	/^    fn cancel(&self) -> ReturnCode;$/;"	F	interface:Entropy32
cancel	kernel/src/hil/entropy.rs	/^    fn cancel(&self) -> ReturnCode;$/;"	F	interface:Entropy8
cancel	kernel/src/hil/rng.rs	/^    fn cancel(&self) -> ReturnCode;$/;"	F	interface:Rng
canvas	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
capabilities	kernel/src/lib.rs	/^pub mod capabilities;$/;"	n
capability	capsules/src/debug_process_restart.rs	/^    capability: C,$/;"	m	struct:DebugProcessRestart
capability	capsules/src/process_console.rs	/^    capability: C,$/;"	m	struct:ProcessConsole
capsules	boards/imix/src/components/radio.rs	/^        &'static capsules::ieee802154::RadioDriver<'static>,$/;"	v	implementation:RadioComponent
capsules	boards/imix/src/components/radio.rs	/^        &'static capsules::ieee802154::virtual_mac::MuxMac<'static>,$/;"	v	implementation:RadioComponent
capsules	boards/imix/src/components/udp_6lowpan.rs	/^    type Output = &'static capsules::net::udp::UDPDriver<'static>;$/;"	v	implementation:UDPComponent
capsules	boards/nordic/nrf52dk_base/src/lib.rs	/^        &'static capsules::nonvolatile_storage_driver::NonvolatileStorage<'static>,$/;"	v	function:setup_board
card_detection_changed	capsules/src/sdcard.rs	/^    fn card_detection_changed(&self, installed: bool) {$/;"	F	implementation:SDCardDriver
card_detection_changed	capsules/src/sdcard.rs	/^    fn card_detection_changed(&self, installed: bool);$/;"	F	interface:SDCardClient
card_type	capsules/src/sdcard.rs	/^    card_type: Cell<SDCardType>,$/;"	m	struct:SDCard
cast	libraries/enum_primitive/src/cast.rs	/^pub fn cast<T: NumCast, U: NumCast>(n: T) -> Option<U> {$/;"	f
cast	libraries/enum_primitive/src/lib.rs	/^pub mod cast;$/;"	n
cc	chips/nrf5x/src/rtc.rs	/^    cc: [ReadWrite<u32, CC::Register>; 4],$/;"	m	struct:RtcRegisters
cc	chips/nrf5x/src/timer.rs	/^    cc: [ReadWrite<u32, CC::Register>; 4],$/;"	m	struct:TimerRegisters
cc	chips/tm4c129x/src/gpt.rs	/^    cc: VolatileCell<u32>,$/;"	m	struct:GptRegisters
cc	chips/tm4c129x/src/uart.rs	/^    cc: VolatileCell<u32>,$/;"	m	struct:UartRegisters
ccm_encrypt_ranges	capsules/src/ieee802154/framer.rs	/^    fn ccm_encrypt_ranges(&self) -> (usize, usize) {$/;"	F	implementation:FrameInfo
ccr	arch/cortex-m/src/scb.rs	/^    ccr: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
cdma	chips/sam4l/src/adc.rs	/^    cdma: WriteOnly<u32>,$/;"	m	struct:AdcRegisters
cdr	chips/sam4l/src/dac.rs	/^    cdr: WriteOnly<u32, ConversionData::Register>, \/\/     Conversion Data Register      (0x08)$/;"	m	struct:DacRegisters
ceiling	kernel/src/common/math.rs	/^    pub fn ceiling<F: Into<u32>>(f: F) -> PowerOfTwo {$/;"	F	implementation:PowerOfTwo
cells	kernel/src/common/mod.rs	/^pub mod cells {$/;"	n
cfdctrl	chips/sam4l/src/pm.rs	/^    cfdctrl: ReadWrite<u32, ClockFailureDetectorControl::Register>,$/;"	m	struct:PmRegisters
cfg	chips/sam4l/src/adc.rs	/^    cfg: ReadWrite<u32, Configuration::Register>,$/;"	m	struct:AdcRegisters
cfg	chips/sifive/src/pwm.rs	/^    cfg: ReadWrite<u32, cfg::Register>,$/;"	m	struct:PwmRegisters
cfg	chips/tm4c129x/src/gpt.rs	/^    cfg: VolatileCell<u32>,$/;"	m	struct:GptRegisters
cfg0	chips/cc26x2/src/trng.rs	/^    cfg0: ReadWrite<u32, Config::Register>,$/;"	m	struct:RngRegisters
cfg_client	capsules/src/rf233.rs	/^    cfg_client: OptionalCell<&'static radio::ConfigClient>,$/;"	m	struct:RF233
cfsr	arch/cortex-m/src/scb.rs	/^    cfsr: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
ch	chips/nrf52/src/adc.rs	/^    ch: [AdcChRegisters; 8],$/;"	m	struct:AdcRegisters
ch0_eep	chips/nrf52/src/ppi.rs	/^    ch0_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch0_tep	chips/nrf52/src/ppi.rs	/^    ch0_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch10_eep	chips/nrf52/src/ppi.rs	/^    ch10_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch10_tep	chips/nrf52/src/ppi.rs	/^    ch10_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch11_eep	chips/nrf52/src/ppi.rs	/^    ch11_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch11_tep	chips/nrf52/src/ppi.rs	/^    ch11_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch12_eep	chips/nrf52/src/ppi.rs	/^    ch12_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch12_tep	chips/nrf52/src/ppi.rs	/^    ch12_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch13_eep	chips/nrf52/src/ppi.rs	/^    ch13_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch13_tep	chips/nrf52/src/ppi.rs	/^    ch13_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch14_eep	chips/nrf52/src/ppi.rs	/^    ch14_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch14_tep	chips/nrf52/src/ppi.rs	/^    ch14_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch15_eep	chips/nrf52/src/ppi.rs	/^    ch15_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch15_tep	chips/nrf52/src/ppi.rs	/^    ch15_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch16_eep	chips/nrf52/src/ppi.rs	/^    ch16_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch16_tep	chips/nrf52/src/ppi.rs	/^    ch16_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch17_eep	chips/nrf52/src/ppi.rs	/^    ch17_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch17_tep	chips/nrf52/src/ppi.rs	/^    ch17_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch18_eep	chips/nrf52/src/ppi.rs	/^    ch18_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch18_tep	chips/nrf52/src/ppi.rs	/^    ch18_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch19_eep	chips/nrf52/src/ppi.rs	/^    ch19_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch19_tep	chips/nrf52/src/ppi.rs	/^    ch19_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch1_eep	chips/nrf52/src/ppi.rs	/^    ch1_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch1_tep	chips/nrf52/src/ppi.rs	/^    ch1_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch2_eep	chips/nrf52/src/ppi.rs	/^    ch2_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch2_tep	chips/nrf52/src/ppi.rs	/^    ch2_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch3_eep	chips/nrf52/src/ppi.rs	/^    ch3_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch3_tep	chips/nrf52/src/ppi.rs	/^    ch3_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch4_eep	chips/nrf52/src/ppi.rs	/^    ch4_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch4_tep	chips/nrf52/src/ppi.rs	/^    ch4_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch5_eep	chips/nrf52/src/ppi.rs	/^    ch5_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch5_tep	chips/nrf52/src/ppi.rs	/^    ch5_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch6_eep	chips/nrf52/src/ppi.rs	/^    ch6_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch6_tep	chips/nrf52/src/ppi.rs	/^    ch6_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch7_eep	chips/nrf52/src/ppi.rs	/^    ch7_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch7_tep	chips/nrf52/src/ppi.rs	/^    ch7_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch8_eep	chips/nrf52/src/ppi.rs	/^    ch8_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch8_tep	chips/nrf52/src/ppi.rs	/^    ch8_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch9_eep	chips/nrf52/src/ppi.rs	/^    ch9_eep: ReadWrite<u32, EventEndPoint::Register>,$/;"	m	struct:PpiRegisters
ch9_tep	chips/nrf52/src/ppi.rs	/^    ch9_tep: ReadWrite<u32, TaskEndPoint::Register>,$/;"	m	struct:PpiRegisters
chan_num	chips/sam4l/src/acifc.rs	/^    chan_num: u32,$/;"	m	struct:AcChannel
chan_num	chips/sam4l/src/adc.rs	/^    chan_num: u32,$/;"	m	struct:AdcChannel
changeSetting	kernel/target/doc/settings.js	/^ *\/(function(){function changeSetting(settingName,isEnabled){updateLocalStorage('rustdoc-'+sett/;"	f
change_system_clock	chips/sam4l/src/pm.rs	/^    pub unsafe fn change_system_clock(&self, clock_source: SystemClockSource) {$/;"	F	implementation:PowerManager
changed	capsules/src/ieee802154/xmac.rs	/^    fn changed(&self, on: bool) {$/;"	F	implementation:XMac
changed	kernel/src/hil/radio.rs	/^    fn changed(&self, on: bool);$/;"	F	interface:PowerClient
channel	boards/imix/src/components/rf233.rs	/^    channel: u8,$/;"	m	struct:RF233Component
channel	capsules/src/adc.rs	/^    channel: Cell<usize>,$/;"	m	struct:Adc
channel	capsules/src/rf233.rs	/^    channel: Cell<u8>,$/;"	m	struct:RF233
channel1_cmp	chips/cc26x2/src/rtc.rs	/^    channel1_cmp: ReadWrite<u32>,$/;"	m	struct:RtcRegisters
channel_ctl	chips/cc26x2/src/rtc.rs	/^    channel_ctl: ReadWrite<u32, ChannelControl::Register>,$/;"	m	struct:RtcRegisters
channel_mask	capsules/src/net/thread/tlv.rs	/^    channel_mask: [u8; MAX_VALUE_FIELD_LENGTH],$/;"	m	struct:ChannelMaskEntry
channel_page	capsules/src/net/thread/tlv.rs	/^    channel_page: u8,$/;"	m	struct:ChannelMaskEntry
channels	capsules/src/adc.rs	/^    channels: &'a [&'a <A as hil::adc::Adc>::Channel],$/;"	m	struct:Adc
channels	capsules/src/analog_comparator.rs	/^    channels: &'a [&'a <A as hil::analog_comparator::AnalogComparator>::Channel],$/;"	m	struct:AnalogComparator
charge	capsules/src/ltc294x.rs	/^    fn charge(&self, charge: u16) {$/;"	F	implementation:LTC294XDriver
charge	capsules/src/ltc294x.rs	/^    fn charge(&self, charge: u16);$/;"	F	interface:LTC294XClient
checkGenerics	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execQuery
checkIfThereAreMethods	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
checkPath	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execQuery
checkReturned	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execQuery
checkType	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execQuery
check_pin_interrupt_enabled	capsules/src/mcp230xx.rs	/^    fn check_pin_interrupt_enabled(&self, pin_number: u8) -> bool {$/;"	F	implementation:MCP230xx
check_queue	capsules/src/nonvolatile_storage_driver.rs	/^    fn check_queue(&self) {$/;"	F	implementation:NonvolatileStorage
check_test	capsules/src/test/aes_ccm.rs	/^    fn check_test(&self, tag_is_valid: bool) {$/;"	F	implementation:Test
check_transport_checksum	capsules/src/net/ipv6/ipv6.rs	/^    pub fn check_transport_checksum(&self, buf: &[u8]) -> ReturnCode {$/;"	F	implementation:IP6Header
checksum	kernel/src/tbfheader.rs	/^    checksum: u32,$/;"	m	struct:TbfHeaderV2Base
chen	chips/nrf52/src/ppi.rs	/^    chen: ReadWrite<u32, Channel::Register>,$/;"	m	struct:PpiRegisters
chenclr	chips/nrf52/src/ppi.rs	/^    chenclr: ReadWrite<u32, Channel::Register>,$/;"	m	struct:PpiRegisters
chenset	chips/nrf52/src/ppi.rs	/^    chenset: ReadWrite<u32, Channel::Register>,$/;"	m	struct:PpiRegisters
chg	chips/nrf52/src/ppi.rs	/^    chg: [ReadWrite<u32, Channel::Register>; 6],$/;"	m	struct:PpiRegisters
chip	chips/arty_exx/src/lib.rs	/^pub mod chip;$/;"	n
chip	chips/cc26x2/src/lib.rs	/^pub mod chip;$/;"	n
chip	chips/e310x/src/lib.rs	/^pub mod chip;$/;"	n
chip	chips/nrf51/src/lib.rs	/^pub mod chip;$/;"	n
chip	chips/nrf52/src/lib.rs	/^pub mod chip;$/;"	n
chip	chips/sam4l/src/lib.rs	/^pub mod chip;$/;"	n
chip	chips/tm4c129x/src/lib.rs	/^pub mod chip;$/;"	n
chip	kernel/src/process.rs	/^    chip: &'static C,$/;"	m	struct:Process
chip_select	boards/nordic/nrf52dk_base/src/lib.rs	/^    chip_select: usize,$/;"	m	struct:SpiMX25R6435FPins
chip_select	capsules/src/virtual_spi.rs	/^    chip_select: Cell<Spi::ChipSelect>,$/;"	m	struct:VirtualSpiMasterDevice
chip_select	chips/nrf52/src/spi.rs	/^    chip_select: OptionalCell<&'static hil::gpio::Pin>,$/;"	m	struct:SPIM
chip_selected	boards/imix/src/spi_slave_dummy.rs	/^    fn chip_selected(&self) {$/;"	F	implementation:SlaveCB
chip_selected	capsules/src/spi.rs	/^    fn chip_selected(&self) {$/;"	F	implementation:SpiSlave
chip_selected	capsules/src/virtual_spi.rs	/^    fn chip_selected(&self) {$/;"	F	implementation:VirtualSpiSlaveDevice
chip_selected	kernel/src/hil/spi.rs	/^    fn chip_selected(&self);$/;"	F	interface:SpiSlaveClient
chunks	kernel/src/mem.rs	/^    pub fn chunks(&self, size: usize) -> slice::Chunks<T> {$/;"	F	implementation:AppSlice
chunks_mut	kernel/src/mem.rs	/^    pub fn chunks_mut(&mut self, size: usize) -> slice::ChunksMut<T> {$/;"	F	implementation:AppSlice
ci	Makefile	/^ci: ci-travis ci-netlify$/;"	t
ci-netlify	Makefile	/^ci-netlify:$/;"	t
ci-travis	Makefile	/^ci-travis:$/;"	t
cksum	capsules/src/net/icmpv6/icmpv6.rs	/^    pub cksum: u16,$/;"	m	struct:ICMP6Header
cksum	capsules/src/net/tcp.rs	/^    pub cksum: u16,$/;"	m	struct:TCPHeader
cksum	capsules/src/net/udp/udp.rs	/^    pub cksum: u16,$/;"	m	struct:UDPHeader
class	capsules/src/usb.rs	/^    pub class: u8,$/;"	m	struct:DeviceDescriptor
clear	capsules/src/mcp230xx.rs	/^    fn clear(&self, pin: usize) -> ReturnCode {$/;"	F	implementation:MCP230xx
clear	capsules/src/net/frag_utils.rs	/^    pub fn clear(&mut self) {$/;"	F	implementation:Bitmap
clear	chips/cc26x2/src/gpio.rs	/^    fn clear(&self) {$/;"	F	implementation:GPIOPin
clear	chips/nrf5x/src/gpio.rs	/^    fn clear(&self) {$/;"	F	implementation:GPIOPin
clear	chips/sam4l/src/gpio.rs	/^    clear: WriteOnly<u32>,$/;"	m	struct:Register
clear	chips/sam4l/src/gpio.rs	/^    clear: WriteOnly<u32>,$/;"	m	struct:RegisterRC
clear	chips/sam4l/src/gpio.rs	/^    fn clear(&self) {$/;"	F	implementation:GPIOPin
clear	chips/sam4l/src/gpio.rs	/^    pub fn clear(&self) {$/;"	F	implementation:GPIOPin
clear	chips/sifive/src/gpio.rs	/^    clear: FieldValue<u32, pins::Register>,$/;"	m	struct:GpioPin
clear	chips/sifive/src/gpio.rs	/^    fn clear(&self) {$/;"	F	implementation:GpioPin
clear	chips/tm4c129x/src/gpio.rs	/^    fn clear(&self) {$/;"	F	implementation:GPIOPin
clear	chips/tm4c129x/src/gpio.rs	/^    pub fn clear(&self) {$/;"	F	implementation:GPIOPin
clear	kernel/src/hil/gpio.rs	/^    fn clear(&self);$/;"	F	interface:Pin
clear	kernel/src/hil/gpio_async.rs	/^    fn clear(&self, pin: usize) -> ReturnCode;$/;"	F	interface:Port
clear	libraries/tock-cells/src/optional_cell.rs	/^    pub fn clear(&self) {$/;"	F	implementation:OptionalCell
clear_alarm	chips/nrf5x/src/timer.rs	/^    fn clear_alarm(&self) {$/;"	F	implementation:TimerAlarm
clear_alarm	chips/sam4l/src/ast.rs	/^    fn clear_alarm(&self) {$/;"	F	implementation:Ast
clear_all_pending	arch/cortex-m/src/nvic.rs	/^pub unsafe fn clear_all_pending() {$/;"	f
clear_all_pending	arch/riscv32i/src/plic.rs	/^pub unsafe fn clear_all_pending() {$/;"	f
clear_bit	capsules/src/net/frag_utils.rs	/^    pub fn clear_bit(&mut self, idx: usize) {$/;"	F	implementation:Bitmap
clear_interrupt	chips/nrf52/src/radio.rs	/^    pub fn clear_interrupt(&self, intr: u32) {$/;"	F	implementation:Radio
clear_page_buffer	chips/sam4l/src/flashcalw.rs	/^    fn clear_page_buffer(&self) {$/;"	F	implementation:FLASHCALW
clear_pending	arch/cortex-m/src/nvic.rs	/^    pub fn clear_pending(&self) {$/;"	F	implementation:Nvic
clear_status	chips/sam4l/src/adc.rs	/^    fn clear_status(&self) {$/;"	F	implementation:Adc
click_func	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:initSearch.initSearchNav
client	capsules/src/fm25cl.rs	/^    client: OptionalCell<&'static hil::nonvolatile_storage::NonvolatileStorageClient>,$/;"	m	struct:FM25CL
client	capsules/src/isl29035.rs	/^    client: OptionalCell<&'a AmbientLightClient>,$/;"	m	struct:Isl29035
client	capsules/src/ltc294x.rs	/^    client: OptionalCell<&'static LTC294XClient>,$/;"	m	struct:LTC294X
client	capsules/src/max17205.rs	/^    client: OptionalCell<&'static MAX17205Client>,$/;"	m	struct:MAX17205
client	capsules/src/mcp230xx.rs	/^    client: OptionalCell<&'static hil::gpio_async::Client>,$/;"	m	struct:MCP230xx
client	capsules/src/mx25r6435f.rs	/^    client: OptionalCell<&'a hil::flash::Client<MX25R6435F<'a, S, P, A>>>,$/;"	m	struct:MX25R6435F
client	capsules/src/net/icmpv6/icmpv6_send.rs	/^    client: OptionalCell<&'a ICMP6SendClient>,$/;"	m	struct:ICMP6SendStruct
client	capsules/src/net/ipv6/ipv6_recv.rs	/^    client: OptionalCell<&'a IP6RecvClient>,$/;"	m	struct:IP6RecvStruct
client	capsules/src/net/ipv6/ipv6_send.rs	/^    client: OptionalCell<&'a IP6SendClient>,$/;"	m	struct:IP6SendStruct
client	capsules/src/net/udp/udp_recv.rs	/^    client: OptionalCell<&'a UDPRecvClient>,$/;"	m	struct:UDPReceiver
client	capsules/src/net/udp/udp_send.rs	/^    client: OptionalCell<&'a UDPSendClient>,$/;"	m	struct:UDPSendStruct
client	capsules/src/nonvolatile_to_pages.rs	/^    client: OptionalCell<&'static hil::nonvolatile_storage::NonvolatileStorageClient>,$/;"	m	struct:NonvolatileToPages
client	capsules/src/rng.rs	/^    client: OptionalCell<&'a entropy::Client32>,$/;"	m	struct:Entropy8To32
client	capsules/src/rng.rs	/^    client: OptionalCell<&'a entropy::Client8>,$/;"	m	struct:Entropy32To8
client	capsules/src/rng.rs	/^    client: OptionalCell<&'a rng::Client>,$/;"	m	struct:Entropy32ToRandom
client	capsules/src/sdcard.rs	/^    client: OptionalCell<&'static SDCardClient>,$/;"	m	struct:SDCard
client	capsules/src/segger_rtt.rs	/^    client: OptionalCell<&'static hil::uart::Client>,$/;"	m	struct:SeggerRtt
client	capsules/src/virtual_alarm.rs	/^    client: OptionalCell<&'a time::Client>,$/;"	m	struct:VirtualMuxAlarm
client	capsules/src/virtual_flash.rs	/^    client: OptionalCell<&'a hil::flash::Client<FlashUser<'a, F>>>,$/;"	m	struct:FlashUser
client	capsules/src/virtual_i2c.rs	/^    client: OptionalCell<&'a I2CClient>,$/;"	m	struct:I2CDevice
client	capsules/src/virtual_spi.rs	/^    client: OptionalCell<&'a hil::spi::SpiMasterClient>,$/;"	m	struct:VirtualSpiMasterDevice
client	capsules/src/virtual_spi.rs	/^    client: OptionalCell<&'a hil::spi::SpiSlaveClient>,$/;"	m	struct:VirtualSpiSlaveDevice
client	capsules/src/virtual_uart.rs	/^    client: OptionalCell<&'a hil::uart::Client>,$/;"	m	struct:UartDevice
client	chips/cc26x2/src/gpio.rs	/^    client: OptionalCell<&'static hil::gpio::Client>,$/;"	m	struct:GPIOPin
client	chips/cc26x2/src/i2c.rs	/^    client: OptionalCell<&'a i2c::I2CHwMasterClient>,$/;"	m	struct:I2CMaster
client	chips/cc26x2/src/trng.rs	/^    client: OptionalCell<&'a entropy::Client32>,$/;"	m	struct:Trng
client	chips/nrf51/src/clock.rs	/^    client: OptionalCell<&'static ClockClient>,$/;"	m	struct:Clock
client	chips/nrf51/src/i2c.rs	/^    client: OptionalCell<&'static i2c::I2CHwMasterClient>,$/;"	m	struct:TWIM
client	chips/nrf51/src/uart.rs	/^    client: OptionalCell<&'static uart::Client>,$/;"	m	struct:UART
client	chips/nrf52/src/adc.rs	/^    client: OptionalCell<&'static hil::adc::Client>,$/;"	m	struct:Adc
client	chips/nrf52/src/clock.rs	/^    client: OptionalCell<&'static ClockClient>,$/;"	m	struct:Clock
client	chips/nrf52/src/i2c.rs	/^    client: OptionalCell<&'static hil::i2c::I2CHwMasterClient>,$/;"	m	struct:TWIM
client	chips/nrf52/src/nvmc.rs	/^    client: OptionalCell<&'static hil::flash::Client<Nvmc>>,$/;"	m	struct:Nvmc
client	chips/nrf52/src/spi.rs	/^    client: OptionalCell<&'static hil::spi::SpiMasterClient>,$/;"	m	struct:SPIM
client	chips/nrf52/src/uart.rs	/^    client: OptionalCell<&'static kernel::hil::uart::Client>,$/;"	m	struct:Uarte
client	chips/nrf5x/src/aes.rs	/^    client: OptionalCell<&'a kernel::hil::symmetric_encryption::Client<'a>>,$/;"	m	struct:AesECB
client	chips/nrf5x/src/gpio.rs	/^    client: OptionalCell<&'static hil::gpio::Client>,$/;"	m	struct:GPIOPin
client	chips/nrf5x/src/temperature.rs	/^    client: OptionalCell<&'static kernel::hil::sensors::TemperatureClient>,$/;"	m	struct:Temp
client	chips/nrf5x/src/timer.rs	/^    client: OptionalCell<&'static CompareClient>,$/;"	m	struct:Timer
client	chips/nrf5x/src/timer.rs	/^    client: OptionalCell<&'static hil::time::Client>,$/;"	m	struct:TimerAlarm
client	chips/nrf5x/src/trng.rs	/^    client: OptionalCell<&'a entropy::Client32>,$/;"	m	struct:Trng
client	chips/sam4l/src/acifc.rs	/^    client: Cell<Option<&'a analog_comparator::Client>>,$/;"	m	struct:Acifc
client	chips/sam4l/src/adc.rs	/^    client: OptionalCell<&'static EverythingClient>,$/;"	m	struct:Adc
client	chips/sam4l/src/aes.rs	/^    client: OptionalCell<&'a hil::symmetric_encryption::Client<'a>>,$/;"	m	struct:Aes
client	chips/sam4l/src/crccu.rs	/^    client: Option<&'a crc::Client>,$/;"	m	struct:Crccu
client	chips/sam4l/src/dma.rs	/^    client: OptionalCell<&'static DMAClient>,$/;"	m	struct:DMAChannel
client	chips/sam4l/src/flashcalw.rs	/^    client: OptionalCell<&'static hil::flash::Client<FLASHCALW>>,$/;"	m	struct:FLASHCALW
client	chips/sam4l/src/gpio.rs	/^    client: OptionalCell<&'static hil::gpio::Client>,$/;"	m	struct:GPIOPin
client	chips/sam4l/src/spi.rs	/^    client: OptionalCell<&'static SpiMasterClient>,$/;"	m	struct:SpiHw
client	chips/sam4l/src/trng.rs	/^    client: OptionalCell<&'a entropy::Client32>,$/;"	m	struct:Trng
client	chips/sam4l/src/usart.rs	/^    client: OptionalCell<UsartClient<'static>>,$/;"	m	struct:USART
client	chips/sam4l/src/usbc/mod.rs	/^    client: Option<&'a hil::usb::Client>,$/;"	m	struct:Usbc
client	chips/sifive/src/gpio.rs	/^    client: OptionalCell<&'static hil::gpio::Client>,$/;"	m	struct:GpioPin
client	chips/sifive/src/uart.rs	/^    client: OptionalCell<&'static hil::uart::Client>,$/;"	m	struct:Uart
client	chips/tm4c129x/src/gpio.rs	/^    client: OptionalCell<&'static hil::gpio::Client>,$/;"	m	struct:GPIOPin
client	chips/tm4c129x/src/gpt.rs	/^    client: OptionalCell<&'static hil::time::Client>,$/;"	m	struct:AlarmTimer
client	chips/tm4c129x/src/uart.rs	/^    client: OptionalCell<&'static kernel::hil::uart::Client>,$/;"	m	struct:UART
client_buffer	capsules/src/fm25cl.rs	/^    client_buffer: TakeCell<'static, [u8]>, \/\/ Store buffer and state for passing back to clie/;"	m	struct:FM25CL
client_buffer	capsules/src/sdcard.rs	/^    client_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:SDCard
client_buffer	capsules/src/segger_rtt.rs	/^    client_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:SeggerRtt
client_callbacks	kernel/src/ipc.rs	/^    client_callbacks: [Option<Callback>; 8],$/;"	m	struct:IPCData
client_custom	capsules/src/fm25cl.rs	/^    client_custom: OptionalCell<&'static FM25CLClient>,$/;"	m	struct:FM25CL
client_data	chips/cc26x2/src/gpio.rs	/^    client_data: Cell<usize>,$/;"	m	struct:GPIOPin
client_data	chips/nrf5x/src/gpio.rs	/^    client_data: Cell<usize>,$/;"	m	struct:GPIOPin
client_data	chips/sam4l/src/gpio.rs	/^    client_data: Cell<usize>,$/;"	m	struct:GPIOPin
client_data	chips/sifive/src/gpio.rs	/^    client_data: Cell<usize>,$/;"	m	struct:GpioPin
client_data	chips/tm4c129x/src/gpio.rs	/^    client_data: Cell<usize>,$/;"	m	struct:GPIOPin
client_err	chips/sam4l/src/usbc/mod.rs	/^macro_rules! client_err {$/;"	M
client_offset	capsules/src/sdcard.rs	/^    client_offset: Cell<usize>,$/;"	m	struct:SDCard
client_sector	capsules/src/mx25r6435f.rs	/^    client_sector: TakeCell<'static, Mx25r6435fSector>,$/;"	m	struct:MX25R6435F
client_warn	chips/sam4l/src/usbc/mod.rs	/^macro_rules! client_warn {$/;"	M
client_write_address	capsules/src/fm25cl.rs	/^    client_write_address: Cell<u16>,$/;"	m	struct:FM25CL
client_write_len	capsules/src/fm25cl.rs	/^    client_write_len: Cell<u16>,$/;"	m	struct:FM25CL
clk	boards/nordic/nrf52dk_base/src/lib.rs	/^    clk: usize,$/;"	m	struct:SpiPins
clk_load_ctl	chips/cc26x2/src/prcm.rs	/^    pub clk_load_ctl: ReadWrite<u32, ClockLoad::Register>,$/;"	m	struct:PrcmRegisters
clock	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    clock: &'a A,$/;"	m	struct:Sixlowpan
clock	chips/nrf51/src/lib.rs	/^pub mod clock;$/;"	n
clock	chips/nrf52/src/lib.rs	/^pub mod clock;$/;"	n
clock	chips/sam4l/src/ast.rs	/^    clock: ReadWrite<u32, ClockControl::Register>,$/;"	m	struct:AstRegisters
clock	chips/sam4l/src/usart.rs	/^    clock: pm::Clock,$/;"	m	struct:USART
clock	chips/sam4l/src/usart.rs	/^    clock: pm::Clock,$/;"	m	struct:USARTRegManager
clock	chips/tm4c129x/src/gpio.rs	/^    clock: usize,$/;"	m	struct:GPIOPin
clock	chips/tm4c129x/src/gpt.rs	/^    clock: sysctl::Clock,$/;"	m	struct:AlarmTimer
clock	chips/tm4c129x/src/uart.rs	/^    clock: sysctl::Clock,$/;"	m	struct:UART
clock	kernel/src/common/peripherals.rs	/^    clock: &'a C,$/;"	m	struct:PeripheralManager
clock_busy	chips/sam4l/src/ast.rs	/^    fn clock_busy(&self) -> bool {$/;"	F	implementation:Ast
clone	kernel/src/common/static_ref.rs	/^    fn clone(&self) -> Self {$/;"	F	implementation:StaticRef
closest_power_of_two	kernel/src/common/math.rs	/^pub fn closest_power_of_two(mut num: u32) -> u32 {$/;"	f
clr	chips/sam4l/src/wdt.rs	/^    clr: WriteOnly<u32, Clear::Register>,$/;"	m	struct:WdtRegisters
cmdr	chips/sam4l/src/i2c.rs	/^    cmdr: ReadWrite<u32, Command::Register>,$/;"	m	struct:TWIMRegisters
cmp0	chips/sifive/src/pwm.rs	/^    cmp0: ReadWrite<u32>,$/;"	m	struct:PwmRegisters
cmp1	chips/sifive/src/pwm.rs	/^    cmp1: ReadWrite<u32>,$/;"	m	struct:PwmRegisters
cmp2	chips/sifive/src/pwm.rs	/^    cmp2: ReadWrite<u32>,$/;"	m	struct:PwmRegisters
cmp3	chips/sifive/src/pwm.rs	/^    cmp3: ReadWrite<u32>,$/;"	m	struct:PwmRegisters
code	capsules/src/net/icmpv6/icmpv6.rs	/^    pub code: u8,$/;"	m	struct:ICMP6Header
code	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
code	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
codepagesize	chips/nrf52/src/ficr.rs	/^    codepagesize: ReadOnly<u32, CodePageSize::Register>,$/;"	m	struct:FicrRegisters
codesize	chips/nrf52/src/ficr.rs	/^    codesize: ReadOnly<u32, CodeSize::Register>,$/;"	m	struct:FicrRegisters
collapseDocs	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
collapser	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f	function:autoCollapse
command	capsules/src/adc.rs	/^    fn command($/;"	F	implementation:Adc
command	capsules/src/alarm.rs	/^    fn command(&self, cmd_type: usize, data: usize, _: usize, caller_id: AppId) -> ReturnCode {$/;"	F	implementation:AlarmDriver
command	capsules/src/ambient_light.rs	/^    fn command(&self, command_num: usize, _arg1: usize, _: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:AmbientLight
command	capsules/src/analog_comparator.rs	/^    fn command(&self, command_num: usize, channel: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:AnalogComparator
command	capsules/src/app_flash_driver.rs	/^    fn command(&self, command_num: usize, arg1: usize, _: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:AppFlash
command	capsules/src/ble_advertising_driver.rs	/^    fn command($/;"	f
command	capsules/src/button.rs	/^    fn command(&self, command_num: usize, data: usize, _: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:Button
command	capsules/src/console.rs	/^    fn command(&self, cmd_num: usize, arg1: usize, _: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:Console
command	capsules/src/crc.rs	/^    fn command(&self, command_num: usize, algorithm: usize, _: usize, appid: AppId) -> ReturnCod/;"	F	implementation:Crc
command	capsules/src/dac.rs	/^    fn command(&self, command_num: usize, data: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:Dac
command	capsules/src/gpio.rs	/^    fn command(&self, command_num: usize, data1: usize, data2: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:GPIO
command	capsules/src/gpio_async.rs	/^    fn command(&self, command_num: usize, pin: usize, data: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:GPIOAsync
command	capsules/src/humidity.rs	/^    fn command(&self, command_num: usize, arg1: usize, _: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:HumiditySensor
command	capsules/src/i2c_master.rs	/^    fn command(&self, cmd_num: usize, arg1: usize, arg2: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:I2CMasterDriver
command	capsules/src/i2c_master_slave_driver.rs	/^    fn command(&self, command_num: usize, data: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:I2CMasterSlaveDriver
command	capsules/src/ieee802154/driver.rs	/^    fn command(&self, command_num: usize, arg1: usize, _: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:RadioDriver
command	capsules/src/led.rs	/^    fn command(&self, command_num: usize, data: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:LED
command	capsules/src/lps25hb.rs	/^    fn command(&self, command_num: usize, _: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:LPS25HB
command	capsules/src/ltc294x.rs	/^    fn command(&self, command_num: usize, data: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:LTC294XDriver
command	capsules/src/max17205.rs	/^    fn command(&self, command_num: usize, _data: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:MAX17205Driver
command	capsules/src/net/udp/driver.rs	/^    fn command(&self, command_num: usize, arg1: usize, _: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:UDPDriver
command	capsules/src/ninedof.rs	/^    command: NineDofCommand,$/;"	m	struct:App
command	capsules/src/ninedof.rs	/^    fn command(&self, command_num: usize, arg1: usize, _: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:NineDof
command	capsules/src/nonvolatile_storage_driver.rs	/^    command: NonvolatileCommand,$/;"	m	struct:App
command	capsules/src/nonvolatile_storage_driver.rs	/^    fn command(&self, arg0: usize, arg1: usize, _: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:NonvolatileStorage
command	capsules/src/nrf51822_serialization.rs	/^    fn command(&self, command_type: usize, _: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:Nrf51822Serialization
command	capsules/src/pca9544a.rs	/^    fn command(&self, command_num: usize, data: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:PCA9544A
command	capsules/src/rng.rs	/^    fn command(&self, command_num: usize, data: usize, _: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:RngDriver
command	capsules/src/sdcard.rs	/^    fn command(&self, command_num: usize, data: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:SDCardDriver
command	capsules/src/spi.rs	/^    fn command(&self, cmd_num: usize, arg1: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:Spi
command	capsules/src/spi.rs	/^    fn command(&self, cmd_num: usize, arg1: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:SpiSlave
command	capsules/src/temperature.rs	/^    fn command(&self, command_num: usize, _: usize, _: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:TemperatureSensor
command	capsules/src/tmp006.rs	/^    fn command(&self, command_num: usize, data: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:TMP006
command	capsules/src/tsl2561.rs	/^    fn command(&self, command_num: usize, _: usize, _: usize, _: AppId) -> ReturnCode {$/;"	F	implementation:TSL2561
command	capsules/src/usb_user.rs	/^    fn command(&self, command_num: usize, _arg: usize, _: usize, appid: AppId) -> ReturnCode {$/;"	f
command	kernel/src/driver.rs	/^    fn command(&self, minor_num: usize, r2: usize, r3: usize, caller_id: AppId) -> ReturnCode {$/;"	F	interface:Driver
command	kernel/src/ipc.rs	/^    fn command($/;"	F	implementation:IPC
command_buffer	capsules/src/process_console.rs	/^    command_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:ProcessConsole
command_complete	boards/imix/src/i2c_dummy.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], error: hil::i2c::Error) {$/;"	F	implementation:AccelClient
command_complete	boards/imix/src/i2c_dummy.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], error: hil::i2c::Error) {$/;"	F	implementation:LiClient
command_complete	boards/imix/src/i2c_dummy.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], error: hil::i2c::Error) {$/;"	F	implementation:ScanClient
command_complete	boards/launchxl/src/i2c_tests.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], error: hil::i2c::Error) {$/;"	F	implementation:AccelClient
command_complete	boards/launchxl/src/i2c_tests.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], error: hil::i2c::Error) {$/;"	F	implementation:ScanClient
command_complete	capsules/src/fxos8700cq.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], _error: Error) {$/;"	F	implementation:Fxos8700cq
command_complete	capsules/src/i2c_master.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], _error: i2c::Error) {$/;"	F	implementation:I2CMasterDriver
command_complete	capsules/src/i2c_master_slave_driver.rs	/^    fn command_complete($/;"	F	implementation:I2CMasterSlaveDriver
command_complete	capsules/src/i2c_master_slave_driver.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], error: hil::i2c::Error) {$/;"	F	implementation:I2CMasterSlaveDriver
command_complete	capsules/src/isl29035.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], _error: Error) {$/;"	F	implementation:Isl29035
command_complete	capsules/src/lps25hb.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], _error: i2c::Error) {$/;"	F	implementation:LPS25HB
command_complete	capsules/src/ltc294x.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], _error: i2c::Error) {$/;"	F	implementation:LTC294X
command_complete	capsules/src/max17205.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], _error: i2c::Error) {$/;"	F	implementation:MAX17205
command_complete	capsules/src/mcp230xx.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], _error: hil::i2c::Error) {$/;"	F	implementation:MCP230xx
command_complete	capsules/src/pca9544a.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], _error: i2c::Error) {$/;"	F	implementation:PCA9544A
command_complete	capsules/src/si7021.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], _error: i2c::Error) {$/;"	F	implementation:SI7021
command_complete	capsules/src/tmp006.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], _error: i2c::Error) {$/;"	F	implementation:TMP006
command_complete	capsules/src/tsl2561.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], _error: i2c::Error) {$/;"	F	implementation:TSL2561
command_complete	capsules/src/virtual_i2c.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], error: Error) {$/;"	F	implementation:I2CDevice
command_complete	capsules/src/virtual_i2c.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], error: Error) {$/;"	F	implementation:MuxI2C
command_complete	kernel/src/hil/i2c.rs	/^    fn command_complete($/;"	F	interface:I2CHwSlaveClient
command_complete	kernel/src/hil/i2c.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], error: Error);$/;"	F	interface:I2CClient
command_complete	kernel/src/hil/i2c.rs	/^    fn command_complete(&self, buffer: &'static mut [u8], error: Error);$/;"	F	interface:I2CHwMasterClient
command_index	capsules/src/process_console.rs	/^    command_index: Cell<usize>,$/;"	m	struct:ProcessConsole
command_pending	capsules/src/ambient_light.rs	/^    command_pending: Cell<bool>,$/;"	m	struct:AmbientLight
comment	tools/svd2regs.py	/^def comment(text):$/;"	f
common	kernel/src/lib.rs	/^pub mod common;$/;"	n
compare	chips/nrf5x/src/timer.rs	/^    fn compare(&self, bitmask: u8);$/;"	F	interface:CompareClient
comparison	capsules/src/analog_comparator.rs	/^    fn comparison(&self, channel: usize) -> ReturnCode {$/;"	F	implementation:AnalogComparator
comparison	chips/sam4l/src/acifc.rs	/^    fn comparison(&self, channel: &Self::Channel) -> bool {$/;"	F	implementation:Acifc
comparison	kernel/src/hil/analog_comparator.rs	/^    fn comparison(&self, channel: &Self::Channel) -> bool;$/;"	F	interface:AnalogComparator
complete	arch/riscv32i/src/plic.rs	/^pub unsafe fn complete(index: u32) {$/;"	f
completing_read	capsules/src/virtual_uart.rs	/^    completing_read: Cell<bool>,$/;"	m	struct:UartMux
component	kernel/src/lib.rs	/^pub mod component;$/;"	n
components	boards/imix/src/main.rs	/^mod components;$/;"	n
compress	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^    pub compress: bool,$/;"	m	struct:Context
compress	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^pub fn compress<'a>($/;"	f
compress_cie	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn compress_cie($/;"	f
compress_dst	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn compress_dst($/;"	f
compress_hl	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn compress_hl(ip6_header: &IP6Header, buf: &mut [u8], written: &mut usize) {$/;"	f
compress_iid	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn compress_iid($/;"	f
compress_multicast	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn compress_multicast($/;"	f
compress_nh	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn compress_nh(ip6_header: &IP6Header, is_nhc: bool, buf: &mut [u8], written: &mut usize) {$/;"	f
compress_src	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn compress_src($/;"	f
compress_tf	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn compress_tf(ip6_header: &IP6Header, buf: &mut [u8], written: &mut usize) {$/;"	f
compress_udp_checksum	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn compress_udp_checksum(udp_header: &UDPHeader, buf: &mut [u8], written: &mut usize) -> u8 {$/;"	f
compress_udp_ports	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn compress_udp_ports(udp_header: &UDPHeader, buf: &mut [u8], written: &mut usize) -> u8 {$/;"	f
compute	chips/sam4l/src/crccu.rs	/^    fn compute(&self, data: &[u8], alg: CrcAlg) -> ReturnCode {$/;"	F	implementation:Crccu
compute	kernel/src/hil/crc.rs	/^    fn compute(&self, data: &[u8], CrcAlg) -> ReturnCode;$/;"	F	interface:CRC
compute_icmp_checksum	capsules/src/net/ipv6/ip_utils.rs	/^pub fn compute_icmp_checksum($/;"	f
compute_iid	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^pub fn compute_iid(mac_addr: &MacAddress) -> [u8; 8] {$/;"	f
compute_ipv6_ph_sum	capsules/src/net/ipv6/ip_utils.rs	/^pub fn compute_ipv6_ph_sum(ip6_header: &IP6Header) -> u32 {$/;"	f
compute_sum	capsules/src/net/ipv6/ip_utils.rs	/^pub fn compute_sum(buf: &[u8], len: u16) -> u32 {$/;"	f
compute_udp_checksum	capsules/src/net/ipv6/ip_utils.rs	/^pub fn compute_udp_checksum($/;"	f
conf	chips/sam4l/src/acifc.rs	/^    conf: [ReadWrite<u32, ACConfiguration::Register>; 8],$/;"	m	struct:AcifcRegisters
confidential	capsules/src/aes_ccm.rs	/^    confidential: Cell<bool>,$/;"	m	struct:AES128CCM
config	capsules/src/segger_rtt.rs	/^    config: TakeCell<'static, SeggerRttMemory>,$/;"	m	struct:SeggerRtt
config	chips/nrf51/src/uart.rs	/^    config: ReadWrite<u32, Config::Register>, \/\/....... 0x56c$/;"	m	struct:UartRegisters
config	chips/nrf52/src/adc.rs	/^    config: ReadWrite<u32, CONFIG::Register>,$/;"	m	struct:AdcChRegisters
config	chips/nrf52/src/nvmc.rs	/^    pub config: ReadWrite<u32, Configuration::Register>,$/;"	m	struct:NvmcRegisters
config	chips/nrf52/src/spi.rs	/^    config: ReadWrite<u32, CONFIG::Register>,        \/\/ Configuration register$/;"	m	struct:SpimRegisters
config	chips/nrf52/src/uart.rs	/^    config: ReadWrite<u32, Config::Register>,$/;"	m	struct:UarteRegisters
config	chips/nrf5x/src/gpio.rs	/^    config: [ReadWrite<u32, Config::Register>; NUM_GPIOTE],$/;"	m	struct:GpioteRegisters
config	chips/nrf5x/src/trng.rs	/^    pub config: ReadWrite<u32, Config::Register>,$/;"	m	struct:RngRegisters
config	chips/sam4l/src/pm.rs	/^    config: ReadOnly<u32, Configuration::Register>, \/\/ 0x200$/;"	m	struct:PmRegisters
config_and_enable	chips/sam4l/src/adc.rs	/^    fn config_and_enable(&self, frequency: u32) -> ReturnCode {$/;"	F	implementation:Adc
config_buffers	capsules/src/spi.rs	/^    pub fn config_buffers(&mut self, read: &'static mut [u8], write: &'static mut [u8]) {$/;"	F	implementation:Spi
config_buffers	capsules/src/spi.rs	/^    pub fn config_buffers(&mut self, read: &'static mut [u8], write: &'static mut [u8]) {$/;"	F	implementation:SpiSlave
config_commit	capsules/src/ieee802154/device.rs	/^    fn config_commit(&self);$/;"	F	interface:MacDevice
config_commit	capsules/src/ieee802154/framer.rs	/^    fn config_commit(&self) {$/;"	F	implementation:Framer
config_commit	capsules/src/ieee802154/mac.rs	/^    fn config_commit(&self) {$/;"	F	implementation:AwakeMac
config_commit	capsules/src/ieee802154/mac.rs	/^    fn config_commit(&self);$/;"	F	interface:Mac
config_commit	capsules/src/ieee802154/virtual_mac.rs	/^    fn config_commit(&self) {$/;"	F	implementation:MacUser
config_commit	capsules/src/ieee802154/xmac.rs	/^    fn config_commit(&self) {$/;"	F	implementation:XMac
config_commit	capsules/src/rf233.rs	/^    fn config_commit(&self) {$/;"	F	implementation:RF233
config_commit	kernel/src/hil/radio.rs	/^    fn config_commit(&self);$/;"	F	interface:RadioConfig
config_done	capsules/src/ieee802154/framer.rs	/^    fn config_done(&self, _: ReturnCode) {$/;"	F	implementation:Framer
config_done	kernel/src/hil/radio.rs	/^    fn config_done(&self, result: ReturnCode);$/;"	F	interface:ConfigClient
config_pending	capsules/src/rf233.rs	/^    config_pending: Cell<bool>,$/;"	m	struct:RF233
configuration_value	capsules/src/usb.rs	/^    pub configuration_value: u8,$/;"	m	struct:ConfigurationDescriptor
configure	capsules/src/ltc294x.rs	/^    fn configure($/;"	F	implementation:LTC294X
configure	capsules/src/segger_rtt.rs	/^    fn configure(&self, _params: hil::uart::UARTParameters) -> ReturnCode {$/;"	F	implementation:SeggerRtt
configure	capsules/src/virtual_spi.rs	/^    fn configure(&self, cpol: hil::spi::ClockPolarity, cpal: hil::spi::ClockPhase) {$/;"	F	implementation:VirtualSpiSlaveDevice
configure	capsules/src/virtual_spi.rs	/^    fn configure(&self, cpol: hil::spi::ClockPolarity, cpal: hil::spi::ClockPhase, rate: u32) {$/;"	F	implementation:VirtualSpiMasterDevice
configure	capsules/src/virtual_uart.rs	/^    fn configure(&self, params: hil::uart::UARTParameters) -> ReturnCode {$/;"	F	implementation:UartDevice
configure	chips/cc26x2/src/uart.rs	/^    fn configure(&self, params: kernel::hil::uart::UARTParameters) -> ReturnCode {$/;"	F	implementation:UART
configure	chips/nrf51/src/i2c.rs	/^    pub fn configure(&self, scl: Pinmux, sda: Pinmux) {$/;"	F	implementation:TWIM
configure	chips/nrf51/src/uart.rs	/^    fn configure(&self, params: uart::UARTParameters) -> ReturnCode {$/;"	F	implementation:UART
configure	chips/nrf52/src/i2c.rs	/^    pub fn configure(&self, scl: Pinmux, sda: Pinmux) {$/;"	F	implementation:TWIM
configure	chips/nrf52/src/spi.rs	/^    pub fn configure(&self, mosi: Pinmux, miso: Pinmux, sck: Pinmux) {$/;"	F	implementation:SPIM
configure	chips/nrf52/src/uart.rs	/^    fn configure(&self, params: kernel::hil::uart::UARTParameters) -> ReturnCode {$/;"	F	implementation:Uarte
configure	chips/nrf5x/src/rtc.rs	/^    fn configure(&self, client: &'static time::Client) {$/;"	F	implementation:Rtc
configure	chips/sam4l/src/ast.rs	/^    fn configure(&self, client: &'a time::Client) {$/;"	F	implementation:Ast
configure	chips/sam4l/src/flashcalw.rs	/^    pub fn configure(&mut self) {$/;"	F	implementation:FLASHCALW
configure	chips/sam4l/src/gpio.rs	/^    fn configure(&self, config: Self::Config) {$/;"	F	implementation:GPIOPin
configure	chips/sam4l/src/usart.rs	/^    fn configure(&self, parameters: hil::uart::UARTParameters) -> ReturnCode {$/;"	F	implementation:USART
configure	chips/sifive/src/uart.rs	/^    fn configure(&self, params: hil::uart::UARTParameters) -> ReturnCode {$/;"	F	implementation:Uart
configure	chips/tm4c129x/src/gpio.rs	/^    fn configure(&self, config: Self::Config) {$/;"	F	implementation:GPIOPin
configure	chips/tm4c129x/src/gpio.rs	/^    pub fn configure(&self, mode: Mode) {$/;"	F	implementation:GPIOPin
configure	chips/tm4c129x/src/gpt.rs	/^    fn configure(&self, client: &'static hil::time::Client) {$/;"	F	implementation:AlarmTimer
configure	chips/tm4c129x/src/uart.rs	/^    fn configure(&self, params: hil::uart::UARTParameters) -> ReturnCode {$/;"	F	implementation:UART
configure	kernel/src/hil/mod.rs	/^    fn configure(&self, Self::Config);$/;"	F	interface:Controller
configure	kernel/src/hil/spi.rs	/^    fn configure(&self, cpol: ClockPolarity, cpal: ClockPhase);$/;"	F	interface:SpiSlaveDevice
configure	kernel/src/hil/spi.rs	/^    fn configure(&self, cpol: ClockPolarity, cpal: ClockPhase, rate: u32);$/;"	F	interface:SpiMasterDevice
configure	kernel/src/hil/uart.rs	/^    fn configure(&self, params: UARTParameters) -> ReturnCode;$/;"	F	interface:UART
configure_1mhz_rc	chips/sam4l/src/pm.rs	/^unsafe fn configure_1mhz_rc() {$/;"	f
configure_48mhz_dfll	chips/sam4l/src/pm.rs	/^unsafe fn configure_48mhz_dfll() {$/;"	f
configure_80mhz_rc	chips/sam4l/src/pm.rs	/^unsafe fn configure_80mhz_rc() {$/;"	f
configure_callback	capsules/src/humidity.rs	/^    fn configure_callback(&self, callback: Option<Callback>, app_id: AppId) -> ReturnCode {$/;"	F	implementation:HumiditySensor
configure_callback	capsules/src/temperature.rs	/^    fn configure_callback(&self, callback: Option<Callback>, app_id: AppId) -> ReturnCode {$/;"	F	implementation:TemperatureSensor
configure_eraseable	chips/nrf52/src/nvmc.rs	/^    pub fn configure_eraseable(&self) {$/;"	F	implementation:Nvmc
configure_external_oscillator	chips/sam4l/src/pm.rs	/^unsafe fn configure_external_oscillator($/;"	f
configure_external_oscillator	chips/tm4c129x/src/sysctl.rs	/^unsafe fn configure_external_oscillator() {$/;"	f
configure_external_oscillator_pll	chips/sam4l/src/pm.rs	/^unsafe fn configure_external_oscillator_pll($/;"	f
configure_external_oscillator_pll	chips/tm4c129x/src/sysctl.rs	/^unsafe fn configure_external_oscillator_pll() {$/;"	f
configure_input	chips/tm4c129x/src/gpio.rs	/^    fn configure_input(&self, config: InputMode) {$/;"	F	implementation:GPIOPin
configure_input_pin	capsules/src/gpio.rs	/^    fn configure_input_pin(&self, pin_num: usize, config: usize) -> ReturnCode {$/;"	F	implementation:GPIO
configure_input_pin	capsules/src/gpio_async.rs	/^    fn configure_input_pin(&self, port: usize, pin: usize, config: usize) -> ReturnCode {$/;"	F	implementation:GPIOAsync
configure_inputoutput	chips/tm4c129x/src/gpio.rs	/^    fn configure_inputoutput(&self, config: InputOutputMode) {$/;"	F	implementation:GPIOPin
configure_internal_oscillator_pll	chips/tm4c129x/src/sysctl.rs	/^unsafe fn configure_internal_oscillator_pll() {$/;"	f
configure_interrupt	capsules/src/gpio.rs	/^    fn configure_interrupt(&self, pin_num: usize, config: usize) -> ReturnCode {$/;"	F	implementation:GPIO
configure_interrupt	capsules/src/gpio_async.rs	/^    fn configure_interrupt(&self, port: usize, pin: usize, config: usize) -> ReturnCode {$/;"	F	implementation:GPIOAsync
configure_machine_trap_handler	arch/riscv32i/src/lib.rs	/^pub unsafe fn configure_machine_trap_handler() {$/;"	f
configure_mpu	arch/cortex-m/src/mpu.rs	/^    fn configure_mpu(&self, config: &Self::MpuConfig) {$/;"	F	implementation:MPU
configure_mpu	kernel/src/platform/mpu.rs	/^    fn configure_mpu(&self, config: &Self::MpuConfig) {}$/;"	F	interface:MPU
configure_output	chips/tm4c129x/src/gpio.rs	/^    fn configure_output(&self, config: OutputMode) {$/;"	F	implementation:GPIOPin
configure_pins	boards/launchxl/src/main.rs	/^unsafe fn configure_pins() {$/;"	f
configure_pmp	boards/hifive1/src/main.rs	/^pub unsafe fn configure_pmp() {$/;"	f
configure_pullup	capsules/src/mcp230xx.rs	/^    fn configure_pullup(&self, pin_number: u8, enabled: bool) -> ReturnCode {$/;"	F	implementation:MCP230xx
configure_rcfast	chips/sam4l/src/pm.rs	/^unsafe fn configure_rcfast(frequency: RcfastFrequency) {$/;"	f
configure_spi	capsules/src/fm25cl.rs	/^    fn configure_spi(&self) {$/;"	F	implementation:FM25CL
configure_spi	capsules/src/mx25r6435f.rs	/^    fn configure_spi(&self) {$/;"	F	implementation:MX25R6435F
configure_submodules	boards/imix/src/power.rs	/^pub unsafe fn configure_submodules(enabled_submodules: SubmoduleConfig) {$/;"	f
configure_supervisor_trap_handler	arch/riscv32i/src/lib.rs	/^pub unsafe fn configure_supervisor_trap_handler() {$/;"	f
configure_user_trap_handler	arch/riscv32i/src/lib.rs	/^pub unsafe fn configure_user_trap_handler() {$/;"	f
configure_writeable	chips/nrf52/src/nvmc.rs	/^    pub fn configure_writeable(&self) {$/;"	F	implementation:Nvmc
confw	chips/sam4l/src/acifc.rs	/^    confw: [ReadWrite<u32, WindowConfiguration::Register>; 4],$/;"	m	struct:AcifcRegisters
console	boards/ek-tm4c1294xl/src/main.rs	/^    console: &'static capsules::console::Console<'static, UartDevice<'static>>,$/;"	m	struct:EkTm4c1294xl
console	boards/hail/src/main.rs	/^    console: &'static capsules::console::Console<'static, UartDevice<'static>>,$/;"	m	struct:Hail
console	boards/imix/src/components/console.rs	/^    type Output = &'static console::Console<'static, UartDevice<'static>>;$/;"	v	implementation:ConsoleComponent
console	boards/imix/src/components/mod.rs	/^pub mod console;$/;"	n
console	boards/imix/src/main.rs	/^    console: &'static capsules::console::Console<'static, UartDevice<'static>>,$/;"	m	struct:Imix
console	boards/launchxl/src/main.rs	/^    console: &'static capsules::console::Console<'static, UartDevice<'static>>,$/;"	m	struct:Platform
console	boards/nordic/nrf51dk/src/main.rs	/^    console: &'static capsules::console::Console<'static, UartDevice<'static>>,$/;"	m	struct:Platform
console	boards/nordic/nrf52dk_base/src/lib.rs	/^    console: &'static capsules::console::Console<'static, UartDevice<'static>>,$/;"	m	struct:Platform
console	capsules/src/lib.rs	/^pub mod console;$/;"	n
constants	chips/nrf5x/src/lib.rs	/^pub mod constants;$/;"	n
continuous	chips/sam4l/src/adc.rs	/^    continuous: Cell<bool>,$/;"	m	struct:Adc
control_status	chips/sam4l/src/usbc/mod.rs	/^    pub control_status: ReadWrite<u32, ControlStatus::Register>,$/;"	m	struct:Bank
controller	capsules/src/usbc_client.rs	/^    controller: &'a C,$/;"	m	struct:Client
coreclkcfg	chips/sifive/src/prci.rs	/^    coreclkcfg: ReadWrite<u32>,$/;"	m	struct:PrciRegisters
coulomb	capsules/src/max17205.rs	/^    fn coulomb(&self, coulomb: u16, error: ReturnCode) {$/;"	F	implementation:MAX17205Driver
coulomb	capsules/src/max17205.rs	/^    fn coulomb(&self, coulomb: u16, error: ReturnCode);$/;"	F	interface:MAX17205Client
count	capsules/src/rng.rs	/^    count: Cell<usize>,$/;"	m	struct:Entropy8To32
count	capsules/src/test/rng.rs	/^    count: Cell<usize>,$/;"	m	struct:TestEntropy32
count	capsules/src/test/rng.rs	/^    count: Cell<usize>,$/;"	m	struct:TestEntropy8
count	capsules/src/test/rng.rs	/^    count: Cell<usize>,$/;"	m	struct:TestRng
count	chips/sifive/src/pwm.rs	/^    count: ReadWrite<u32>,$/;"	m	struct:PwmRegisters
count	kernel/src/debug.rs	/^    count: Cell<usize>,$/;"	m	struct:DebugWriter
counter	chips/nrf5x/src/rtc.rs	/^    counter: ReadOnly<u32>,$/;"	m	struct:RtcRegisters
cpacr	arch/cortex-m/src/scb.rs	/^    cpacr: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
cpu_clock	chips/sam4l/src/adc.rs	/^    cpu_clock: Cell<bool>,$/;"	m	struct:Adc
cpuid	arch/cortex-m/src/scb.rs	/^    cpuid: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
cpumask	chips/sam4l/src/pm.rs	/^    cpumask: ReadWrite<u32, ClockMaskCpu::Register>, \/\/ 0x020$/;"	m	struct:PmRegisters
cpusel	chips/sam4l/src/pm.rs	/^    cpusel: ReadWrite<u32, CpuClockSelect::Register>,$/;"	m	struct:PmRegisters
cr	chips/sam4l/src/adc.rs	/^    cr: WriteOnly<u32, Control::Register>,$/;"	m	struct:AdcRegisters
cr	chips/sam4l/src/ast.rs	/^    cr: ReadWrite<u32, Control::Register>,$/;"	m	struct:AstRegisters
cr	chips/sam4l/src/crccu.rs	/^    cr: WriteOnly<u32, Control::Register>,$/;"	m	struct:CrccuRegisters
cr	chips/sam4l/src/dac.rs	/^    cr: WriteOnly<u32, Control::Register>, \/\/             Control                       (0x00)$/;"	m	struct:DacRegisters
cr	chips/sam4l/src/dma.rs	/^    cr: WriteOnly<u32, Control::Register>,$/;"	m	struct:DMARegisters
cr	chips/sam4l/src/i2c.rs	/^    cr: ReadWrite<u32, ControlSlave::Register>,$/;"	m	struct:TWISRegisters
cr	chips/sam4l/src/i2c.rs	/^    cr: WriteOnly<u32, Control::Register>,$/;"	m	struct:TWIMRegisters
cr	chips/sam4l/src/spi.rs	/^    cr: WriteOnly<u32, Control::Register>,$/;"	m	struct:SpiRegisters
cr	chips/sam4l/src/trng.rs	/^    cr: WriteOnly<u32, Control::Register>,$/;"	m	struct:TrngRegisters
cr	chips/sam4l/src/usart.rs	/^    cr: WriteOnly<u32, Control::Register>,       \/\/ 0x00$/;"	m	struct:UsartRegisters
cr	chips/sam4l/src/wdt.rs	/^    cr: ReadWrite<u32, Control::Register>,$/;"	m	struct:WdtRegisters
cr	chips/tm4c129x/src/gpio.rs	/^    cr: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
crate	kernel/src/callback.rs	/^    crate kernel: &'static Kernel,$/;"	m	struct:AppId
crate	kernel/src/grant.rs	/^    crate kernel: &'static Kernel,$/;"	m	struct:Grant
crate	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:buildIndex.row
crc	boards/hail/src/main.rs	/^    crc: &'static capsules::crc::Crc<'static, sam4l::crccu::Crccu<'static>>,$/;"	m	struct:Hail
crc	boards/imix/src/components/crc.rs	/^    type Output = &'static crc::Crc<'static, sam4l::crccu::Crccu<'static>>;$/;"	v	implementation:CrcComponent
crc	boards/imix/src/components/mod.rs	/^pub mod crc;$/;"	n
crc	boards/imix/src/main.rs	/^    crc: &'static capsules::crc::Crc<'static, sam4l::crccu::Crccu<'static>>,$/;"	m	struct:Imix
crc	capsules/src/lib.rs	/^pub mod crc;$/;"	n
crc	chips/sam4l/src/crccu.rs	/^    crc: u32, \/\/ Transfer Reference Register (RW): Reference CRC (for compare mode)$/;"	m	struct:Descriptor
crc	kernel/src/hil/mod.rs	/^pub mod crc;$/;"	n
crc_unit	capsules/src/crc.rs	/^    crc_unit: &'a C,$/;"	m	struct:Crc
crc_valid	capsules/src/rf233.rs	/^    crc_valid: Cell<bool>,$/;"	m	struct:RF233
crccnf	chips/nrf51/src/radio.rs	/^    crccnf: ReadWrite<u32, CrcCnf::Register>,    \/\/ 0x534 - 0x538$/;"	m	struct:RadioRegisters
crccnf	chips/nrf52/src/radio.rs	/^    crccnf: ReadWrite<u32, CrcConfiguration::Register>,$/;"	m	struct:RadioRegisters
crccu	chips/sam4l/src/lib.rs	/^pub mod crccu;$/;"	n
crcerror	chips/nrf52/src/radio.rs	/^    crcerror: ReadWrite<u32, Event::Register>,$/;"	m	struct:RadioRegisters
crcinit	chips/nrf51/src/radio.rs	/^    crcinit: ReadWrite<u32, CrcInitialValue::Register>, \/\/ 0x53c - 0x540$/;"	m	struct:RadioRegisters
crcinit	chips/nrf52/src/radio.rs	/^    crcinit: ReadWrite<u32, CrcInitialValue::Register>,$/;"	m	struct:RadioRegisters
crcpoly	chips/nrf51/src/radio.rs	/^    crcpoly: ReadWrite<u32, CrcPolynomial::Register>, \/\/ 0x538 - 0x53c$/;"	m	struct:RadioRegisters
crcpoly	chips/nrf52/src/radio.rs	/^    crcpoly: ReadWrite<u32, CrcPolynomial::Register>,$/;"	m	struct:RadioRegisters
crcstatus	chips/nrf51/src/radio.rs	/^    crcstatus: ReadOnly<u32, CrcStatus::Register>, \/\/ 0x400 - 0x404$/;"	m	struct:RadioRegisters
crcstatus	chips/nrf52/src/radio.rs	/^    crcstatus: ReadOnly<u32, Event::Register>,$/;"	m	struct:RadioRegisters
create	kernel/src/process.rs	/^    crate unsafe fn create($/;"	F	implementation:Process
createToggle	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
createToggleWrapper	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
create_capability	kernel/src/common/utils.rs	/^macro_rules! create_capability {$/;"	M
create_grant	kernel/src/sched.rs	/^    pub fn create_grant<T: Default>($/;"	F	implementation:Kernel
create_twims_clocks	chips/sam4l/src/i2c.rs	/^const fn create_twims_clocks($/;"	f
crt1	chips/cc26x2/src/lib.rs	/^pub mod crt1;$/;"	n
crt1	chips/nrf51/src/lib.rs	/^pub mod crt1;$/;"	n
crt1	chips/nrf52/src/lib.rs	/^pub mod crt1;$/;"	n
crypt	capsules/src/aes_ccm.rs	/^    fn crypt($/;"	F	implementation:AES128CCM
crypt	chips/nrf5x/src/aes.rs	/^    fn crypt($/;"	F	implementation:AesECB
crypt	chips/nrf5x/src/aes.rs	/^    fn crypt(&self) {$/;"	F	implementation:AesECB
crypt	chips/sam4l/src/aes.rs	/^    fn crypt($/;"	F	implementation:Aes
crypt	kernel/src/hil/symmetric_encryption.rs	/^    fn crypt($/;"	F	interface:AES128
crypt	kernel/src/hil/symmetric_encryption.rs	/^    fn crypt($/;"	F	interface:AES128CCM
crypt_auth_len	capsules/src/aes_ccm.rs	/^    crypt_auth_len: Cell<usize>,$/;"	m	struct:AES128CCM
crypt_buf	capsules/src/aes_ccm.rs	/^    crypt_buf: TakeCell<'a, [u8]>,$/;"	m	struct:AES128CCM
crypt_client	capsules/src/aes_ccm.rs	/^    crypt_client: OptionalCell<&'a symmetric_encryption::CCMClient>,$/;"	m	struct:AES128CCM
crypt_done	capsules/src/aes_ccm.rs	/^    fn crypt_done(&self, _: Option<&'a mut [u8]>, crypt_buf: &'a mut [u8]) {$/;"	F	implementation:AES128CCM
crypt_done	capsules/src/ieee802154/framer.rs	/^    fn crypt_done(&self, buf: &'static mut [u8], res: ReturnCode, tag_is_valid: bool) {$/;"	F	implementation:Framer
crypt_done	capsules/src/test/aes.rs	/^    fn crypt_done(&'a self, source: Option<&'a mut [u8]>, dest: &'a mut [u8]) {$/;"	F	implementation:TestAes128Cbc
crypt_done	capsules/src/test/aes.rs	/^    fn crypt_done(&'a self, source: Option<&'a mut [u8]>, dest: &'a mut [u8]) {$/;"	F	implementation:TestAes128Ctr
crypt_done	capsules/src/test/aes_ccm.rs	/^    fn crypt_done(&self, buf: &'static mut [u8], res: ReturnCode, tag_is_valid: bool) {$/;"	F	implementation:Test
crypt_done	kernel/src/hil/symmetric_encryption.rs	/^    fn crypt_done(&'a self, source: Option<&'a mut [u8]>, dest: &'a mut [u8]);$/;"	F	interface:Client
crypt_done	kernel/src/hil/symmetric_encryption.rs	/^    fn crypt_done(&self, buf: &'static mut [u8], res: ReturnCode, tag_is_valid: bool);$/;"	F	interface:CCMClient
crypt_enc_len	capsules/src/aes_ccm.rs	/^    crypt_enc_len: Cell<usize>,$/;"	m	struct:AES128CCM
cscr	chips/sam4l/src/scif.rs	/^    cscr: ReadWrite<u32>,$/;"	m	struct:ScifRegisters
csr	chips/sam4l/src/spi.rs	/^    csr: [ReadWrite<u32, ChipSelectParams::Register>; 4],$/;"	m	struct:SpiRegisters
csr	chips/sam4l/src/usart.rs	/^    csr: ReadOnly<u32, ChannelStatus::Register>, \/\/ 0x14$/;"	m	struct:UsartRegisters
cstart	chips/nrf51/src/clock.rs	/^    cstart: WriteOnly<u32, Task::Register>,          \/\/ 0x014$/;"	m	struct:ClockRegisters
cstop	chips/nrf51/src/clock.rs	/^    cstop: WriteOnly<u32, Task::Register>,           \/\/ 0x018$/;"	m	struct:ClockRegisters
ctiv	chips/nrf51/src/clock.rs	/^    ctiv: ReadWrite<u32, CalibrationTimerInterval::Register>, \/\/ 0x538$/;"	m	struct:ClockRegisters
ctiv	chips/nrf52/src/clock.rs	/^    ctiv: ReadWrite<u32, Ctiv::Register>,$/;"	m	struct:ClockRegisters
ctl	boards/imix/src/components/rf233.rs	/^    ctl: &'static sam4l::gpio::GPIOPin,$/;"	m	struct:RF233Component
ctl	chips/cc26x2/src/rtc.rs	/^    ctl: ReadWrite<u32, Control::Register>,$/;"	m	struct:RtcRegisters
ctl	chips/cc26x2/src/trng.rs	/^    ctl: ReadWrite<u32, Control::Register>,$/;"	m	struct:RngRegisters
ctl	chips/cc26x2/src/uart.rs	/^    ctl: ReadWrite<u32, Control::Register>,$/;"	m	struct:UartRegisters
ctl	chips/tm4c129x/src/gpt.rs	/^    ctl: VolatileCell<u32>,$/;"	m	struct:GptRegisters
ctl	chips/tm4c129x/src/uart.rs	/^    ctl: VolatileCell<u32>,$/;"	m	struct:UartRegisters
ctrl	arch/cortex-m/src/mpu.rs	/^    pub ctrl: ReadWrite<u32, Control::Register>,$/;"	m	struct:MpuRegisters
ctrl	chips/cc26x2/src/i2c.rs	/^        pub fn ctrl(&self) -> &WriteOnly<u32, super::Control::Register> {$/;"	F	implementation:regs::ControlStatReg
ctrl	chips/sam4l/src/acifc.rs	/^    ctrl: ReadWrite<u32, Control::Register>,$/;"	m	struct:AcifcRegisters
ctrl	chips/sam4l/src/aes.rs	/^    ctrl: ReadWrite<u32, Control::Register>,         \/\/   0x00$/;"	m	struct:AesRegisters
ctrl	chips/sam4l/src/crccu.rs	/^    ctrl: TCR, \/\/ Transfer Control Register (RW): IEN, TRWIDTH, BTSIZE$/;"	m	struct:Descriptor
ctrl	chips/sam4l/src/flashcalw.rs	/^    ctrl: WriteOnly<u32, PicoCacheControl::Register>,$/;"	m	struct:FlashcalwRegisters
ctrl_in	capsules/src/usbc_client.rs	/^    fn ctrl_in(&self, endpoint: usize) -> hil::usb::CtrlInResult {$/;"	F	implementation:Client
ctrl_in	kernel/src/hil/usb.rs	/^    fn ctrl_in(&self, endpoint: usize) -> CtrlInResult;$/;"	F	interface:Client
ctrl_out	capsules/src/usbc_client.rs	/^    fn ctrl_out(&self, endpoint: usize, _packet_bytes: u32) -> hil::usb::CtrlOutResult {$/;"	F	implementation:Client
ctrl_out	kernel/src/hil/usb.rs	/^    fn ctrl_out(&self, endpoint: usize, packet_bytes: u32) -> CtrlOutResult;$/;"	F	interface:Client
ctrl_setup	capsules/src/usbc_client.rs	/^    fn ctrl_setup(&self, endpoint: usize) -> hil::usb::CtrlSetupResult {$/;"	F	implementation:Client
ctrl_setup	kernel/src/hil/usb.rs	/^    fn ctrl_setup(&self, endpoint: usize) -> CtrlSetupResult;$/;"	F	interface:Client
ctrl_status	capsules/src/usbc_client.rs	/^    fn ctrl_status(&self, _endpoint: usize) {$/;"	F	implementation:Client
ctrl_status	kernel/src/hil/usb.rs	/^    fn ctrl_status(&self, endpoint: usize);$/;"	F	interface:Client
ctrl_status_complete	capsules/src/usbc_client.rs	/^    fn ctrl_status_complete(&self, endpoint: usize) {$/;"	F	implementation:Client
ctrl_status_complete	kernel/src/hil/usb.rs	/^    fn ctrl_status_complete(&self, endpoint: usize);$/;"	F	interface:Client
cts	boards/nordic/nrf52dk_base/src/lib.rs	/^    cts: usize,$/;"	m	struct:UartPins
ctto	chips/nrf51/src/clock.rs	/^    ctto: ReadWrite<u32, Event::Register>,           \/\/ 0x110$/;"	m	struct:ClockRegisters
ctx_pfix	boards/imix/src/components/udp_6lowpan.rs	/^    ctx_pfix: [u8; 16],$/;"	m	struct:UDPComponent
ctx_pfix_len	boards/imix/src/components/udp_6lowpan.rs	/^    ctx_pfix_len: u8,$/;"	m	struct:UDPComponent
ctx_store	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    pub ctx_store: C,$/;"	m	struct:Sixlowpan
cur	kernel/src/common/list.rs	/^    cur: Option<&'a T>,$/;"	m	struct:ListIterator
current	capsules/src/ltc294x.rs	/^    fn current(&self, current: u16) {$/;"	F	implementation:LTC294XDriver
current	capsules/src/ltc294x.rs	/^    fn current(&self, current: u16);$/;"	F	interface:LTC294XClient
currentTheme	kernel/target/doc/storage.js	/^ *\/var currentTheme=document.getElementById("themeStyle");var mainTheme=document.getElementById/;"	v
current_app	capsules/src/app_flash_driver.rs	/^    current_app: OptionalCell<AppId>,$/;"	m	struct:AppFlash
current_app	capsules/src/ieee802154/driver.rs	/^    current_app: OptionalCell<AppId>,$/;"	m	struct:RadioDriver
current_app	capsules/src/net/udp/driver.rs	/^    current_app: Cell<Option<AppId>>,$/;"	m	struct:UDPDriver
current_app	capsules/src/ninedof.rs	/^    current_app: OptionalCell<AppId>,$/;"	m	struct:NineDof
current_idx	chips/nrf5x/src/aes.rs	/^    current_idx: Cell<usize>,$/;"	m	struct:AesECB
current_stack_pointer	kernel/src/process.rs	/^    current_stack_pointer: Cell<*const u8>,$/;"	m	struct:Process
current_state	chips/sam4l/src/flashcalw.rs	/^    current_state: Cell<FlashState>,$/;"	m	struct:FLASHCALW
current_test	capsules/src/test/aes_ccm.rs	/^    current_test: Cell<usize>,$/;"	m	struct:Test
current_user	capsules/src/nonvolatile_storage_driver.rs	/^    current_user: OptionalCell<NonvolatileUser>,$/;"	m	struct:NonvolatileStorage
cv	chips/sam4l/src/ast.rs	/^    cv: ReadWrite<u32, Value::Register>,$/;"	m	struct:AstRegisters
cwgr	chips/sam4l/src/i2c.rs	/^    cwgr: ReadWrite<u32, ClockWaveformGenerator::Register>,$/;"	m	struct:TWIMRegisters
dab	chips/nrf52/src/radio.rs	/^    dab: [ReadWrite<u32, DeviceAddressBase::Register>; 8],$/;"	m	struct:RadioRegisters
dab0	chips/nrf51/src/radio.rs	/^    dab0: ReadWrite<u32, DeviceAddressBaseSegment::Register>, \/\/ 0x600 - 0x604$/;"	m	struct:RadioRegisters
dab1	chips/nrf51/src/radio.rs	/^    dab1: ReadWrite<u32, DeviceAddressBaseSegment::Register>, \/\/ 0x604 - 0x608$/;"	m	struct:RadioRegisters
dab2	chips/nrf51/src/radio.rs	/^    dab2: ReadWrite<u32, DeviceAddressBaseSegment::Register>, \/\/ 0x608 - 0x60c$/;"	m	struct:RadioRegisters
dab3	chips/nrf51/src/radio.rs	/^    dab3: ReadWrite<u32, DeviceAddressBaseSegment::Register>, \/\/ 0x60c - 0x610$/;"	m	struct:RadioRegisters
dab4	chips/nrf51/src/radio.rs	/^    dab4: ReadWrite<u32, DeviceAddressBaseSegment::Register>, \/\/ 0x610 - 0x614$/;"	m	struct:RadioRegisters
dab5	chips/nrf51/src/radio.rs	/^    dab5: ReadWrite<u32, DeviceAddressBaseSegment::Register>, \/\/ 0x614 - 0x618$/;"	m	struct:RadioRegisters
dab6	chips/nrf51/src/radio.rs	/^    dab6: ReadWrite<u32, DeviceAddressBaseSegment::Register>, \/\/ 0x618 - 0x61c$/;"	m	struct:RadioRegisters
dab7	chips/nrf51/src/radio.rs	/^    dab7: ReadWrite<u32, DeviceAddressBaseSegment::Register>, \/\/ 0x61c - 0x620$/;"	m	struct:RadioRegisters
dac	boards/hail/src/main.rs	/^    dac: &'static capsules::dac::Dac<'static>,$/;"	m	struct:Hail
dac	capsules/src/dac.rs	/^    dac: &'a hil::dac::DacChannel,$/;"	m	struct:Dac
dac	capsules/src/lib.rs	/^pub mod dac;$/;"	n
dac	chips/sam4l/src/lib.rs	/^pub mod dac;$/;"	n
dac	kernel/src/hil/mod.rs	/^pub mod dac;$/;"	n
dacnf	chips/nrf51/src/radio.rs	/^    dacnf: ReadWrite<u32, Dacnf::Register>,      \/\/ 0x640 - 0x644$/;"	m	struct:RadioRegisters
dacnf	chips/nrf52/src/radio.rs	/^    dacnf: ReadWrite<u32, DeviceAddressMatch::Register>,$/;"	m	struct:RadioRegisters
dai	chips/nrf51/src/radio.rs	/^    dai: ReadOnly<u32, DeviceAddressIndex::Register>, \/\/ 0x410 - 0x414$/;"	m	struct:RadioRegisters
dai	chips/nrf52/src/radio.rs	/^    dai: ReadOnly<u32, DeviceAddressIndex::Register>,$/;"	m	struct:RadioRegisters
dap	chips/nrf52/src/radio.rs	/^    dap: [ReadWrite<u32, DeviceAddressPrefix::Register>; 8],$/;"	m	struct:RadioRegisters
dap0	chips/nrf51/src/radio.rs	/^    dap0: ReadWrite<u32, DeviceAddressPrefix::Register>, \/\/ 0x620 - 0x624$/;"	m	struct:RadioRegisters
dap1	chips/nrf51/src/radio.rs	/^    dap1: ReadWrite<u32, DeviceAddressPrefix::Register>, \/\/ 0x624 - 0x628$/;"	m	struct:RadioRegisters
dap2	chips/nrf51/src/radio.rs	/^    dap2: ReadWrite<u32, DeviceAddressPrefix::Register>, \/\/ 0x628 - 0x62c$/;"	m	struct:RadioRegisters
dap3	chips/nrf51/src/radio.rs	/^    dap3: ReadWrite<u32, DeviceAddressPrefix::Register>, \/\/ 0x62c - 0x630$/;"	m	struct:RadioRegisters
dap4	chips/nrf51/src/radio.rs	/^    dap4: ReadWrite<u32, DeviceAddressPrefix::Register>, \/\/ 0x630 - 0x634$/;"	m	struct:RadioRegisters
dap5	chips/nrf51/src/radio.rs	/^    dap5: ReadWrite<u32, DeviceAddressPrefix::Register>, \/\/ 0x634 - 0x638$/;"	m	struct:RadioRegisters
dap6	chips/nrf51/src/radio.rs	/^    dap6: ReadWrite<u32, DeviceAddressPrefix::Register>, \/\/ 0x638 - 0x63c$/;"	m	struct:RadioRegisters
dap7	chips/nrf51/src/radio.rs	/^    dap7: ReadWrite<u32, DeviceAddressPrefix::Register>, \/\/ 0x63c - 0x640$/;"	m	struct:RadioRegisters
data	capsules/src/test/aes.rs	/^    data: TakeCell<'a, [u8]>,$/;"	m	struct:TestAes128Cbc
data	capsules/src/test/aes.rs	/^    data: TakeCell<'a, [u8]>,$/;"	m	struct:TestAes128Ctr
data	chips/tm4c129x/src/gpio.rs	/^    data: VolatileCell<u32>, \/\/Verbesserungspotenzial Data Direction Operation$/;"	m	struct:GpioRegisters
data	kernel/src/grant.rs	/^    data: &'a mut T,$/;"	m	struct:Borrowed
data	kernel/src/grant.rs	/^    data: Unique<T>,$/;"	m	struct:Owned
data	kernel/src/ipc.rs	/^    data: Grant<IPCData>,$/;"	m	struct:IPC
data_len	capsules/src/ieee802154/framer.rs	/^    data_len: usize,$/;"	m	struct:FrameInfo
data_offset	capsules/src/ieee802154/framer.rs	/^    data_offset: usize,$/;"	m	struct:FrameInfo
data_sequence	capsules/src/ieee802154/framer.rs	/^    data_sequence: Cell<u8>,$/;"	m	struct:Framer
databufptr	chips/sam4l/src/aes.rs	/^    databufptr: ReadWrite<u32, DataBuf::Register>,   \/\/   0x08$/;"	m	struct:AesRegisters
datawhiteiv	chips/nrf51/src/radio.rs	/^    datawhiteiv: ReadWrite<u32, DataWhiteningIV::Register>, \/\/ 0x554 - 0x558$/;"	m	struct:RadioRegisters
datawhiteiv	chips/nrf52/src/radio.rs	/^    datawhiteiv: ReadWrite<u32, DataWhiteIv::Register>,$/;"	m	struct:RadioRegisters
dcgcacmp	chips/tm4c129x/src/sysctl.rs	/^    dcgcacmp: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcadc	chips/tm4c129x/src/sysctl.rs	/^    dcgcadc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgccan	chips/tm4c129x/src/sysctl.rs	/^    dcgccan: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcccm	chips/tm4c129x/src/sysctl.rs	/^    dcgcccm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcdma	chips/tm4c129x/src/sysctl.rs	/^    dcgcdma: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgceeprom	chips/tm4c129x/src/sysctl.rs	/^    dcgceeprom: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcemac	chips/tm4c129x/src/sysctl.rs	/^    dcgcemac: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcephy	chips/tm4c129x/src/sysctl.rs	/^    dcgcephy: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcepi	chips/tm4c129x/src/sysctl.rs	/^    dcgcepi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcgpio	chips/tm4c129x/src/sysctl.rs	/^    dcgcgpio: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgchib	chips/tm4c129x/src/sysctl.rs	/^    dcgchib: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgci2c	chips/tm4c129x/src/sysctl.rs	/^    dcgci2c: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcpwm	chips/tm4c129x/src/sysctl.rs	/^    dcgcpwm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcqei	chips/tm4c129x/src/sysctl.rs	/^    dcgcqei: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcssi	chips/tm4c129x/src/sysctl.rs	/^    dcgcssi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgctimer	chips/tm4c129x/src/sysctl.rs	/^    dcgctimer: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcuart	chips/tm4c129x/src/sysctl.rs	/^    dcgcuart: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcusb	chips/tm4c129x/src/sysctl.rs	/^    dcgcusb: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dcgcwd	chips/tm4c129x/src/sysctl.rs	/^    dcgcwd: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
debug	chips/sam4l/src/usbc/mod.rs	/^pub mod debug;$/;"	n
debug	kernel/src/debug.rs	/^macro_rules! debug {$/;"	M
debug	kernel/src/lib.rs	/^pub mod debug;$/;"	n
debug	kernel/src/process.rs	/^    debug: MapCell<ProcessDebug>,$/;"	m	struct:Process
debug	tools/usb/bulk-echo/src/main.rs	/^macro_rules! debug {$/;"	M
debug1	chips/sam4l/src/usbc/mod.rs	/^macro_rules! debug1 {$/;"	M
debug_dropped_callback_count	kernel/src/process.rs	/^    fn debug_dropped_callback_count(&self) -> usize {$/;"	F	implementation:Process
debug_dropped_callback_count	kernel/src/process.rs	/^    fn debug_dropped_callback_count(&self) -> usize;$/;"	F	interface:ProcessType
debug_flags	chips/sam4l/src/usbc/debug.rs	/^macro_rules! debug_flags {$/;"	M
debug_gpio	kernel/src/debug.rs	/^macro_rules! debug_gpio {$/;"	M
debug_process_restart	capsules/src/lib.rs	/^pub mod debug_process_restart;$/;"	n
debug_restart_count	kernel/src/process.rs	/^    fn debug_restart_count(&self) -> usize {$/;"	F	implementation:Process
debug_restart_count	kernel/src/process.rs	/^    fn debug_restart_count(&self) -> usize;$/;"	F	interface:ProcessType
debug_set_max_stack_depth	kernel/src/process.rs	/^    fn debug_set_max_stack_depth(&self) {$/;"	F	implementation:Process
debug_show_d0	chips/sam4l/src/usbc/mod.rs	/^    fn debug_show_d0(&self) {$/;"	F	implementation:Usbc
debug_syscall_count	kernel/src/process.rs	/^    fn debug_syscall_count(&self) -> usize {$/;"	F	implementation:Process
debug_syscall_count	kernel/src/process.rs	/^    fn debug_syscall_count(&self) -> usize;$/;"	F	interface:ProcessType
debug_timeslice_expiration_count	kernel/src/process.rs	/^    fn debug_timeslice_expiration_count(&self) -> usize {$/;"	F	implementation:Process
debug_timeslice_expiration_count	kernel/src/process.rs	/^    fn debug_timeslice_expiration_count(&self) -> usize;$/;"	F	interface:ProcessType
debug_timeslice_expired	kernel/src/process.rs	/^    fn debug_timeslice_expired(&self) {$/;"	F	implementation:Process
debug_timeslice_expired	kernel/src/process.rs	/^    fn debug_timeslice_expired(&self);$/;"	F	interface:ProcessType
debug_verbose	kernel/src/debug.rs	/^macro_rules! debug_verbose {$/;"	M
dec_consume	capsules/src/net/stream.rs	/^macro_rules! dec_consume {$/;"	M
dec_try	capsules/src/net/stream.rs	/^macro_rules! dec_try {$/;"	M
decode	capsules/src/ieee802154/driver.rs	/^    fn decode(buf: &[u8]) -> SResult<KeyDescriptor> {$/;"	F	implementation:KeyDescriptor
decode	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn decode(buf: &[u8]) -> SResult<ICMP6Header> {$/;"	F	implementation:ICMP6Header
decode	capsules/src/net/ieee802154.rs	/^    pub fn decode(buf: &[u8]) -> SResult<Security> {$/;"	F	implementation:Security
decode	capsules/src/net/ieee802154.rs	/^    pub fn decode(buf: &[u8], mode: AddressMode) -> SResult<Option<MacAddress>> {$/;"	F	implementation:MacAddress
decode	capsules/src/net/ieee802154.rs	/^    pub fn decode(buf: &[u8], mode: KeyIdMode) -> SResult<KeyId> {$/;"	F	implementation:KeyId
decode	capsules/src/net/ieee802154.rs	/^    pub fn decode<'b>(buf: &'b [u8]) -> SResult<HeaderIE<'b>> {$/;"	F	implementation:HeaderIE
decode	capsules/src/net/ieee802154.rs	/^    pub fn decode<'b>(buf: &'b [u8]) -> SResult<PayloadIE<'b>> {$/;"	F	implementation:PayloadIE
decode	capsules/src/net/ieee802154.rs	/^    pub fn decode<'b>(buf: &'b [u8], unsecured: bool) -> SResult<(Header<'b>, usize)> {$/;"	F	implementation:Header
decode	capsules/src/net/ip.rs	/^    pub fn decode(buf: &[u8]) -> SResult<IP6Header> {$/;"	F	implementation:IP6Header
decode	capsules/src/net/ipv6/ipv6.rs	/^    pub fn decode(buf: &[u8]) -> SResult<IP6Header> {$/;"	F	implementation:IP6Header
decode	capsules/src/net/thread/tlv.rs	/^    pub fn decode(buf: &[u8]) -> SResult<(NetworkDataTlv, bool)> {$/;"	F	implementation:NetworkDataTlv
decode	capsules/src/net/thread/tlv.rs	/^    pub fn decode(buf: &[u8]) -> SResult<(PrefixSubTlv, bool)> {$/;"	F	implementation:PrefixSubTlv
decode	capsules/src/net/thread/tlv.rs	/^    pub fn decode(buf: &[u8]) -> SResult<(ServiceSubTlv, bool)> {$/;"	F	implementation:ServiceSubTlv
decode	capsules/src/net/thread/tlv.rs	/^    pub fn decode(buf: &[u8]) -> SResult<BorderRouterTlvValue> {$/;"	F	implementation:BorderRouterTlvValue
decode	capsules/src/net/thread/tlv.rs	/^    pub fn decode(buf: &[u8]) -> SResult<ChannelMaskEntry> {$/;"	F	implementation:ChannelMaskEntry
decode	capsules/src/net/thread/tlv.rs	/^    pub fn decode(buf: &[u8]) -> SResult<HasRouteTlvValue> {$/;"	F	implementation:HasRouteTlvValue
decode	capsules/src/net/thread/tlv.rs	/^    pub fn decode(buf: &[u8]) -> SResult<NetworkManagementTlv> {$/;"	F	implementation:NetworkManagementTlv
decode	capsules/src/net/thread/tlv.rs	/^    pub fn decode(buf: &[u8]) -> SResult<Tlv> {$/;"	F	implementation:Tlv
decode	capsules/src/net/udp/udp.rs	/^    pub fn decode(buf: &[u8]) -> SResult<UDPHeader> {$/;"	F	implementation:UDPHeader
decode_addressing	capsules/src/net/ieee802154.rs	/^    pub fn decode_addressing($/;"	F	implementation:Header
decode_bytes	capsules/src/net/stream.rs	/^pub fn decode_bytes(buf: &[u8], out: &mut [u8]) -> SResult {$/;"	f
decode_bytes_be	capsules/src/net/stream.rs	/^pub fn decode_bytes_be(buf: &[u8], out: &mut [u8]) -> SResult {$/;"	f
decode_key_id	capsules/src/ieee802154/driver.rs	/^fn decode_key_id(buf: &[u8]) -> SResult<KeyId> {$/;"	f
decode_u16	capsules/src/net/stream.rs	/^pub fn decode_u16(buf: &[u8]) -> SResult<u16> {$/;"	f
decode_u32	capsules/src/net/stream.rs	/^pub fn decode_u32(buf: &[u8]) -> SResult<u32> {$/;"	f
decode_u8	capsules/src/net/stream.rs	/^pub fn decode_u8(buf: &[u8]) -> SResult<u8> {$/;"	f
decompress	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^pub fn decompress($/;"	f
decompress_cie	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn decompress_cie($/;"	f
decompress_dst	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn decompress_dst($/;"	f
decompress_hl	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn decompress_hl($/;"	f
decompress_iid_context	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn decompress_iid_context($/;"	f
decompress_iid_link_local	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn decompress_iid_link_local($/;"	f
decompress_multicast	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn decompress_multicast($/;"	f
decompress_nh	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn decompress_nh(iphc_header: u8, buf: &[u8], consumed: &mut usize) -> (bool, u8) {$/;"	f
decompress_src	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn decompress_src($/;"	f
decompress_tf	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn decompress_tf(ip6_header: &mut IP6Header, iphc_header: u8, buf: &[u8], consumed: &mut usize) /;"	f
decompress_udp_checksum	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn decompress_udp_checksum($/;"	f
decompress_udp_ports	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn decompress_udp_ports(udp_nhc: u8, buf: &[u8], consumed: &mut usize) -> (u16, u16) {$/;"	f
decrement	libraries/tock-cells/src/numeric_cell_ext.rs	/^    fn decrement(&self) {$/;"	f
decrement	libraries/tock-cells/src/numeric_cell_ext.rs	/^    fn decrement(&self);$/;"	F	interface:NumericCellExt
decrement_work	kernel/src/sched.rs	/^    crate fn decrement_work(&self) {$/;"	F	implementation:Kernel
deep_sleep_ready	chips/sam4l/src/pm.rs	/^pub fn deep_sleep_ready() -> bool {$/;"	f
default	arch/cortex-m/src/mpu.rs	/^    fn default() -> CortexMConfig {$/;"	F	implementation:CortexMConfig
default	arch/cortex-m/src/syscall.rs	/^    fn default() -> CortexMStoredState {$/;"	F	implementation:CortexMStoredState
default	capsules/src/alarm.rs	/^    fn default() -> AlarmData {$/;"	F	implementation:AlarmData
default	capsules/src/ble_advertising_driver.rs	/^    fn default() -> App {$/;"	F	implementation:App
default	capsules/src/ieee802154/driver.rs	/^    fn default() -> Self {$/;"	F	implementation:App
default	capsules/src/ieee802154/driver.rs	/^    fn default() -> Self {$/;"	F	implementation:DeviceDescriptor
default	capsules/src/ieee802154/driver.rs	/^    fn default() -> Self {$/;"	F	implementation:KeyDescriptor
default	capsules/src/net/ieee802154.rs	/^    fn default() -> Self {$/;"	F	implementation:HeaderIE
default	capsules/src/net/ieee802154.rs	/^    fn default() -> Self {$/;"	F	implementation:PayloadIE
default	capsules/src/net/ip.rs	/^    fn default() -> IP6Header {$/;"	F	implementation:IP6Header
default	capsules/src/net/ipv6/ipv6.rs	/^    fn default() -> IP6Header {$/;"	F	implementation:IP6Header
default	capsules/src/net/udp/udp.rs	/^    fn default() -> UDPHeader {$/;"	F	implementation:UDPHeader
default	capsules/src/ninedof.rs	/^    fn default() -> App {$/;"	F	implementation:App
default	capsules/src/nonvolatile_storage_driver.rs	/^    fn default() -> App {$/;"	F	implementation:App
default	capsules/src/usb.rs	/^    fn default() -> Self {$/;"	F	implementation:ConfigurationDescriptor
default	capsules/src/usb.rs	/^    fn default() -> Self {$/;"	F	implementation:DeviceDescriptor
default	capsules/src/usb.rs	/^    fn default() -> Self {$/;"	F	implementation:InterfaceDescriptor
default	capsules/src/usbc_client.rs	/^    fn default() -> Self {$/;"	F	implementation:State
default	chips/sam4l/src/crccu.rs	/^    const fn default() -> Self {$/;"	F	implementation:TCR
default	chips/sam4l/src/usbc/mod.rs	/^    fn default() -> Self {$/;"	F	implementation:EndpointState
default	kernel/src/ipc.rs	/^    fn default() -> IPCData {$/;"	F	implementation:IPCData
default	libraries/tock-cells/src/volatile_cell.rs	/^    fn default() -> Self {$/;"	F	implementation:VolatileCell
deferred_call	kernel/src/common/mod.rs	/^pub mod deferred_call;$/;"	n
deferred_call_tasks	chips/nrf52/src/lib.rs	/^mod deferred_call_tasks;$/;"	n
deferred_call_tasks	chips/sam4l/src/lib.rs	/^mod deferred_call_tasks;$/;"	n
definition	tools/svd2regs.py	/^        def definition(reg):$/;"	f	member:PeripheralStructField.fields	file:
defocusSearchBar	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
defs2	doc/courses/rustconf/presentation/ipc.svg	/^     id="defs2">$/;"	i
defs2	doc/courses/rustconf/rustconf.svg	/^     id="defs2">$/;"	i
defs4308	doc/courses/rustconf/console.svg	/^     id="defs4308">$/;"	i
delay_sleep	capsules/src/ieee802154/xmac.rs	/^    delay_sleep: Cell<bool>,$/;"	m	struct:XMac
delayed_in	capsules/src/usbc_client.rs	/^    delayed_in: Cell<bool>,$/;"	m	struct:Client
delayed_out	capsules/src/usbc_client.rs	/^    delayed_out: Cell<bool>,$/;"	m	struct:Client
den	chips/tm4c129x/src/gpio.rs	/^    den: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
deps	arch/riscv32i/target/debug/.fingerprint/bare-metal-24acc5d3590b7513/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0./;"	a
deps	arch/riscv32i/target/debug/.fingerprint/bare-metal-7dd6462cd7700cd7/lib-bare_metal-7dd6462cd7700cd7.json	/^{"rustc":10377385455325587324,"features":"[]","target":10318145944003877215,"profile":1187018370/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/bit_field-56ae9b63ca7874f1/lib-bit_field-56ae9b63ca7874f1.json	/^{"rustc":10377385455325587324,"features":"[]","target":6212214415640514931,"profile":11870183705/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/riscvregs-0c285ab8bbe41fa7/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"db/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/riscvregs-126b22abd70e245c/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0e/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/riscvregs-7b5528c14e2c7055/build-script-build_script_build-7b5528c14e2c7055.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/riscvregs-d6ebf6a6021a8976/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"78/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/riscvregs-e220008a48c83b01/build-script-build_script_build-e220008a48c83b01.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/riscvregs-e3787b41749bb5b0/build-script-build_script_build-e3787b41749bb5b0.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/semver-parser-1d01b4b0efb84ec1/lib-semver_parser-1d01b4b0efb84ec1.json	/^{"rustc":10377385455325587324,"features":"[]","target":11042536386261824010,"profile":1187018370/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	a
deps	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	a
deps	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	a
deps	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	a
deps	boards/hifive1/target/debug/.fingerprint/riscvregs-8a1ccaee318cf981/build-script-build_script_build-8a1ccaee318cf981.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	a
deps	boards/hifive1/target/debug/.fingerprint/riscvregs-e5cf2a660cb8088f/build-script-build_script_build-e5cf2a660cb8088f.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	a
deps	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	a
deps	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	a
deps	boards/hifive1/target/debug/.fingerprint/semver-parser-0cbc1426a8cfeede/lib-semver_parser-0cbc1426a8cfeede.json	/^{"rustc":4168008693276420879,"features":"[]","target":3650675185119913205,"profile":118386650091/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-3818320f62d4b526/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-5a31f60d1aed50ae/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-90db6ed0e5b8c3d4/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	a
deps	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	a
deps	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	a
deps	kernel/target/debug/.fingerprint/tock-cells-816571e4fa975f6b/doc-lib-tock_cells-816571e4fa975f6b.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":3062756892/;"	a
deps	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	a
deps	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	a
deps	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	a
deps	kernel/target/debug/.fingerprint/tock-registers-e7eec879e9fa92db/doc-lib-tock_registers-e7eec879e9fa92db.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":30627568924/;"	a
deps	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	a
dequeue	kernel/src/common/queue.rs	/^    fn dequeue(&mut self) -> Option<T>;$/;"	F	interface:Queue
dequeue	kernel/src/common/ring_buffer.rs	/^    fn dequeue(&mut self) -> Option<T> {$/;"	F	implementation:RingBuffer
dequeue_task	kernel/src/process.rs	/^    fn dequeue_task(&self) -> Option<Task> {$/;"	F	implementation:Process
dequeue_task	kernel/src/process.rs	/^    fn dequeue_task(&self) -> Option<Task>;$/;"	F	interface:ProcessType
deref	kernel/src/common/static_ref.rs	/^    fn deref(&self) -> &'static T {$/;"	F	implementation:StaticRef
deref	kernel/src/grant.rs	/^    fn deref(&self) -> &T {$/;"	F	implementation:Borrowed
deref	kernel/src/grant.rs	/^    fn deref(&self) -> &T {$/;"	F	implementation:Owned
deref	kernel/src/mem.rs	/^    fn deref(&self) -> &T {$/;"	F	implementation:AppPtr
deref_mut	kernel/src/grant.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	F	implementation:Borrowed
deref_mut	kernel/src/grant.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	F	implementation:Owned
deref_mut	kernel/src/mem.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	F	implementation:AppPtr
desc	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:buildIndex.row
descriptor	chips/sam4l/src/crccu.rs	/^    fn descriptor(&self) -> *mut Descriptor {$/;"	F	implementation:Crccu
descriptor_buf	capsules/src/usbc_client.rs	/^    fn descriptor_buf(&'a self) -> &'a [Cell<u8>] {$/;"	F	implementation:Client
descriptor_space	chips/sam4l/src/crccu.rs	/^    descriptor_space: [u8; DSCR_RESERVE],$/;"	m	struct:Crccu
descriptor_storage	capsules/src/usbc_client.rs	/^    descriptor_storage: [Cell<u8>; DESCRIPTOR_BUFLEN],$/;"	m	struct:Client
descriptors	chips/sam4l/src/usbc/mod.rs	/^    descriptors: [Endpoint; N_ENDPOINTS],$/;"	m	struct:Usbc
dest	chips/sam4l/src/aes.rs	/^    dest: TakeCell<'a, [u8]>,$/;"	m	struct:Aes
detach	boards/imix/src/power.rs	/^    fn detach(&self) {$/;"	F	implementation:DetachablePin
detach	chips/sam4l/src/usbc/mod.rs	/^    fn detach(&self) {$/;"	F	implementation:Usbc
detach	kernel/src/hil/usb.rs	/^    fn detach(&self);$/;"	F	interface:UsbController
detachable_pins	boards/imix/src/power.rs	/^    detachable_pins: &'a [DetachablePin],$/;"	m	struct:Submodule
details	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
detect_changes	capsules/src/sdcard.rs	/^    pub fn detect_changes(&self) {$/;"	F	implementation:SDCard
detect_mode	chips/nrf5x/src/gpio.rs	/^    detect_mode: ReadWrite<u32, DetectMode::Register>,$/;"	m	struct:GpioRegisters
detect_pin	capsules/src/sdcard.rs	/^    detect_pin: Cell<Option<&'static hil::gpio::Pin>>,$/;"	m	struct:SDCard
dev_id	boards/imix/src/i2c_dummy.rs	/^    dev_id: Cell<u8>,$/;"	m	struct:ScanClient
dev_id	boards/launchxl/src/i2c_tests.rs	/^    dev_id: Cell<u8>,$/;"	m	struct:ScanClient
device	capsules/src/ieee802154/mod.rs	/^pub mod device;$/;"	n
device	capsules/src/test/virtual_uart.rs	/^    device: &'static UartDevice<'static>,$/;"	m	struct:TestVirtualUartReceive
device_procedure	capsules/src/ieee802154/framer.rs	/^    device_procedure: OptionalCell<&'a DeviceProcedure>,$/;"	m	struct:Framer
device_release	capsules/src/usb.rs	/^    pub device_release: u16,$/;"	m	struct:DeviceDescriptor
deviceaddr0	chips/nrf52/src/ficr.rs	/^    deviceaddr0: ReadOnly<u32, DeviceAddress0::Register>,$/;"	m	struct:FicrRegisters
deviceaddr1	chips/nrf52/src/ficr.rs	/^    deviceaddr1: ReadOnly<u32, DeviceAddress1::Register>,$/;"	m	struct:FicrRegisters
deviceaddrtype	chips/nrf52/src/ficr.rs	/^    deviceaddrtype: ReadOnly<u32, DeviceAddressType::Register>,$/;"	m	struct:FicrRegisters
deviceid0	chips/nrf52/src/ficr.rs	/^    deviceid0: ReadOnly<u32, DeviceId0::Register>,$/;"	m	struct:FicrRegisters
deviceid1	chips/nrf52/src/ficr.rs	/^    deviceid1: ReadOnly<u32, DeviceId1::Register>,$/;"	m	struct:FicrRegisters
devices	capsules/src/virtual_i2c.rs	/^    devices: List<'a, I2CDevice<'a>>,$/;"	m	struct:MuxI2C
devices	capsules/src/virtual_spi.rs	/^    devices: List<'a, VirtualSpiMasterDevice<'a, Spi>>,$/;"	m	struct:MuxSpiMaster
devices	capsules/src/virtual_uart.rs	/^    devices: List<'a, UartDevice<'a>>,$/;"	m	struct:UartMux
devmatch	chips/nrf51/src/radio.rs	/^    devmatch: ReadWrite<u32, Event::Register>,   \/\/ 0x114 ---> 0x118$/;"	m	struct:RadioRegisters
devmiss	chips/nrf51/src/radio.rs	/^    devmiss: ReadWrite<u32, Event::Register>,    \/\/ 0x118 ---> 0x11c$/;"	m	struct:RadioRegisters
dfll0conf	chips/sam4l/src/scif.rs	/^    dfll0conf: ReadWrite<u32, Dfll::Register>,$/;"	m	struct:ScifRegisters
dfll0mul	chips/sam4l/src/scif.rs	/^    dfll0mul: ReadWrite<u32>,$/;"	m	struct:ScifRegisters
dfll0ratio	chips/sam4l/src/scif.rs	/^    dfll0ratio: ReadOnly<u32>,$/;"	m	struct:ScifRegisters
dfll0ssg	chips/sam4l/src/scif.rs	/^    dfll0ssg: ReadWrite<u32>,$/;"	m	struct:ScifRegisters
dfll0step	chips/sam4l/src/scif.rs	/^    dfll0step: ReadWrite<u32, DfllStep::Register>,$/;"	m	struct:ScifRegisters
dfll0sync	chips/sam4l/src/scif.rs	/^    dfll0sync: WriteOnly<u32>,$/;"	m	struct:ScifRegisters
dfll0val	chips/sam4l/src/scif.rs	/^    dfll0val: ReadWrite<u32>,$/;"	m	struct:ScifRegisters
dfn	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
dfr	arch/cortex-m/src/scb.rs	/^    dfr: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
dfsr	arch/cortex-m/src/scb.rs	/^    dfsr: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
dgram_offset	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    dgram_offset: Cell<usize>,$/;"	m	struct:TxState
dgram_size	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    dgram_size: Cell<u16>,$/;"	m	struct:RxState
dgram_size	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    dgram_size: Cell<u16>,$/;"	m	struct:TxState
dgram_tag	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    dgram_tag: Cell<u16>, \/\/ Used to identify particular fragment streams$/;"	m	struct:TxState
dgram_tag	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    dgram_tag: Cell<u16>,$/;"	m	struct:RxState
did0	chips/tm4c129x/src/sysctl.rs	/^    did0: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
did1	chips/tm4c129x/src/sysctl.rs	/^    did1: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
din	chips/cc26x2/src/gpio.rs	/^    pub din: ReadWrite<u32>,$/;"	m	struct:GpioRegisters
dir	chips/nrf5x/src/gpio.rs	/^    dir: ReadWrite<u32, Dir::Register>,$/;"	m	struct:GpioRegisters
dir	chips/tm4c129x/src/gpio.rs	/^    dir: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
dirclr	chips/nrf5x/src/gpio.rs	/^    dirclr: ReadWrite<u32, DirClr::Register>,$/;"	m	struct:GpioRegisters
dirset	chips/nrf5x/src/gpio.rs	/^    dirset: ReadWrite<u32, DirSet::Register>,$/;"	m	struct:GpioRegisters
disable	arch/cortex-m/src/nvic.rs	/^    pub fn disable(&self) {$/;"	F	implementation:Nvic
disable	capsules/src/mcp230xx.rs	/^    fn disable(&self, pin: usize) -> ReturnCode {$/;"	F	implementation:MCP230xx
disable	capsules/src/virtual_alarm.rs	/^    fn disable(&self) {$/;"	F	implementation:VirtualMuxAlarm
disable	capsules/src/virtual_i2c.rs	/^    fn disable(&self) {$/;"	F	implementation:I2CDevice
disable	capsules/src/virtual_i2c.rs	/^    fn disable(&self) {$/;"	F	implementation:MuxI2C
disable	chips/cc26x2/src/gpio.rs	/^    fn disable(&self) {$/;"	F	implementation:GPIOPin
disable	chips/cc26x2/src/i2c.rs	/^    fn disable(&self) {$/;"	F	implementation:I2CMaster
disable	chips/cc26x2/src/rtc.rs	/^    fn disable(&self) {$/;"	F	implementation:Rtc
disable	chips/cc26x2/src/uart.rs	/^    fn disable(&self) {$/;"	F	implementation:UART
disable	chips/nrf51/src/i2c.rs	/^    fn disable(&self) {$/;"	F	implementation:TWIM
disable	chips/nrf51/src/i2c.rs	/^    pub fn disable(&self) {$/;"	F	implementation:TWIM
disable	chips/nrf51/src/radio.rs	/^    disable: WriteOnly<u32, Task::Register>,     \/\/ 0x010 ---> 0x014$/;"	m	struct:RadioRegisters
disable	chips/nrf52/src/i2c.rs	/^    fn disable(&self) {$/;"	F	implementation:TWIM
disable	chips/nrf52/src/i2c.rs	/^    pub fn disable(&self) {$/;"	F	implementation:TWIM
disable	chips/nrf52/src/ppi.rs	/^    pub fn disable(&self, channels: FieldValue<u32, Channel::Register>) {$/;"	F	implementation:Ppi
disable	chips/nrf52/src/spi.rs	/^    pub fn disable(&self) {$/;"	F	implementation:SPIM
disable	chips/nrf5x/src/aes.rs	/^    fn disable(&self) {$/;"	F	implementation:AesECB
disable	chips/nrf5x/src/gpio.rs	/^    fn disable(&self) {$/;"	F	implementation:GPIOPin
disable	chips/nrf5x/src/rtc.rs	/^    fn disable(&self) {$/;"	F	implementation:Rtc
disable	chips/nrf5x/src/timer.rs	/^    fn disable(&self) {$/;"	F	implementation:TimerAlarm
disable	chips/sam4l/src/acifc.rs	/^    fn disable(&self) {$/;"	F	implementation:Acifc
disable	chips/sam4l/src/aes.rs	/^    fn disable(&self) {$/;"	F	implementation:Aes
disable	chips/sam4l/src/ast.rs	/^    fn disable(&self) {$/;"	F	implementation:Ast
disable	chips/sam4l/src/crccu.rs	/^    fn disable(&self) {$/;"	F	implementation:Crccu
disable	chips/sam4l/src/dma.rs	/^    pub fn disable(&self) {$/;"	F	implementation:DMAChannel
disable	chips/sam4l/src/gpio.rs	/^    fn disable(&self) {$/;"	F	implementation:GPIOPin
disable	chips/sam4l/src/gpio.rs	/^    pub fn disable(&self) {$/;"	F	implementation:GPIOPin
disable	chips/sam4l/src/i2c.rs	/^    fn disable(&self) {$/;"	F	implementation:I2CHw
disable	chips/sam4l/src/i2c.rs	/^    fn disable(&self) {$/;"	F	implementation:TWIMClock
disable	chips/sam4l/src/i2c.rs	/^    fn disable(&self) {$/;"	F	implementation:TWISClock
disable	chips/sam4l/src/pm.rs	/^    fn disable(&self) {$/;"	F	implementation:Clock
disable	chips/sam4l/src/spi.rs	/^    fn disable(&self) {$/;"	F	implementation:SpiHw
disable	chips/sifive/src/gpio.rs	/^    fn disable(&self) {$/;"	F	implementation:GpioPin
disable	chips/sifive/src/pwm.rs	/^    pub fn disable(&self) {$/;"	F	implementation:Pwm
disable	chips/sifive/src/rtc.rs	/^    pub fn disable(&self) {$/;"	F	implementation:Rtc
disable	chips/sifive/src/watchdog.rs	/^    pub fn disable(&self) {$/;"	F	implementation:Watchdog
disable	chips/tm4c129x/src/gpio.rs	/^    fn disable(&self) {$/;"	F	implementation:GPIOPin
disable	chips/tm4c129x/src/gpt.rs	/^    fn disable(&self) {$/;"	F	implementation:AlarmTimer
disable	kernel/src/hil/crc.rs	/^    fn disable(&self);$/;"	F	interface:CRC
disable	kernel/src/hil/gpio.rs	/^    fn disable(&self);$/;"	F	interface:Pin
disable	kernel/src/hil/gpio_async.rs	/^    fn disable(&self, pin: usize) -> ReturnCode;$/;"	F	interface:Port
disable	kernel/src/hil/i2c.rs	/^    fn disable(&self);$/;"	F	interface:I2CDevice
disable	kernel/src/hil/i2c.rs	/^    fn disable(&self);$/;"	F	interface:I2CMaster
disable	kernel/src/hil/i2c.rs	/^    fn disable(&self);$/;"	F	interface:I2CSlave
disable	kernel/src/hil/symmetric_encryption.rs	/^    fn disable(&self);$/;"	F	interface:AES128
disable	kernel/src/hil/time.rs	/^    fn disable(&self);$/;"	F	interface:Time
disable	kernel/src/platform/mod.rs	/^    fn disable(&self) {}$/;"	F	implementation:NoClockControl
disable	kernel/src/platform/mod.rs	/^    fn disable(&self);$/;"	F	interface:ClockInterface
disable_alarm_irq	chips/sam4l/src/ast.rs	/^    fn disable_alarm_irq(&self) {$/;"	F	implementation:Ast
disable_all	arch/cortex-m/src/nvic.rs	/^pub unsafe fn disable_all() {$/;"	f
disable_all	arch/riscv32i/src/plic.rs	/^pub unsafe fn disable_all() {$/;"	f
disable_all_interrupts	chips/nrf52/src/radio.rs	/^    pub fn disable_all_interrupts(&self) {$/;"	F	implementation:Radio
disable_alternate	chips/tm4c129x/src/gpio.rs	/^    pub fn disable_alternate(&self) {$/;"	F	implementation:GPIOPin
disable_analog	chips/tm4c129x/src/gpio.rs	/^    pub fn disable_analog(&self) {$/;"	F	implementation:GPIOPin
disable_clock	chips/sam4l/src/acifc.rs	/^    fn disable_clock(&self) {$/;"	F	implementation:Acifc
disable_clock	chips/sam4l/src/aes.rs	/^    fn disable_clock(&self) {$/;"	F	implementation:Aes
disable_clock	chips/sam4l/src/pm.rs	/^pub fn disable_clock(clock: Clock) {$/;"	f
disable_dfll_rc32k	chips/sam4l/src/scif.rs	/^pub unsafe fn disable_dfll_rc32k() {$/;"	f
disable_digital	chips/tm4c129x/src/gpio.rs	/^    pub fn disable_digital(&self) {$/;"	F	implementation:GPIOPin
disable_domain	chips/cc26x2/src/prcm.rs	/^    pub fn disable_domain(domain: PowerDomain) {$/;"	F	implementation:Power
disable_gpt	chips/cc26x2/src/prcm.rs	/^    pub fn disable_gpt() {$/;"	F	implementation:Clock
disable_input_interrupt	chips/sam4l/src/aes.rs	/^    fn disable_input_interrupt(&self) {$/;"	F	implementation:Aes
disable_interrupt	capsules/src/mcp230xx.rs	/^    fn disable_interrupt(&self, pin: usize) -> ReturnCode {$/;"	F	implementation:MCP230xx
disable_interrupt	chips/cc26x2/src/gpio.rs	/^    fn disable_interrupt(&self) {$/;"	F	implementation:GPIOPin
disable_interrupt	chips/cc26x2/src/gpio.rs	/^    pub fn disable_interrupt(&self) {$/;"	F	implementation:GPIOPin
disable_interrupt	chips/nrf5x/src/gpio.rs	/^    fn disable_interrupt(&self) {$/;"	F	implementation:GPIOPin
disable_interrupt	chips/sam4l/src/gpio.rs	/^    fn disable_interrupt(&self) {$/;"	F	implementation:GPIOPin
disable_interrupt	chips/sam4l/src/gpio.rs	/^    pub fn disable_interrupt(&self) {$/;"	F	implementation:GPIOPin
disable_interrupt	chips/sifive/src/gpio.rs	/^    fn disable_interrupt(&self) {$/;"	F	implementation:GpioPin
disable_interrupt	chips/tm4c129x/src/gpio.rs	/^    fn disable_interrupt(&self) {$/;"	F	implementation:GPIOPin
disable_interrupt	chips/tm4c129x/src/gpio.rs	/^    pub fn disable_interrupt(&self) {$/;"	F	implementation:GPIOPin
disable_interrupt	kernel/src/hil/gpio.rs	/^    fn disable_interrupt(&self);$/;"	F	interface:Pin
disable_interrupt	kernel/src/hil/gpio_async.rs	/^    fn disable_interrupt(&self, pin: usize) -> ReturnCode;$/;"	F	interface:Port
disable_interrupt_pin	capsules/src/mcp230xx.rs	/^    fn disable_interrupt_pin(&self, pin_number: u8) -> ReturnCode {$/;"	F	implementation:MCP230xx
disable_interrupts	capsules/src/tmp006.rs	/^    fn disable_interrupts(&self) {$/;"	F	implementation:TMP006
disable_interrupts	chips/nrf51/src/radio.rs	/^    pub fn disable_interrupts(&self) {$/;"	F	implementation:Radio
disable_interrupts	chips/nrf5x/src/aes.rs	/^    fn disable_interrupts(&self) {$/;"	F	implementation:AesECB
disable_interrupts	chips/nrf5x/src/temperature.rs	/^    fn disable_interrupts(&self) {$/;"	F	implementation:Temp
disable_interrupts	chips/nrf5x/src/timer.rs	/^    fn disable_interrupts(&self) {$/;"	F	implementation:TimerAlarm
disable_interrupts	chips/nrf5x/src/trng.rs	/^    fn disable_interrupts(&self) {$/;"	F	implementation:Trng
disable_interrupts	chips/sam4l/src/aes.rs	/^    fn disable_interrupts(&self) {$/;"	F	implementation:Aes
disable_interrupts	chips/sam4l/src/i2c.rs	/^    fn disable_interrupts(&self, twim: &TWIMRegisterManager) {$/;"	F	implementation:I2CHw
disable_interrupts	chips/sam4l/src/usart.rs	/^    fn disable_interrupts(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
disable_interrupts	chips/tm4c129x/src/gpt.rs	/^    fn disable_interrupts(&self) {$/;"	F	implementation:AlarmTimer
disable_mpu	arch/cortex-m/src/mpu.rs	/^    fn disable_mpu(&self) {$/;"	F	implementation:MPU
disable_mpu	kernel/src/platform/mpu.rs	/^    fn disable_mpu(&self) {}$/;"	F	interface:MPU
disable_opendrain	chips/tm4c129x/src/gpio.rs	/^    pub fn disable_opendrain(&self) {$/;"	F	implementation:GPIOPin
disable_osc_16mhz	chips/sam4l/src/scif.rs	/^pub unsafe fn disable_osc_16mhz() {$/;"	f
disable_output	chips/sam4l/src/gpio.rs	/^    pub fn disable_output(&self) {$/;"	F	implementation:GPIOPin
disable_output	chips/tm4c129x/src/gpio.rs	/^    pub fn disable_output(&self) {$/;"	F	implementation:GPIOPin
disable_pll	chips/sam4l/src/scif.rs	/^pub unsafe fn disable_pll() {$/;"	f
disable_pull_down	chips/sam4l/src/gpio.rs	/^    pub fn disable_pull_down(&self) {$/;"	F	implementation:GPIOPin
disable_pull_down	chips/tm4c129x/src/gpio.rs	/^    pub fn disable_pull_down(&self) {$/;"	F	implementation:GPIOPin
disable_pull_up	chips/sam4l/src/gpio.rs	/^    pub fn disable_pull_up(&self) {$/;"	F	implementation:GPIOPin
disable_pull_up	chips/tm4c129x/src/gpio.rs	/^    pub fn disable_pull_up(&self) {$/;"	F	implementation:GPIOPin
disable_rc_1mhz	chips/sam4l/src/bscif.rs	/^pub unsafe fn disable_rc_1mhz() {$/;"	f
disable_rc_80mhz	chips/sam4l/src/scif.rs	/^pub unsafe fn disable_rc_80mhz() {$/;"	f
disable_rcfast	chips/sam4l/src/scif.rs	/^pub unsafe fn disable_rcfast() {$/;"	f
disable_rfc	chips/cc26x2/src/prcm.rs	/^    pub fn disable_rfc() {$/;"	F	implementation:Clock
disable_rx	chips/sam4l/src/usart.rs	/^    fn disable_rx(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
disable_rx_interrupts	chips/nrf51/src/uart.rs	/^    pub fn disable_rx_interrupts(&self) {$/;"	F	implementation:UART
disable_rx_interrupts	chips/nrf52/src/uart.rs	/^    fn disable_rx_interrupts(&self) {$/;"	F	implementation:Uarte
disable_rx_interrupts	chips/sam4l/src/usart.rs	/^    fn disable_rx_interrupts(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
disable_rx_timeout	chips/sam4l/src/usart.rs	/^    fn disable_rx_timeout(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
disable_schmidtt_trigger	chips/sam4l/src/gpio.rs	/^    pub fn disable_schmidtt_trigger(&self) {$/;"	F	implementation:GPIOPin
disable_sensor	capsules/src/tmp006.rs	/^    fn disable_sensor(&self, temperature: Option<f32>) {$/;"	F	implementation:TMP006
disable_system_clock	chips/sam4l/src/pm.rs	/^    pub unsafe fn disable_system_clock(&self, clock_source: SystemClockSource) {$/;"	F	implementation:PowerManager
disable_tx	chips/sam4l/src/usart.rs	/^    fn disable_tx(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
disable_tx_empty_interrupt	chips/sam4l/src/usart.rs	/^    fn disable_tx_empty_interrupt(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
disable_tx_interrupt	chips/sifive/src/uart.rs	/^    fn disable_tx_interrupt(&self) {$/;"	F	implementation:Uart
disable_tx_interrupts	chips/nrf51/src/uart.rs	/^    pub fn disable_tx_interrupts(&self) {$/;"	F	implementation:UART
disable_tx_interrupts	chips/nrf52/src/uart.rs	/^    fn disable_tx_interrupts(&self) {$/;"	F	implementation:Uarte
disable_tx_interrupts	chips/sam4l/src/usart.rs	/^    fn disable_tx_interrupts(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
disable_tx_interrupts	chips/tm4c129x/src/uart.rs	/^    fn disable_tx_interrupts(&self) {$/;"	F	implementation:UART
disable_uart	chips/nrf52/src/uart.rs	/^    fn disable_uart(&self) {$/;"	F	implementation:Uarte
disable_uarts	chips/cc26x2/src/prcm.rs	/^    pub fn disable_uarts() {$/;"	F	implementation:Clock
disabled	chips/nrf51/src/radio.rs	/^    disabled: ReadWrite<u32, Event::Register>,   \/\/ 0x110 ---> 0x114$/;"	m	struct:RadioRegisters
discard_all_state	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn discard_all_state(&self) {$/;"	F	implementation:Sixlowpan
displayHelp	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
div	chips/sifive/src/uart.rs	/^    div: ReadWrite<u32, div::Register>,$/;"	m	struct:UartRegisters
div.item-list .out-of-band	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
divsclk	chips/tm4c129x/src/sysctl.rs	/^    divsclk: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dma	chips/sam4l/src/i2c.rs	/^    dma: OptionalCell<&'static DMAChannel>,$/;"	m	struct:I2CHw
dma	chips/sam4l/src/lib.rs	/^pub mod dma;$/;"	n
dma_length	chips/sam4l/src/spi.rs	/^    dma_length: Cell<usize>,$/;"	m	struct:SpiHw
dma_pids	chips/sam4l/src/i2c.rs	/^    dma_pids: (DMAPeripheral, DMAPeripheral),$/;"	m	struct:I2CHw
dma_read	chips/sam4l/src/spi.rs	/^    dma_read: OptionalCell<&'static DMAChannel>,$/;"	m	struct:SpiHw
dma_running	chips/sam4l/src/adc.rs	/^    dma_running: Cell<bool>,$/;"	m	struct:Adc
dma_write	chips/sam4l/src/spi.rs	/^    dma_write: OptionalCell<&'static DMAChannel>,$/;"	m	struct:SpiHw
dmactl	chips/cc26x2/src/uart.rs	/^    dmactl: ReadWrite<u32>,$/;"	m	struct:UartRegisters
dmactl	chips/tm4c129x/src/gpio.rs	/^    dmactl: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
dmactl	chips/tm4c129x/src/uart.rs	/^    dmactl: VolatileCell<u32>,$/;"	m	struct:UartRegisters
dmadis	chips/sam4l/src/crccu.rs	/^    dmadis: WriteOnly<u32, DmaDisable::Register>,$/;"	m	struct:CrccuRegisters
dmaen	chips/sam4l/src/crccu.rs	/^    dmaen: WriteOnly<u32, DmaEnable::Register>,$/;"	m	struct:CrccuRegisters
dmaev	chips/tm4c129x/src/gpt.rs	/^    dmaev: VolatileCell<u32>,$/;"	m	struct:GptRegisters
dmaidr	chips/sam4l/src/crccu.rs	/^    dmaidr: WriteOnly<u32, DmaInterrupt::Register>,$/;"	m	struct:CrccuRegisters
dmaier	chips/sam4l/src/crccu.rs	/^    dmaier: WriteOnly<u32, DmaInterrupt::Register>,$/;"	m	struct:CrccuRegisters
dmaimr	chips/sam4l/src/crccu.rs	/^    dmaimr: ReadOnly<u32, DmaInterrupt::Register>,$/;"	m	struct:CrccuRegisters
dmaisr	chips/sam4l/src/crccu.rs	/^    dmaisr: ReadOnly<u32, DmaInterrupt::Register>,$/;"	m	struct:CrccuRegisters
dmasr	chips/sam4l/src/crccu.rs	/^    dmasr: ReadOnly<u32, DmaStatus::Register>,$/;"	m	struct:CrccuRegisters
do_next_op	capsules/src/virtual_flash.rs	/^    fn do_next_op(&self) {$/;"	F	implementation:MuxFlash
do_next_op	capsules/src/virtual_i2c.rs	/^    fn do_next_op(&self) {$/;"	F	implementation:MuxI2C
do_next_op	capsules/src/virtual_spi.rs	/^    fn do_next_op(&self) {$/;"	F	implementation:MuxSpiMaster
do_next_op	capsules/src/virtual_uart.rs	/^    fn do_next_op(&self) {$/;"	F	implementation:UartMux
do_next_op_async	capsules/src/ieee802154/virtual_mac.rs	/^    fn do_next_op_async(&self) {$/;"	F	implementation:MuxMac
do_next_op_sync	capsules/src/ieee802154/virtual_mac.rs	/^    fn do_next_op_sync($/;"	F	implementation:MuxMac
do_next_read_write	capsules/src/spi.rs	/^    fn do_next_read_write(&self, app: &mut App) {$/;"	F	implementation:Spi
do_next_read_write	capsules/src/spi.rs	/^    fn do_next_read_write(&self, app: &mut SlaveApp) {$/;"	F	implementation:SpiSlave
do_next_tx_async	capsules/src/ieee802154/driver.rs	/^    fn do_next_tx_async(&self) {$/;"	F	implementation:RadioDriver
do_next_tx_immediate	capsules/src/net/udp/driver.rs	/^    fn do_next_tx_immediate(&self, new_appid: AppId) -> ReturnCode {$/;"	F	implementation:UDPDriver
do_next_tx_queued	capsules/src/net/udp/driver.rs	/^    fn do_next_tx_queued(&self) {$/;"	F	implementation:UDPDriver
do_next_tx_sync	capsules/src/ieee802154/driver.rs	/^    fn do_next_tx_sync(&self, new_appid: AppId) -> ReturnCode {$/;"	F	implementation:RadioDriver
do_process	kernel/src/sched.rs	/^    unsafe fn do_process<P: Platform, C: Chip>($/;"	F	implementation:Kernel
do_transfer	chips/sam4l/src/dma.rs	/^    pub fn do_transfer(&self, pid: DMAPeripheral, buf: &'static mut [u8], len: usize) {$/;"	F	implementation:DMAChannel
do_with_app	capsules/src/ieee802154/driver.rs	/^    fn do_with_app<F>(&self, appid: AppId, closure: F) -> ReturnCode$/;"	F	implementation:RadioDriver
do_with_app	capsules/src/net/udp/driver.rs	/^    fn do_with_app<F>(&self, appid: AppId, closure: F) -> ReturnCode$/;"	F	implementation:UDPDriver
do_with_cfg	capsules/src/ieee802154/driver.rs	/^    fn do_with_cfg<F>(&self, appid: AppId, len: usize, closure: F) -> ReturnCode$/;"	F	implementation:RadioDriver
do_with_cfg	capsules/src/net/udp/driver.rs	/^    fn do_with_cfg<F>(&self, appid: AppId, len: usize, closure: F) -> ReturnCode$/;"	F	implementation:UDPDriver
do_with_cfg_mut	capsules/src/ieee802154/driver.rs	/^    fn do_with_cfg_mut<F>(&self, appid: AppId, len: usize, closure: F) -> ReturnCode$/;"	F	implementation:RadioDriver
do_with_cfg_mut	capsules/src/net/udp/driver.rs	/^    fn do_with_cfg_mut<F>(&self, appid: AppId, len: usize, closure: F) -> ReturnCode$/;"	F	implementation:UDPDriver
do_with_rx_cfg	capsules/src/net/udp/driver.rs	/^    fn do_with_rx_cfg<F>(&self, appid: AppId, closure: F) -> ReturnCode$/;"	F	implementation:UDPDriver
do_with_rx_cfg_mut	capsules/src/net/udp/driver.rs	/^    fn do_with_rx_cfg_mut<F>(&self, appid: AppId, len: usize, closure: F) -> ReturnCode$/;"	F	implementation:UDPDriver
doc	kernel/target/doc/search-index.js	/^searchIndex["tock_cells"]={"doc":"Tock Cell types.","items":[[0,"map_cell","tock_cells","Tock sp/;"	p	class:searchIndex
doc	kernel/target/doc/search-index.js	/^searchIndex["tock_registers"]={"doc":"Tock Register Interface","items":[[0,"macros","tock_regist/;"	p	class:searchIndex
doe	chips/cc26x2/src/gpio.rs	/^    pub doe: ReadWrite<u32>,$/;"	m	struct:GpioRegisters
done	capsules/src/fm25cl.rs	/^    fn done(&self, buffer: &'static mut [u8]);$/;"	F	interface:FM25CLClient
done	capsules/src/gpio_async.rs	/^    fn done(&self, value: usize) {$/;"	F	implementation:GPIOAsync
done	capsules/src/ltc294x.rs	/^    fn done(&self) {$/;"	F	implementation:LTC294XDriver
done	capsules/src/ltc294x.rs	/^    fn done(&self);$/;"	F	interface:LTC294XClient
done	capsules/src/net/stream.rs	/^    pub fn done(self) -> Option<(usize, Output)> {$/;"	F	implementation:SResult
done	chips/nrf51/src/clock.rs	/^    done: ReadWrite<u32, Event::Register>,           \/\/ 0x10c$/;"	m	struct:ClockRegisters
done	kernel/src/hil/gpio_async.rs	/^    fn done(&self, value: usize);$/;"	F	interface:Client
dontValidate	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:results
dontValidate	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:results_in_args
dontValidate	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:results_returned
dout_clr	chips/cc26x2/src/gpio.rs	/^    pub dout_clr: WriteOnly<u32>,$/;"	m	struct:GpioRegisters
dout_set	chips/cc26x2/src/gpio.rs	/^    pub dout_set: WriteOnly<u32>,$/;"	m	struct:GpioRegisters
dout_tgl	chips/cc26x2/src/gpio.rs	/^    pub dout_tgl: WriteOnly<u32>,$/;"	m	struct:GpioRegisters
down_buffer	capsules/src/segger_rtt.rs	/^    down_buffer: SeggerRttBuffer,$/;"	m	struct:SeggerRttMemory
dr	chips/cc26x2/src/uart.rs	/^    dr: ReadWrite<u32>,$/;"	m	struct:UartRegisters
dr	chips/tm4c129x/src/uart.rs	/^    dr: VolatileCell<u32>,$/;"	m	struct:UartRegisters
dr12r	chips/tm4c129x/src/gpio.rs	/^    dr12r: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
dr2r	chips/tm4c129x/src/gpio.rs	/^    dr2r: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
dr4r	chips/tm4c129x/src/gpio.rs	/^    dr4r: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
dr8r	chips/tm4c129x/src/gpio.rs	/^    dr8r: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
drive	chips/sifive/src/gpio.rs	/^    drive: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
driver	capsules/src/app_flash_driver.rs	/^    driver: &'a hil::nonvolatile_storage::NonvolatileStorage,$/;"	m	struct:AppFlash
driver	capsules/src/humidity.rs	/^    driver: &'a hil::sensors::HumidityDriver,$/;"	m	struct:HumiditySensor
driver	capsules/src/ieee802154/mod.rs	/^mod driver;$/;"	n
driver	capsules/src/lib.rs	/^pub mod driver;$/;"	n
driver	capsules/src/net/udp/mod.rs	/^pub mod driver;$/;"	n
driver	capsules/src/ninedof.rs	/^    driver: &'a hil::sensors::NineDof,$/;"	m	struct:NineDof
driver	capsules/src/nonvolatile_storage_driver.rs	/^    driver: &'a hil::nonvolatile_storage::NonvolatileStorage,$/;"	m	struct:NonvolatileStorage
driver	capsules/src/nonvolatile_to_pages.rs	/^    driver: &'a F,$/;"	m	struct:NonvolatileToPages
driver	capsules/src/temperature.rs	/^    driver: &'a hil::sensors::TemperatureDriver,$/;"	m	struct:TemperatureSensor
driver	kernel/src/lib.rs	/^mod driver;$/;"	n
drngseed	chips/sam4l/src/aes.rs	/^    drngseed: WriteOnly<u32, DrngSeed::Register>,    \/\/   0x70$/;"	m	struct:AesRegisters
drop	chips/sam4l/src/usart.rs	/^    fn drop(&mut self) {$/;"	F	implementation:USARTRegManager
drop	kernel/src/common/peripherals.rs	/^    fn drop(&mut self) {$/;"	f
drop	kernel/src/grant.rs	/^    fn drop(&mut self) {$/;"	F	implementation:Owned
drop	kernel/src/mem.rs	/^    fn drop(&mut self) {$/;"	F	implementation:AppPtr
dropped_callback_count	kernel/src/process.rs	/^    dropped_callback_count: usize,$/;"	m	struct:ProcessDebug
dsclkcfg	chips/tm4c129x/src/sysctl.rs	/^    dsclkcfg: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dscr	chips/sam4l/src/crccu.rs	/^    dscr: ReadWrite<u32, DescriptorBaseAddress::Register>,$/;"	m	struct:CrccuRegisters
dslppwrcfg	chips/tm4c129x/src/sysctl.rs	/^    dslppwrcfg: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
dst_addr	capsules/src/ieee802154/xmac.rs	/^    pub dst_addr: Option<MacAddress>,$/;"	m	struct:XMacHeaderInfo
dst_addr	capsules/src/net/ieee802154.rs	/^    pub dst_addr: Option<MacAddress>,$/;"	m	struct:Header
dst_addr	capsules/src/net/ip.rs	/^    pub dst_addr: IPAddr,$/;"	m	struct:IP6Header
dst_addr	capsules/src/net/ipv6/ipv6.rs	/^    pub dst_addr: IPAddr,$/;"	m	struct:IP6Header
dst_mac_addr	boards/imix/src/components/udp_6lowpan.rs	/^    dst_mac_addr: MacAddress,$/;"	m	struct:UDPComponent
dst_mac_addr	capsules/src/net/ipv6/ipv6_send.rs	/^    dst_mac_addr: MacAddress,$/;"	m	struct:IP6SendStruct
dst_mac_addr	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    dst_mac_addr: Cell<MacAddress>,$/;"	m	struct:RxState
dst_mac_addr	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    dst_mac_addr: Cell<MacAddress>,$/;"	m	struct:TxState
dst_pan	capsules/src/ieee802154/xmac.rs	/^    pub dst_pan: Option<PanID>,$/;"	m	struct:XMacHeaderInfo
dst_pan	capsules/src/net/ieee802154.rs	/^    pub dst_pan: Option<PanID>,$/;"	m	struct:Header
dst_pan	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    pub dst_pan: Cell<PanID>, \/\/ Pub to allow for setting to broadcast PAN and back$/;"	m	struct:TxState
dst_port	capsules/src/net/tcp.rs	/^    pub dst_port: u16,$/;"	m	struct:TCPHeader
dst_port	capsules/src/net/udp/udp.rs	/^    pub dst_port: u16,$/;"	m	struct:UDPHeader
dtr	chips/sam4l/src/ast.rs	/^    dtr: ReadWrite<u32, DigitalTuner::Register>,$/;"	m	struct:AstRegisters
dw	kernel/src/debug.rs	/^    dw: MapCell<&'static DebugWriter>,$/;"	m	struct:DebugWriterWrapper
each	kernel/src/grant.rs	/^    pub fn each<F>(&self, fun: F)$/;"	F	implementation:Grant
ecbdataptr	chips/nrf5x/src/aes.rs	/^    ecbdataptr: ReadWrite<u32, EcbDataPointer::Register>,$/;"	m	struct:AesEcbRegisters
echo_buf	capsules/src/usbc_client.rs	/^    echo_buf: [Cell<u8>; 8], \/\/ Must be no larger than endpoint packet buffer$/;"	m	struct:Client
echo_len	capsules/src/usbc_client.rs	/^    echo_len: Cell<usize>,$/;"	m	struct:Client
edition	arch/riscv32i/target/debug/.fingerprint/bare-metal-24acc5d3590b7513/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0./;"	s
edition	arch/riscv32i/target/debug/.fingerprint/bare-metal-7dd6462cd7700cd7/lib-bare_metal-7dd6462cd7700cd7.json	/^{"rustc":10377385455325587324,"features":"[]","target":10318145944003877215,"profile":1187018370/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/bit_field-56ae9b63ca7874f1/lib-bit_field-56ae9b63ca7874f1.json	/^{"rustc":10377385455325587324,"features":"[]","target":6212214415640514931,"profile":11870183705/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/riscvregs-0c285ab8bbe41fa7/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"db/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/riscvregs-126b22abd70e245c/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0e/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/riscvregs-7b5528c14e2c7055/build-script-build_script_build-7b5528c14e2c7055.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/riscvregs-d6ebf6a6021a8976/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"78/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/riscvregs-e220008a48c83b01/build-script-build_script_build-e220008a48c83b01.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/riscvregs-e3787b41749bb5b0/build-script-build_script_build-e3787b41749bb5b0.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/semver-parser-1d01b4b0efb84ec1/lib-semver_parser-1d01b4b0efb84ec1.json	/^{"rustc":10377385455325587324,"features":"[]","target":11042536386261824010,"profile":1187018370/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	s
edition	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	s
edition	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	s
edition	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	s
edition	boards/hifive1/target/debug/.fingerprint/riscvregs-8a1ccaee318cf981/build-script-build_script_build-8a1ccaee318cf981.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	s
edition	boards/hifive1/target/debug/.fingerprint/riscvregs-e5cf2a660cb8088f/build-script-build_script_build-e5cf2a660cb8088f.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	s
edition	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	s
edition	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	s
edition	boards/hifive1/target/debug/.fingerprint/semver-parser-0cbc1426a8cfeede/lib-semver_parser-0cbc1426a8cfeede.json	/^{"rustc":4168008693276420879,"features":"[]","target":3650675185119913205,"profile":118386650091/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-3818320f62d4b526/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-5a31f60d1aed50ae/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-90db6ed0e5b8c3d4/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	s
edition	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	s
edition	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	s
edition	kernel/target/debug/.fingerprint/tock-cells-816571e4fa975f6b/doc-lib-tock_cells-816571e4fa975f6b.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":3062756892/;"	s
edition	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	s
edition	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	s
edition	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	s
edition	kernel/target/debug/.fingerprint/tock-registers-e7eec879e9fa92db/doc-lib-tock_registers-e7eec879e9fa92db.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":30627568924/;"	s
edition	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	s
egen	capsules/src/rng.rs	/^    egen: &'a Entropy32<'a>,$/;"	m	struct:Entropy32To8
egen	capsules/src/rng.rs	/^    egen: &'a Entropy32<'a>,$/;"	m	struct:Entropy32ToRandom
egen	capsules/src/rng.rs	/^    egen: &'a Entropy8<'a>,$/;"	m	struct:Entropy8To32
egen	capsules/src/test/rng.rs	/^    egen: &'a entropy::Entropy32<'a>,$/;"	m	struct:TestEntropy32
egen	capsules/src/test/rng.rs	/^    egen: &'a entropy::Entropy8<'a>,$/;"	m	struct:TestEntropy8
eh_personality	arch/cortex-m/src/support.rs	/^pub extern "C" fn eh_personality() {}$/;"	f
eh_personality	arch/riscv32i/src/support.rs	/^pub extern "C" fn eh_personality() {}$/;"	f
elems	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
emacmpc	chips/tm4c129x/src/sysctl.rs	/^    emacmpc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
emacpds	chips/tm4c129x/src/sysctl.rs	/^    emacpds: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
empty	arch/cortex-m/src/mpu.rs	/^    fn empty(region_num: usize) -> CortexMRegion {$/;"	F	implementation:CortexMRegion
empty	kernel/src/common/list.rs	/^    pub const fn empty() -> ListLink<'a, T> {$/;"	F	implementation:ListLink
empty	kernel/src/common/queue.rs	/^    fn empty(&mut self);$/;"	F	interface:Queue
empty	kernel/src/common/ring_buffer.rs	/^    fn empty(&mut self) {$/;"	F	implementation:RingBuffer
empty	libraries/tock-cells/src/map_cell.rs	/^    pub const fn empty() -> MapCell<T> {$/;"	F	implementation:MapCell
empty	libraries/tock-cells/src/optional_cell.rs	/^    pub const fn empty() -> OptionalCell<T> {$/;"	F	implementation:OptionalCell
empty	libraries/tock-cells/src/take_cell.rs	/^    pub const fn empty() -> TakeCell<'a, T> {$/;"	F	implementation:TakeCell
enable	arch/cortex-m/src/nvic.rs	/^    pub fn enable(&self) {$/;"	F	implementation:Nvic
enable	arch/cortex-m/src/systick.rs	/^    fn enable(&self, with_interrupt: bool) {$/;"	F	implementation:SysTick
enable	capsules/src/usbc_client.rs	/^    fn enable(&self) {$/;"	F	implementation:Client
enable	capsules/src/virtual_i2c.rs	/^    fn enable(&self) {$/;"	F	implementation:I2CDevice
enable	capsules/src/virtual_i2c.rs	/^    fn enable(&self) {$/;"	F	implementation:MuxI2C
enable	chips/cc26x2/src/i2c.rs	/^    fn enable(&self) {$/;"	F	implementation:I2CMaster
enable	chips/cc26x2/src/trng.rs	/^    pub fn enable(&self) {$/;"	F	implementation:Trng
enable	chips/nrf51/src/i2c.rs	/^    enable: ReadWrite<u32, Twim::Register>,$/;"	m	struct:TwimRegisters
enable	chips/nrf51/src/i2c.rs	/^    fn enable(&self) {$/;"	F	implementation:TWIM
enable	chips/nrf51/src/i2c.rs	/^    pub fn enable(&self) {$/;"	F	implementation:TWIM
enable	chips/nrf51/src/uart.rs	/^    enable: ReadWrite<u32, Enable::Register>, \/\/....... 0x500$/;"	m	struct:UartRegisters
enable	chips/nrf51/src/uart.rs	/^    pub fn enable(&self) {$/;"	F	implementation:UART
enable	chips/nrf52/src/adc.rs	/^    enable: ReadWrite<u32, ENABLE::Register>,$/;"	m	struct:AdcRegisters
enable	chips/nrf52/src/i2c.rs	/^    enable: ReadWrite<u32, ENABLE::Register>,$/;"	m	struct:TwimRegisters
enable	chips/nrf52/src/i2c.rs	/^    fn enable(&self) {$/;"	F	implementation:TWIM
enable	chips/nrf52/src/i2c.rs	/^    pub fn enable(&self) {$/;"	F	implementation:TWIM
enable	chips/nrf52/src/ppi.rs	/^    pub fn enable(&self, channels: FieldValue<u32, Channel::Register>) {$/;"	F	implementation:Ppi
enable	chips/nrf52/src/spi.rs	/^    enable: ReadWrite<u32, ENABLE::Register>,        \/\/ Enable SPIM$/;"	m	struct:SpimRegisters
enable	chips/nrf52/src/spi.rs	/^    pub fn enable(&self) {$/;"	F	implementation:SPIM
enable	chips/nrf52/src/uart.rs	/^    enable: ReadWrite<u32, Uart::Register>,$/;"	m	struct:UarteRegisters
enable	chips/nrf5x/src/aes.rs	/^    fn enable(&self) {$/;"	F	implementation:AesECB
enable	chips/sam4l/src/acifc.rs	/^    fn enable(&self) {$/;"	F	implementation:Acifc
enable	chips/sam4l/src/aes.rs	/^    fn enable(&self) {$/;"	F	implementation:Aes
enable	chips/sam4l/src/ast.rs	/^    fn enable(&self) {$/;"	F	implementation:Ast
enable	chips/sam4l/src/crccu.rs	/^    fn enable(&self) {$/;"	F	implementation:Crccu
enable	chips/sam4l/src/dma.rs	/^    pub fn enable(&self) {$/;"	F	implementation:DMAChannel
enable	chips/sam4l/src/gpio.rs	/^    pub fn enable(&self) {$/;"	F	implementation:GPIOPin
enable	chips/sam4l/src/i2c.rs	/^    fn enable(&self) {$/;"	F	implementation:I2CHw
enable	chips/sam4l/src/i2c.rs	/^    fn enable(&self) {$/;"	F	implementation:TWIMClock
enable	chips/sam4l/src/i2c.rs	/^    fn enable(&self) {$/;"	F	implementation:TWISClock
enable	chips/sam4l/src/pm.rs	/^    fn enable(&self) {$/;"	F	implementation:Clock
enable	chips/sam4l/src/spi.rs	/^    fn enable(&self) {$/;"	F	implementation:SpiHw
enable	chips/tm4c129x/src/uart.rs	/^    fn enable(&self) {$/;"	F	implementation:UART
enable	kernel/src/hil/i2c.rs	/^    fn enable(&self);$/;"	F	interface:I2CDevice
enable	kernel/src/hil/i2c.rs	/^    fn enable(&self);$/;"	F	interface:I2CMaster
enable	kernel/src/hil/i2c.rs	/^    fn enable(&self);$/;"	F	interface:I2CSlave
enable	kernel/src/hil/symmetric_encryption.rs	/^    fn enable(&self);$/;"	F	interface:AES128
enable	kernel/src/hil/usb.rs	/^    fn enable(&self);$/;"	F	interface:Client
enable	kernel/src/platform/mod.rs	/^    fn enable(&self) {}$/;"	F	implementation:NoClockControl
enable	kernel/src/platform/mod.rs	/^    fn enable(&self);$/;"	F	interface:ClockInterface
enable	kernel/src/platform/systick.rs	/^    fn enable(&self, _: bool) {}$/;"	F	implementation:SysTick
enable	kernel/src/platform/systick.rs	/^    fn enable(&self, with_interrupt: bool);$/;"	F	interface:SysTick
enable_address	chips/sam4l/src/usbc/mod.rs	/^    fn enable_address(&self) {$/;"	F	implementation:Usbc
enable_address	kernel/src/hil/usb.rs	/^    fn enable_address(&self);$/;"	F	interface:UsbController
enable_alarm_irq	chips/sam4l/src/ast.rs	/^    fn enable_alarm_irq(&self) {$/;"	F	implementation:Ast
enable_alarm_wake	chips/sam4l/src/ast.rs	/^    fn enable_alarm_wake(&self) {$/;"	F	implementation:Ast
enable_all	arch/cortex-m/src/nvic.rs	/^pub unsafe fn enable_all() {$/;"	f
enable_all	arch/riscv32i/src/plic.rs	/^pub unsafe fn enable_all() {$/;"	f
enable_alternate	chips/tm4c129x/src/gpio.rs	/^    pub fn enable_alternate(&self) {$/;"	F	implementation:GPIOPin
enable_analog	chips/tm4c129x/src/gpio.rs	/^    pub fn enable_analog(&self) {$/;"	F	implementation:GPIOPin
enable_as_device	chips/sam4l/src/usbc/mod.rs	/^    fn enable_as_device(&self, speed: hil::usb::DeviceSpeed) {$/;"	F	implementation:Usbc
enable_as_device	kernel/src/hil/usb.rs	/^    fn enable_as_device(&self, speed: DeviceSpeed);$/;"	F	interface:UsbController
enable_cache	chips/sam4l/src/flashcalw.rs	/^    pub fn enable_cache(&self) {$/;"	F	implementation:FLASHCALW
enable_clock	chips/sam4l/src/acifc.rs	/^    fn enable_clock(&self) {$/;"	F	implementation:Acifc
enable_clock	chips/sam4l/src/aes.rs	/^    fn enable_clock(&self) {$/;"	F	implementation:Aes
enable_clock	chips/sam4l/src/pm.rs	/^pub fn enable_clock(clock: Clock) {$/;"	f
enable_clock	chips/tm4c129x/src/sysctl.rs	/^pub unsafe fn enable_clock(clock: Clock) {$/;"	f
enable_digital	chips/tm4c129x/src/gpio.rs	/^    pub fn enable_digital(&self) {$/;"	F	implementation:GPIOPin
enable_domain	chips/cc26x2/src/prcm.rs	/^    pub fn enable_domain(domain: PowerDomain) {$/;"	F	implementation:Power
enable_gpio	chips/cc26x2/src/gpio.rs	/^    pub fn enable_gpio(&self) {$/;"	F	implementation:GPIOPin
enable_gpio	chips/cc26x2/src/prcm.rs	/^    pub fn enable_gpio() {$/;"	F	implementation:Clock
enable_gpt	chips/cc26x2/src/prcm.rs	/^    pub fn enable_gpt() {$/;"	F	implementation:Clock
enable_high_speed_flash	chips/sam4l/src/flashcalw.rs	/^    pub fn enable_high_speed_flash(&self) {$/;"	F	implementation:FLASHCALW
enable_host_interrupt	capsules/src/mcp230xx.rs	/^    fn enable_host_interrupt(&self) -> ReturnCode {$/;"	F	implementation:MCP230xx
enable_i2c	chips/cc26x2/src/prcm.rs	/^    pub fn enable_i2c() {$/;"	F	implementation:Clock
enable_i2c_scl	chips/cc26x2/src/gpio.rs	/^    pub fn enable_i2c_scl(&self) {$/;"	F	implementation:GPIOPin
enable_i2c_sda	chips/cc26x2/src/gpio.rs	/^    pub fn enable_i2c_sda(&self) {$/;"	F	implementation:GPIOPin
enable_input	chips/cc26x2/src/gpio.rs	/^    pub fn enable_input(&self) {$/;"	F	implementation:GPIOPin
enable_interrupt	capsules/src/mcp230xx.rs	/^    fn enable_interrupt($/;"	F	implementation:MCP230xx
enable_interrupt	chips/cc26x2/src/gpio.rs	/^    fn enable_interrupt(&self, client_data: usize, mode: hil::gpio::InterruptMode) {$/;"	F	implementation:GPIOPin
enable_interrupt	chips/cc26x2/src/gpio.rs	/^    pub fn enable_interrupt(&self, mode: hil::gpio::InterruptMode) {$/;"	F	implementation:GPIOPin
enable_interrupt	chips/nrf52/src/radio.rs	/^    pub fn enable_interrupt(&self, intr: u32) {$/;"	F	implementation:Radio
enable_interrupt	chips/nrf5x/src/gpio.rs	/^    fn enable_interrupt(&self, client_data: usize, mode: hil::gpio::InterruptMode) {$/;"	F	implementation:GPIOPin
enable_interrupt	chips/sam4l/src/gpio.rs	/^    fn enable_interrupt(&self, client_data: usize, mode: hil::gpio::InterruptMode) {$/;"	F	implementation:GPIOPin
enable_interrupt	chips/sam4l/src/gpio.rs	/^    pub fn enable_interrupt(&self) {$/;"	F	implementation:GPIOPin
enable_interrupt	chips/sifive/src/gpio.rs	/^    fn enable_interrupt(&self, client_data: usize, mode: hil::gpio::InterruptMode) {$/;"	F	implementation:GpioPin
enable_interrupt	chips/tm4c129x/src/gpio.rs	/^    fn enable_interrupt(&self, client_data: usize, mode: hil::gpio::InterruptMode) {$/;"	F	implementation:GPIOPin
enable_interrupt	chips/tm4c129x/src/gpio.rs	/^    pub fn enable_interrupt(&self) {$/;"	F	implementation:GPIOPin
enable_interrupt	kernel/src/hil/gpio.rs	/^    fn enable_interrupt(&self, identifier: usize, mode: InterruptMode);$/;"	F	interface:Pin
enable_interrupt	kernel/src/hil/gpio_async.rs	/^    fn enable_interrupt($/;"	F	interface:Port
enable_interrupt_pin	capsules/src/mcp230xx.rs	/^    fn enable_interrupt_pin($/;"	F	implementation:MCP230xx
enable_interrupts	capsules/src/tmp006.rs	/^    fn enable_interrupts(&self) {$/;"	F	implementation:TMP006
enable_interrupts	chips/cc26x2/src/uart.rs	/^    fn enable_interrupts(&self) {$/;"	F	implementation:UART
enable_interrupts	chips/nrf51/src/radio.rs	/^    pub fn enable_interrupts(&self) {$/;"	F	implementation:Radio
enable_interrupts	chips/nrf52/src/radio.rs	/^    pub fn enable_interrupts(&self) {$/;"	F	implementation:Radio
enable_interrupts	chips/nrf5x/src/aes.rs	/^    fn enable_interrupts(&self) {$/;"	F	implementation:AesECB
enable_interrupts	chips/nrf5x/src/temperature.rs	/^    fn enable_interrupts(&self) {$/;"	F	implementation:Temp
enable_interrupts	chips/nrf5x/src/timer.rs	/^    fn enable_interrupts(&self) {$/;"	F	implementation:TimerAlarm
enable_interrupts	chips/nrf5x/src/trng.rs	/^    fn enable_interrupts(&self) {$/;"	F	implementation:Trng
enable_interrupts	chips/sam4l/src/aes.rs	/^    fn enable_interrupts(&self) {$/;"	F	implementation:Aes
enable_mpu	arch/cortex-m/src/mpu.rs	/^    fn enable_mpu(&self) {$/;"	F	implementation:MPU
enable_mpu	kernel/src/platform/mpu.rs	/^    fn enable_mpu(&self) {}$/;"	F	interface:MPU
enable_opendrain	chips/tm4c129x/src/gpio.rs	/^    pub fn enable_opendrain(&self) {$/;"	F	implementation:GPIOPin
enable_output	chips/cc26x2/src/gpio.rs	/^    pub fn enable_output(&self) {$/;"	F	implementation:GPIOPin
enable_output	chips/sam4l/src/gpio.rs	/^    pub fn enable_output(&self) {$/;"	F	implementation:GPIOPin
enable_output	chips/tm4c129x/src/gpio.rs	/^    pub fn enable_output(&self) {$/;"	F	implementation:GPIOPin
enable_picocache	chips/sam4l/src/flashcalw.rs	/^    fn enable_picocache(&self, enable: bool) {$/;"	F	implementation:FLASHCALW
enable_pull_down	chips/sam4l/src/gpio.rs	/^    pub fn enable_pull_down(&self) {$/;"	F	implementation:GPIOPin
enable_pull_down	chips/tm4c129x/src/gpio.rs	/^    pub fn enable_pull_down(&self) {$/;"	F	implementation:GPIOPin
enable_pull_up	chips/sam4l/src/gpio.rs	/^    pub fn enable_pull_up(&self) {$/;"	F	implementation:GPIOPin
enable_pull_up	chips/tm4c129x/src/gpio.rs	/^    pub fn enable_pull_up(&self) {$/;"	F	implementation:GPIOPin
enable_rc32k	chips/sam4l/src/bscif.rs	/^pub fn enable_rc32k() {$/;"	f
enable_rfc	chips/cc26x2/src/prcm.rs	/^    pub fn enable_rfc() {$/;"	F	implementation:Clock
enable_rx	chips/sam4l/src/usart.rs	/^    fn enable_rx(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
enable_rx	chips/tm4c129x/src/uart.rs	/^    pub fn enable_rx(&self) {$/;"	F	implementation:UART
enable_rx_error_interrupts	chips/sam4l/src/usart.rs	/^    fn enable_rx_error_interrupts(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
enable_rx_interrupts	chips/nrf51/src/uart.rs	/^    pub fn enable_rx_interrupts(&self) {$/;"	F	implementation:UART
enable_rx_interrupts	chips/nrf52/src/uart.rs	/^    fn enable_rx_interrupts(&self) {$/;"	F	implementation:Uarte
enable_rx_timeout	chips/sam4l/src/usart.rs	/^    fn enable_rx_timeout(&self, usart: &USARTRegManager, timeout: u8) {$/;"	F	implementation:USART
enable_schmidtt_trigger	chips/sam4l/src/gpio.rs	/^    pub fn enable_schmidtt_trigger(&self) {$/;"	F	implementation:GPIOPin
enable_sensor	capsules/src/tmp006.rs	/^    fn enable_sensor(&self, sampling_period: u8) {$/;"	F	implementation:TMP006
enable_trng	chips/cc26x2/src/prcm.rs	/^    pub fn enable_trng() {$/;"	F	implementation:Clock
enable_tx	chips/sam4l/src/usart.rs	/^    pub fn enable_tx(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
enable_tx	chips/tm4c129x/src/uart.rs	/^    pub fn enable_tx(&self) {$/;"	F	implementation:UART
enable_tx_empty_interrupt	chips/sam4l/src/usart.rs	/^    fn enable_tx_empty_interrupt(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
enable_tx_interrupt	chips/sifive/src/uart.rs	/^    fn enable_tx_interrupt(&self) {$/;"	F	implementation:Uart
enable_tx_interrupts	chips/nrf51/src/uart.rs	/^    pub fn enable_tx_interrupts(&self) {$/;"	F	implementation:UART
enable_tx_interrupts	chips/nrf52/src/uart.rs	/^    fn enable_tx_interrupts(&self) {$/;"	F	implementation:Uarte
enable_tx_interrupts	chips/tm4c129x/src/uart.rs	/^    fn enable_tx_interrupts(&self) {$/;"	F	implementation:UART
enable_uart	chips/nrf52/src/uart.rs	/^    fn enable_uart(&self) {$/;"	F	implementation:Uarte
enable_uart0_rx	chips/cc26x2/src/gpio.rs	/^    pub fn enable_uart0_rx(&self) {$/;"	F	implementation:GPIOPin
enable_uart0_tx	chips/cc26x2/src/gpio.rs	/^    pub fn enable_uart0_tx(&self) {$/;"	F	implementation:GPIOPin
enable_uart1_rx	chips/cc26x2/src/gpio.rs	/^    pub fn enable_uart1_rx(&self) {$/;"	F	implementation:GPIOPin
enable_uart1_tx	chips/cc26x2/src/gpio.rs	/^    pub fn enable_uart1_tx(&self) {$/;"	F	implementation:GPIOPin
enable_uarts	chips/cc26x2/src/prcm.rs	/^    pub fn enable_uarts() {$/;"	F	implementation:Clock
enable_write	capsules/src/mx25r6435f.rs	/^    fn enable_write(&self) -> ReturnCode {$/;"	F	implementation:MX25R6435F
enable_ws1_read_opt	chips/sam4l/src/flashcalw.rs	/^    fn enable_ws1_read_opt(&self, enable: bool) {$/;"	F	implementation:FLASHCALW
enabled	capsules/src/virtual_alarm.rs	/^    enabled: Cell<usize>,$/;"	m	struct:MuxAlarm
enabled	capsules/src/virtual_i2c.rs	/^    enabled: Cell<bool>,$/;"	m	struct:I2CDevice
enabled	capsules/src/virtual_i2c.rs	/^    enabled: Cell<usize>,$/;"	m	struct:MuxI2C
enabled	chips/sam4l/src/adc.rs	/^    enabled: Cell<bool>,$/;"	m	struct:Adc
enabled	chips/sam4l/src/dac.rs	/^    enabled: Cell<bool>,$/;"	m	struct:Dac
enabled	chips/sam4l/src/dma.rs	/^    enabled: Cell<bool>,$/;"	m	struct:DMAChannel
enabled	chips/sam4l/src/wdt.rs	/^    enabled: Cell<bool>,$/;"	m	struct:Wdt
enabled	kernel/src/tbfheader.rs	/^    crate fn enabled(&self) -> bool {$/;"	F	implementation:TbfHeader
enc_consume	capsules/src/net/stream.rs	/^macro_rules! enc_consume {$/;"	M
enc_try	capsules/src/net/stream.rs	/^macro_rules! enc_try {$/;"	M
encode	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn encode(&self, buf: &mut [u8], offset: usize) -> SResult<usize> {$/;"	F	implementation:ICMP6Header
encode	capsules/src/net/ieee802154.rs	/^    pub fn encode(&self, buf: &mut [u8]) -> SResult {$/;"	F	implementation:HeaderIE
encode	capsules/src/net/ieee802154.rs	/^    pub fn encode(&self, buf: &mut [u8]) -> SResult {$/;"	F	implementation:KeyId
encode	capsules/src/net/ieee802154.rs	/^    pub fn encode(&self, buf: &mut [u8]) -> SResult {$/;"	F	implementation:MacAddress
encode	capsules/src/net/ieee802154.rs	/^    pub fn encode(&self, buf: &mut [u8]) -> SResult {$/;"	F	implementation:PayloadIE
encode	capsules/src/net/ieee802154.rs	/^    pub fn encode(&self, buf: &mut [u8]) -> SResult {$/;"	F	implementation:Security
encode	capsules/src/net/ieee802154.rs	/^    pub fn encode(&self, buf: &mut [u8], has_payload: bool) -> SResult<usize> {$/;"	F	implementation:Header
encode	capsules/src/net/ip.rs	/^    pub fn encode(buf: &mut [u8], ip6_header: IP6Header) -> SResult<usize> {$/;"	F	implementation:IP6Header
encode	capsules/src/net/ipv6/ipv6.rs	/^    pub fn encode(&self, buf: &mut [u8]) -> SResult<usize> {$/;"	F	implementation:IP6Header
encode	capsules/src/net/ipv6/ipv6.rs	/^    pub fn encode(&self, buf: &mut [u8]) -> SResult<usize> {$/;"	F	implementation:IP6Packet
encode	capsules/src/net/ipv6/ipv6.rs	/^    pub fn encode(&self, buf: &mut [u8], offset: usize) -> SResult<usize> {$/;"	F	implementation:IPPayload
encode	capsules/src/net/thread/tlv.rs	/^    pub fn encode(&self, buf: &mut [u8]) -> SResult {$/;"	F	implementation:BorderRouterTlvValue
encode	capsules/src/net/thread/tlv.rs	/^    pub fn encode(&self, buf: &mut [u8]) -> SResult {$/;"	F	implementation:ChannelMaskEntry
encode	capsules/src/net/thread/tlv.rs	/^    pub fn encode(&self, buf: &mut [u8]) -> SResult {$/;"	F	implementation:HasRouteTlvValue
encode	capsules/src/net/thread/tlv.rs	/^    pub fn encode(&self, buf: &mut [u8]) -> SResult {$/;"	F	implementation:NetworkManagementTlv
encode	capsules/src/net/thread/tlv.rs	/^    pub fn encode(&self, buf: &mut [u8]) -> SResult {$/;"	F	implementation:Tlv
encode	capsules/src/net/thread/tlv.rs	/^    pub fn encode(&self, buf: &mut [u8], stable: bool) -> SResult {$/;"	F	implementation:NetworkDataTlv
encode	capsules/src/net/thread/tlv.rs	/^    pub fn encode(&self, buf: &mut [u8], stable: bool) -> SResult {$/;"	F	implementation:PrefixSubTlv
encode	capsules/src/net/thread/tlv.rs	/^    pub fn encode(&self, buf: &mut [u8], stable: bool) -> SResult {$/;"	F	implementation:ServiceSubTlv
encode	capsules/src/net/udp/driver.rs	/^    pub fn encode(&self, buf: &mut [u8], offset: usize) -> SResult<usize> {$/;"	F	implementation:UDPEndpoint
encode	capsules/src/net/udp/udp.rs	/^    pub fn encode(&self, buf: &mut [u8], offset: usize) -> SResult<usize> {$/;"	F	implementation:UDPHeader
encode_address	capsules/src/ieee802154/driver.rs	/^fn encode_address(addr: &Option<MacAddress>) -> usize {$/;"	f
encode_addressing	capsules/src/net/ieee802154.rs	/^    pub fn encode_addressing(&self, buf: &mut [u8]) -> SResult<bool> {$/;"	F	implementation:Header
encode_bytes	capsules/src/net/stream.rs	/^pub fn encode_bytes(buf: &mut [u8], bs: &[u8]) -> SResult {$/;"	f
encode_bytes_be	capsules/src/net/stream.rs	/^pub fn encode_bytes_be(buf: &mut [u8], bs: &[u8]) -> SResult {$/;"	f
encode_key_id	capsules/src/ieee802154/driver.rs	/^fn encode_key_id(key_id: &KeyId, buf: &mut [u8]) -> SResult {$/;"	f
encode_pans	capsules/src/ieee802154/driver.rs	/^fn encode_pans(dst_pan: &Option<PanID>, src_pan: &Option<PanID>) -> usize {$/;"	f
encode_tl	capsules/src/net/thread/tlv.rs	/^    fn encode_tl(&self, buf: &mut [u8], value_width: usize) -> SResult {$/;"	F	implementation:NetworkManagementTlv
encode_tl	capsules/src/net/thread/tlv.rs	/^    fn encode_tl(&self, buf: &mut [u8], value_width: usize) -> SResult {$/;"	F	implementation:Tlv
encode_tl	capsules/src/net/thread/tlv.rs	/^    fn encode_tl(&self, buf: &mut [u8], value_width: usize, stable: bool) -> SResult {$/;"	F	implementation:NetworkDataTlv
encode_tl	capsules/src/net/thread/tlv.rs	/^    fn encode_tl(&self, buf: &mut [u8], value_width: usize, stable: bool) -> SResult {$/;"	F	implementation:PrefixSubTlv
encode_tl	capsules/src/net/thread/tlv.rs	/^    fn encode_tl(&self, buf: &mut [u8], value_width: usize, stable: bool) -> SResult {$/;"	F	implementation:ServiceSubTlv
encode_u16	capsules/src/net/stream.rs	/^pub fn encode_u16(buf: &mut [u8], b: u16) -> SResult {$/;"	f
encode_u32	capsules/src/net/stream.rs	/^pub fn encode_u32(buf: &mut [u8], b: u32) -> SResult {$/;"	f
encode_u8	capsules/src/net/stream.rs	/^pub fn encode_u8(buf: &mut [u8], b: u8) -> SResult {$/;"	f
encrypting	capsules/src/aes_ccm.rs	/^    encrypting: Cell<bool>,$/;"	m	struct:AES128CCM
encrypting	capsules/src/test/aes.rs	/^    encrypting: Cell<bool>,$/;"	m	struct:TestAes128Cbc
encrypting	capsules/src/test/aes.rs	/^    encrypting: Cell<bool>,$/;"	m	struct:TestAes128Ctr
encrypting	capsules/src/test/aes_ccm.rs	/^    encrypting: Cell<bool>,$/;"	m	struct:Test
encryption_needed	capsules/src/net/ieee802154.rs	/^    pub fn encryption_needed(&self) -> bool {$/;"	F	implementation:SecurityLevel
end	chips/nrf51/src/radio.rs	/^    end: ReadWrite<u32, Event::Register>,        \/\/ 0x10c ---> 0x110$/;"	m	struct:RadioRegisters
end_ccm	capsules/src/aes_ccm.rs	/^    fn end_ccm(&self) {$/;"	F	implementation:AES128CCM
end_idx	chips/nrf5x/src/aes.rs	/^    end_idx: Cell<usize>,$/;"	m	struct:AesECB
end_receive	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn end_receive(&self, client: Option<&'a SixlowpanRxClient>, result: ReturnCode) {$/;"	F	implementation:RxState
end_transmit	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn end_transmit(&self) {$/;"	F	implementation:TxState
endpoint_address	capsules/src/usb.rs	/^    pub endpoint_address: EndpointAddress,$/;"	m	struct:EndpointDescriptor
endpoint_bulk_in	tools/usb/bulk-echo-fast/main.c	/^unsigned char endpoint_bulk_in = 1 | 1 << 7;$/;"	v	typeref:typename:unsigned char
endpoint_bulk_in_enable	chips/sam4l/src/usbc/mod.rs	/^    fn endpoint_bulk_in_enable(&self, endpoint: usize) {$/;"	F	implementation:Usbc
endpoint_bulk_in_enable	kernel/src/hil/usb.rs	/^    fn endpoint_bulk_in_enable(&self, endpoint: usize);$/;"	F	interface:UsbController
endpoint_bulk_out	tools/usb/bulk-echo-fast/main.c	/^unsigned char endpoint_bulk_out = 2 | 0 << 7;$/;"	v	typeref:typename:unsigned char
endpoint_bulk_out_enable	chips/sam4l/src/usbc/mod.rs	/^    fn endpoint_bulk_out_enable(&self, endpoint: usize) {$/;"	F	implementation:Usbc
endpoint_bulk_out_enable	kernel/src/hil/usb.rs	/^    fn endpoint_bulk_out_enable(&self, endpoint: usize);$/;"	F	interface:UsbController
endpoint_bulk_resume	chips/sam4l/src/usbc/mod.rs	/^    fn endpoint_bulk_resume(&self, endpoint: usize) {$/;"	F	implementation:Usbc
endpoint_bulk_resume	kernel/src/hil/usb.rs	/^    fn endpoint_bulk_resume(&self, endpoint: usize);$/;"	F	interface:UsbController
endpoint_configs	chips/sam4l/src/usbc/mod.rs	/^    pub endpoint_configs: [Option<EndpointConfigValue>; N_ENDPOINTS],$/;"	m	struct:DeviceConfig
endpoint_ctrl_out_enable	chips/sam4l/src/usbc/mod.rs	/^    fn endpoint_ctrl_out_enable(&self, endpoint: usize) {$/;"	F	implementation:Usbc
endpoint_ctrl_out_enable	kernel/src/hil/usb.rs	/^    fn endpoint_ctrl_out_enable(&self, endpoint: usize);$/;"	F	interface:UsbController
endpoint_disable_interrupts	chips/sam4l/src/usbc/mod.rs	/^fn endpoint_disable_interrupts(endpoint: usize, mask: FieldValue<u32, EndpointControl::Register>/;"	f
endpoint_enable_interrupts	chips/sam4l/src/usbc/mod.rs	/^fn endpoint_enable_interrupts(endpoint: usize, mask: FieldValue<u32, EndpointControl::Register>)/;"	f
endpoint_set_buffer	chips/sam4l/src/usbc/mod.rs	/^    fn endpoint_set_buffer<'b>(&'b self, endpoint: usize, buf: &[VolatileCell<u8>]) {$/;"	F	implementation:Usbc
endpoint_set_buffer	kernel/src/hil/usb.rs	/^    fn endpoint_set_buffer(&self, endpoint: usize, buf: &[VolatileCell<u8>]);$/;"	F	interface:UsbController
endpoint_states	chips/sam4l/src/usbc/mod.rs	/^    pub endpoint_states: [EndpointState; N_ENDPOINTS],$/;"	m	struct:DeviceState
endsWith	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	m	class:String
enqueue	kernel/src/common/queue.rs	/^    fn enqueue(&mut self, val: T) -> bool;$/;"	F	interface:Queue
enqueue	kernel/src/common/ring_buffer.rs	/^    fn enqueue(&mut self, val: T) -> bool {$/;"	F	implementation:RingBuffer
enqueue_command	capsules/src/humidity.rs	/^    fn enqueue_command(&self, command: HumidityCommand, arg1: usize, appid: AppId) -> ReturnCode/;"	F	implementation:HumiditySensor
enqueue_command	capsules/src/ninedof.rs	/^    fn enqueue_command(&self, command: NineDofCommand, arg1: usize, appid: AppId) -> ReturnCode /;"	F	implementation:NineDof
enqueue_command	capsules/src/nonvolatile_storage_driver.rs	/^    fn enqueue_command($/;"	F	implementation:NonvolatileStorage
enqueue_command	capsules/src/temperature.rs	/^    fn enqueue_command(&self, appid: AppId) -> ReturnCode {$/;"	F	implementation:TemperatureSensor
enqueue_sensor_reading	capsules/src/ambient_light.rs	/^    fn enqueue_sensor_reading(&self, appid: AppId) -> ReturnCode {$/;"	F	implementation:AmbientLight
enqueue_task	kernel/src/process.rs	/^    fn enqueue_task(&self, task: Task) -> bool {$/;"	F	implementation:Process
enqueue_task	kernel/src/process.rs	/^    fn enqueue_task(&self, task: Task) -> bool;$/;"	F	interface:ProcessType
enqueue_write	capsules/src/app_flash_driver.rs	/^    fn enqueue_write(&self, flash_address: usize, appid: AppId) -> ReturnCode {$/;"	F	implementation:AppFlash
enter	kernel/src/grant.rs	/^    pub fn enter<F, R>(&self, appid: AppId, fun: F) -> Result<R, Error>$/;"	F	implementation:Grant
enter	kernel/src/grant.rs	/^    pub fn enter<F, R>(self, fun: F) -> R$/;"	F	implementation:AppliedGrant
entropy	capsules/src/rng.rs	/^    entropy: Cell<u32>,$/;"	m	struct:Entropy32To8
entropy	kernel/src/hil/mod.rs	/^pub mod entropy;$/;"	n
entropy_available	capsules/src/rng.rs	/^    fn entropy_available($/;"	F	implementation:Entropy32To8
entropy_available	capsules/src/rng.rs	/^    fn entropy_available($/;"	F	implementation:Entropy32ToRandom
entropy_available	capsules/src/rng.rs	/^    fn entropy_available($/;"	F	implementation:Entropy8To32
entropy_available	capsules/src/test/rng.rs	/^    fn entropy_available($/;"	F	implementation:TestEntropy32
entropy_available	capsules/src/test/rng.rs	/^    fn entropy_available($/;"	F	implementation:TestEntropy8
entropy_available	kernel/src/hil/entropy.rs	/^    fn entropy_available(&self, entropy: &mut Iterator<Item = u32>, error: ReturnCode) -> Contin/;"	F	interface:Client32
entropy_available	kernel/src/hil/entropy.rs	/^    fn entropy_available(&self, entropy: &mut Iterator<Item = u8>, error: ReturnCode) -> Continu/;"	F	interface:Client8
enum_from_primitive	libraries/enum_primitive/src/lib.rs	/^macro_rules! enum_from_primitive {$/;"	M
enum_from_primitive_impl	libraries/enum_primitive/src/lib.rs	/^macro_rules! enum_from_primitive_impl {$/;"	M
enum_from_primitive_impl_ty	libraries/enum_primitive/src/lib.rs	/^macro_rules! enum_from_primitive_impl_ty {$/;"	M
enum_identifier	tools/svd2regs.py	/^        def enum_identifier(e):$/;"	f	member:BitfieldFieldEnum.fields	file:
enumerated_values	tools/svd2regs.py	/^    def enumerated_values(field):$/;"	m	class:BitfieldField
eq	capsules/src/net/ipv6/ip_utils.rs	/^    fn eq(&self, other: &IPAddr) -> bool {$/;"	F	implementation:IPAddr
eq	kernel/src/callback.rs	/^    fn eq(&self, other: &AppId) -> bool {$/;"	F	implementation:AppId
er	chips/nrf52/src/ficr.rs	/^    er: [ReadOnly<u32, EncryptionRoot::Register>; 4],$/;"	m	struct:FicrRegisters
erase_complete	capsules/src/nonvolatile_to_pages.rs	/^    fn erase_complete(&self, _error: hil::flash::Error) {}$/;"	F	implementation:NonvolatileToPages
erase_complete	capsules/src/virtual_flash.rs	/^    fn erase_complete(&self, error: hil::flash::Error) {$/;"	F	implementation:FlashUser
erase_complete	capsules/src/virtual_flash.rs	/^    fn erase_complete(&self, error: hil::flash::Error) {$/;"	F	implementation:MuxFlash
erase_complete	kernel/src/hil/flash.rs	/^    fn erase_complete(&self, error: Error);$/;"	F	interface:Client
erase_page	capsules/src/mx25r6435f.rs	/^    fn erase_page(&self, page_number: usize) -> ReturnCode {$/;"	F	implementation:MX25R6435F
erase_page	capsules/src/virtual_flash.rs	/^    fn erase_page(&self, page_number: usize) -> ReturnCode {$/;"	F	implementation:FlashUser
erase_page	chips/nrf52/src/nvmc.rs	/^    fn erase_page(&self, page_number: usize) -> ReturnCode {$/;"	F	implementation:Nvmc
erase_page	chips/sam4l/src/flashcalw.rs	/^    fn erase_page(&self, page_num: i32) -> ReturnCode {$/;"	F	implementation:FLASHCALW
erase_page	chips/sam4l/src/flashcalw.rs	/^    fn erase_page(&self, page_number: usize) -> ReturnCode {$/;"	F	implementation:FLASHCALW
erase_page	kernel/src/hil/flash.rs	/^    fn erase_page(&self, page_number: usize) -> ReturnCode;$/;"	F	interface:Flash
erase_page_helper	chips/nrf52/src/nvmc.rs	/^    fn erase_page_helper(&self, page_number: usize) {$/;"	F	implementation:Nvmc
erase_sector	capsules/src/mx25r6435f.rs	/^    fn erase_sector(&self, sector_index: u32) -> ReturnCode {$/;"	F	implementation:MX25R6435F
erase_uicr	chips/nrf52/src/nvmc.rs	/^    pub fn erase_uicr(&self) {$/;"	F	implementation:Nvmc
erase_user_page	chips/sam4l/src/flashcalw.rs	/^    fn erase_user_page(&self, check: bool) -> bool {$/;"	F	implementation:FLASHCALW
eraseall	chips/nrf52/src/nvmc.rs	/^    pub eraseall: ReadWrite<u32, EraseAll::Register>,$/;"	m	struct:NvmcRegisters
erasepage	chips/nrf52/src/nvmc.rs	/^    pub erasepage: ReadWrite<u32, ErasePage::Register>,$/;"	m	struct:NvmcRegisters
eraseuicr	chips/nrf52/src/nvmc.rs	/^    pub eraseuicr: ReadWrite<u32, EraseUicr::Register>,$/;"	m	struct:NvmcRegisters
err	capsules/src/net/stream.rs	/^    pub fn err(self) -> Option<Error> {$/;"	F	implementation:SResult
error	capsules/src/sdcard.rs	/^    fn error(&self, error: u32) {$/;"	F	implementation:SDCardDriver
error	capsules/src/sdcard.rs	/^    fn error(&self, error: u32);$/;"	F	interface:SDCardClient
errorsrc	chips/nrf51/src/i2c.rs	/^    errorsrc: ReadWrite<u32, ErrorSrc::Register>,$/;"	m	struct:TwimRegisters
errorsrc	chips/nrf51/src/uart.rs	/^    errorsrc: ReadWrite<u32, Errorsrc::Register>, \/\/... 0x480$/;"	m	struct:UartRegisters
errorsrc	chips/nrf52/src/i2c.rs	/^    errorsrc: ReadWrite<u32, ERRORSRC::Register>,$/;"	m	struct:TwimRegisters
errorsrc	chips/nrf52/src/uart.rs	/^    errorsrc: ReadWrite<u32, ErrorSrc::Register>,$/;"	m	struct:UarteRegisters
escape	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
evd	chips/sam4l/src/ast.rs	/^    evd: WriteOnly<u32, Event::Register>,$/;"	m	struct:AstRegisters
eve	chips/sam4l/src/ast.rs	/^    eve: WriteOnly<u32, Event::Register>,$/;"	m	struct:AstRegisters
event	chips/nrf51/src/clock.rs	/^    fn event(&self);$/;"	F	interface:ClockClient
event	chips/nrf52/src/clock.rs	/^    fn event(&self);$/;"	F	interface:ClockClient
event_address	chips/nrf52/src/radio.rs	/^    event_address: ReadWrite<u32, Event::Register>,$/;"	m	struct:RadioRegisters
event_bcmatch	chips/nrf52/src/radio.rs	/^    event_bcmatch: ReadWrite<u32, Event::Register>,$/;"	m	struct:RadioRegisters
event_crcok	chips/nrf52/src/radio.rs	/^    event_crcok: ReadWrite<u32, Event::Register>,$/;"	m	struct:RadioRegisters
event_cts	chips/nrf51/src/uart.rs	/^    event_cts: ReadWrite<u32, Event::Register>, \/\/..... 0x100$/;"	m	struct:UartRegisters
event_cts	chips/nrf52/src/uart.rs	/^    event_cts: ReadWrite<u32, Event::Register>,$/;"	m	struct:UarteRegisters
event_datardy	chips/nrf5x/src/temperature.rs	/^    pub event_datardy: ReadWrite<u32, Event::Register>,$/;"	m	struct:TempRegisters
event_devmatch	chips/nrf52/src/radio.rs	/^    event_devmatch: ReadWrite<u32>,$/;"	m	struct:RadioRegisters
event_devmiss	chips/nrf52/src/radio.rs	/^    event_devmiss: ReadWrite<u32, Event::Register>,$/;"	m	struct:RadioRegisters
event_disabled	chips/nrf52/src/radio.rs	/^    event_disabled: ReadWrite<u32, Event::Register>,$/;"	m	struct:RadioRegisters
event_end	chips/nrf52/src/radio.rs	/^    event_end: ReadWrite<u32, Event::Register>,$/;"	m	struct:RadioRegisters
event_endecb	chips/nrf5x/src/aes.rs	/^    event_endecb: ReadWrite<u32, Event::Register>,$/;"	m	struct:AesEcbRegisters
event_endrx	chips/nrf52/src/uart.rs	/^    event_endrx: ReadWrite<u32, Event::Register>,$/;"	m	struct:UarteRegisters
event_endtx	chips/nrf52/src/uart.rs	/^    event_endtx: ReadWrite<u32, Event::Register>,$/;"	m	struct:UarteRegisters
event_error	chips/nrf51/src/uart.rs	/^    event_error: ReadWrite<u32, Event::Register>, \/\/... 0x124$/;"	m	struct:UartRegisters
event_error	chips/nrf52/src/uart.rs	/^    event_error: ReadWrite<u32, Event::Register>,$/;"	m	struct:UarteRegisters
event_errorecb	chips/nrf5x/src/aes.rs	/^    event_errorecb: ReadWrite<u32, Event::Register>,$/;"	m	struct:AesEcbRegisters
event_in	chips/nrf5x/src/gpio.rs	/^    event_in: [ReadWrite<u32, EventsIn::Register>; NUM_GPIOTE],$/;"	m	struct:GpioteRegisters
event_ncts	chips/nrf51/src/uart.rs	/^    event_ncts: ReadWrite<u32, Event::Register>, \/\/.... 0x104$/;"	m	struct:UartRegisters
event_ncts	chips/nrf52/src/uart.rs	/^    event_ncts: ReadWrite<u32, Event::Register>,$/;"	m	struct:UarteRegisters
event_payload	chips/nrf52/src/radio.rs	/^    event_payload: ReadWrite<u32, Event::Register>,$/;"	m	struct:RadioRegisters
event_port	chips/nrf5x/src/gpio.rs	/^    event_port: ReadWrite<u32, EventsPort::Register>,$/;"	m	struct:GpioteRegisters
event_ready	chips/nrf52/src/radio.rs	/^    event_ready: ReadWrite<u32, Event::Register>,$/;"	m	struct:RadioRegisters
event_regs	chips/cc26x2/src/aon.rs	/^    event_regs: StaticRef<AonEventRegisters>,$/;"	m	struct:Aon
event_rssiend	chips/nrf52/src/radio.rs	/^    event_rssiend: ReadWrite<u32, Event::Register>,$/;"	m	struct:RadioRegisters
event_rxdrdy	chips/nrf51/src/uart.rs	/^    event_rxdrdy: ReadWrite<u32, Event::Register>, \/\/.. 0x108$/;"	m	struct:UartRegisters
event_rxstarted	chips/nrf52/src/uart.rs	/^    event_rxstarted: ReadWrite<u32, Event::Register>,$/;"	m	struct:UarteRegisters
event_rxto	chips/nrf51/src/uart.rs	/^    event_rxto: ReadWrite<u32, Event::Register>, \/\/.... 0x144$/;"	m	struct:UartRegisters
event_rxto	chips/nrf52/src/uart.rs	/^    event_rxto: ReadWrite<u32, Event::Register>,$/;"	m	struct:UarteRegisters
event_to_mcu_sel	chips/cc26x2/src/aon.rs	/^    event_to_mcu_sel: ReadWrite<u32>, \/\/ Event selector for MCU Events$/;"	m	struct:AonEventRegisters
event_txdrdy	chips/nrf51/src/uart.rs	/^    event_txdrdy: ReadWrite<u32, Event::Register>, \/\/.. 0x11c$/;"	m	struct:UartRegisters
event_txstarted	chips/nrf52/src/uart.rs	/^    event_txstarted: ReadWrite<u32, Event::Register>,$/;"	m	struct:UarteRegisters
event_txstopped	chips/nrf52/src/uart.rs	/^    event_txstopped: ReadWrite<u32, Event::Register>,$/;"	m	struct:UarteRegisters
event_valrdy	chips/nrf5x/src/trng.rs	/^    pub event_valrdy: ReadWrite<u32, Event::Register>,$/;"	m	struct:RngRegisters
events_bb	chips/nrf51/src/i2c.rs	/^    events_bb: ReadWrite<u32, Event::Register>,$/;"	m	struct:TwimRegisters
events_calibratedone	chips/nrf52/src/adc.rs	/^    events_calibratedone: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:AdcRegisters
events_ch	chips/nrf52/src/adc.rs	/^    events_ch: [AdcEventChRegisters; 8],$/;"	m	struct:AdcRegisters
events_compare	chips/nrf5x/src/rtc.rs	/^    events_compare: [ReadWrite<u32, Event::Register>; 4],$/;"	m	struct:RtcRegisters
events_compare	chips/nrf5x/src/timer.rs	/^    events_compare: [ReadWrite<u32, Event::Register>; 4],$/;"	m	struct:TimerRegisters
events_ctto	chips/nrf52/src/clock.rs	/^    events_ctto: ReadOnly<u32, Status::Register>,$/;"	m	struct:ClockRegisters
events_done	chips/nrf52/src/adc.rs	/^    events_done: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:AdcRegisters
events_done	chips/nrf52/src/clock.rs	/^    events_done: ReadOnly<u32, Status::Register>,$/;"	m	struct:ClockRegisters
events_end	chips/nrf52/src/adc.rs	/^    events_end: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:AdcRegisters
events_end	chips/nrf52/src/spi.rs	/^    events_end: ReadWrite<u32, EVENT::Register>,     \/\/ End of RXD buffer and TXD buffer reach/;"	m	struct:SpimRegisters
events_endrx	chips/nrf52/src/spi.rs	/^    events_endrx: ReadWrite<u32, EVENT::Register>,   \/\/ End of RXD buffer reached$/;"	m	struct:SpimRegisters
events_endtx	chips/nrf52/src/spi.rs	/^    events_endtx: ReadWrite<u32, EVENT::Register>,   \/\/ End of TXD buffer reached$/;"	m	struct:SpimRegisters
events_error	chips/nrf51/src/i2c.rs	/^    events_error: ReadWrite<u32, Event::Register>,$/;"	m	struct:TwimRegisters
events_error	chips/nrf52/src/i2c.rs	/^    events_error: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:TwimRegisters
events_hfclkstarted	chips/nrf52/src/clock.rs	/^    events_hfclkstarted: ReadOnly<u32, Status::Register>,$/;"	m	struct:ClockRegisters
events_lastrx	chips/nrf52/src/i2c.rs	/^    events_lastrx: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:TwimRegisters
events_lasttx	chips/nrf52/src/i2c.rs	/^    events_lasttx: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:TwimRegisters
events_lfclkstarted	chips/nrf52/src/clock.rs	/^    events_lfclkstarted: ReadOnly<u32, Status::Register>,$/;"	m	struct:ClockRegisters
events_ovrflw	chips/nrf5x/src/rtc.rs	/^    events_ovrflw: ReadWrite<u32, Event::Register>,$/;"	m	struct:RtcRegisters
events_resultdone	chips/nrf52/src/adc.rs	/^    events_resultdone: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:AdcRegisters
events_rxdreceived	chips/nrf51/src/i2c.rs	/^    events_rxdreceived: ReadWrite<u32, Event::Register>,$/;"	m	struct:TwimRegisters
events_rxstarted	chips/nrf52/src/i2c.rs	/^    events_rxstarted: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:TwimRegisters
events_started	chips/nrf52/src/adc.rs	/^    events_started: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:AdcRegisters
events_started	chips/nrf52/src/spi.rs	/^    events_started: ReadWrite<u32, EVENT::Register>, \/\/ Transaction started$/;"	m	struct:SpimRegisters
events_stopped	chips/nrf51/src/i2c.rs	/^    events_stopped: ReadWrite<u32, Event::Register>,$/;"	m	struct:TwimRegisters
events_stopped	chips/nrf52/src/adc.rs	/^    events_stopped: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:AdcRegisters
events_stopped	chips/nrf52/src/i2c.rs	/^    events_stopped: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:TwimRegisters
events_stopped	chips/nrf52/src/spi.rs	/^    events_stopped: ReadWrite<u32, EVENT::Register>, \/\/ SPI transaction has stopped$/;"	m	struct:SpimRegisters
events_suspended	chips/nrf52/src/i2c.rs	/^    events_suspended: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:TwimRegisters
events_tick	chips/nrf5x/src/rtc.rs	/^    events_tick: ReadWrite<u32, Event::Register>,$/;"	m	struct:RtcRegisters
events_txdsent	chips/nrf51/src/i2c.rs	/^    events_txdsent: ReadWrite<u32, Event::Register>,$/;"	m	struct:TwimRegisters
events_txstarted	chips/nrf52/src/i2c.rs	/^    events_txstarted: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:TwimRegisters
ever	chips/sam4l/src/gpio.rs	/^    ever: Register,$/;"	m	struct:GpioRegisters
evflags	chips/cc26x2/src/gpio.rs	/^    pub evflags: ReadWrite<u32>,$/;"	m	struct:GpioRegisters
evflags	chips/cc26x2/src/rtc.rs	/^    evflags: ReadWrite<u32, EvFlags::Register>,$/;"	m	struct:RtcRegisters
evm	chips/sam4l/src/ast.rs	/^    evm: ReadOnly<u32, Event::Register>,$/;"	m	struct:AstRegisters
evten	chips/nrf5x/src/rtc.rs	/^    evten: ReadWrite<u32, Inte::Register>,$/;"	m	struct:RtcRegisters
evtenclr	chips/nrf5x/src/rtc.rs	/^    evtenclr: ReadWrite<u32, Inte::Register>,$/;"	m	struct:RtcRegisters
evtenset	chips/nrf5x/src/rtc.rs	/^    evtenset: ReadWrite<u32, Inte::Register>,$/;"	m	struct:RtcRegisters
execQuery	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:initSearch
execSearch	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
exp	kernel/src/common/math.rs	/^    pub fn exp<R>(self) -> R$/;"	F	implementation:PowerOfTwo
expandSection	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
expect	libraries/tock-cells/src/optional_cell.rs	/^    pub fn expect(&self, msg: &str) -> T {$/;"	F	implementation:OptionalCell
expiration	capsules/src/alarm.rs	/^    expiration: Expiration,$/;"	m	struct:AlarmData
expiration	capsules/src/ble_advertising_driver.rs	/^    expiration: Expiration,$/;"	m	struct:AlarmData
expose_to	kernel/src/mem.rs	/^    crate unsafe fn expose_to(&self, appid: AppId) -> bool {$/;"	F	implementation:AppSlice
extract	kernel/src/debug.rs	/^    fn extract(&self) -> Option<(usize, usize, &mut [u8])> {$/;"	F	implementation:DebugWriter
extract	kernel/src/debug.rs	/^    fn extract(&self) -> Option<(usize, usize, &mut [u8])> {$/;"	F	implementation:DebugWriterWrapper
extract	libraries/tock-register-interface/src/registers.rs	/^    pub fn extract(&self) -> LocalRegisterCopy<T, R> {$/;"	F	implementation:ReadOnly
extract	libraries/tock-register-interface/src/registers.rs	/^    pub fn extract(&self) -> LocalRegisterCopy<T, R> {$/;"	F	implementation:ReadWrite
extractGenerics	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execQuery
fake_return_to_userland	boards/hifive1/src/main.rs	/^pub unsafe fn fake_return_to_userland() {$/;"	f
fall_ie	chips/sifive/src/gpio.rs	/^    fall_ie: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
fall_ip	chips/sifive/src/gpio.rs	/^    fall_ip: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
fastsleep	chips/sam4l/src/pm.rs	/^    fastsleep: ReadWrite<u32, FastSleep::Register>,$/;"	m	struct:PmRegisters
fault_fmt	arch/cortex-m/src/syscall.rs	/^    unsafe fn fault_fmt(&self, writer: &mut Write) {$/;"	F	implementation:SysCall
fault_fmt	arch/riscv32i/src/syscall.rs	/^    unsafe fn fault_fmt(&self, writer: &mut Write) {}$/;"	F	implementation:SysCall
fault_fmt	kernel/src/process.rs	/^    unsafe fn fault_fmt(&self, writer: &mut Write) {$/;"	F	implementation:Process
fault_fmt	kernel/src/process.rs	/^    unsafe fn fault_fmt(&self, writer: &mut Write);$/;"	F	interface:ProcessType
fault_fmt	kernel/src/syscall.rs	/^    unsafe fn fault_fmt(&self, writer: &mut Write);$/;"	F	interface:UserspaceKernelBoundary
fbrd	chips/cc26x2/src/uart.rs	/^    fbrd: ReadWrite<u32, FracDivisor::Register>,$/;"	m	struct:UartRegisters
fbrd	chips/tm4c129x/src/uart.rs	/^    fbrd: VolatileCell<u32>,$/;"	m	struct:UartRegisters
fcmd	chips/sam4l/src/flashcalw.rs	/^    fcmd: ReadWrite<u32, FlashCommand::Register>,$/;"	m	struct:FlashcalwRegisters
fcr	chips/sam4l/src/flashcalw.rs	/^    fcr: ReadWrite<u32, FlashControl::Register>,$/;"	m	struct:FlashcalwRegisters
fds	tools/usb/bulk-echo-fast/main.c	/^static struct pollfd fds[max_poll_fds];$/;"	v	typeref:struct:pollfd[]	file:
features	arch/riscv32i/target/debug/.fingerprint/bare-metal-24acc5d3590b7513/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0./;"	s
features	arch/riscv32i/target/debug/.fingerprint/bare-metal-7dd6462cd7700cd7/lib-bare_metal-7dd6462cd7700cd7.json	/^{"rustc":10377385455325587324,"features":"[]","target":10318145944003877215,"profile":1187018370/;"	s
features	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s
features	arch/riscv32i/target/debug/.fingerprint/bit_field-56ae9b63ca7874f1/lib-bit_field-56ae9b63ca7874f1.json	/^{"rustc":10377385455325587324,"features":"[]","target":6212214415640514931,"profile":11870183705/;"	s
features	arch/riscv32i/target/debug/.fingerprint/riscvregs-0c285ab8bbe41fa7/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"db/;"	s
features	arch/riscv32i/target/debug/.fingerprint/riscvregs-126b22abd70e245c/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0e/;"	s
features	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s
features	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s
features	arch/riscv32i/target/debug/.fingerprint/riscvregs-7b5528c14e2c7055/build-script-build_script_build-7b5528c14e2c7055.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s
features	arch/riscv32i/target/debug/.fingerprint/riscvregs-d6ebf6a6021a8976/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"78/;"	s
features	arch/riscv32i/target/debug/.fingerprint/riscvregs-e220008a48c83b01/build-script-build_script_build-e220008a48c83b01.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s
features	arch/riscv32i/target/debug/.fingerprint/riscvregs-e3787b41749bb5b0/build-script-build_script_build-e3787b41749bb5b0.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	s
features	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	s
features	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	s
features	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	s
features	arch/riscv32i/target/debug/.fingerprint/semver-parser-1d01b4b0efb84ec1/lib-semver_parser-1d01b4b0efb84ec1.json	/^{"rustc":10377385455325587324,"features":"[]","target":11042536386261824010,"profile":1187018370/;"	s
features	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	s
features	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	s
features	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	s
features	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	s
features	boards/hifive1/target/debug/.fingerprint/riscvregs-8a1ccaee318cf981/build-script-build_script_build-8a1ccaee318cf981.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	s
features	boards/hifive1/target/debug/.fingerprint/riscvregs-e5cf2a660cb8088f/build-script-build_script_build-e5cf2a660cb8088f.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	s
features	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	s
features	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	s
features	boards/hifive1/target/debug/.fingerprint/semver-parser-0cbc1426a8cfeede/lib-semver_parser-0cbc1426a8cfeede.json	/^{"rustc":4168008693276420879,"features":"[]","target":3650675185119913205,"profile":118386650091/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-3818320f62d4b526/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-5a31f60d1aed50ae/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-90db6ed0e5b8c3d4/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	s
features	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	s
features	chips/sam4l/src/spi.rs	/^    features: ReadOnly<u32>,$/;"	m	struct:SpiRegisters
features	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	s
features	kernel/target/debug/.fingerprint/tock-cells-816571e4fa975f6b/doc-lib-tock_cells-816571e4fa975f6b.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":3062756892/;"	s
features	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	s
features	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	s
features	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	s
features	kernel/target/debug/.fingerprint/tock-registers-e7eec879e9fa92db/doc-lib-tock_registers-e7eec879e9fa92db.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":30627568924/;"	s
features	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	s
feed	chips/sifive/src/watchdog.rs	/^    fn feed(&self) {$/;"	F	implementation:Watchdog
fetch_or_relaxed	kernel/src/common/deferred_call.rs	/^    crate fn fetch_or_relaxed(&self, val: usize) {$/;"	F	implementation:AtomicUsize
fgpfrhi	chips/sam4l/src/flashcalw.rs	/^    fgpfrhi: ReadOnly<u32, FlashGeneralPurposeFuseHigh::Register>,$/;"	m	struct:FlashcalwRegisters
fgpfrlo	chips/sam4l/src/flashcalw.rs	/^    fgpfrlo: ReadOnly<u32, FlashGeneralPurposeFuseLow::Register>,$/;"	m	struct:FlashcalwRegisters
ficr	chips/nrf52/src/lib.rs	/^pub mod ficr;$/;"	n
fidi	chips/sam4l/src/usart.rs	/^    fidi: ReadWrite<u32, FidiRatio::Register>, \/\/ 0x40$/;"	m	struct:UsartRegisters
fields	tools/svd2regs.py	/^    def fields(*args):$/;"	m	class:CodeBlock
fields	tools/svd2regs.py	/^    def fields(base, peripheral):$/;"	m	class:PeripheralBaseDeclaration
fields	tools/svd2regs.py	/^    def fields(cnt, size):$/;"	m	class:ReservedStructField
fields	tools/svd2regs.py	/^    def fields(enum):$/;"	m	class:BitfieldFieldEnum
fields	tools/svd2regs.py	/^    def fields(field):$/;"	m	class:BitfieldField
fields	tools/svd2regs.py	/^    def fields(name, peripheral, dev):$/;"	m	class:PeripheralStruct
fields	tools/svd2regs.py	/^    def fields(register):$/;"	m	class:Bitfield
fields	tools/svd2regs.py	/^    def fields(register, size):$/;"	m	class:PeripheralStructField
fields	tools/svd2regs.py	/^    def fields(registers):$/;"	m	class:BitfieldsMacro
fieldset	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
fifo_disable	chips/cc26x2/src/uart.rs	/^    fn fifo_disable(&self) {$/;"	F	implementation:UART
fifo_enable	chips/cc26x2/src/uart.rs	/^    fn fifo_enable(&self) {$/;"	F	implementation:UART
figcaption	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
figure	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
filter	libraries/tock-cells/src/optional_cell.rs	/^    pub fn filter<P>(self, predicate: P) -> Option<T>$/;"	F	implementation:OptionalCell
finalize	boards/imix/src/components/adc.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:AdcComponent
finalize	boards/imix/src/components/alarm.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:AlarmDriverComponent
finalize	boards/imix/src/components/analog_comparator.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:AcComponent
finalize	boards/imix/src/components/button.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:ButtonComponent
finalize	boards/imix/src/components/console.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:ConsoleComponent
finalize	boards/imix/src/components/crc.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:CrcComponent
finalize	boards/imix/src/components/fxos8700.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:Fxos8700Component
finalize	boards/imix/src/components/fxos8700.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:NineDofComponent
finalize	boards/imix/src/components/gpio.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:GpioComponent
finalize	boards/imix/src/components/isl29035.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:AmbientLightComponent
finalize	boards/imix/src/components/isl29035.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:Isl29035Component
finalize	boards/imix/src/components/led.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:LedComponent
finalize	boards/imix/src/components/nonvolatile_storage.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:NonvolatileStorageComponent
finalize	boards/imix/src/components/nrf51822.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:Nrf51822Component
finalize	boards/imix/src/components/process_console.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:ProcessConsoleComponent
finalize	boards/imix/src/components/radio.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:RadioComponent
finalize	boards/imix/src/components/rf233.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:RF233Component
finalize	boards/imix/src/components/rng.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:RngComponent
finalize	boards/imix/src/components/si7021.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:HumidityComponent
finalize	boards/imix/src/components/si7021.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:SI7021Component
finalize	boards/imix/src/components/si7021.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:TemperatureComponent
finalize	boards/imix/src/components/spi.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:SpiComponent
finalize	boards/imix/src/components/spi.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:SpiSyscallComponent
finalize	boards/imix/src/components/udp_6lowpan.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:UDPComponent
finalize	boards/imix/src/components/usb.rs	/^    unsafe fn finalize(&mut self) -> Self::Output {$/;"	F	implementation:UsbComponent
finalize	kernel/src/component.rs	/^    unsafe fn finalize(&mut self) -> Self::Output;$/;"	F	interface:Component
findArg	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execQuery
findParentElement	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
find_channel	chips/nrf5x/src/gpio.rs	/^    fn find_channel(&self, pin: u8) -> Result<usize, ()> {$/;"	F	implementation:GPIOPin
fired	boards/imix/src/icmp_lowpan_test.rs	/^    fn fired(&self) {$/;"	F	implementation:LowpanICMPTest
fired	boards/imix/src/ipv6_lowpan_test.rs	/^    fn fired(&self) {$/;"	F	implementation:LowpanTest
fired	boards/imix/src/sixlowpan_dummy.rs	/^    fn fired(&self) {$/;"	F	implementation:LowpanTest
fired	boards/imix/src/udp_lowpan_test.rs	/^    fn fired(&self) {$/;"	F	implementation:LowpanTest
fired	capsules/src/alarm.rs	/^    fn fired(&self) {$/;"	F	implementation:AlarmDriver
fired	capsules/src/analog_comparator.rs	/^    fn fired(&self, channel: usize) {$/;"	F	implementation:AnalogComparator
fired	capsules/src/ble_advertising_driver.rs	/^    fn fired(&self) {$/;"	f
fired	capsules/src/button.rs	/^    fn fired(&self, pin_num: usize) {$/;"	F	implementation:Button
fired	capsules/src/debug_process_restart.rs	/^    fn fired(&self, _pin_num: usize) {$/;"	F	implementation:DebugProcessRestart
fired	capsules/src/fxos8700cq.rs	/^    fn fired(&self, _: usize) {$/;"	F	implementation:Fxos8700cq
fired	capsules/src/gpio.rs	/^    fn fired(&self, pin_num: usize) {$/;"	F	implementation:GPIO
fired	capsules/src/gpio_async.rs	/^    fn fired(&self, pin: usize, identifier: usize) {$/;"	F	implementation:GPIOAsync
fired	capsules/src/ieee802154/xmac.rs	/^    fn fired(&self) {$/;"	F	implementation:XMac
fired	capsules/src/isl29035.rs	/^    fn fired(&self) {$/;"	F	implementation:Isl29035
fired	capsules/src/lps25hb.rs	/^    fn fired(&self, _: usize) {$/;"	F	implementation:LPS25HB
fired	capsules/src/ltc294x.rs	/^    fn fired(&self, _: usize) {$/;"	F	implementation:LTC294X
fired	capsules/src/mcp230xx.rs	/^    fn fired(&self, bank_number: usize) {$/;"	F	implementation:MCP230xx
fired	capsules/src/mx25r6435f.rs	/^    fn fired(&self) {$/;"	F	implementation:MX25R6435F
fired	capsules/src/net/ipv6/ipv6_send.rs	/^    fn fired(&self) {$/;"	F	implementation:IP6SendStruct
fired	capsules/src/rf233.rs	/^    fn fired(&self, identifier: usize) {$/;"	F	implementation:RF233
fired	capsules/src/sdcard.rs	/^    fn fired(&self) {$/;"	F	implementation:SDCard
fired	capsules/src/sdcard.rs	/^    fn fired(&self, _: usize) {$/;"	F	implementation:SDCard
fired	capsules/src/segger_rtt.rs	/^    fn fired(&self) {$/;"	F	implementation:SeggerRtt
fired	capsules/src/si7021.rs	/^    fn fired(&self) {$/;"	F	implementation:SI7021
fired	capsules/src/tmp006.rs	/^    fn fired(&self, _: usize) {$/;"	F	implementation:TMP006
fired	capsules/src/tsl2561.rs	/^    fn fired(&self, _: usize) {$/;"	F	implementation:TSL2561
fired	capsules/src/virtual_alarm.rs	/^    fn fired(&self) {$/;"	F	implementation:MuxAlarm
fired	capsules/src/virtual_alarm.rs	/^    fn fired(&self) {$/;"	F	implementation:VirtualMuxAlarm
fired	kernel/src/hil/analog_comparator.rs	/^    fn fired(&self, usize);$/;"	F	interface:Client
fired	kernel/src/hil/gpio.rs	/^    fn fired(&self, identifier: usize);$/;"	F	interface:Client
fired	kernel/src/hil/gpio_async.rs	/^    fn fired(&self, pin: usize, identifier: usize);$/;"	F	interface:Client
fired	kernel/src/hil/time.rs	/^    fn fired(&self);$/;"	F	interface:Client
flags	capsules/src/segger_rtt.rs	/^    flags: u32,$/;"	m	struct:SeggerRttBuffer
flags	kernel/src/tbfheader.rs	/^    flags: u32,$/;"	m	struct:TbfHeaderV2Base
flash	boards/arty-e21/Makefile	/^flash: target\/$(TARGET)\/release\/$(PLATFORM).bin$/;"	t
flash	boards/ek-tm4c1294xl/Makefile	/^flash: target\/$(TARGET)\/release\/$(PLATFORM).hex$/;"	t
flash	boards/hail/Makefile	/^flash: target\/$(TARGET)\/release\/$(PLATFORM).bin$/;"	t
flash	boards/hifive1/Makefile	/^flash: target\/$(TARGET)\/release\/$(PLATFORM).elf$/;"	t
flash	boards/imix/Makefile	/^flash: target\/$(TARGET)\/release\/$(PLATFORM).bin$/;"	t
flash	boards/launchxl/Makefile	/^flash: target\/$(TARGET)\/release\/launchxl.bin$/;"	t
flash	boards/nordic/nrf51dk/Makefile	/^flash: target\/$(TARGET)\/release\/$(PLATFORM).bin$/;"	t
flash	boards/nordic/nrf52840dk/Makefile	/^flash: target\/$(TARGET)\/release\/$(PLATFORM).bin$/;"	t
flash	boards/nordic/nrf52dk/Makefile	/^flash: target\/$(TARGET)\/release\/$(PLATFORM).bin$/;"	t
flash	capsules/src/virtual_flash.rs	/^    flash: &'a F,$/;"	m	struct:MuxFlash
flash	chips/nrf52/src/ficr.rs	/^    fn flash(&self) -> Flash {$/;"	F	implementation:Ficr
flash	kernel/src/hil/mod.rs	/^pub mod flash;$/;"	n
flash	kernel/src/process.rs	/^    flash: &'static [u8],$/;"	m	struct:Process
flash-bootloader	boards/hail/Makefile	/^flash-bootloader: bootloader\/bootloader.bin$/;"	t
flash-bootloader	boards/imix/Makefile	/^flash-bootloader: bootloader\/bootloader.bin$/;"	t
flash-ccfg	boards/launchxl/Makefile	/^flash-ccfg: target\/$(TARGET)\/release\/launchxlccfg.bin$/;"	t
flash-ccfg-jlink	boards/launchxl/Makefile	/^flash-ccfg-jlink: target\/$(TARGET)\/release\/launchxlccfg.bin$/;"	t
flash-debug	boards/hail/Makefile	/^flash-debug: target\/$(TARGET)\/debug\/$(PLATFORM).bin$/;"	t
flash-debug	boards/imix/Makefile	/^flash-debug: target\/$(TARGET)\/debug\/$(PLATFORM).bin$/;"	t
flash-e21	boards/arty-e21/Makefile	/^flash-e21: sifive_coreip_E21_FPGA_Evaluation_v1p0_rc2.mcs$/;"	t
flash-jlink	boards/arty-e21/Makefile	/^flash-jlink: target\/$(TARGET)\/release\/$(PLATFORM).elf$/;"	t
flash-jlink	boards/launchxl/Makefile	/^flash-jlink: target\/$(TARGET)\/release\/launchxl.bin$/;"	t
flash_address	capsules/src/app_flash_driver.rs	/^    flash_address: usize,$/;"	m	struct:App
flash_end	kernel/src/process.rs	/^    fn flash_end(&self) -> *const u8 {$/;"	F	implementation:Process
flash_end	kernel/src/process.rs	/^    fn flash_end(&self) -> *const u8;$/;"	F	interface:ProcessType
flash_non_protected_start	kernel/src/process.rs	/^    fn flash_non_protected_start(&self) -> *const u8 {$/;"	F	implementation:Process
flash_non_protected_start	kernel/src/process.rs	/^    fn flash_non_protected_start(&self) -> *const u8;$/;"	F	interface:ProcessType
flash_start	kernel/src/process.rs	/^    fn flash_start(&self) -> *const u8 {$/;"	F	implementation:Process
flash_start	kernel/src/process.rs	/^    fn flash_start(&self) -> *const u8;$/;"	F	interface:ProcessType
flashcalw	chips/sam4l/src/lib.rs	/^pub mod flashcalw;$/;"	n
flashcalw_erase_page	chips/sam4l/src/flashcalw.rs	/^    fn flashcalw_erase_page(&self, page_number: i32) {$/;"	F	implementation:FLASHCALW
flashcalw_write_page	chips/sam4l/src/flashcalw.rs	/^    fn flashcalw_write_page(&self, page_number: i32) {$/;"	F	implementation:FLASHCALW
floor	kernel/src/common/math.rs	/^    pub fn floor<F: Into<u32>>(f: F) -> PowerOfTwo {$/;"	F	implementation:PowerOfTwo
flt	tools/svd2regs.py	/^        flt = lambda p: p.group_name == peripheral_name$/;"	f	function:parse	file:
flt	tools/svd2regs.py	/^        flt = lambda p: p.name == peripheral_name$/;"	f	function:parse	file:
flush	kernel/src/debug.rs	/^pub unsafe fn flush<W: Write>(writer: &mut W) {$/;"	f
fm25cl	capsules/src/lib.rs	/^pub mod fm25cl;$/;"	n
fmt	Makefile	/^fmt format formatall:$/;"	t
fmt	capsules/src/usb.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	F	implementation:DeviceRequestType
fmt	chips/nrf52/src/ficr.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	F	implementation:Ficr
fmt	chips/sam4l/src/usbc/debug.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	F	implementation:HexBuf
fmt	chips/sam4l/src/usbc/debug.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	F	implementation:UdintFlags
fmt	chips/sam4l/src/usbc/debug.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	F	implementation:UestaFlags
fmt	kernel/src/callback.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	F	implementation:AppId
fmt	kernel/src/hil/i2c.rs	/^    fn fmt(&self, fmt: &mut Formatter) -> Result {$/;"	F	implementation:Error
fmt	libraries/tock-register-interface/src/registers.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	F	implementation:LocalRegisterCopy
fn_ptr	kernel/src/callback.rs	/^    fn_ptr: NonNull<*mut ()>,$/;"	m	struct:Callback
focusSearchBar	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
footer	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
force_disable_dma_and_crypto	chips/cc26x2/src/prcm.rs	/^pub fn force_disable_dma_and_crypto() {$/;"	f
fork_tep	chips/nrf52/src/ppi.rs	/^    fork_tep: [ReadWrite<u32, TaskEndPoint::Register>; 32],$/;"	m	struct:PpiRegisters
format	Makefile	/^fmt format formatall:$/;"	t
formatall	Makefile	/^fmt format formatall:$/;"	t
fpcr	chips/sam4l/src/scif.rs	/^    fpcr: ReadWrite<u32>,$/;"	m	struct:ScifRegisters
fpdiv	chips/sam4l/src/scif.rs	/^    fpdiv: ReadWrite<u32>,$/;"	m	struct:ScifRegisters
fpmul	chips/sam4l/src/scif.rs	/^    fpmul: ReadWrite<u32>,$/;"	m	struct:ScifRegisters
fpr	chips/sam4l/src/flashcalw.rs	/^    fpr: ReadOnly<u32, FlashParameter::Register>,$/;"	m	struct:FlashcalwRegisters
fr	chips/cc26x2/src/uart.rs	/^    fr: ReadOnly<u32, Flags::Register>,$/;"	m	struct:UartRegisters
fr	chips/tm4c129x/src/uart.rs	/^    fr: VolatileCell<u32>,$/;"	m	struct:UartRegisters
frag_utils	capsules/src/net/mod.rs	/^pub mod frag_utils;$/;"	n
frame_control	capsules/src/net/ieee802154.rs	/^mod frame_control {$/;"	n
frame_counter	capsules/src/net/ieee802154.rs	/^    pub frame_counter: Option<u32>,$/;"	m	struct:Security
frame_pending	capsules/src/net/ieee802154.rs	/^    pub frame_pending: bool,$/;"	m	struct:Header
frame_read	capsules/src/rf233.rs	/^    fn frame_read(&self, buf: &'static mut [u8], frame_len: u8) -> ReturnCode {$/;"	F	implementation:RF233
frame_type	capsules/src/ieee802154/framer.rs	/^    frame_type: FrameType,$/;"	m	struct:FrameInfo
frame_type	capsules/src/net/ieee802154.rs	/^    pub frame_type: FrameType,$/;"	m	struct:Header
frame_write	capsules/src/rf233.rs	/^    fn frame_write(&self, buf: &'static mut [u8], frame_len: u8) -> ReturnCode {$/;"	F	implementation:RF233
framer	capsules/src/ieee802154/mod.rs	/^pub mod framer;$/;"	n
free	kernel/src/process.rs	/^    unsafe fn free(&self, _: *mut u8) {}$/;"	F	implementation:Process
free	kernel/src/process.rs	/^    unsafe fn free(&self, _: *mut u8);$/;"	F	interface:ProcessType
frequency	chips/cc26x2/src/rtc.rs	/^    fn frequency() -> u32 {$/;"	F	implementation:RtcFreq
frequency	chips/nrf51/src/i2c.rs	/^    frequency: ReadWrite<u32, Frequency::Register>,$/;"	m	struct:TwimRegisters
frequency	chips/nrf51/src/radio.rs	/^    frequency: ReadWrite<u32, Frequency::Register>, \/\/ 0x508 - 0x50c$/;"	m	struct:RadioRegisters
frequency	chips/nrf52/src/i2c.rs	/^    frequency: ReadWrite<u32>,$/;"	m	struct:TwimRegisters
frequency	chips/nrf52/src/radio.rs	/^    frequency: ReadWrite<u32, Frequency::Register>,$/;"	m	struct:RadioRegisters
frequency	chips/nrf52/src/spi.rs	/^    frequency: ReadWrite<u32>,                       \/\/ SPI frequency$/;"	m	struct:SpimRegisters
frequency	kernel/src/hil/time.rs	/^    fn frequency() -> u32 {$/;"	F	implementation:Freq16KHz
frequency	kernel/src/hil/time.rs	/^    fn frequency() -> u32 {$/;"	F	implementation:Freq16MHz
frequency	kernel/src/hil/time.rs	/^    fn frequency() -> u32 {$/;"	F	implementation:Freq1KHz
frequency	kernel/src/hil/time.rs	/^    fn frequency() -> u32 {$/;"	F	implementation:Freq32KHz
frequency	kernel/src/hil/time.rs	/^    fn frequency() -> u32;$/;"	F	interface:Frequency
from	capsules/src/ieee802154/driver.rs	/^    fn from(key_id: &'a KeyId) -> Self {$/;"	F	implementation:KeyIdModeUserland
from	capsules/src/net/ieee802154.rs	/^    fn from(key_id: &'a KeyId) -> Self {$/;"	F	implementation:KeyIdMode
from	capsules/src/net/ieee802154.rs	/^    fn from(opt_addr: &'a Option<MacAddress>) -> Self {$/;"	F	implementation:AddressMode
from	capsules/src/net/thread/tlv.rs	/^    fn from(network_data_tlv: &'a NetworkDataTlv<'b>) -> Self {$/;"	F	implementation:NetworkDataTlvType
from	capsules/src/net/thread/tlv.rs	/^    fn from(network_mgmt_tlv: &'a NetworkManagementTlv<'b>) -> Self {$/;"	F	implementation:NetworkManagementTlvType
from	capsules/src/net/thread/tlv.rs	/^    fn from(prefix_sub_tlv: &'a PrefixSubTlv<'b>) -> Self {$/;"	F	implementation:PrefixSubTlvType
from	capsules/src/net/thread/tlv.rs	/^    fn from(service_sub_tlv: &'a ServiceSubTlv) -> Self {$/;"	F	implementation:ServiceSubTlvType
from	capsules/src/net/thread/tlv.rs	/^    fn from(tlv: &'a Tlv<'b>) -> Self {$/;"	F	implementation:TlvType
from	capsules/src/net/thread/tlv.rs	/^    fn from(tlv_type: u8) -> Self {$/;"	F	implementation:NetworkDataTlvType
from	capsules/src/net/thread/tlv.rs	/^    fn from(tlv_type: u8) -> Self {$/;"	F	implementation:PrefixSubTlvType
from	capsules/src/net/thread/tlv.rs	/^    fn from(tlv_type: u8) -> Self {$/;"	F	implementation:ServiceSubTlvType
from	capsules/src/net/thread/tlv.rs	/^    fn from(tlv_type: u8) -> Self {$/;"	F	implementation:TlvType
from	capsules/src/net/thread/tlv.rs	/^    fn from(type_num: u8) -> Self {$/;"	F	implementation:NetworkManagementTlvType
from	capsules/src/usb.rs	/^    fn from(ca: ConfigurationAttributes) -> u8 {$/;"	F	implementation:u8
from	chips/cc26x2/src/prcm.rs	/^    fn from(n: u32) -> Self {$/;"	F	implementation:PowerDomain
from	chips/nrf52/src/spi.rs	/^    fn from(freq: Frequency) -> u32 {$/;"	F	implementation:u32
from	chips/nrf52/src/spi.rs	/^    fn from(freq: u32) -> Frequency {$/;"	F	implementation:Frequency
from	chips/sam4l/src/usbc/mod.rs	/^    fn from(bi: BankIndex) -> usize {$/;"	F	implementation:usize
from	chips/sam4l/src/usbc/mod.rs	/^    fn from(ei: EndpointIndex) -> usize {$/;"	F	implementation:usize
from	chips/sam4l/src/wdt.rs	/^    fn from(clock: WdtClockSource) -> Self {$/;"	F	implementation:FieldValue
from	kernel/src/process.rs	/^    fn from(err: Error) -> ReturnCode {$/;"	F	implementation:ReturnCode
from	kernel/src/returncode.rs	/^    fn from(original: ReturnCode) -> isize {$/;"	F	implementation:isize
from	kernel/src/returncode.rs	/^    fn from(original: ReturnCode) -> usize {$/;"	F	implementation:usize
from	libraries/enum_primitive/src/cast.rs	/^    fn from<T: ToPrimitive>(n: T) -> Option<Self>;$/;"	F	interface:NumCast
from	libraries/enum_primitive/src/cast.rs	/^    fn from<U: ToPrimitive>(n: U) -> Option<Self> {$/;"	F	implementation:Wrapping
from	libraries/tock-register-interface/src/registers.rs	/^    fn from(r: LocalRegisterCopy<u16, R>) -> u16 {$/;"	F	implementation:u16
from	libraries/tock-register-interface/src/registers.rs	/^    fn from(r: LocalRegisterCopy<u32, R>) -> u32 {$/;"	F	implementation:u32
from	libraries/tock-register-interface/src/registers.rs	/^    fn from(r: LocalRegisterCopy<u64, R>) -> u64 {$/;"	F	implementation:u64
from	libraries/tock-register-interface/src/registers.rs	/^    fn from(r: LocalRegisterCopy<u8, R>) -> u8 {$/;"	F	implementation:u8
from	libraries/tock-register-interface/src/registers.rs	/^    fn from(val: FieldValue<u16, R>) -> u16 {$/;"	F	implementation:u16
from	libraries/tock-register-interface/src/registers.rs	/^    fn from(val: FieldValue<u32, R>) -> u32 {$/;"	F	implementation:u32
from	libraries/tock-register-interface/src/registers.rs	/^    fn from(val: FieldValue<u64, R>) -> u64 {$/;"	F	implementation:u64
from	libraries/tock-register-interface/src/registers.rs	/^    fn from(val: FieldValue<u8, R>) -> u8 {$/;"	F	implementation:u8
from_fcf	capsules/src/net/ieee802154.rs	/^    pub fn from_fcf(fcf: u16) -> Option<FrameType> {$/;"	F	implementation:FrameType
from_fcf	capsules/src/net/ieee802154.rs	/^    pub fn from_fcf(fcf: u16) -> Option<FrameVersion> {$/;"	F	implementation:FrameVersion
from_i16	libraries/enum_primitive/src/cast.rs	/^    fn from_i16(n: i16) -> Option<Self> {$/;"	F	interface:FromPrimitive
from_i32	libraries/enum_primitive/src/cast.rs	/^    fn from_i32(n: i32) -> Option<Self> {$/;"	F	interface:FromPrimitive
from_i64	libraries/enum_primitive/src/cast.rs	/^    fn from_i64(n: i64) -> Option<Self>;$/;"	F	interface:FromPrimitive
from_i8	libraries/enum_primitive/src/cast.rs	/^    fn from_i8(n: i8) -> Option<Self> {$/;"	F	interface:FromPrimitive
from_isize	libraries/enum_primitive/src/cast.rs	/^    fn from_isize(n: isize) -> Option<Self> {$/;"	F	interface:FromPrimitive
from_mode	capsules/src/net/ieee802154.rs	/^    pub fn from_mode(mode: u16) -> Option<AddressMode> {$/;"	F	implementation:AddressMode
from_scf	capsules/src/net/ieee802154.rs	/^    pub fn from_scf(scf: u8) -> Option<KeyIdMode> {$/;"	F	implementation:KeyIdMode
from_scf	capsules/src/net/ieee802154.rs	/^    pub fn from_scf(scf: u8) -> Option<SecurityLevel> {$/;"	F	implementation:SecurityLevel
from_u16	libraries/enum_primitive/src/cast.rs	/^    fn from_u16(n: u16) -> Option<Self> {$/;"	F	interface:FromPrimitive
from_u32	libraries/enum_primitive/src/cast.rs	/^    fn from_u32(n: u32) -> Option<Self> {$/;"	F	interface:FromPrimitive
from_u64	libraries/enum_primitive/src/cast.rs	/^    fn from_u64(n: u64) -> Option<Self>;$/;"	F	interface:FromPrimitive
from_u8	capsules/src/ieee802154/driver.rs	/^    pub fn from_u8(byte: u8) -> Option<KeyIdModeUserland> {$/;"	F	implementation:KeyIdModeUserland
from_u8	libraries/enum_primitive/src/cast.rs	/^    fn from_u8(n: u8) -> Option<Self> {$/;"	F	interface:FromPrimitive
from_usize	libraries/enum_primitive/src/cast.rs	/^    fn from_usize(n: usize) -> Option<Self> {$/;"	F	interface:FromPrimitive
fsr	chips/sam4l/src/flashcalw.rs	/^    fsr: ReadOnly<u32, FlashStatus::Register>,$/;"	m	struct:FlashcalwRegisters
func	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
function	boards/imix/src/power.rs	/^    function: Option<PeripheralFunction>,$/;"	m	struct:DetachablePin
funky_things	capsules/examples/traitobj_list.rs	/^    funky_things: List<'a, Funky<'a>>,$/;"	m	struct:Manager
fvr	chips/sam4l/src/flashcalw.rs	/^    fvr: ReadOnly<u32, FlashVersion::Register>,$/;"	m	struct:FlashcalwRegisters
fxos8700	boards/imix/src/components/mod.rs	/^pub mod fxos8700;$/;"	n
fxos8700cq	boards/imix/src/components/fxos8700.rs	/^    type Output = &'static fxos8700cq::Fxos8700cq<'static>;$/;"	v	implementation:Fxos8700Component
fxos8700cq	capsules/src/lib.rs	/^pub mod fxos8700cq;$/;"	n
g4870	doc/courses/rustconf/console.svg	/^       style="stroke-width:2;stroke-miterlimit:4;stroke-dasharray:none">$/;"	i
g4903	doc/courses/rustconf/console.svg	/^       style="stroke-width:2;stroke-miterlimit:4;stroke-dasharray:none">$/;"	i
g4982	doc/courses/rustconf/console.svg	/^       id="g4982">$/;"	i
gate_pin	boards/imix/src/power.rs	/^    gate_pin: &'static GPIOPin,$/;"	m	struct:Submodule
gateway	capsules/src/net/ipv6/ipv6_send.rs	/^    gateway: Cell<MacAddress>,$/;"	m	struct:IP6SendStruct
gcctrl0	chips/sam4l/src/scif.rs	/^    gcctrl0: ReadWrite<u32, GenericClockControl::Register>,$/;"	m	struct:ScifRegisters
gcctrl1	chips/sam4l/src/scif.rs	/^    gcctrl1: ReadWrite<u32, GenericClockControl::Register>,$/;"	m	struct:ScifRegisters
gcctrl10	chips/sam4l/src/scif.rs	/^    gcctrl10: ReadWrite<u32, GenericClockControl::Register>,$/;"	m	struct:ScifRegisters
gcctrl11	chips/sam4l/src/scif.rs	/^    gcctrl11: ReadWrite<u32, GenericClockControl::Register>,$/;"	m	struct:ScifRegisters
gcctrl2	chips/sam4l/src/scif.rs	/^    gcctrl2: ReadWrite<u32, GenericClockControl::Register>,$/;"	m	struct:ScifRegisters
gcctrl3	chips/sam4l/src/scif.rs	/^    gcctrl3: ReadWrite<u32, GenericClockControl::Register>,$/;"	m	struct:ScifRegisters
gcctrl4	chips/sam4l/src/scif.rs	/^    gcctrl4: ReadWrite<u32, GenericClockControl::Register>,$/;"	m	struct:ScifRegisters
gcctrl5	chips/sam4l/src/scif.rs	/^    gcctrl5: ReadWrite<u32, GenericClockControl::Register>,$/;"	m	struct:ScifRegisters
gcctrl6	chips/sam4l/src/scif.rs	/^    gcctrl6: ReadWrite<u32, GenericClockControl::Register>,$/;"	m	struct:ScifRegisters
gcctrl7	chips/sam4l/src/scif.rs	/^    gcctrl7: ReadWrite<u32, GenericClockControl::Register>,$/;"	m	struct:ScifRegisters
gcctrl8	chips/sam4l/src/scif.rs	/^    gcctrl8: ReadWrite<u32, GenericClockControl::Register>,$/;"	m	struct:ScifRegisters
gcctrl9	chips/sam4l/src/scif.rs	/^    gcctrl9: ReadWrite<u32, GenericClockControl::Register>,$/;"	m	struct:ScifRegisters
generate	tools/svd2regs.py	/^def generate(name, peripherals, dev):$/;"	f
generateId	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execQuery
generate_bitfields_macro	tools/svd2regs.py	/^def generate_bitfields_macro(registers):$/;"	f
generate_from_mac	capsules/src/net/ipv6/ip_utils.rs	/^    pub fn generate_from_mac(mac_addr: MacAddress) -> IPAddr {$/;"	F	implementation:IPAddr
generate_random_address	capsules/src/ble_advertising_driver.rs	/^    fn generate_random_address(&mut self, appid: kernel::AppId) -> ReturnCode {$/;"	F	implementation:App
generic_clock_control_write	chips/sam4l/src/scif.rs	/^fn generic_clock_control_write($/;"	f
generic_clock_disable	chips/sam4l/src/scif.rs	/^pub fn generic_clock_disable(clock: GenericClock) {$/;"	f
generic_clock_enable	chips/sam4l/src/scif.rs	/^pub fn generic_clock_enable(clock: GenericClock, source: ClockSource) {$/;"	f
generic_clock_enable_divided	chips/sam4l/src/scif.rs	/^pub fn generic_clock_enable_divided(clock: GenericClock, source: ClockSource, divider: u16) {$/;"	f
generic_isr	arch/cortex-m0/src/lib.rs	/^pub unsafe extern "C" fn generic_isr() {$/;"	f
generic_isr	arch/cortex-m0/src/lib.rs	/^pub unsafe extern "C" fn generic_isr() {}$/;"	f
generic_isr	arch/cortex-m3/src/lib.rs	/^pub unsafe extern "C" fn generic_isr() {$/;"	f
generic_isr	arch/cortex-m3/src/lib.rs	/^pub unsafe extern "C" fn generic_isr() {}$/;"	f
generic_isr	arch/cortex-m4/src/lib.rs	/^pub unsafe extern "C" fn generic_isr() {$/;"	f
generic_isr	arch/cortex-m4/src/lib.rs	/^pub unsafe extern "C" fn generic_isr() {}$/;"	f
get	capsules/src/rng.rs	/^    fn get(&self) -> ReturnCode {$/;"	F	implementation:Entropy32To8
get	capsules/src/rng.rs	/^    fn get(&self) -> ReturnCode {$/;"	F	implementation:Entropy32ToRandom
get	capsules/src/rng.rs	/^    fn get(&self) -> ReturnCode {$/;"	F	implementation:Entropy8To32
get	capsules/src/usb.rs	/^    fn get(value: u16) -> Self {$/;"	F	implementation:FeatureSelector
get	capsules/src/usb.rs	/^    pub fn get(p: &[VolatileCell<u8>]) -> Option<Self> {$/;"	F	implementation:SetupData
get	chips/cc26x2/src/trng.rs	/^    fn get(&self) -> ReturnCode {$/;"	F	implementation:Trng
get	chips/nrf5x/src/trng.rs	/^    fn get(&self) -> ReturnCode {$/;"	F	implementation:Trng
get	chips/sam4l/src/serial_num.rs	/^    pub fn get(&self) -> [u8; 15] {$/;"	F	implementation:SerialNum
get	chips/sam4l/src/trng.rs	/^    fn get(&self) -> ReturnCode {$/;"	F	implementation:Trng
get	kernel/src/hil/entropy.rs	/^    fn get(&self) -> ReturnCode;$/;"	F	interface:Entropy32
get	kernel/src/hil/entropy.rs	/^    fn get(&self) -> ReturnCode;$/;"	F	interface:Entropy8
get	kernel/src/hil/rng.rs	/^    fn get(&self) -> ReturnCode;$/;"	F	interface:Rng
get	libraries/tock-cells/src/volatile_cell.rs	/^    pub fn get(&self) -> T {$/;"	F	implementation:VolatileCell
get	libraries/tock-register-interface/src/registers.rs	/^    pub fn get(&self) -> T {$/;"	F	implementation:LocalRegisterCopy
get	libraries/tock-register-interface/src/registers.rs	/^    pub fn get(&self) -> T {$/;"	F	implementation:ReadOnly
get	libraries/tock-register-interface/src/registers.rs	/^    pub fn get(&self) -> T {$/;"	F	implementation:ReadWrite
getCurrentValue	kernel/target/doc/storage.js	/^ *\/var currentTheme=document.getElementById("themeStyle");var mainTheme=document.getElementById/;"	f
getElementsByClassName	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:document
getPageId	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
getQuery	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:initSearch
getQueryStringParams	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
getSettingValue	kernel/target/doc/settings.js	/^ *\/(function(){function changeSetting(settingName,isEnabled){updateLocalStorage('rustdoc-'+sett/;"	f
getSmallest	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execSearch
getVirtualKey	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
get_active_csr	chips/sam4l/src/spi.rs	/^    fn get_active_csr<'a>($/;"	F	implementation:SpiHw
get_active_peripheral	chips/sam4l/src/spi.rs	/^    fn get_active_peripheral(&self, spi: &SpiRegisterManager) -> Peripheral {$/;"	F	implementation:SpiHw
get_address	capsules/src/ieee802154/device.rs	/^    fn get_address(&self) -> u16;$/;"	F	interface:MacDevice
get_address	capsules/src/ieee802154/framer.rs	/^    fn get_address(&self) -> u16 {$/;"	F	implementation:Framer
get_address	capsules/src/ieee802154/mac.rs	/^    fn get_address(&self) -> u16 {$/;"	F	implementation:AwakeMac
get_address	capsules/src/ieee802154/mac.rs	/^    fn get_address(&self) -> u16;$/;"	F	interface:Mac
get_address	capsules/src/ieee802154/virtual_mac.rs	/^    fn get_address(&self) -> u16 {$/;"	F	implementation:MacUser
get_address	capsules/src/ieee802154/xmac.rs	/^    fn get_address(&self) -> u16 {$/;"	F	implementation:XMac
get_address	capsules/src/rf233.rs	/^    fn get_address(&self) -> u16 {$/;"	F	implementation:RF233
get_address	kernel/src/hil/radio.rs	/^    fn get_address(&self) -> u16; \/\/....... The local 16-bit address$/;"	F	interface:RadioConfig
get_address_long	capsules/src/ieee802154/device.rs	/^    fn get_address_long(&self) -> [u8; 8];$/;"	F	interface:MacDevice
get_address_long	capsules/src/ieee802154/framer.rs	/^    fn get_address_long(&self) -> [u8; 8] {$/;"	F	implementation:Framer
get_address_long	capsules/src/ieee802154/mac.rs	/^    fn get_address_long(&self) -> [u8; 8] {$/;"	F	implementation:AwakeMac
get_address_long	capsules/src/ieee802154/mac.rs	/^    fn get_address_long(&self) -> [u8; 8];$/;"	F	interface:Mac
get_address_long	capsules/src/ieee802154/virtual_mac.rs	/^    fn get_address_long(&self) -> [u8; 8] {$/;"	F	implementation:MacUser
get_address_long	capsules/src/ieee802154/xmac.rs	/^    fn get_address_long(&self) -> [u8; 8] {$/;"	F	implementation:XMac
get_address_long	capsules/src/rf233.rs	/^    fn get_address_long(&self) -> [u8; 8] {$/;"	F	implementation:RF233
get_address_long	kernel/src/hil/radio.rs	/^    fn get_address_long(&self) -> [u8; 8]; \/\/ 64-bit address$/;"	F	interface:RadioConfig
get_alarm	capsules/src/virtual_alarm.rs	/^    fn get_alarm(&self) -> u32 {$/;"	F	implementation:VirtualMuxAlarm
get_alarm	chips/cc26x2/src/rtc.rs	/^    fn get_alarm(&self) -> u32 {$/;"	F	implementation:Rtc
get_alarm	chips/nrf5x/src/rtc.rs	/^    fn get_alarm(&self) -> u32 {$/;"	F	implementation:Rtc
get_alarm	chips/nrf5x/src/timer.rs	/^    fn get_alarm(&self) -> u32 {$/;"	F	implementation:TimerAlarm
get_alarm	chips/sam4l/src/ast.rs	/^    fn get_alarm(&self) -> u32 {$/;"	F	implementation:Ast
get_alarm	chips/tm4c129x/src/gpt.rs	/^    fn get_alarm(&self) -> u32 {$/;"	F	implementation:AlarmTimer
get_alarm	kernel/src/hil/time.rs	/^    fn get_alarm(&self) -> u32;$/;"	F	interface:Alarm
get_baud_rate	chips/sam4l/src/spi.rs	/^    fn get_baud_rate(&self) -> u32 {$/;"	F	implementation:SpiHw
get_btsize	chips/sam4l/src/crccu.rs	/^    fn get_btsize(self) -> u16 {$/;"	F	implementation:TCR
get_button_state	capsules/src/button.rs	/^    fn get_button_state(&self, pin_num: usize) -> ButtonState {$/;"	F	implementation:Button
get_channel	capsules/src/rf233.rs	/^    fn get_channel(&self) -> u8 {$/;"	F	implementation:RF233
get_channel	kernel/src/hil/radio.rs	/^    fn get_channel(&self) -> u8; \/\/ ....... The 802.15.4 channel$/;"	F	interface:RadioConfig
get_channel_index	kernel/src/hil/ble_advertising.rs	/^    pub fn get_channel_index(&self) -> u32 {$/;"	F	implementation:RadioChannel
get_charge	capsules/src/ltc294x.rs	/^    fn get_charge(&self) -> ReturnCode {$/;"	F	implementation:LTC294X
get_cksum	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn get_cksum(&self) -> u16 {$/;"	F	implementation:ICMP6Header
get_cksum	capsules/src/net/udp/udp.rs	/^    pub fn get_cksum(&self) -> u16 {$/;"	F	implementation:UDPHeader
get_client	chips/sam4l/src/crccu.rs	/^    fn get_client(&self) -> Option<&'a crc::Client> {$/;"	F	implementation:Crccu
get_clock	chips/nrf52/src/spi.rs	/^    fn get_clock(&self) -> hil::spi::ClockPolarity {$/;"	F	implementation:SPIM
get_clock	chips/sam4l/src/i2c.rs	/^    fn get_clock(&self) -> &TWIMClock {$/;"	F	implementation:I2CHw
get_clock	chips/sam4l/src/i2c.rs	/^    fn get_clock(&self) -> &TWISClock {$/;"	F	implementation:I2CHw
get_clock	chips/sam4l/src/pm.rs	/^macro_rules! get_clock {$/;"	M
get_clock	chips/sam4l/src/spi.rs	/^    fn get_clock(&self) -> &pm::Clock {$/;"	F	implementation:SpiHw
get_clock	chips/sam4l/src/spi.rs	/^    fn get_clock(&self) -> ClockPolarity {$/;"	F	implementation:SpiHw
get_clock	chips/sam4l/src/usart.rs	/^    fn get_clock(&self) -> hil::spi::ClockPolarity {$/;"	F	implementation:USART
get_clock	kernel/src/common/peripherals.rs	/^    fn get_clock(&self) -> &C;$/;"	F	interface:PeripheralManagement
get_clock	kernel/src/hil/spi.rs	/^    fn get_clock(&self) -> ClockPolarity;$/;"	F	interface:SpiMaster
get_clock	kernel/src/hil/spi.rs	/^    fn get_clock(&self) -> ClockPolarity;$/;"	F	interface:SpiSlave
get_code	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn get_code(&self) -> u8 {$/;"	F	implementation:ICMP6Header
get_context_0	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^    fn get_context_0(&self) -> Context {$/;"	F	interface:ContextStore
get_context_from_addr	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^    fn get_context_from_addr(&self, ip_addr: IPAddr) -> Option<Context> {$/;"	F	implementation:Context
get_context_from_addr	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^    fn get_context_from_addr(&self, ip_addr: IPAddr) -> Option<Context>;$/;"	F	interface:ContextStore
get_context_from_id	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^    fn get_context_from_id(&self, ctx_id: u8) -> Option<Context> {$/;"	F	implementation:Context
get_context_from_id	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^    fn get_context_from_id(&self, ctx_id: u8) -> Option<Context>;$/;"	F	interface:ContextStore
get_context_from_prefix	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^    fn get_context_from_prefix(&self, prefix: &[u8], prefix_len: u8) -> Option<Context> {$/;"	F	implementation:Context
get_context_from_prefix	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^    fn get_context_from_prefix(&self, prefix: &[u8], prefix_len: u8) -> Option<Context>;$/;"	F	interface:ContextStore
get_count	kernel/src/debug.rs	/^    fn get_count(&self) -> usize {$/;"	F	implementation:DebugWriter
get_count	kernel/src/debug.rs	/^    fn get_count(&self) -> usize {$/;"	F	implementation:DebugWriterWrapper
get_counter	chips/sam4l/src/ast.rs	/^    fn get_counter(&self) -> u32 {$/;"	F	implementation:Ast
get_ctx_store	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn get_ctx_store(&self) -> &ContextStore {$/;"	F	implementation:Sixlowpan
get_ctx_store	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn get_ctx_store(&self) -> &ContextStore;$/;"	F	interface:SixlowpanState
get_current	capsules/src/ltc294x.rs	/^    fn get_current(&self) -> ReturnCode {$/;"	F	implementation:LTC294X
get_debug_writer	kernel/src/debug.rs	/^pub unsafe fn get_debug_writer() -> &'static mut DebugWriterWrapper {$/;"	f
get_descriptor_type	capsules/src/usb.rs	/^fn get_descriptor_type(byte: u8) -> Option<DescriptorType> {$/;"	f
get_dscp	capsules/src/net/ip.rs	/^    pub fn get_dscp(&self) -> u8 {$/;"	F	implementation:IP6Header
get_dscp	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_dscp(&self) -> u8 {$/;"	F	implementation:IP6Header
get_dscp_unshifted	capsules/src/net/ip.rs	/^    fn get_dscp_unshifted(&self) -> u8 {$/;"	F	implementation:IP6Header
get_dscp_unshifted	capsules/src/net/ipv6/ipv6.rs	/^    fn get_dscp_unshifted(&self) -> u8 {$/;"	F	implementation:IP6Header
get_dst_addr	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_dst_addr(&self) -> IPAddr {$/;"	F	implementation:IP6Header
get_dst_port	capsules/src/net/udp/udp.rs	/^    pub fn get_dst_port(&self) -> u16 {$/;"	F	implementation:UDPHeader
get_ecn	capsules/src/net/ip.rs	/^    pub fn get_ecn(&self) -> u8 {$/;"	F	implementation:IP6Header
get_ecn	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_ecn(&self) -> u8 {$/;"	F	implementation:IP6Header
get_editable_flash_range	kernel/src/callback.rs	/^    pub fn get_editable_flash_range(&self) -> (usize, usize) {$/;"	F	implementation:AppId
get_errno	kernel/src/common/math.rs	/^pub fn get_errno() -> i32 {$/;"	f
get_flash_size	chips/sam4l/src/flashcalw.rs	/^    fn get_flash_size(&self) -> u32 {$/;"	F	implementation:FLASHCALW
get_flow_label	capsules/src/net/ip.rs	/^    pub fn get_flow_label(&self) -> u32 {$/;"	F	implementation:IP6Header
get_flow_label	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_flow_label(&self) -> u32 {$/;"	F	implementation:IP6Header
get_frag_hdr	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^fn get_frag_hdr(hdr: &[u8]) -> (bool, u16, u16, usize) {$/;"	f
get_grant_count_and_finalize	kernel/src/sched.rs	/^    crate fn get_grant_count_and_finalize(&self) -> usize {$/;"	F	implementation:Kernel
get_hdr_size	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn get_hdr_size(&self) -> usize {$/;"	F	implementation:ICMP6Header
get_hdr_size	capsules/src/net/udp/udp.rs	/^    pub fn get_hdr_size(&self) -> usize {$/;"	F	implementation:UDPHeader
get_hop_limit	capsules/src/net/ip.rs	/^    pub fn get_hop_limit(&self) -> u8 {$/;"	F	implementation:IP6Header
get_hop_limit	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_hop_limit(&self) -> u8 {$/;"	F	implementation:IP6Header
get_init_function_offset	kernel/src/tbfheader.rs	/^    crate fn get_init_function_offset(&self) -> u32 {$/;"	F	implementation:TbfHeader
get_key	capsules/src/ieee802154/driver.rs	/^    fn get_key(&self, index: usize) -> Option<KeyDescriptor> {$/;"	F	implementation:RadioDriver
get_known_crates	tools/build-all-docs.sh	/^function get_known_crates {$/;"	f
get_len	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn get_len(&self) -> u16 {$/;"	F	implementation:ICMP6Header
get_len	capsules/src/net/udp/udp.rs	/^    pub fn get_len(&self) -> u16 {$/;"	F	implementation:UDPHeader
get_lower_64	chips/sam4l/src/serial_num.rs	/^    pub fn get_lower_64(&self) -> u64 {$/;"	F	implementation:SerialNum
get_minimum_app_ram_size	kernel/src/tbfheader.rs	/^    crate fn get_minimum_app_ram_size(&self) -> u32 {$/;"	F	implementation:TbfHeader
get_neighbor	capsules/src/ieee802154/driver.rs	/^    fn get_neighbor(&self, index: usize) -> Option<DeviceDescriptor> {$/;"	F	implementation:RadioDriver
get_next_header	capsules/src/net/ip.rs	/^    pub fn get_next_header(&self) -> u8 {$/;"	F	implementation:IP6Header
get_next_header	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_next_header(&self) -> u8 {$/;"	F	implementation:IP6Header
get_next_op_if_idle	capsules/src/ieee802154/virtual_mac.rs	/^    fn get_next_op_if_idle(&self) -> Option<(&'a MacUser<'a>, Op)> {$/;"	F	implementation:MuxMac
get_next_tx_if_idle	capsules/src/ieee802154/driver.rs	/^    fn get_next_tx_if_idle(&self) -> Option<AppId> {$/;"	F	implementation:RadioDriver
get_next_tx_if_idle	capsules/src/net/udp/driver.rs	/^    fn get_next_tx_if_idle(&self) -> Option<AppId> {$/;"	F	implementation:UDPDriver
get_offset	capsules/src/net/udp/udp.rs	/^    pub fn get_offset(&self) -> usize {$/;"	F	implementation:UDPHeader
get_options	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn get_options(&self) -> ICMP6HeaderOptions {$/;"	F	implementation:ICMP6Header
get_package_name	kernel/src/tbfheader.rs	/^    crate fn get_package_name(&self) -> &'static str {$/;"	F	implementation:TbfHeader
get_pan	capsules/src/ieee802154/device.rs	/^    fn get_pan(&self) -> u16;$/;"	F	interface:MacDevice
get_pan	capsules/src/ieee802154/framer.rs	/^    fn get_pan(&self) -> u16 {$/;"	F	implementation:Framer
get_pan	capsules/src/ieee802154/mac.rs	/^    fn get_pan(&self) -> u16 {$/;"	F	implementation:AwakeMac
get_pan	capsules/src/ieee802154/mac.rs	/^    fn get_pan(&self) -> u16;$/;"	F	interface:Mac
get_pan	capsules/src/ieee802154/virtual_mac.rs	/^    fn get_pan(&self) -> u16 {$/;"	F	implementation:MacUser
get_pan	capsules/src/ieee802154/xmac.rs	/^    fn get_pan(&self) -> u16 {$/;"	F	implementation:XMac
get_pan	capsules/src/rf233.rs	/^    fn get_pan(&self) -> u16 {$/;"	F	implementation:RF233
get_pan	kernel/src/hil/radio.rs	/^    fn get_pan(&self) -> u16; \/\/........... The 16-bit PAN ID$/;"	F	interface:RadioConfig
get_parser	tools/svd2regs.py	/^def get_parser(mcu, svd):$/;"	f
get_payload	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_payload(&self) -> &[u8] {$/;"	F	implementation:IP6Packet
get_payload_len	capsules/src/net/ip.rs	/^    pub fn get_payload_len(&self) -> u16 {$/;"	F	implementation:IP6Header
get_payload_len	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_payload_len(&self) -> u16 {$/;"	F	implementation:IP6Header
get_payload_length	capsules/src/net/ipv6/ipv6.rs	/^    fn get_payload_length(&self) -> usize {$/;"	F	implementation:IPPayload
get_phase	capsules/src/virtual_spi.rs	/^    fn get_phase(&self) -> hil::spi::ClockPhase {$/;"	F	implementation:VirtualSpiMasterDevice
get_phase	capsules/src/virtual_spi.rs	/^    fn get_phase(&self) -> hil::spi::ClockPhase {$/;"	F	implementation:VirtualSpiSlaveDevice
get_phase	chips/nrf52/src/spi.rs	/^    fn get_phase(&self) -> hil::spi::ClockPhase {$/;"	F	implementation:SPIM
get_phase	chips/sam4l/src/spi.rs	/^    fn get_phase(&self) -> ClockPhase {$/;"	F	implementation:SpiHw
get_phase	chips/sam4l/src/usart.rs	/^    fn get_phase(&self) -> hil::spi::ClockPhase {$/;"	F	implementation:USART
get_phase	kernel/src/hil/spi.rs	/^    fn get_phase(&self) -> ClockPhase;$/;"	F	interface:SpiMaster
get_phase	kernel/src/hil/spi.rs	/^    fn get_phase(&self) -> ClockPhase;$/;"	F	interface:SpiMasterDevice
get_phase	kernel/src/hil/spi.rs	/^    fn get_phase(&self) -> ClockPhase;$/;"	F	interface:SpiSlave
get_phase	kernel/src/hil/spi.rs	/^    fn get_phase(&self) -> ClockPhase;$/;"	F	interface:SpiSlaveDevice
get_pin_interrupt_direction	capsules/src/mcp230xx.rs	/^    fn get_pin_interrupt_direction(&self, pin_number: u8) -> hil::gpio::InterruptMode {$/;"	F	implementation:MCP230xx
get_pin_interrupt_enabled_state	capsules/src/mcp230xx.rs	/^    fn get_pin_interrupt_enabled_state(&self, pin_number: u8) -> u8 {$/;"	F	implementation:MCP230xx
get_polarity	capsules/src/virtual_spi.rs	/^    fn get_polarity(&self) -> hil::spi::ClockPolarity {$/;"	F	implementation:VirtualSpiMasterDevice
get_polarity	capsules/src/virtual_spi.rs	/^    fn get_polarity(&self) -> hil::spi::ClockPolarity {$/;"	F	implementation:VirtualSpiSlaveDevice
get_polarity	kernel/src/hil/spi.rs	/^    fn get_polarity(&self) -> ClockPolarity;$/;"	F	interface:SpiMasterDevice
get_polarity	kernel/src/hil/spi.rs	/^    fn get_polarity(&self) -> ClockPolarity;$/;"	F	interface:SpiSlaveDevice
get_process_name	kernel/src/process.rs	/^    fn get_process_name(&self) -> &'static str {$/;"	F	implementation:Process
get_process_name	kernel/src/process.rs	/^    fn get_process_name(&self) -> &'static str;$/;"	F	interface:ProcessType
get_protected_size	kernel/src/tbfheader.rs	/^    crate fn get_protected_size(&self) -> u32 {$/;"	F	implementation:TbfHeader
get_rate	capsules/src/virtual_spi.rs	/^    fn get_rate(&self) -> u32 {$/;"	F	implementation:VirtualSpiMasterDevice
get_rate	chips/nrf52/src/spi.rs	/^    fn get_rate(&self) -> u32 {$/;"	F	implementation:SPIM
get_rate	chips/sam4l/src/spi.rs	/^    fn get_rate(&self) -> u32 {$/;"	F	implementation:SpiHw
get_rate	chips/sam4l/src/usart.rs	/^    fn get_rate(&self) -> u32 {$/;"	F	implementation:USART
get_rate	kernel/src/hil/spi.rs	/^    fn get_rate(&self) -> u32;$/;"	F	interface:SpiMaster
get_rate	kernel/src/hil/spi.rs	/^    fn get_rate(&self) -> u32;$/;"	F	interface:SpiMasterDevice
get_register_size	tools/svd2regs.py	/^        def get_register_size(reg):$/;"	f	member:PeripheralStruct.fields	file:
get_registers	chips/sam4l/src/i2c.rs	/^    fn get_registers(&self) -> &TWIMRegisters {$/;"	F	implementation:I2CHw
get_registers	chips/sam4l/src/i2c.rs	/^    fn get_registers<'a>(&'a self) -> &'a TWISRegisters {$/;"	F	implementation:I2CHw
get_registers	chips/sam4l/src/spi.rs	/^    fn get_registers(&self) -> &SpiRegisters {$/;"	F	implementation:SpiHw
get_registers	kernel/src/common/peripherals.rs	/^    fn get_registers(&self) -> &Self::RegisterType;$/;"	F	interface:PeripheralManagement
get_resolution_bits	chips/nrf52/src/adc.rs	/^    fn get_resolution_bits(&self) -> usize {$/;"	F	implementation:Adc
get_resolution_bits	chips/sam4l/src/adc.rs	/^    fn get_resolution_bits(&self) -> usize {$/;"	F	implementation:Adc
get_resolution_bits	kernel/src/hil/adc.rs	/^    fn get_resolution_bits(&self) -> usize;$/;"	F	interface:Adc
get_response	capsules/src/sdcard.rs	/^    fn get_response(&self, response: SDResponse, read_buffer: &[u8]) -> (u8, u8, u32) {$/;"	F	implementation:SDCard
get_set_descriptor_type	capsules/src/usb.rs	/^fn get_set_descriptor_type(byte: u8) -> Option<DescriptorType> {$/;"	f
get_src_addr	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_src_addr(&self) -> IPAddr {$/;"	F	implementation:IP6Header
get_src_port	capsules/src/net/udp/udp.rs	/^    pub fn get_src_port(&self) -> u16 {$/;"	F	implementation:UDPHeader
get_standard_request	capsules/src/usb.rs	/^    pub fn get_standard_request(&self) -> Option<StandardDeviceRequest> {$/;"	F	implementation:SetupData
get_state	chips/sam4l/src/usbc/mod.rs	/^    fn get_state(&self) -> State {$/;"	F	implementation:Usbc
get_state	kernel/src/process.rs	/^    fn get_state(&self) -> State {$/;"	F	implementation:Process
get_state	kernel/src/process.rs	/^    fn get_state(&self) -> State;$/;"	F	interface:ProcessType
get_syscall	arch/cortex-m/src/syscall.rs	/^    unsafe fn get_syscall(&self, stack_pointer: *const usize) -> Option<kernel::syscall::Syscall/;"	F	implementation:SysCall
get_syscall	arch/riscv32i/src/syscall.rs	/^    unsafe fn get_syscall(&self, _stack_pointer: *const usize) -> Option<kernel::syscall::Syscal/;"	F	implementation:SysCall
get_syscall	kernel/src/process.rs	/^    unsafe fn get_syscall(&self) -> Option<Syscall> {$/;"	F	implementation:Process
get_syscall	kernel/src/process.rs	/^    unsafe fn get_syscall(&self) -> Option<Syscall>;$/;"	F	interface:ProcessType
get_syscall	kernel/src/syscall.rs	/^    unsafe fn get_syscall(&self, stack_pointer: *const usize) -> Option<Syscall>;$/;"	F	interface:UserspaceKernelBoundary
get_system_frequency	chips/sam4l/src/pm.rs	/^pub fn get_system_frequency() -> u32 {$/;"	f
get_system_frequency	chips/tm4c129x/src/sysctl.rs	/^pub fn get_system_frequency() -> u32 {$/;"	f
get_tcr	chips/sam4l/src/crccu.rs	/^    fn get_tcr(&self) -> TCR {$/;"	F	implementation:Crccu
get_total_hdr_size	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_total_hdr_size(&self) -> usize {$/;"	F	implementation:IP6Packet
get_total_len	capsules/src/net/ip.rs	/^    pub fn get_total_len(&self) -> u16 {$/;"	F	implementation:IP6Header
get_total_len	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_total_len(&self) -> u16 {$/;"	F	implementation:IP6Header
get_total_len	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_total_len(&self) -> u16 {$/;"	F	implementation:IP6Packet
get_total_size	kernel/src/tbfheader.rs	/^    crate fn get_total_size(&self) -> u32 {$/;"	F	implementation:TbfHeader
get_traffic_class	capsules/src/net/ip.rs	/^    pub fn get_traffic_class(&self) -> u8 {$/;"	F	implementation:IP6Header
get_traffic_class	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_traffic_class(&self) -> u8 {$/;"	F	implementation:IP6Header
get_tx_power	capsules/src/rf233.rs	/^    fn get_tx_power(&self) -> i8 {$/;"	F	implementation:RF233
get_tx_power	kernel/src/hil/radio.rs	/^    fn get_tx_power(&self) -> i8; \/\/....... The transmit power, in dBm$/;"	F	interface:RadioConfig
get_type	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn get_type(&self) -> ICMP6Type {$/;"	F	implementation:ICMP6Header
get_type_as_int	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn get_type_as_int(&self) -> u8 {$/;"	F	implementation:ICMP6Header
get_u16	capsules/src/usb.rs	/^fn get_u16(b0: u8, b1: u8) -> u16 {$/;"	f
get_version	capsules/src/net/ip.rs	/^    pub fn get_version(&self) -> u8 {$/;"	F	implementation:IP6Header
get_version	capsules/src/net/ipv6/ipv6.rs	/^    pub fn get_version(&self) -> u8 {$/;"	F	implementation:IP6Header
get_voltage	capsules/src/ltc294x.rs	/^    fn get_voltage(&self) -> ReturnCode {$/;"	F	implementation:LTC294X
get_voltage_reference_mv	chips/nrf52/src/adc.rs	/^    fn get_voltage_reference_mv(&self) -> Option<usize> {$/;"	F	implementation:Adc
get_voltage_reference_mv	chips/sam4l/src/adc.rs	/^    fn get_voltage_reference_mv(&self) -> Option<usize> {$/;"	F	implementation:Adc
get_voltage_reference_mv	kernel/src/hil/adc.rs	/^    fn get_voltage_reference_mv(&self) -> Option<usize>;$/;"	F	interface:Adc
get_writeable_flash_region	kernel/src/process.rs	/^    fn get_writeable_flash_region(&self, region_index: usize) -> (u32, u32) {$/;"	F	implementation:Process
get_writeable_flash_region	kernel/src/process.rs	/^    fn get_writeable_flash_region(&self, region_index: usize) -> (u32, u32);$/;"	F	interface:ProcessType
get_writeable_flash_region	kernel/src/tbfheader.rs	/^    crate fn get_writeable_flash_region(&self, index: usize) -> (u32, u32) {$/;"	F	implementation:TbfHeader
getting_randomness	capsules/src/rng.rs	/^    getting_randomness: Cell<bool>,$/;"	m	struct:RngDriver
gfer	chips/sam4l/src/gpio.rs	/^    gfer: Register,$/;"	m	struct:GpioRegisters
gper	chips/sam4l/src/gpio.rs	/^    gper: Register,$/;"	m	struct:GpioRegisters
gpio	boards/arty-e21/src/main.rs	/^    gpio: &'static capsules::gpio::GPIO<'static, sifive::gpio::GpioPin>,$/;"	m	struct:ArtyE21
gpio	boards/ek-tm4c1294xl/src/main.rs	/^    gpio: &'static capsules::gpio::GPIO<'static, tm4c129x::gpio::GPIOPin>,$/;"	m	struct:EkTm4c1294xl
gpio	boards/hail/src/main.rs	/^    gpio: &'static capsules::gpio::GPIO<'static, sam4l::gpio::GPIOPin>,$/;"	m	struct:Hail
gpio	boards/hifive1/src/main.rs	/^    gpio: &'static capsules::gpio::GPIO<'static, sifive::gpio::GpioPin>,$/;"	m	struct:HiFive1
gpio	boards/imix/src/components/fxos8700.rs	/^    gpio: &'static sam4l::gpio::GPIOPin,$/;"	m	struct:Fxos8700Component
gpio	boards/imix/src/components/fxos8700.rs	/^    gpio: &'static sam4l::gpio::GPIOPin,$/;"	m	struct:NineDofComponent
gpio	boards/imix/src/components/gpio.rs	/^    type Output = &'static gpio::GPIO<'static, sam4l::gpio::GPIOPin>;$/;"	v	implementation:GpioComponent
gpio	boards/imix/src/components/mod.rs	/^pub mod gpio;$/;"	n
gpio	boards/imix/src/main.rs	/^    gpio: &'static capsules::gpio::GPIO<'static, sam4l::gpio::GPIOPin>,$/;"	m	struct:Imix
gpio	boards/launchxl/src/main.rs	/^    gpio: &'static capsules::gpio::GPIO<'static, cc26x2::gpio::GPIOPin>,$/;"	m	struct:Platform
gpio	boards/nordic/nrf51dk/src/main.rs	/^    gpio: &'static capsules::gpio::GPIO<'static, nrf5x::gpio::GPIOPin>,$/;"	m	struct:Platform
gpio	boards/nordic/nrf52dk_base/src/lib.rs	/^    gpio: &'static capsules::gpio::GPIO<'static, nrf5x::gpio::GPIOPin>,$/;"	m	struct:Platform
gpio	capsules/src/lib.rs	/^pub mod gpio;$/;"	n
gpio	chips/arty_exx/src/lib.rs	/^pub mod gpio;$/;"	n
gpio	chips/cc26x2/src/lib.rs	/^pub mod gpio;$/;"	n
gpio	chips/e310x/src/lib.rs	/^pub mod gpio;$/;"	n
gpio	chips/nrf5x/src/lib.rs	/^pub mod gpio;$/;"	n
gpio	chips/sam4l/src/lib.rs	/^pub mod gpio;$/;"	n
gpio	chips/sifive/src/lib.rs	/^pub mod gpio;$/;"	n
gpio	chips/tm4c129x/src/lib.rs	/^pub mod gpio;$/;"	n
gpio	kernel/src/hil/mod.rs	/^pub mod gpio;$/;"	n
gpio_async	capsules/src/lib.rs	/^pub mod gpio_async;$/;"	n
gpio_async	kernel/src/hil/mod.rs	/^pub mod gpio_async;$/;"	n
gpio_clk_gate_deep_sleep	chips/cc26x2/src/prcm.rs	/^    pub gpio_clk_gate_deep_sleep: ReadWrite<u32, ClockGate::Register>,$/;"	m	struct:PrcmRegisters
gpio_clk_gate_run	chips/cc26x2/src/prcm.rs	/^    pub gpio_clk_gate_run: ReadWrite<u32, ClockGate::Register>,$/;"	m	struct:PrcmRegisters
gpio_clk_gate_sleep	chips/cc26x2/src/prcm.rs	/^    pub gpio_clk_gate_sleep: ReadWrite<u32, ClockGate::Register>,$/;"	m	struct:PrcmRegisters
gpio_registers	chips/nrf5x/src/gpio.rs	/^    gpio_registers: StaticRef<GpioRegisters>,$/;"	m	struct:GPIOPin
gpiote_registers	chips/nrf5x/src/gpio.rs	/^    gpiote_registers: StaticRef<GpioteRegisters>,$/;"	m	struct:GPIOPin
gpt	chips/tm4c129x/src/lib.rs	/^pub mod gpt;$/;"	n
gpt_clk_gate_deep_sleep	chips/cc26x2/src/prcm.rs	/^    pub gpt_clk_gate_deep_sleep: ReadWrite<u32, ClockGate::Register>,$/;"	m	struct:PrcmRegisters
gpt_clk_gate_run	chips/cc26x2/src/prcm.rs	/^    pub gpt_clk_gate_run: ReadWrite<u32, ClockGate::Register>,$/;"	m	struct:PrcmRegisters
gpt_clk_gate_sleep	chips/cc26x2/src/prcm.rs	/^    pub gpt_clk_gate_sleep: ReadWrite<u32, ClockGate::Register>,$/;"	m	struct:PrcmRegisters
grant	kernel/src/grant.rs	/^    grant: &'a Grant<T>,$/;"	m	struct:Iter
grant	kernel/src/grant.rs	/^    grant: *mut T,$/;"	m	struct:AppliedGrant
grant	kernel/src/grant.rs	/^    pub fn grant(&self, appid: AppId) -> Option<AppliedGrant<T>> {$/;"	F	implementation:Grant
grant	kernel/src/lib.rs	/^mod grant;$/;"	n
grant_counter	kernel/src/sched.rs	/^    grant_counter: Cell<usize>,$/;"	m	struct:Kernel
grant_num	kernel/src/grant.rs	/^    grant_num: usize,$/;"	m	struct:Grant
grant_ptr	kernel/src/process.rs	/^    unsafe fn grant_ptr(&self, grant_num: usize) -> *mut *mut u8 {$/;"	F	implementation:Process
grant_ptr	kernel/src/process.rs	/^    unsafe fn grant_ptr(&self, grant_num: usize) -> *mut *mut u8;$/;"	F	interface:ProcessType
grant_ptrs_reset	kernel/src/process.rs	/^    unsafe fn grant_ptrs_reset(&self) {$/;"	F	implementation:Process
grants_finalized	kernel/src/sched.rs	/^    grants_finalized: Cell<bool>,$/;"	m	struct:Kernel
greater_than	arch/cortex-m/src/systick.rs	/^    fn greater_than(&self, us: u32) -> bool {$/;"	F	implementation:SysTick
greater_than	kernel/src/platform/systick.rs	/^    fn greater_than(&self, _: u32) -> bool {$/;"	F	implementation:SysTick
greater_than	kernel/src/platform/systick.rs	/^    fn greater_than(&self, us: u32) -> bool;$/;"	F	interface:SysTick
grid4883	doc/courses/rustconf/console.svg	/^       originy="-698.49998" \/>$/;"	i
h1	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
h1	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
h1	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
h1	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
h1.fqn	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
h1.fqn	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
h1.fqn	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h2	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
h2	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
h2	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
h3	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
h3.impl	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h3.impl>.out-of-band	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h3.important	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h3.method	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h3.type	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h3:not(.impl):not(.method):not(.type):not(.tymethod)	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
h3:not(.impl):not(.method):not(.type):not(.tymethod)	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
h3:not(.impl):not(.method):not(.type):not(.tymethod)	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h3:not(.impl):not(.method):not(.type):not(.tymethod):not(.important)	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h3>.collapse-toggle	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h3>code	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
h4	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
h4.associatedconstant	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h4.method	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h4.method>.out-of-band	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h4.type	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h4:not(.method):not(.type):not(.tymethod)	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
h4:not(.method):not(.type):not(.tymethod)	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
h4:not(.method):not(.type):not(.tymethod):not(.associatedconstant)	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h4>.collapse-toggle	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h4>.important-traits	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
h4>code	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
handleEscape	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
handleShortcut	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
handleThemeButtonsBlur	kernel/target/doc/theme.js	/^function handleThemeButtonsBlur(e) {$/;"	f
handle_bulk_in_endpoint_interrupt	chips/sam4l/src/usbc/mod.rs	/^    fn handle_bulk_in_endpoint_interrupt($/;"	F	implementation:Usbc
handle_bulk_out_endpoint_interrupt	chips/sam4l/src/usbc/mod.rs	/^    fn handle_bulk_out_endpoint_interrupt($/;"	F	implementation:Usbc
handle_ctrl_endpoint_interrupt	chips/sam4l/src/usbc/mod.rs	/^    fn handle_ctrl_endpoint_interrupt($/;"	F	implementation:Usbc
handle_device_interrupt	chips/sam4l/src/usbc/mod.rs	/^    fn handle_device_interrupt($/;"	F	implementation:Usbc
handle_endpoint_interrupt	chips/sam4l/src/usbc/mod.rs	/^    fn handle_endpoint_interrupt(&self, endpoint: usize, endpoint_state: &mut EndpointState) {$/;"	F	implementation:Usbc
handle_events	tools/usb/bulk-echo-fast/main.c	/^void handle_events(void) {$/;"	f	typeref:typename:void
handle_interrupt	capsules/src/rf233.rs	/^    fn handle_interrupt(&self) {$/;"	F	implementation:RF233
handle_interrupt	chips/cc26x2/src/gpio.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:GPIOPin
handle_interrupt	chips/cc26x2/src/gpio.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Port
handle_interrupt	chips/cc26x2/src/i2c.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:I2CMaster
handle_interrupt	chips/cc26x2/src/rtc.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Rtc
handle_interrupt	chips/cc26x2/src/uart.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:UART
handle_interrupt	chips/nrf51/src/i2c.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:TWIM
handle_interrupt	chips/nrf51/src/radio.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Radio
handle_interrupt	chips/nrf51/src/uart.rs	/^    pub fn handle_interrupt(&mut self) {$/;"	F	implementation:UART
handle_interrupt	chips/nrf52/src/adc.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Adc
handle_interrupt	chips/nrf52/src/i2c.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:TWIM
handle_interrupt	chips/nrf52/src/nvmc.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Nvmc
handle_interrupt	chips/nrf52/src/radio.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Radio
handle_interrupt	chips/nrf52/src/spi.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:SPIM
handle_interrupt	chips/nrf52/src/uart.rs	/^    pub fn handle_interrupt(&mut self) {$/;"	F	implementation:Uarte
handle_interrupt	chips/nrf5x/src/aes.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:AesECB
handle_interrupt	chips/nrf5x/src/gpio.rs	/^    fn handle_interrupt(&self) {$/;"	F	implementation:GPIOPin
handle_interrupt	chips/nrf5x/src/gpio.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Port
handle_interrupt	chips/nrf5x/src/rtc.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Rtc
handle_interrupt	chips/nrf5x/src/temperature.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Temp
handle_interrupt	chips/nrf5x/src/timer.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Timer
handle_interrupt	chips/nrf5x/src/timer.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:TimerAlarm
handle_interrupt	chips/nrf5x/src/trng.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Trng
handle_interrupt	chips/sam4l/src/acifc.rs	/^    pub fn handle_interrupt(&mut self) {$/;"	F	implementation:Acifc
handle_interrupt	chips/sam4l/src/adc.rs	/^    pub fn handle_interrupt(&mut self) {$/;"	F	implementation:Adc
handle_interrupt	chips/sam4l/src/aes.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Aes
handle_interrupt	chips/sam4l/src/ast.rs	/^    pub fn handle_interrupt(&mut self) {$/;"	F	implementation:Ast
handle_interrupt	chips/sam4l/src/crccu.rs	/^    pub fn handle_interrupt(&mut self) {$/;"	F	implementation:Crccu
handle_interrupt	chips/sam4l/src/dac.rs	/^    pub fn handle_interrupt(&mut self) {}$/;"	F	implementation:Dac
handle_interrupt	chips/sam4l/src/dma.rs	/^    pub fn handle_interrupt(&mut self) {$/;"	F	implementation:DMAChannel
handle_interrupt	chips/sam4l/src/flashcalw.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:FLASHCALW
handle_interrupt	chips/sam4l/src/gpio.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:GPIOPin
handle_interrupt	chips/sam4l/src/gpio.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Port
handle_interrupt	chips/sam4l/src/i2c.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:I2CHw
handle_interrupt	chips/sam4l/src/spi.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:SpiHw
handle_interrupt	chips/sam4l/src/trng.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Trng
handle_interrupt	chips/sam4l/src/usart.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:USART
handle_interrupt	chips/sam4l/src/usbc/mod.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Usbc
handle_interrupt	chips/sifive/src/gpio.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:GpioPin
handle_interrupt	chips/sifive/src/uart.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Uart
handle_interrupt	chips/tm4c129x/src/gpio.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:GPIOPin
handle_interrupt	chips/tm4c129x/src/gpio.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:Port
handle_interrupt	chips/tm4c129x/src/gpt.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:AlarmTimer
handle_interrupt	chips/tm4c129x/src/uart.rs	/^    pub fn handle_interrupt(&self) {$/;"	F	implementation:UART
handle_requests	chips/sam4l/src/usbc/mod.rs	/^    fn handle_requests(&self) {$/;"	F	implementation:Usbc
handle_slave_interrupt	chips/sam4l/src/i2c.rs	/^    pub fn handle_slave_interrupt(&self) {$/;"	F	implementation:I2CHw
hard_fault_handler	arch/cortex-m3/src/lib.rs	/^pub unsafe extern "C" fn hard_fault_handler() {$/;"	f
hard_fault_handler	arch/cortex-m4/src/lib.rs	/^pub unsafe extern "C" fn hard_fault_handler() {$/;"	f
hard_fault_handler	chips/nrf51/src/crt1.rs	/^unsafe extern "C" fn hard_fault_handler() {$/;"	f
hardfault_all_apps	kernel/src/sched.rs	/^    pub fn hardfault_all_apps<C: capabilities::ProcessManagementCapability>(&self, _c: &C) {$/;"	F	implementation:Kernel
hasClass	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
has_client	chips/sam4l/src/spi.rs	/^    fn has_client(&self) -> bool {$/;"	F	implementation:SpiHw
has_client	kernel/src/hil/spi.rs	/^    fn has_client(&self) -> bool;$/;"	F	interface:SpiSlave
has_elements	kernel/src/common/queue.rs	/^    fn has_elements(&self) -> bool;$/;"	F	interface:Queue
has_elements	kernel/src/common/ring_buffer.rs	/^    fn has_elements(&self) -> bool {$/;"	F	implementation:RingBuffer
has_expired	capsules/src/alarm.rs	/^fn has_expired(alarm: u32, now: u32, prev: u32) -> bool {$/;"	f
has_expired	capsules/src/virtual_alarm.rs	/^fn has_expired(alarm: u32, now: u32, prev: u32) -> bool {$/;"	f
has_pending	arch/cortex-m/src/nvic.rs	/^pub unsafe fn has_pending() -> bool {$/;"	f
has_pending	arch/riscv32i/src/plic.rs	/^pub unsafe fn has_pending() -> bool {$/;"	f
has_pending_interrupts	chips/arty_exx/src/chip.rs	/^    fn has_pending_interrupts(&self) -> bool {$/;"	F	implementation:ArtyExx
has_pending_interrupts	chips/cc26x2/src/chip.rs	/^    fn has_pending_interrupts(&self) -> bool {$/;"	F	implementation:Cc26X2
has_pending_interrupts	chips/e310x/src/chip.rs	/^    fn has_pending_interrupts(&self) -> bool {$/;"	F	implementation:E310x
has_pending_interrupts	chips/nrf51/src/chip.rs	/^    fn has_pending_interrupts(&self) -> bool {$/;"	F	implementation:NRF51
has_pending_interrupts	chips/nrf52/src/chip.rs	/^    fn has_pending_interrupts(&self) -> bool {$/;"	F	implementation:NRF52
has_pending_interrupts	chips/sam4l/src/chip.rs	/^    fn has_pending_interrupts(&self) -> bool {$/;"	F	implementation:Sam4l
has_pending_interrupts	chips/tm4c129x/src/chip.rs	/^    fn has_pending_interrupts(&self) -> bool {$/;"	F	implementation:Tm4c129x
has_pending_interrupts	kernel/src/platform/mod.rs	/^    fn has_pending_interrupts(&self) -> bool;$/;"	F	interface:Chip
has_tasks	kernel/src/common/deferred_call.rs	/^pub fn has_tasks() -> bool {$/;"	f
head	kernel/src/common/list.rs	/^    head: ListLink<'a, T>,$/;"	m	struct:List
head	kernel/src/common/list.rs	/^    pub fn head(&self) -> Option<&'a T> {$/;"	F	implementation:List
head	kernel/src/common/ring_buffer.rs	/^    head: usize,$/;"	m	struct:RingBuffer
head	kernel/src/debug.rs	/^    head: Cell<usize>,$/;"	m	struct:DebugWriter
header	capsules/src/net/ipv6/ipv6.rs	/^    pub header: IP6Header,$/;"	m	struct:IP6Packet
header	capsules/src/net/ipv6/ipv6.rs	/^    pub header: TransportHeader,$/;"	m	struct:IPPayload
header	kernel/src/process.rs	/^    header: tbfheader::TbfHeader,$/;"	m	struct:Process
header	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
header_ies	capsules/src/net/ieee802154.rs	/^    pub header_ies: [HeaderIE<'a>; MAX_HEADER_IES],$/;"	m	struct:Header
header_ies_len	capsules/src/net/ieee802154.rs	/^    pub header_ies_len: usize,$/;"	m	struct:Header
header_size	kernel/src/tbfheader.rs	/^    header_size: u16,$/;"	m	struct:TbfHeaderV2Base
hertz	arch/cortex-m/src/systick.rs	/^    fn hertz(&self) -> u32 {$/;"	F	implementation:SysTick
hertz	arch/cortex-m/src/systick.rs	/^    hertz: u32,$/;"	m	struct:SysTick
hfclkrun	chips/nrf51/src/clock.rs	/^    hfclkrun: ReadOnly<u32, ClkRun::Register>,       \/\/ 0x408$/;"	m	struct:ClockRegisters
hfclkrun	chips/nrf52/src/clock.rs	/^    hfclkrun: ReadOnly<u32, Status::Register>,$/;"	m	struct:ClockRegisters
hfclkstart	chips/nrf51/src/clock.rs	/^    hfclkstart: WriteOnly<u32, Task::Register>,      \/\/ 0x000$/;"	m	struct:ClockRegisters
hfclkstarted	chips/nrf51/src/clock.rs	/^    hfclkstarted: ReadWrite<u32, Event::Register>,   \/\/ 0x100$/;"	m	struct:ClockRegisters
hfclkstat	chips/nrf51/src/clock.rs	/^    hfclkstat: ReadOnly<u32, HfClkStat::Register>,   \/\/ 0x40c$/;"	m	struct:ClockRegisters
hfclkstat	chips/nrf52/src/clock.rs	/^    hfclkstat: ReadWrite<u32, HfClkStat::Register>,$/;"	m	struct:ClockRegisters
hfclkstop	chips/nrf51/src/clock.rs	/^    hfclkstop: WriteOnly<u32, Task::Register>,       \/\/ 0x004$/;"	m	struct:ClockRegisters
hfrosccfg	chips/sifive/src/prci.rs	/^    hfrosccfg: ReadWrite<u32, hfrosccfg::Register>,$/;"	m	struct:PrciRegisters
hfsr	arch/cortex-m/src/scb.rs	/^    hfsr: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
hfxosccfg	chips/sifive/src/prci.rs	/^    hfxosccfg: ReadWrite<u32, hfxosccfg::Register>,$/;"	m	struct:PrciRegisters
hgroup	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
hidden	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
hideModal	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
hideSidebar	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
high_freq	chips/nrf51/src/clock.rs	/^    pub fn high_freq(&self) -> XtalFreq {$/;"	F	implementation:Clock
high_ie	chips/sifive/src/gpio.rs	/^    high_ie: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
high_ip	chips/sifive/src/gpio.rs	/^    high_ip: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
high_running	chips/nrf51/src/clock.rs	/^    pub fn high_running(&self) -> bool {$/;"	F	implementation:Clock
high_running	chips/nrf52/src/clock.rs	/^    pub fn high_running(&self) -> bool {$/;"	F	implementation:Clock
high_set_freq	chips/nrf51/src/clock.rs	/^    pub fn high_set_freq(&self, freq: XtalFreq) {$/;"	F	implementation:Clock
high_set_source	chips/nrf52/src/clock.rs	/^    pub fn high_set_source(&self, clock_source: HighClockSource) {$/;"	F	implementation:Clock
high_source	chips/nrf51/src/clock.rs	/^    pub fn high_source(&self) -> HighClockSource {$/;"	F	implementation:Clock
high_source	chips/nrf52/src/clock.rs	/^    pub fn high_source(&self) -> HighClockSource {$/;"	F	implementation:Clock
high_start	chips/nrf51/src/clock.rs	/^    pub fn high_start(&self) {$/;"	F	implementation:Clock
high_start	chips/nrf52/src/clock.rs	/^    pub fn high_start(&self) {$/;"	F	implementation:Clock
high_started	chips/nrf51/src/clock.rs	/^    pub fn high_started(&self) -> bool {$/;"	F	implementation:Clock
high_started	chips/nrf52/src/clock.rs	/^    pub fn high_started(&self) -> bool {$/;"	F	implementation:Clock
high_stop	chips/nrf51/src/clock.rs	/^    pub fn high_stop(&self) {$/;"	F	implementation:Clock
high_stop	chips/nrf52/src/clock.rs	/^    pub fn high_stop(&self) {$/;"	F	implementation:Clock
highlightSourceLines	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
hil	chips/nrf52/src/spi.rs	/^    type ChipSelect = &'static hil::gpio::Pin;$/;"	v	implementation:SPIM
hil	chips/sam4l/src/usart.rs	/^    type ChipSelect = Option<&'static hil::gpio::Pin>;$/;"	v	implementation:USART
hil	chips/tm4c129x/src/gpt.rs	/^    type Config = &'static hil::time::Client;$/;"	v	implementation:AlarmTimer
hil	kernel/src/debug.rs	/^    Option<&'static hil::gpio::Pin>,$/;"	v
hil	kernel/src/lib.rs	/^pub mod hil;$/;"	n
hold_low	chips/nrf52/src/spi.rs	/^    fn hold_low(&self) {$/;"	F	implementation:SPIM
hold_low	chips/sam4l/src/spi.rs	/^    fn hold_low(&self) {$/;"	F	implementation:SpiHw
hold_low	chips/sam4l/src/usart.rs	/^    fn hold_low(&self) {$/;"	F	implementation:USART
hold_low	kernel/src/hil/spi.rs	/^    fn hold_low(&self);$/;"	F	interface:SpiMaster
hold_pin	boards/nordic/nrf52dk_base/src/lib.rs	/^    hold_pin: usize,$/;"	m	struct:SpiMX25R6435FPins
hold_pin	capsules/src/mx25r6435f.rs	/^    hold_pin: Option<&'a P>,$/;"	m	struct:MX25R6435F
hop_limit	capsules/src/net/ip.rs	/^    pub hop_limit: u8,$/;"	m	struct:IP6Header
hop_limit	capsules/src/net/ipv6/ipv6.rs	/^    pub hop_limit: u8,$/;"	m	struct:IP6Header
hr	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
hramc1_clock	chips/sam4l/src/flashcalw.rs	/^    hramc1_clock: pm::Clock,$/;"	m	struct:FLASHCALW
hrpcr	chips/sam4l/src/scif.rs	/^    hrpcr: ReadWrite<u32>,$/;"	m	struct:ScifRegisters
hsbmask	chips/sam4l/src/pm.rs	/^    hsbmask: ReadWrite<u32, ClockMaskHsb::Register>,$/;"	m	struct:PmRegisters
hscwgr	chips/sam4l/src/i2c.rs	/^    hscwgr: ReadWrite<u32>,$/;"	m	struct:TWIMRegisters
hssr	chips/tm4c129x/src/sysctl.rs	/^    hssr: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
hssrr	chips/sam4l/src/i2c.rs	/^    hssrr: ReadWrite<u32>,$/;"	m	struct:TWIMRegisters
hssrr	chips/sam4l/src/i2c.rs	/^    hssrr: ReadWrite<u32>,$/;"	m	struct:TWISRegisters
hstr	chips/sam4l/src/i2c.rs	/^    hstr: ReadWrite<u32>,$/;"	m	struct:TWISRegisters
html	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
html input[disabled]	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
html input[type="button"]	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
humidity	boards/hail/src/main.rs	/^    humidity: &'static capsules::humidity::HumiditySensor<'static>,$/;"	m	struct:Hail
humidity	boards/imix/src/main.rs	/^    humidity: &'static capsules::humidity::HumiditySensor<'static>,$/;"	m	struct:Imix
humidity	capsules/src/lib.rs	/^pub mod humidity;$/;"	n
humidity_callback	capsules/src/si7021.rs	/^    humidity_callback: OptionalCell<&'static kernel::hil::sensors::HumidityClient>,$/;"	m	struct:SI7021
hw_flow_control	kernel/src/hil/uart.rs	/^    pub hw_flow_control: bool,$/;"	m	struct:UARTParameters
i2c	capsules/src/fxos8700cq.rs	/^    i2c: &'a I2CDevice,$/;"	m	struct:Fxos8700cq
i2c	capsules/src/i2c_master.rs	/^    i2c: &'static I,$/;"	m	struct:I2CMasterDriver
i2c	capsules/src/i2c_master_slave_driver.rs	/^    i2c: &'a hil::i2c::I2CMasterSlave,$/;"	m	struct:I2CMasterSlaveDriver
i2c	capsules/src/isl29035.rs	/^    i2c: &'a I2CDevice,$/;"	m	struct:Isl29035
i2c	capsules/src/lps25hb.rs	/^    i2c: &'a i2c::I2CDevice,$/;"	m	struct:LPS25HB
i2c	capsules/src/ltc294x.rs	/^    i2c: &'a i2c::I2CDevice,$/;"	m	struct:LTC294X
i2c	capsules/src/mcp230xx.rs	/^    i2c: &'a hil::i2c::I2CDevice,$/;"	m	struct:MCP230xx
i2c	capsules/src/pca9544a.rs	/^    i2c: &'a i2c::I2CDevice,$/;"	m	struct:PCA9544A
i2c	capsules/src/si7021.rs	/^    i2c: &'a i2c::I2CDevice,$/;"	m	struct:SI7021
i2c	capsules/src/tmp006.rs	/^    i2c: &'a i2c::I2CDevice,$/;"	m	struct:TMP006
i2c	capsules/src/tsl2561.rs	/^    i2c: &'a i2c::I2CDevice,$/;"	m	struct:TSL2561
i2c	capsules/src/virtual_i2c.rs	/^    i2c: &'a i2c::I2CMaster,$/;"	m	struct:MuxI2C
i2c	chips/cc26x2/src/lib.rs	/^pub mod i2c;$/;"	n
i2c	chips/nrf51/src/lib.rs	/^pub mod i2c;$/;"	n
i2c	chips/nrf52/src/lib.rs	/^pub mod i2c;$/;"	n
i2c	chips/sam4l/src/lib.rs	/^pub mod i2c;$/;"	n
i2c	kernel/src/hil/mod.rs	/^pub mod i2c;$/;"	n
i2c_accel_test	boards/imix/src/i2c_dummy.rs	/^pub fn i2c_accel_test() {$/;"	f
i2c_accel_test	boards/launchxl/src/i2c_tests.rs	/^pub fn i2c_accel_test() {$/;"	f
i2c_clk_gate_deep_sleep	chips/cc26x2/src/prcm.rs	/^    pub i2c_clk_gate_deep_sleep: ReadWrite<u32, ClockGate::Register>,$/;"	m	struct:PrcmRegisters
i2c_clk_gate_run	chips/cc26x2/src/prcm.rs	/^    pub i2c_clk_gate_run: ReadWrite<u32, ClockGate::Register>,$/;"	m	struct:PrcmRegisters
i2c_clk_gate_sleep	chips/cc26x2/src/prcm.rs	/^    pub i2c_clk_gate_sleep: ReadWrite<u32, ClockGate::Register>,$/;"	m	struct:PrcmRegisters
i2c_dummy	boards/imix/src/main.rs	/^mod i2c_dummy;$/;"	n
i2c_li_test	boards/imix/src/i2c_dummy.rs	/^pub fn i2c_li_test() {$/;"	f
i2c_lower	capsules/src/max17205.rs	/^    i2c_lower: &'a i2c::I2CDevice,$/;"	m	struct:MAX17205
i2c_master	boards/launchxl/src/main.rs	/^    i2c_master: &'static capsules::i2c_master::I2CMasterDriver<cc26x2::i2c::I2CMaster<'static>>,$/;"	m	struct:Platform
i2c_master	capsules/src/lib.rs	/^pub mod i2c_master;$/;"	n
i2c_master_slave_driver	capsules/src/lib.rs	/^pub mod i2c_master_slave_driver;$/;"	n
i2c_mux	boards/imix/src/components/fxos8700.rs	/^    i2c_mux: &'static MuxI2C<'static>,$/;"	m	struct:Fxos8700Component
i2c_mux	boards/imix/src/components/fxos8700.rs	/^    i2c_mux: &'static MuxI2C<'static>,$/;"	m	struct:NineDofComponent
i2c_mux	boards/imix/src/components/isl29035.rs	/^    i2c_mux: &'static MuxI2C<'static>,$/;"	m	struct:AmbientLightComponent
i2c_mux	boards/imix/src/components/isl29035.rs	/^    i2c_mux: &'static MuxI2C<'static>,$/;"	m	struct:Isl29035Component
i2c_mux	boards/imix/src/components/si7021.rs	/^    i2c_mux: &'static MuxI2C<'static>,$/;"	m	struct:SI7021Component
i2c_scan_slaves	boards/imix/src/i2c_dummy.rs	/^pub fn i2c_scan_slaves() {$/;"	f
i2c_scan_slaves	boards/launchxl/src/i2c_tests.rs	/^pub fn i2c_scan_slaves() {$/;"	f
i2c_tests	boards/launchxl/src/main.rs	/^mod i2c_tests;$/;"	n
i2c_upper	capsules/src/max17205.rs	/^    i2c_upper: &'a i2c::I2CDevice,$/;"	m	struct:MAX17205
ibe	chips/tm4c129x/src/gpio.rs	/^    ibe: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
ibrd	chips/cc26x2/src/uart.rs	/^    ibrd: ReadWrite<u32, IntDivisor::Register>,$/;"	m	struct:UartRegisters
ibrd	chips/tm4c129x/src/uart.rs	/^    ibrd: VolatileCell<u32>,$/;"	m	struct:UartRegisters
icachecnf	chips/nrf52/src/nvmc.rs	/^    pub icachecnf: ReadWrite<u32, CacheConfiguration::Register>,$/;"	m	struct:NvmcRegisters
icer	arch/cortex-m/src/nvic.rs	/^    icer: [VolatileCell<u32>; 8],$/;"	m	struct:NvicRegisters
icmp_lowpan_test	boards/imix/src/main.rs	/^mod icmp_lowpan_test;$/;"	n
icmp_sender	boards/imix/src/icmp_lowpan_test.rs	/^    icmp_sender: &'a ICMP6Sender<'a>,$/;"	m	struct:LowpanICMPTest
icmpv6	capsules/src/net/icmpv6/mod.rs	/^pub mod icmpv6;$/;"	n
icmpv6	capsules/src/net/mod.rs	/^pub mod icmpv6;$/;"	n
icmpv6_send	capsules/src/net/icmpv6/mod.rs	/^pub mod icmpv6_send;$/;"	n
icpr	arch/cortex-m/src/nvic.rs	/^    icpr: [VolatileCell<u32>; 8],$/;"	m	struct:NvicRegisters
icr	chips/cc26x2/src/uart.rs	/^    icr: WriteOnly<u32, Interrupts::Register>,$/;"	m	struct:UartRegisters
icr	chips/sam4l/src/acifc.rs	/^    icr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:AcifcRegisters
icr	chips/sam4l/src/bpm.rs	/^    icr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:BpmRegisters
icr	chips/sam4l/src/bscif.rs	/^    icr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:BscifRegisters
icr	chips/sam4l/src/pm.rs	/^    icr: WriteOnly<u32, InterruptOrStatus::Register>,$/;"	m	struct:PmRegisters
icr	chips/sam4l/src/scif.rs	/^    icr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:ScifRegisters
icr	chips/sam4l/src/wdt.rs	/^    icr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:WdtRegisters
icr	chips/tm4c129x/src/gpio.rs	/^    icr: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
icr	chips/tm4c129x/src/gpt.rs	/^    icr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
icr	chips/tm4c129x/src/uart.rs	/^    icr: VolatileCell<u32>,$/;"	m	struct:UartRegisters
icsr	arch/cortex-m/src/scb.rs	/^    icsr: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
id	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^    pub id: u8,$/;"	m	struct:Context
id	capsules/src/segger_rtt.rs	/^    id: [u8; 16],$/;"	m	struct:SeggerRttMemory
id	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:results
id	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:results_in_args
id	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:results_returned
idata	chips/sam4l/src/aes.rs	/^    idata: WriteOnly<u32, Data::Register>,           \/\/   0x50$/;"	m	struct:AesRegisters
identifier	capsules/src/mcp230xx.rs	/^    identifier: Cell<usize>,$/;"	m	struct:MCP230xx
identifier	tools/svd2regs.py	/^        def identifier(desc):$/;"	f	member:BitfieldFieldEnum.fields	file:
identifier	tools/svd2regs.py	/^        def identifier(name):$/;"	f	member:PeripheralStructField.fields	file:
idr	chips/sam4l/src/acifc.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:AcifcRegisters
idr	chips/sam4l/src/adc.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:AdcRegisters
idr	chips/sam4l/src/aes.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,        \/\/   0x14$/;"	m	struct:AesRegisters
idr	chips/sam4l/src/ast.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:AstRegisters
idr	chips/sam4l/src/bpm.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:BpmRegisters
idr	chips/sam4l/src/bscif.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:BscifRegisters
idr	chips/sam4l/src/crccu.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:CrccuRegisters
idr	chips/sam4l/src/dac.rs	/^    idr: WriteOnly<u32, InterruptDisable::Register>, \/\/   Interrupt Disable Register    (0x10)$/;"	m	struct:DacRegisters
idr	chips/sam4l/src/dma.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:DMARegisters
idr	chips/sam4l/src/i2c.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:TWIMRegisters
idr	chips/sam4l/src/i2c.rs	/^    idr: WriteOnly<u32, InterruptSlave::Register>,$/;"	m	struct:TWISRegisters
idr	chips/sam4l/src/pm.rs	/^    idr: WriteOnly<u32, InterruptOrStatus::Register>,$/;"	m	struct:PmRegisters
idr	chips/sam4l/src/scif.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:ScifRegisters
idr	chips/sam4l/src/spi.rs	/^    idr: WriteOnly<u32, InterruptFlags::Register>,$/;"	m	struct:SpiRegisters
idr	chips/sam4l/src/trng.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:TrngRegisters
idr	chips/sam4l/src/usart.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,    \/\/ 0x0C$/;"	m	struct:UsartRegisters
idr	chips/sam4l/src/wdt.rs	/^    idr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:WdtRegisters
idx	capsules/src/rng.rs	/^    idx: usize,$/;"	m	struct:App
idx	kernel/src/callback.rs	/^    idx: usize,$/;"	m	struct:AppId
idx	kernel/src/callback.rs	/^    pub fn idx(&self) -> usize {$/;"	F	implementation:AppId
ie	chips/sifive/src/uart.rs	/^    ie: ReadWrite<u32, interrupt::Register>,$/;"	m	struct:UartRegisters
ie_control	capsules/src/net/ieee802154.rs	/^mod ie_control {$/;"	n
ieee802154	capsules/src/lib.rs	/^pub mod ieee802154;$/;"	n
ieee802154	capsules/src/net/mod.rs	/^pub mod ieee802154;$/;"	n
ier	chips/sam4l/src/acifc.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:AcifcRegisters
ier	chips/sam4l/src/adc.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:AdcRegisters
ier	chips/sam4l/src/aes.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,        \/\/   0x10$/;"	m	struct:AesRegisters
ier	chips/sam4l/src/ast.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:AstRegisters
ier	chips/sam4l/src/bpm.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:BpmRegisters
ier	chips/sam4l/src/bscif.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:BscifRegisters
ier	chips/sam4l/src/crccu.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:CrccuRegisters
ier	chips/sam4l/src/dac.rs	/^    ier: WriteOnly<u32, InterruptEnable::Register>, \/\/    Interrupt Enable Register     (0x0c)$/;"	m	struct:DacRegisters
ier	chips/sam4l/src/dma.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:DMARegisters
ier	chips/sam4l/src/gpio.rs	/^    ier: Register,$/;"	m	struct:GpioRegisters
ier	chips/sam4l/src/i2c.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:TWIMRegisters
ier	chips/sam4l/src/i2c.rs	/^    ier: WriteOnly<u32, InterruptSlave::Register>,$/;"	m	struct:TWISRegisters
ier	chips/sam4l/src/pm.rs	/^    ier: WriteOnly<u32, InterruptOrStatus::Register>, \/\/ 0xC0$/;"	m	struct:PmRegisters
ier	chips/sam4l/src/scif.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:ScifRegisters
ier	chips/sam4l/src/spi.rs	/^    ier: WriteOnly<u32, InterruptFlags::Register>,$/;"	m	struct:SpiRegisters
ier	chips/sam4l/src/trng.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:TrngRegisters
ier	chips/sam4l/src/usart.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,    \/\/ 0x08$/;"	m	struct:UsartRegisters
ier	chips/sam4l/src/wdt.rs	/^    ier: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:WdtRegisters
iev	chips/tm4c129x/src/gpio.rs	/^    iev: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
ifls	chips/cc26x2/src/uart.rs	/^    ifls: ReadWrite<u32>,$/;"	m	struct:UartRegisters
ifls	chips/tm4c129x/src/uart.rs	/^    ifls: VolatileCell<u32>,$/;"	m	struct:UartRegisters
ifr	chips/sam4l/src/gpio.rs	/^    ifr: RegisterRC,$/;"	m	struct:GpioRegisters
ifr	chips/sam4l/src/usart.rs	/^    ifr: ReadWrite<u32, IrdaFilter::Register>, \/\/ 0x4C$/;"	m	struct:UsartRegisters
ihit	chips/nrf52/src/nvmc.rs	/^    pub ihit: ReadWrite<u32, CacheHit::Register>,$/;"	m	struct:NvmcRegisters
ilpr	chips/tm4c129x/src/uart.rs	/^    ilpr: VolatileCell<u32>,$/;"	m	struct:UartRegisters
im	chips/tm4c129x/src/gpio.rs	/^    im: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
im	chips/tm4c129x/src/uart.rs	/^    im: VolatileCell<u32>,$/;"	m	struct:UartRegisters
image1035	doc/courses/rustconf/rustconf.svg	/^       width="85.195831" \/>$/;"	i
imc	chips/tm4c129x/src/sysctl.rs	/^    imc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
img	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
img	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
imiss	chips/nrf52/src/nvmc.rs	/^    pub imiss: ReadWrite<u32, CacheMiss::Register>,$/;"	m	struct:NvmcRegisters
implHider	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f	function:collapseDocs
impl_as_primitive	libraries/enum_primitive/src/cast.rs	/^macro_rules! impl_as_primitive {$/;"	M
impl_from_primitive	libraries/enum_primitive/src/cast.rs	/^macro_rules! impl_from_primitive {$/;"	M
impl_from_primitive_wrapping	libraries/enum_primitive/src/cast.rs	/^macro_rules! impl_from_primitive_wrapping {$/;"	M
impl_num_cast	libraries/enum_primitive/src/cast.rs	/^macro_rules! impl_num_cast {$/;"	M
impl_to_primitive_int	libraries/enum_primitive/src/cast.rs	/^macro_rules! impl_to_primitive_int {$/;"	M
impl_to_primitive_int_to_int	libraries/enum_primitive/src/cast.rs	/^macro_rules! impl_to_primitive_int_to_int {$/;"	M
impl_to_primitive_int_to_uint	libraries/enum_primitive/src/cast.rs	/^macro_rules! impl_to_primitive_int_to_uint {$/;"	M
impl_to_primitive_uint	libraries/enum_primitive/src/cast.rs	/^macro_rules! impl_to_primitive_uint {$/;"	M
impl_to_primitive_uint_to_int	libraries/enum_primitive/src/cast.rs	/^macro_rules! impl_to_primitive_uint_to_int {$/;"	M
impl_to_primitive_uint_to_uint	libraries/enum_primitive/src/cast.rs	/^macro_rules! impl_to_primitive_uint_to_uint {$/;"	M
impl_to_primitive_wrapping	libraries/enum_primitive/src/cast.rs	/^macro_rules! impl_to_primitive_wrapping {$/;"	M
imr	chips/sam4l/src/acifc.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:AcifcRegisters
imr	chips/sam4l/src/adc.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:AdcRegisters
imr	chips/sam4l/src/aes.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,         \/\/   0x18$/;"	m	struct:AesRegisters
imr	chips/sam4l/src/ast.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:AstRegisters
imr	chips/sam4l/src/bpm.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:BpmRegisters
imr	chips/sam4l/src/bscif.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:BscifRegisters
imr	chips/sam4l/src/crccu.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:CrccuRegisters
imr	chips/sam4l/src/dac.rs	/^    imr: ReadOnly<u32, InterruptMask::Register>, \/\/       Interrupt Mask Register       (0x14)$/;"	m	struct:DacRegisters
imr	chips/sam4l/src/dma.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:DMARegisters
imr	chips/sam4l/src/i2c.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:TWIMRegisters
imr	chips/sam4l/src/i2c.rs	/^    imr: ReadOnly<u32, InterruptSlave::Register>,$/;"	m	struct:TWISRegisters
imr	chips/sam4l/src/pm.rs	/^    imr: ReadOnly<u32, InterruptOrStatus::Register>,$/;"	m	struct:PmRegisters
imr	chips/sam4l/src/scif.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:ScifRegisters
imr	chips/sam4l/src/spi.rs	/^    imr: ReadOnly<u32, InterruptFlags::Register>,$/;"	m	struct:SpiRegisters
imr	chips/sam4l/src/trng.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:TrngRegisters
imr	chips/sam4l/src/usart.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,     \/\/ 0x10$/;"	m	struct:UsartRegisters
imr	chips/sam4l/src/wdt.rs	/^    imr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:WdtRegisters
imr	chips/tm4c129x/src/gpt.rs	/^    imr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
imr0	chips/sam4l/src/gpio.rs	/^    imr0: Register,$/;"	m	struct:GpioRegisters
imr1	chips/sam4l/src/gpio.rs	/^    imr1: Register,$/;"	m	struct:GpioRegisters
imsc	chips/cc26x2/src/uart.rs	/^    imsc: ReadWrite<u32, Interrupts::Register>,$/;"	m	struct:UartRegisters
in_	chips/nrf5x/src/gpio.rs	/^    in_: ReadWrite<u32, In::Register>,$/;"	m	struct:GpioRegisters
in_app_owned_memory	kernel/src/process.rs	/^    fn in_app_owned_memory(&self, buf_start_addr: *const u8, size: usize) -> bool {$/;"	F	implementation:Process
in_args	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:execQuery.ret
in_args	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:execSearch.results
incoming_frame_security	capsules/src/ieee802154/framer.rs	/^    fn incoming_frame_security(&self, buf: &'static mut [u8], frame_len: usize) -> RxState {$/;"	F	implementation:Framer
increment	libraries/tock-cells/src/numeric_cell_ext.rs	/^    fn increment(&self) {$/;"	f
increment	libraries/tock-cells/src/numeric_cell_ext.rs	/^    fn increment(&self);$/;"	F	interface:NumericCellExt
increment_count	kernel/src/debug.rs	/^    fn increment_count(&self) {$/;"	F	implementation:DebugWriter
increment_count	kernel/src/debug.rs	/^    fn increment_count(&self) {$/;"	F	implementation:DebugWriterWrapper
increment_work	kernel/src/sched.rs	/^    crate fn increment_work(&self) {$/;"	F	implementation:Kernel
index	capsules/src/mx25r6435f.rs	/^    fn index(&self, idx: usize) -> &u8 {$/;"	F	implementation:Mx25r6435fSector
index	capsules/src/spi.rs	/^    index: usize,$/;"	m	struct:App
index	capsules/src/spi.rs	/^    index: usize,$/;"	m	struct:SlaveApp
index	capsules/src/usb.rs	/^    pub index: u16,$/;"	m	struct:SetupData
index	chips/arty_exx/src/gpio.rs	/^    fn index(&self, index: usize) -> &GpioPin {$/;"	F	implementation:Port
index	chips/cc26x2/src/gpio.rs	/^    fn index(&self, index: usize) -> &GPIOPin {$/;"	F	implementation:Port
index	chips/cc26x2/src/i2c.rs	/^    index: usize,$/;"	m	struct:Transfer
index	chips/cc26x2/src/uart.rs	/^    index: usize,$/;"	m	struct:Transaction
index	chips/e310x/src/gpio.rs	/^    fn index(&self, index: usize) -> &GpioPin {$/;"	F	implementation:Port
index	chips/nrf51/src/uart.rs	/^    index: Cell<usize>,$/;"	m	struct:UART
index	chips/nrf52/src/nvmc.rs	/^    fn index(&self, idx: usize) -> &u8 {$/;"	F	implementation:NrfPage
index	chips/nrf5x/src/gpio.rs	/^    fn index(&self, index: usize) -> &GPIOPin {$/;"	F	implementation:Port
index	chips/nrf5x/src/trng.rs	/^    index: Cell<usize>,$/;"	m	struct:Trng
index	chips/sam4l/src/flashcalw.rs	/^    fn index(&self, idx: usize) -> &u8 {$/;"	F	implementation:Sam4lPage
index	chips/sam4l/src/gpio.rs	/^    fn index(&self, index: usize) -> &GPIOPin {$/;"	F	implementation:Port
index	chips/sifive/src/uart.rs	/^    index: Cell<usize>,$/;"	m	struct:Uart
index	chips/tm4c129x/src/gpio.rs	/^    fn index(&self, index: usize) -> &GPIOPin {$/;"	F	implementation:Port
index	kernel/src/grant.rs	/^    index: usize,$/;"	m	struct:Iter
index	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:results
index	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:results_in_args
index	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:results_returned
index_mut	capsules/src/mx25r6435f.rs	/^    fn index_mut(&mut self, idx: usize) -> &mut u8 {$/;"	F	implementation:Mx25r6435fSector
index_mut	chips/arty_exx/src/gpio.rs	/^    fn index_mut(&mut self, index: usize) -> &mut GpioPin {$/;"	F	implementation:Port
index_mut	chips/cc26x2/src/gpio.rs	/^    fn index_mut(&mut self, index: usize) -> &mut GPIOPin {$/;"	F	implementation:Port
index_mut	chips/e310x/src/gpio.rs	/^    fn index_mut(&mut self, index: usize) -> &mut GpioPin {$/;"	F	implementation:Port
index_mut	chips/nrf52/src/nvmc.rs	/^    fn index_mut(&mut self, idx: usize) -> &mut u8 {$/;"	F	implementation:NrfPage
index_mut	chips/nrf5x/src/gpio.rs	/^    fn index_mut(&mut self, index: usize) -> &mut GPIOPin {$/;"	F	implementation:Port
index_mut	chips/sam4l/src/flashcalw.rs	/^    fn index_mut(&mut self, idx: usize) -> &mut u8 {$/;"	F	implementation:Sam4lPage
index_mut	chips/sam4l/src/gpio.rs	/^    fn index_mut(&mut self, index: usize) -> &mut GPIOPin {$/;"	F	implementation:Port
index_mut	chips/tm4c129x/src/gpio.rs	/^    fn index_mut(&mut self, index: usize) -> &mut GPIOPin {$/;"	F	implementation:Port
inflight	capsules/src/ieee802154/virtual_mac.rs	/^    inflight: OptionalCell<&'a MacUser<'a>>,$/;"	m	struct:MuxMac
inflight	capsules/src/virtual_flash.rs	/^    inflight: OptionalCell<&'a FlashUser<'a, F>>,$/;"	m	struct:MuxFlash
inflight	capsules/src/virtual_i2c.rs	/^    inflight: OptionalCell<&'a I2CDevice<'a>>,$/;"	m	struct:MuxI2C
inflight	capsules/src/virtual_spi.rs	/^    inflight: OptionalCell<&'a VirtualSpiMasterDevice<'a, Spi>>,$/;"	m	struct:MuxSpiMaster
inflight	capsules/src/virtual_uart.rs	/^    inflight: OptionalCell<&'a UartDevice<'a>>,$/;"	m	struct:UartMux
info	capsules/src/ieee802154/framer.rs	/^    info: FrameInfo,$/;"	m	struct:Frame
info_flash	chips/nrf52/src/ficr.rs	/^    info_flash: ReadOnly<u32, InfoFlash::Register>,$/;"	m	struct:FicrRegisters
info_package	chips/nrf52/src/ficr.rs	/^    info_package: ReadOnly<u32, InfoPackage::Register>,$/;"	m	struct:FicrRegisters
info_part	chips/nrf52/src/ficr.rs	/^    info_part: ReadOnly<u32, InfoPart::Register>,$/;"	m	struct:FicrRegisters
info_ram	chips/nrf52/src/ficr.rs	/^    info_ram: ReadOnly<u32, InfoRam::Register>,$/;"	m	struct:FicrRegisters
info_variant	chips/nrf52/src/ficr.rs	/^    info_variant: ReadOnly<u32, InfoVariant::Register>,$/;"	m	struct:FicrRegisters
init	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    pub fn init($/;"	F	implementation:TxState
init	chips/cc26x2/src/crt1.rs	/^pub unsafe extern "C" fn init() {$/;"	f
init	chips/nrf51/src/crt1.rs	/^pub unsafe extern "C" fn init() {$/;"	f
init	chips/nrf52/src/crt1.rs	/^pub unsafe extern "C" fn init() {$/;"	f
init	chips/nrf52/src/spi.rs	/^    fn init(&self) {$/;"	F	implementation:SPIM
init	chips/sam4l/src/crccu.rs	/^    fn init(&self) {$/;"	F	implementation:Crccu
init	chips/sam4l/src/lib.rs	/^pub unsafe fn init() {$/;"	f
init	chips/sam4l/src/spi.rs	/^    fn init(&self) {$/;"	F	implementation:SpiHw
init	chips/sam4l/src/usart.rs	/^    fn init(&self) {$/;"	F	implementation:USART
init	chips/tm4c129x/src/lib.rs	/^pub unsafe fn init() {$/;"	f
init	kernel/src/hil/led.rs	/^    fn init(&mut self) {$/;"	F	implementation:LedHigh
init	kernel/src/hil/led.rs	/^    fn init(&mut self) {$/;"	F	implementation:LedLow
init	kernel/src/hil/led.rs	/^    fn init(&mut self);$/;"	F	interface:Led
init	kernel/src/hil/spi.rs	/^    fn init(&self);$/;"	F	interface:SpiMaster
init	kernel/src/hil/spi.rs	/^    fn init(&self);$/;"	F	interface:SpiSlave
initSearch	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
initSearchNav	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:initSearch
initSidebarItems	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
init_as_role	chips/sam4l/src/spi.rs	/^    fn init_as_role(&self, spi: &SpiRegisterManager, role: SpiRole) {$/;"	F	implementation:SpiHw
init_done	capsules/src/sdcard.rs	/^    fn init_done(&self, block_size: u32, total_size: u64) {$/;"	F	implementation:SDCardDriver
init_done	capsules/src/sdcard.rs	/^    fn init_done(&self, block_size: u32, total_size: u64);$/;"	F	interface:SDCardClient
init_fn_offset	kernel/src/tbfheader.rs	/^    init_fn_offset: u32,$/;"	m	struct:TbfHeaderV2Main
init_measurement	capsules/src/si7021.rs	/^    fn init_measurement(&self, buffer: &'static mut [u8]) {$/;"	F	implementation:SI7021
init_memory	arch/riscv32i/src/lib.rs	/^pub unsafe fn init_memory() {$/;"	f
init_packet	capsules/src/net/ipv6/ipv6_send.rs	/^    fn init_packet(&self, dst_addr: IPAddr, transport_header: TransportHeader, payload: &[u8]) {$/;"	F	implementation:IP6SendStruct
initialize	boards/launchxl/src/uart_echo.rs	/^    pub fn initialize(&self) {$/;"	F	implementation:UartEcho
initialize	capsules/src/console.rs	/^    pub fn initialize(&self) {$/;"	F	implementation:Console
initialize	capsules/src/ieee802154/mac.rs	/^    fn initialize(&self, _mac_buf: &'static mut [u8]) -> ReturnCode {$/;"	F	implementation:AwakeMac
initialize	capsules/src/ieee802154/mac.rs	/^    fn initialize(&self, mac_buf: &'static mut [u8]) -> ReturnCode;$/;"	F	interface:Mac
initialize	capsules/src/ieee802154/xmac.rs	/^    fn initialize(&self, mac_buf: &'static mut [u8]) -> ReturnCode {$/;"	F	implementation:XMac
initialize	capsules/src/nrf51822_serialization.rs	/^    pub fn initialize(&self) {$/;"	F	implementation:Nrf51822Serialization
initialize	capsules/src/process_console.rs	/^    pub fn initialize(&self) {$/;"	F	implementation:ProcessConsole
initialize	capsules/src/rf233.rs	/^    fn initialize($/;"	F	implementation:RF233
initialize	capsules/src/rng.rs	/^    fn initialize(&'a self) {$/;"	F	implementation:SynchronousRandom
initialize	capsules/src/sdcard.rs	/^    pub fn initialize(&self) -> ReturnCode {$/;"	F	implementation:SDCard
initialize	capsules/src/virtual_uart.rs	/^    pub fn initialize(&self) {$/;"	F	implementation:UartMux
initialize	chips/cc26x2/src/i2c.rs	/^    pub fn initialize(&self) {$/;"	F	implementation:I2CMaster
initialize	chips/cc26x2/src/uart.rs	/^    pub fn initialize(&self) {$/;"	F	implementation:UART
initialize	chips/nrf51/src/uart.rs	/^    pub fn initialize(&self, tx: Pinmux, rx: Pinmux, cts: Pinmux, rts: Pinmux) {$/;"	F	implementation:UART
initialize	chips/nrf52/src/uart.rs	/^    pub fn initialize($/;"	F	implementation:Uarte
initialize	chips/sam4l/src/dac.rs	/^    fn initialize(&self) -> ReturnCode {$/;"	F	implementation:Dac
initialize	chips/sam4l/src/dma.rs	/^    pub fn initialize(&self, client: &'static mut DMAClient, width: DMAWidth) {$/;"	F	implementation:DMAChannel
initialize	kernel/src/hil/dac.rs	/^    fn initialize(&self) -> ReturnCode;$/;"	F	interface:DacChannel
initialize	kernel/src/hil/radio.rs	/^    fn initialize($/;"	F	interface:RadioConfig
initialize	kernel/src/hil/rng.rs	/^    fn initialize(&'a self);$/;"	F	interface:Random
initialize_all	boards/imix/src/icmp_lowpan_test.rs	/^pub unsafe fn initialize_all($/;"	f
initialize_all	boards/imix/src/ipv6_lowpan_test.rs	/^pub unsafe fn initialize_all($/;"	f
initialize_all	boards/imix/src/udp_lowpan_test.rs	/^pub unsafe fn initialize_all($/;"	f
initialize_gpio_pins	chips/sifive/src/uart.rs	/^    pub fn initialize_gpio_pins(&self, tx: &gpio::GpioPin, rx: &gpio::GpioPin) {$/;"	F	implementation:Uart
initialized	boards/ek-tm4c1294xl/src/io.rs	/^    initialized: bool,$/;"	m	struct:Writer
initialized	boards/hail/src/io.rs	/^    initialized: bool,$/;"	m	struct:Writer
initialized	boards/imix/src/io.rs	/^    initialized: bool,$/;"	m	struct:Writer
initialized	boards/launchxl/src/io.rs	/^    initialized: bool,$/;"	m	struct:Writer
initialized	boards/nordic/nrf51dk/src/io.rs	/^    initialized: bool,$/;"	m	struct:Writer
initialized	boards/nordic/nrf52840dk/src/io.rs	/^    initialized: bool,$/;"	m	struct:Writer
initialized	boards/nordic/nrf52dk/src/io.rs	/^    initialized: bool,$/;"	m	struct:Writer
initialized	chips/nrf52/src/spi.rs	/^    initialized: Cell<bool>,$/;"	m	struct:SPIM
initvect0	chips/sam4l/src/aes.rs	/^    initvect0: WriteOnly<u32, InitVector::Register>, \/\/   0x40$/;"	m	struct:AesRegisters
initvect1	chips/sam4l/src/aes.rs	/^    initvect1: WriteOnly<u32, InitVector::Register>, \/\/   0x44$/;"	m	struct:AesRegisters
initvect2	chips/sam4l/src/aes.rs	/^    initvect2: WriteOnly<u32, InitVector::Register>, \/\/   0x48$/;"	m	struct:AesRegisters
initvect3	chips/sam4l/src/aes.rs	/^    initvect3: WriteOnly<u32, InitVector::Register>, \/\/   0x4c$/;"	m	struct:AesRegisters
input	chips/nrf5x/src/aes.rs	/^    input: TakeCell<'a, [u8]>,$/;"	m	struct:AesECB
input	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
input::-moz-focus-inner	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
input:checked+.slider	kernel/target/doc/settings.css	/^.setting-line{padding:5px;}.setting-line>div{max-width:calc(100% - 74px);display:inline-block;ve/;"	c
input:checked+.slider:before	kernel/target/doc/settings.css	/^.setting-line{padding:5px;}.setting-line>div{max-width:calc(100% - 74px);display:inline-block;ve/;"	c
input:focus+.slider	kernel/target/doc/settings.css	/^.setting-line{padding:5px;}.setting-line>div{max-width:calc(100% - 74px);display:inline-block;ve/;"	c
input[type="checkbox"]	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
input[type="number"] ::-webkit-inner-spin-button	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
input[type="number"] ::-webkit-outer-spin-button	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
input[type="radio"]	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
input[type="reset"]	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
input[type="search"]	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
input[type="search"] ::-webkit-search-cancel-button	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
input[type="search"] ::-webkit-search-decoration	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
input[type="submit"]	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
input_buf	tools/usb/bulk-echo-fast/main.c	/^static unsigned char input_buf[input_bufsz];$/;"	v	typeref:typename:unsigned char[]	file:
input_buf_avail	tools/usb/bulk-echo-fast/main.c	/^static size_t input_buf_avail(void) {$/;"	f	typeref:typename:size_t	file:
input_buf_locked	tools/usb/bulk-echo-fast/main.c	/^static bool input_buf_locked = false;$/;"	v	typeref:typename:bool	file:
input_buffer_ready	chips/sam4l/src/aes.rs	/^    fn input_buffer_ready(&self) -> bool {$/;"	F	implementation:Aes
input_buflen	tools/usb/bulk-echo-fast/main.c	/^static size_t input_buflen = 0;$/;"	v	typeref:typename:size_t	file:
input_bufsz	tools/usb/bulk-echo-fast/main.c	/^static const size_t input_bufsz = 103;$/;"	v	typeref:typename:const size_t	file:
input_closed	tools/usb/bulk-echo-fast/main.c	/^static bool input_closed = false;$/;"	v	typeref:typename:bool	file:
input_en	chips/sifive/src/gpio.rs	/^    input_en: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
insert	libraries/tock-cells/src/optional_cell.rs	/^    pub fn insert(&self, opt: Option<T>) {$/;"	F	implementation:OptionalCell
insertAfter	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
inten	chips/nrf51/src/i2c.rs	/^    inten: ReadOnly<u32, InterruptEnable::Register>,$/;"	m	struct:TwimRegisters
inten	chips/nrf51/src/uart.rs	/^    inten: ReadWrite<u32, Interrupt::Register>, \/\/..... 0x300$/;"	m	struct:UartRegisters
inten	chips/nrf52/src/adc.rs	/^    inten: ReadWrite<u32, INTEN::Register>,$/;"	m	struct:AdcRegisters
inten	chips/nrf52/src/i2c.rs	/^    inten: ReadWrite<u32, INTE::Register>,$/;"	m	struct:TwimRegisters
intenclr	chips/nrf51/src/clock.rs	/^    intenclr: ReadWrite<u32, Interrupt::Register>,   \/\/ 0x308$/;"	m	struct:ClockRegisters
intenclr	chips/nrf51/src/i2c.rs	/^    intenclr: WriteOnly<u32, InterruptEnable::Register>,$/;"	m	struct:TwimRegisters
intenclr	chips/nrf51/src/radio.rs	/^    intenclr: ReadWrite<u32, Interrupt::Register>, \/\/ 0x308 ---> 0x30c$/;"	m	struct:RadioRegisters
intenclr	chips/nrf51/src/uart.rs	/^    intenclr: ReadWrite<u32, Interrupt::Register>, \/\/.. 0x308$/;"	m	struct:UartRegisters
intenclr	chips/nrf52/src/adc.rs	/^    intenclr: ReadWrite<u32, INTEN::Register>,$/;"	m	struct:AdcRegisters
intenclr	chips/nrf52/src/clock.rs	/^    intenclr: ReadWrite<u32, Interrupt::Register>,$/;"	m	struct:ClockRegisters
intenclr	chips/nrf52/src/i2c.rs	/^    intenclr: ReadWrite<u32, INTE::Register>,$/;"	m	struct:TwimRegisters
intenclr	chips/nrf52/src/radio.rs	/^    intenclr: ReadWrite<u32, Interrupt::Register>,$/;"	m	struct:RadioRegisters
intenclr	chips/nrf52/src/spi.rs	/^    intenclr: ReadWrite<u32, INTE::Register>,        \/\/ Disable interrupt$/;"	m	struct:SpimRegisters
intenclr	chips/nrf52/src/uart.rs	/^    intenclr: ReadWrite<u32, Interrupt::Register>,$/;"	m	struct:UarteRegisters
intenclr	chips/nrf5x/src/aes.rs	/^    intenclr: ReadWrite<u32, Intenclr::Register>,$/;"	m	struct:AesEcbRegisters
intenclr	chips/nrf5x/src/gpio.rs	/^    intenclr: ReadWrite<u32, Intenclr::Register>,$/;"	m	struct:GpioteRegisters
intenclr	chips/nrf5x/src/rtc.rs	/^    intenclr: ReadWrite<u32, Inte::Register>,$/;"	m	struct:RtcRegisters
intenclr	chips/nrf5x/src/temperature.rs	/^    pub intenclr: ReadWrite<u32, Intenclr::Register>,$/;"	m	struct:TempRegisters
intenclr	chips/nrf5x/src/timer.rs	/^    intenclr: ReadWrite<u32, Inte::Register>,$/;"	m	struct:TimerRegisters
intenclr	chips/nrf5x/src/trng.rs	/^    pub intenclr: ReadWrite<u32, Intenclr::Register>,$/;"	m	struct:RngRegisters
intenset	chips/nrf51/src/clock.rs	/^    intenset: ReadWrite<u32, Interrupt::Register>,   \/\/ 0x304$/;"	m	struct:ClockRegisters
intenset	chips/nrf51/src/i2c.rs	/^    intenset: WriteOnly<u32, InterruptEnable::Register>,$/;"	m	struct:TwimRegisters
intenset	chips/nrf51/src/radio.rs	/^    intenset: ReadWrite<u32, Interrupt::Register>, \/\/ 0x304 ---> 0x308$/;"	m	struct:RadioRegisters
intenset	chips/nrf51/src/uart.rs	/^    intenset: ReadWrite<u32, Interrupt::Register>, \/\/.. 0x304$/;"	m	struct:UartRegisters
intenset	chips/nrf52/src/adc.rs	/^    intenset: ReadWrite<u32, INTEN::Register>,$/;"	m	struct:AdcRegisters
intenset	chips/nrf52/src/clock.rs	/^    intenset: ReadWrite<u32, Interrupt::Register>,$/;"	m	struct:ClockRegisters
intenset	chips/nrf52/src/i2c.rs	/^    intenset: ReadWrite<u32, INTE::Register>,$/;"	m	struct:TwimRegisters
intenset	chips/nrf52/src/radio.rs	/^    intenset: ReadWrite<u32, Interrupt::Register>,$/;"	m	struct:RadioRegisters
intenset	chips/nrf52/src/spi.rs	/^    intenset: ReadWrite<u32, INTE::Register>,        \/\/ Enable interrupt$/;"	m	struct:SpimRegisters
intenset	chips/nrf52/src/uart.rs	/^    intenset: ReadWrite<u32, Interrupt::Register>,$/;"	m	struct:UarteRegisters
intenset	chips/nrf5x/src/aes.rs	/^    intenset: ReadWrite<u32, Intenset::Register>,$/;"	m	struct:AesEcbRegisters
intenset	chips/nrf5x/src/gpio.rs	/^    intenset: ReadWrite<u32, Intenset::Register>,$/;"	m	struct:GpioteRegisters
intenset	chips/nrf5x/src/rtc.rs	/^    intenset: ReadWrite<u32, Inte::Register>,$/;"	m	struct:RtcRegisters
intenset	chips/nrf5x/src/temperature.rs	/^    pub intenset: ReadWrite<u32, Intenset::Register>,$/;"	m	struct:TempRegisters
intenset	chips/nrf5x/src/timer.rs	/^    intenset: ReadWrite<u32, Inte::Register>,$/;"	m	struct:TimerRegisters
intenset	chips/nrf5x/src/trng.rs	/^    pub intenset: ReadWrite<u32, Intenset::Register>,$/;"	m	struct:RngRegisters
interface_class	capsules/src/usb.rs	/^    pub interface_class: u8,$/;"	m	struct:InterfaceDescriptor
interface_list	boards/imix/src/components/udp_6lowpan.rs	/^    interface_list: &'static [IPAddr],$/;"	m	struct:UDPComponent
interface_list	capsules/src/net/udp/driver.rs	/^    interface_list: &'static [IPAddr],$/;"	m	struct:UDPDriver
interface_number	capsules/src/usb.rs	/^    pub interface_number: u8,$/;"	m	struct:InterfaceDescriptor
interface_protocol	capsules/src/usb.rs	/^    pub interface_protocol: u8,$/;"	m	struct:InterfaceDescriptor
interface_subclass	capsules/src/usb.rs	/^    pub interface_subclass: u8,$/;"	m	struct:InterfaceDescriptor
internal	chips/sam4l/src/adc.rs	/^    internal: u32,$/;"	m	struct:AdcChannel
internal_buffer	kernel/src/debug.rs	/^    internal_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:DebugWriter
internal_err	chips/sam4l/src/usbc/mod.rs	/^macro_rules! internal_err {$/;"	M
interrupt	capsules/src/ltc294x.rs	/^    fn interrupt(&self) {$/;"	F	implementation:LTC294XDriver
interrupt	capsules/src/ltc294x.rs	/^    fn interrupt(&self);$/;"	F	interface:LTC294XClient
interrupt_callback	capsules/src/gpio_async.rs	/^    interrupt_callback: OptionalCell<Callback>,$/;"	m	struct:GPIOAsync
interrupt_disable	chips/nrf51/src/clock.rs	/^    pub fn interrupt_disable(&self, interrupt: InterruptField) {$/;"	F	implementation:Clock
interrupt_disable	chips/nrf52/src/clock.rs	/^    pub fn interrupt_disable(&self, interrupt: InterruptField) {$/;"	F	implementation:Clock
interrupt_enable	chips/nrf51/src/clock.rs	/^    pub fn interrupt_enable(&self, interrupt: InterruptField) {$/;"	F	implementation:Clock
interrupt_enable	chips/nrf52/src/clock.rs	/^    pub fn interrupt_enable(&self, interrupt: InterruptField) {$/;"	F	implementation:Clock
interrupt_enabled	chips/sam4l/src/crccu.rs	/^    fn interrupt_enabled(self) -> bool {$/;"	F	implementation:TCR
interrupt_handling	capsules/src/rf233.rs	/^    interrupt_handling: Cell<bool>,$/;"	m	struct:RF233
interrupt_included	capsules/src/rf233.rs	/^fn interrupt_included(mask: u8, interrupt: InteruptFlags) -> bool {$/;"	f
interrupt_pending	capsules/src/rf233.rs	/^    interrupt_pending: Cell<bool>,$/;"	m	struct:RF233
interrupt_pin	capsules/src/lps25hb.rs	/^    interrupt_pin: &'a gpio::Pin,$/;"	m	struct:LPS25HB
interrupt_pin	capsules/src/ltc294x.rs	/^    interrupt_pin: Option<&'a gpio::Pin>,$/;"	m	struct:LTC294X
interrupt_pin	capsules/src/tmp006.rs	/^    interrupt_pin: &'a Pin,$/;"	m	struct:TMP006
interrupt_pin	capsules/src/tsl2561.rs	/^    interrupt_pin: &'a gpio::Pin,$/;"	m	struct:TSL2561
interrupt_pin1	capsules/src/fxos8700cq.rs	/^    interrupt_pin1: &'a gpio::Pin,$/;"	m	struct:Fxos8700cq
interrupt_pin_a	capsules/src/mcp230xx.rs	/^    interrupt_pin_a: Option<&'static hil::gpio::Pin>,$/;"	m	struct:MCP230xx
interrupt_pin_b	capsules/src/mcp230xx.rs	/^    interrupt_pin_b: Option<&'static hil::gpio::Pin>,$/;"	m	struct:MCP230xx
interrupts	chips/arty_exx/src/lib.rs	/^mod interrupts;$/;"	n
interrupts	chips/e310x/src/lib.rs	/^mod interrupts;$/;"	n
interrupts_enabled	capsules/src/mcp230xx.rs	/^    interrupts_enabled: Cell<u32>, \/\/ Whether the pin interrupt is enabled$/;"	m	struct:MCP230xx
interrupts_enabled	chips/nrf5x/src/timer.rs	/^    fn interrupts_enabled(&self) -> bool {$/;"	F	implementation:TimerAlarm
interrupts_mode	capsules/src/mcp230xx.rs	/^    interrupts_mode: Cell<u32>,    \/\/ What interrupt mode the pin is in$/;"	m	struct:MCP230xx
interval	capsules/src/usb.rs	/^    pub interval: u8,$/;"	m	struct:EndpointDescriptor
into	chips/nrf52/src/deferred_call_tasks.rs	/^    fn into(self) -> usize {$/;"	F	implementation:DeferredCallTask
into	chips/nrf5x/src/pinmux.rs	/^    fn into(self) -> u32 {$/;"	F	implementation:Pinmux
into	chips/sam4l/src/deferred_call_tasks.rs	/^    fn into(self) -> usize {$/;"	F	implementation:Task
into_buf	capsules/src/ieee802154/framer.rs	/^    pub fn into_buf(self) -> &'static mut [u8] {$/;"	F	implementation:Frame
introspection	kernel/src/lib.rs	/^pub mod introspection;$/;"	n
invalidate_cache	chips/sam4l/src/flashcalw.rs	/^    fn invalidate_cache(&self) {$/;"	F	implementation:FLASHCALW
io	boards/arty-e21/src/main.rs	/^pub mod io;$/;"	n
io	boards/ek-tm4c1294xl/src/main.rs	/^pub mod io;$/;"	n
io	boards/hail/src/main.rs	/^pub mod io;$/;"	n
io	boards/hifive1/src/main.rs	/^pub mod io;$/;"	n
io	boards/imix/src/main.rs	/^pub mod io;$/;"	n
io	boards/launchxl/src/main.rs	/^pub mod io;$/;"	n
io	boards/nordic/nrf51dk/src/main.rs	/^pub mod io;$/;"	n
io	boards/nordic/nrf52840dk/src/main.rs	/^pub mod io;$/;"	n
io	boards/nordic/nrf52dk/src/main.rs	/^pub mod io;$/;"	n
ioc_clk32k_ctl	chips/cc26x2/src/aon.rs	/^    ioc_clk32k_ctl: ReadWrite<u32, IocClk::Register>,$/;"	m	struct:AonIocRegisters
ioc_registers	chips/cc26x2/src/gpio.rs	/^    ioc_registers: StaticRef<IocRegisters>,$/;"	m	struct:GPIOPin
iocfg	chips/cc26x2/src/gpio.rs	/^    iocfg: [ReadWrite<u32, IoConfiguration::Register>; 32],$/;"	m	struct:IocRegisters
iof0	chips/sifive/src/gpio.rs	/^    pub fn iof0(&self) {$/;"	F	implementation:GpioPin
iof1	chips/sifive/src/gpio.rs	/^    pub fn iof1(&self) {$/;"	F	implementation:GpioPin
iof_en	chips/sifive/src/gpio.rs	/^    iof_en: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
iof_sel	chips/sifive/src/gpio.rs	/^    iof_sel: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
ioret	chips/sam4l/src/bpm.rs	/^    ioret: ReadWrite<u32, InputOutputRetention::Register>,$/;"	m	struct:BpmRegisters
ip	chips/sifive/src/uart.rs	/^    ip: ReadOnly<u32, interrupt::Register>,$/;"	m	struct:UartRegisters
ip6_nh	capsules/src/net/ip.rs	/^pub mod ip6_nh {$/;"	n
ip6_nh	capsules/src/net/ipv6/ip_utils.rs	/^pub mod ip6_nh {$/;"	n
ip6_packet	capsules/src/net/ipv6/ipv6_send.rs	/^    ip6_packet: TakeCell<'static, IP6Packet<'static>>,$/;"	m	struct:IP6SendStruct
ip_send_struct	capsules/src/net/icmpv6/icmpv6_send.rs	/^    ip_send_struct: &'a T,$/;"	m	struct:ICMP6SendStruct
ip_send_struct	capsules/src/net/udp/udp_send.rs	/^    ip_send_struct: &'a T,$/;"	m	struct:UDPSendStruct
ip_utils	capsules/src/net/ipv6/mod.rs	/^pub mod ip_utils;$/;"	n
ipc	boards/ek-tm4c1294xl/src/main.rs	/^    ipc: kernel::ipc::IPC,$/;"	m	struct:EkTm4c1294xl
ipc	boards/hail/src/main.rs	/^    ipc: kernel::ipc::IPC,$/;"	m	struct:Hail
ipc	boards/imix/src/main.rs	/^    ipc: kernel::ipc::IPC,$/;"	m	struct:Imix
ipc	boards/nordic/nrf52dk_base/src/lib.rs	/^    ipc: kernel::ipc::IPC,$/;"	m	struct:Platform
ipc	kernel/src/lib.rs	/^pub mod ipc;$/;"	n
ipc_callback	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^static void ipc_callback(__attribute__ ((unused)) int pid,$/;"	f	typeref:typename:void	file:
iphc	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^mod iphc {$/;"	n
ipsr_isr_number_to_str	arch/cortex-m3/src/lib.rs	/^pub fn ipsr_isr_number_to_str(isr_number: usize) -> &'static str {$/;"	f
ipsr_isr_number_to_str	arch/cortex-m4/src/lib.rs	/^pub fn ipsr_isr_number_to_str(isr_number: usize) -> &'static str {$/;"	f
ipv6	capsules/src/net/ipv6/mod.rs	/^pub mod ipv6;$/;"	n
ipv6	capsules/src/net/mod.rs	/^pub mod ipv6;$/;"	n
ipv6_check_receive_packet	boards/imix/src/ipv6_lowpan_test.rs	/^fn ipv6_check_receive_packet($/;"	f
ipv6_lowpan_test	boards/imix/src/main.rs	/^mod ipv6_lowpan_test;$/;"	n
ipv6_packet_test	boards/imix/src/sixlowpan_dummy.rs	/^fn ipv6_packet_test<'a>(radio: &'a Radio, tf: TF, hop_limit: u8, sac: SAC, dac: DAC) {$/;"	f
ipv6_prepare_packet	boards/imix/src/ipv6_lowpan_test.rs	/^fn ipv6_prepare_packet(tf: TF, hop_limit: u8, sac: SAC, dac: DAC) {$/;"	f
ipv6_recv	capsules/src/net/ipv6/mod.rs	/^pub mod ipv6_recv;$/;"	n
ipv6_send	capsules/src/net/ipv6/mod.rs	/^pub mod ipv6_send;$/;"	n
ipv6_send_packet_test	boards/imix/src/icmp_lowpan_test.rs	/^    fn ipv6_send_packet_test(&self) {$/;"	F	implementation:LowpanICMPTest
ipv6_send_packet_test	boards/imix/src/ipv6_lowpan_test.rs	/^    fn ipv6_send_packet_test(&self, tf: TF, hop_limit: u8, sac: SAC, dac: DAC) {$/;"	F	implementation:LowpanTest
ipv6_send_packet_test	boards/imix/src/udp_lowpan_test.rs	/^    fn ipv6_send_packet_test(&self) {$/;"	F	implementation:LowpanTest
ir	chips/nrf52/src/ficr.rs	/^    ir: [ReadOnly<u32, IdentityRoot::Register>; 4],$/;"	m	struct:FicrRegisters
irq	boards/imix/src/components/rf233.rs	/^    irq: &'static hil::gpio::Pin,$/;"	m	struct:RF233Component
irq_ctl	capsules/src/rf233.rs	/^    irq_ctl: &'a gpio::PinCtl,$/;"	m	struct:RF233
irq_flag_clr	chips/cc26x2/src/trng.rs	/^    irq_flag_clr: WriteOnly<u32, IrqFlagClear::Register>,$/;"	m	struct:RngRegisters
irq_flag_stat	chips/cc26x2/src/trng.rs	/^    irq_flag_stat: ReadOnly<u32, IrqStatus::Register>,$/;"	m	struct:RngRegisters
irq_pin	capsules/src/rf233.rs	/^    irq_pin: &'a gpio::Pin,$/;"	m	struct:RF233
is	chips/tm4c129x/src/gpio.rs	/^    is: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
isHidden	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
is_alarm_enabled	chips/sam4l/src/ast.rs	/^    fn is_alarm_enabled(&self) -> bool {$/;"	F	implementation:Ast
is_app	kernel/src/tbfheader.rs	/^    crate fn is_app(&self) -> bool {$/;"	F	implementation:TbfHeader
is_armed	capsules/src/virtual_alarm.rs	/^    fn is_armed(&self) -> bool {$/;"	F	implementation:VirtualMuxAlarm
is_armed	chips/cc26x2/src/rtc.rs	/^    fn is_armed(&self) -> bool {$/;"	F	implementation:Rtc
is_armed	chips/nrf5x/src/rtc.rs	/^    fn is_armed(&self) -> bool {$/;"	F	implementation:Rtc
is_armed	chips/nrf5x/src/timer.rs	/^    fn is_armed(&self) -> bool {$/;"	F	implementation:TimerAlarm
is_armed	chips/sam4l/src/ast.rs	/^    fn is_armed(&self) -> bool {$/;"	F	implementation:Ast
is_armed	chips/tm4c129x/src/gpt.rs	/^    fn is_armed(&self) -> bool {$/;"	F	implementation:AlarmTimer
is_armed	kernel/src/hil/time.rs	/^    fn is_armed(&self) -> bool;$/;"	F	interface:Time
is_busy	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn is_busy(&self, frequency: u32, current_time: u32) -> bool {$/;"	F	implementation:RxState
is_busy	chips/nrf52/src/spi.rs	/^    fn is_busy(&self) -> bool {$/;"	F	implementation:SPIM
is_busy	chips/sam4l/src/spi.rs	/^    fn is_busy(&self) -> bool {$/;"	F	implementation:SpiHw
is_busy	chips/sam4l/src/usart.rs	/^    fn is_busy(&self) -> bool {$/;"	F	implementation:USART
is_busy	kernel/src/hil/spi.rs	/^    fn is_busy(&self) -> bool;$/;"	F	interface:SpiMaster
is_clock_enabled	chips/sam4l/src/pm.rs	/^pub fn is_clock_enabled(clock: Clock) -> bool {$/;"	f
is_complete	capsules/src/net/frag_utils.rs	/^    pub fn is_complete(&self, total_length: usize) -> bool {$/;"	F	implementation:Bitmap
is_done	capsules/src/net/stream.rs	/^    pub fn is_done(&self) -> bool {$/;"	F	implementation:SResult
is_enabled	chips/cc26x2/src/prcm.rs	/^    pub fn is_enabled(domain: PowerDomain) -> bool {$/;"	F	implementation:Power
is_enabled	chips/nrf51/src/i2c.rs	/^    pub fn is_enabled(&self) -> bool {$/;"	F	implementation:TWIM
is_enabled	chips/nrf52/src/i2c.rs	/^    pub fn is_enabled(&self) -> bool {$/;"	F	implementation:TWIM
is_enabled	chips/nrf52/src/spi.rs	/^    pub fn is_enabled(&self) -> bool {$/;"	F	implementation:SPIM
is_enabled	chips/sam4l/src/dma.rs	/^    pub fn is_enabled(&self) -> bool {$/;"	F	implementation:DMAChannel
is_enabled	chips/sam4l/src/i2c.rs	/^    fn is_enabled(&self) -> bool {$/;"	F	implementation:TWIMClock
is_enabled	chips/sam4l/src/i2c.rs	/^    fn is_enabled(&self) -> bool {$/;"	F	implementation:TWISClock
is_enabled	chips/sam4l/src/pm.rs	/^    fn is_enabled(&self) -> bool {$/;"	F	implementation:Clock
is_enabled	kernel/src/platform/mod.rs	/^    fn is_enabled(&self) -> bool {$/;"	F	implementation:NoClockControl
is_enabled	kernel/src/platform/mod.rs	/^    fn is_enabled(&self) -> bool;$/;"	F	interface:ClockInterface
is_err	capsules/src/net/stream.rs	/^    pub fn is_err(&self) -> bool {$/;"	F	implementation:SResult
is_error	chips/sam4l/src/flashcalw.rs	/^    fn is_error(&self) -> bool {$/;"	F	implementation:FLASHCALW
is_fragment	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^fn is_fragment(packet: &[u8]) -> bool {$/;"	f
is_full	kernel/src/common/queue.rs	/^    fn is_full(&self) -> bool;$/;"	F	interface:Queue
is_full	kernel/src/common/ring_buffer.rs	/^    fn is_full(&self) -> bool {$/;"	F	implementation:RingBuffer
is_initialized	capsules/src/sdcard.rs	/^    is_initialized: Cell<bool>,$/;"	m	struct:SDCard
is_initialized	capsules/src/sdcard.rs	/^    pub fn is_initialized(&self) -> bool {$/;"	F	implementation:SDCard
is_installed	capsules/src/sdcard.rs	/^    pub fn is_installed(&self) -> bool {$/;"	F	implementation:SDCard
is_lowpan	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^pub fn is_lowpan(packet: &[u8]) -> bool {$/;"	f
is_multicast	capsules/src/net/ip.rs	/^    pub fn is_multicast(&self) -> bool {$/;"	F	implementation:IPAddr
is_multicast	capsules/src/net/ipv6/ip_utils.rs	/^    pub fn is_multicast(&self) -> bool {$/;"	F	implementation:IPAddr
is_my_fragment	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn is_my_fragment($/;"	F	implementation:RxState
is_needed	capsules/src/net/stream.rs	/^    pub fn is_needed(&self) -> bool {$/;"	F	implementation:SResult
is_none	libraries/tock-cells/src/map_cell.rs	/^    pub fn is_none(&self) -> bool {$/;"	F	implementation:MapCell
is_none	libraries/tock-cells/src/optional_cell.rs	/^    pub fn is_none(&self) -> bool {$/;"	F	implementation:OptionalCell
is_none	libraries/tock-cells/src/take_cell.rs	/^    pub fn is_none(&self) -> bool {$/;"	F	implementation:TakeCell
is_on	capsules/src/ieee802154/device.rs	/^    fn is_on(&self) -> bool;$/;"	F	interface:MacDevice
is_on	capsules/src/ieee802154/framer.rs	/^    fn is_on(&self) -> bool {$/;"	F	implementation:Framer
is_on	capsules/src/ieee802154/mac.rs	/^    fn is_on(&self) -> bool {$/;"	F	implementation:AwakeMac
is_on	capsules/src/ieee802154/mac.rs	/^    fn is_on(&self) -> bool;$/;"	F	interface:Mac
is_on	capsules/src/ieee802154/virtual_mac.rs	/^    fn is_on(&self) -> bool {$/;"	F	implementation:MacUser
is_on	capsules/src/ieee802154/xmac.rs	/^    fn is_on(&self) -> bool {$/;"	F	implementation:XMac
is_on	capsules/src/rf233.rs	/^    fn is_on(&self) -> bool {$/;"	F	implementation:RF233
is_on	kernel/src/hil/radio.rs	/^    fn is_on(&self) -> bool;$/;"	F	interface:RadioConfig
is_page_erased	chips/sam4l/src/flashcalw.rs	/^    fn is_page_erased(&self) -> bool {$/;"	F	implementation:FLASHCALW
is_ready	chips/nrf52/src/nvmc.rs	/^    pub fn is_ready(&self) -> bool {$/;"	F	implementation:Nvmc
is_running	chips/cc26x2/src/rtc.rs	/^    pub fn is_running(&self) -> bool {$/;"	F	implementation:Rtc
is_running	chips/nrf5x/src/rtc.rs	/^    fn is_running(&self) -> bool {$/;"	F	implementation:Rtc
is_set	libraries/tock-register-interface/src/registers.rs	/^    pub fn is_set(&self, field: Field<T, R>) -> bool {$/;"	F	implementation:LocalRegisterCopy
is_set	libraries/tock-register-interface/src/registers.rs	/^    pub fn is_set(&self, field: Field<T, R>) -> bool {$/;"	F	implementation:ReadOnly
is_set	libraries/tock-register-interface/src/registers.rs	/^    pub fn is_set(&self, field: Field<T, R>) -> bool {$/;"	F	implementation:ReadWrite
is_some	libraries/tock-cells/src/map_cell.rs	/^    pub fn is_some(&self) -> bool {$/;"	F	implementation:MapCell
is_some	libraries/tock-cells/src/optional_cell.rs	/^    pub fn is_some(&self) -> bool {$/;"	F	implementation:OptionalCell
is_some	libraries/tock-cells/src/take_cell.rs	/^    pub fn is_some(&self) -> bool {$/;"	F	implementation:TakeCell
is_termination	capsules/src/net/ieee802154.rs	/^    pub fn is_termination(&self) -> bool {$/;"	F	implementation:HeaderIE
is_termination	capsules/src/net/ieee802154.rs	/^    pub fn is_termination(&self) -> bool {$/;"	F	implementation:PayloadIE
is_transmit_done	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn is_transmit_done(&self) -> bool {$/;"	F	implementation:TxState
is_unicast_link_local	capsules/src/net/ip.rs	/^    pub fn is_unicast_link_local(&self) -> bool {$/;"	F	implementation:IPAddr
is_unicast_link_local	capsules/src/net/ipv6/ip_utils.rs	/^    pub fn is_unicast_link_local(&self) -> bool {$/;"	F	implementation:IPAddr
is_unspecified	capsules/src/net/ip.rs	/^    pub fn is_unspecified(&self) -> bool {$/;"	F	implementation:IPAddr
is_unspecified	capsules/src/net/ipv6/ip_utils.rs	/^    pub fn is_unspecified(&self) -> bool {$/;"	F	implementation:IPAddr
is_zero	capsules/src/net/udp/driver.rs	/^    pub fn is_zero(&self) -> bool {$/;"	F	implementation:UDPEndpoint
isar	arch/cortex-m/src/scb.rs	/^    isar: [VolatileCell<u32>; 5],$/;"	m	struct:ScbRegisters
iser	arch/cortex-m/src/nvic.rs	/^    iser: [VolatileCell<u32>; 8],$/;"	m	struct:NvicRegisters
isize	kernel/src/returncode.rs	/^impl From<ReturnCode> for isize {$/;"	c
isl29035	boards/imix/src/components/mod.rs	/^pub mod isl29035;$/;"	n
isl29035	capsules/src/lib.rs	/^pub mod isl29035;$/;"	n
ispr	arch/cortex-m/src/nvic.rs	/^    ispr: [VolatileCell<u32>; 8],$/;"	m	struct:NvicRegisters
isr	chips/sam4l/src/acifc.rs	/^    isr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:AcifcRegisters
isr	chips/sam4l/src/bpm.rs	/^    isr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:BpmRegisters
isr	chips/sam4l/src/bscif.rs	/^    isr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:BscifRegisters
isr	chips/sam4l/src/crccu.rs	/^    isr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:CrccuRegisters
isr	chips/sam4l/src/dac.rs	/^    isr: ReadOnly<u32, InterruptStatus::Register>, \/\/     Interrupt Status Register     (0x18)$/;"	m	struct:DacRegisters
isr	chips/sam4l/src/dma.rs	/^    isr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:DMARegisters
isr	chips/sam4l/src/pm.rs	/^    isr: ReadOnly<u32, InterruptOrStatus::Register>,$/;"	m	struct:PmRegisters
isr	chips/sam4l/src/scif.rs	/^    isr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:ScifRegisters
isr	chips/sam4l/src/trng.rs	/^    isr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:TrngRegisters
isr	chips/sam4l/src/wdt.rs	/^    isr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:WdtRegisters
issue_command	chips/sam4l/src/flashcalw.rs	/^    fn issue_command(&self, command: FlashCMD, page_number: i32) {$/;"	F	implementation:FLASHCALW
itemAttributesFunc	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
itemTypeFromName	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:initSearch.execQuery
items	kernel/target/doc/search-index.js	/^searchIndex["tock_cells"]={"doc":"Tock Cell types.","items":[[0,"map_cell","tock_cells","Tock sp/;"	p	class:searchIndex
items	kernel/target/doc/search-index.js	/^searchIndex["tock_registers"]={"doc":"Tock Register Interface","items":[[0,"macros","tock_regist/;"	p	class:searchIndex
iter	kernel/src/common/list.rs	/^    pub fn iter(&self) -> ListIterator<'a, T> {$/;"	F	implementation:List
iter	kernel/src/grant.rs	/^    pub fn iter(&self) -> Iter<T> {$/;"	F	implementation:Grant
iter	kernel/src/mem.rs	/^    pub fn iter(&self) -> slice::Iter<T> {$/;"	F	implementation:AppSlice
iter_mut	kernel/src/mem.rs	/^    pub fn iter_mut(&mut self) -> slice::IterMut<T> {$/;"	F	implementation:AppSlice
itimer	chips/sam4l/src/adc.rs	/^    itimer: ReadWrite<u32, InternalTimer::Register>,$/;"	m	struct:AdcRegisters
iv	capsules/src/test/aes.rs	/^    iv: TakeCell<'a, [u8]>,$/;"	m	struct:TestAes128Cbc
iv	capsules/src/test/aes.rs	/^    iv: TakeCell<'a, [u8]>,$/;"	m	struct:TestAes128Ctr
kbd	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
kbd	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
kbd	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
kbd	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
kernel	boards/arty-e21/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] =$/;"	v
kernel	boards/ek-tm4c1294xl/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] =$/;"	v
kernel	boards/hail/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] = [$/;"	v
kernel	boards/hifive1/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] =$/;"	v
kernel	boards/imix/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] = [None, None];$/;"	v
kernel	boards/launchxl/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] = [None, None];$/;"	v
kernel	boards/nordic/nrf51dk/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] = [None];$/;"	v
kernel	boards/nordic/nrf52840dk/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] =$/;"	v
kernel	boards/nordic/nrf52dk/src/main.rs	/^static mut PROCESSES: [Option<&'static kernel::procs::ProcessType>; NUM_PROCS] =$/;"	v
kernel	capsules/src/debug_process_restart.rs	/^    kernel: &'static Kernel,$/;"	m	struct:DebugProcessRestart
kernel	capsules/src/process_console.rs	/^    kernel: &'static Kernel,$/;"	m	struct:ProcessConsole
kernel	kernel/src/introspection.rs	/^    kernel: &'static Kernel,$/;"	m	struct:KernelInfo
kernel	kernel/src/process.rs	/^    kernel: &'static Kernel,$/;"	m	struct:Process
kernel_buf	capsules/src/sdcard.rs	/^    kernel_buf: TakeCell<'static, [u8]>,$/;"	m	struct:SDCardDriver
kernel_buffer	capsules/src/nonvolatile_storage_driver.rs	/^    kernel_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:NonvolatileStorage
kernel_client	capsules/src/nonvolatile_storage_driver.rs	/^    kernel_client: OptionalCell<&'static hil::nonvolatile_storage::NonvolatileStorageClient>,$/;"	m	struct:NonvolatileStorage
kernel_command	capsules/src/nonvolatile_storage_driver.rs	/^    kernel_command: Cell<NonvolatileCommand>,$/;"	m	struct:NonvolatileStorage
kernel_hardfault	arch/cortex-m3/src/lib.rs	/^unsafe fn kernel_hardfault(faulting_stack: *mut u32) {$/;"	f
kernel_hardfault	arch/cortex-m4/src/lib.rs	/^unsafe fn kernel_hardfault(faulting_stack: *mut u32) {$/;"	f
kernel_len	capsules/src/spi.rs	/^    kernel_len: Cell<usize>,$/;"	m	struct:Spi
kernel_len	capsules/src/spi.rs	/^    kernel_len: Cell<usize>,$/;"	m	struct:SpiSlave
kernel_length	capsules/src/nonvolatile_storage_driver.rs	/^    kernel_length: usize,$/;"	m	struct:NonvolatileStorage
kernel_loop	kernel/src/sched.rs	/^    pub fn kernel_loop<P: Platform, C: Chip>($/;"	F	implementation:Kernel
kernel_memory_break	kernel/src/process.rs	/^    fn kernel_memory_break(&self) -> *const u8 {$/;"	F	implementation:Process
kernel_memory_break	kernel/src/process.rs	/^    fn kernel_memory_break(&self) -> *const u8;$/;"	F	interface:ProcessType
kernel_memory_break	kernel/src/process.rs	/^    kernel_memory_break: Cell<*const u8>,$/;"	m	struct:Process
kernel_pending_command	capsules/src/nonvolatile_storage_driver.rs	/^    kernel_pending_command: Cell<bool>,$/;"	m	struct:NonvolatileStorage
kernel_read	capsules/src/spi.rs	/^    kernel_read: TakeCell<'static, [u8]>,$/;"	m	struct:Spi
kernel_read	capsules/src/spi.rs	/^    kernel_read: TakeCell<'static, [u8]>,$/;"	m	struct:SpiSlave
kernel_readwrite_address	capsules/src/nonvolatile_storage_driver.rs	/^    kernel_readwrite_address: Cell<usize>,$/;"	m	struct:NonvolatileStorage
kernel_readwrite_length	capsules/src/nonvolatile_storage_driver.rs	/^    kernel_readwrite_length: Cell<usize>,$/;"	m	struct:NonvolatileStorage
kernel_start_address	capsules/src/nonvolatile_storage_driver.rs	/^    kernel_start_address: usize,$/;"	m	struct:NonvolatileStorage
kernel_tx	capsules/src/ble_advertising_driver.rs	/^    kernel_tx: kernel::common::cells::TakeCell<'static, [u8]>,$/;"	m	struct:BLE
kernel_tx	capsules/src/ieee802154/driver.rs	/^    kernel_tx: TakeCell<'static, [u8]>,$/;"	m	struct:RadioDriver
kernel_write	capsules/src/spi.rs	/^    kernel_write: TakeCell<'static, [u8]>,$/;"	m	struct:Spi
kernel_write	capsules/src/spi.rs	/^    kernel_write: TakeCell<'static, [u8]>,$/;"	m	struct:SpiSlave
key	capsules/src/aes_ccm.rs	/^    key: Cell<[u8; AES128_KEY_SIZE]>,$/;"	m	struct:AES128CCM
key	capsules/src/ieee802154/driver.rs	/^    key: [u8; 16],$/;"	m	struct:KeyDescriptor
key	capsules/src/test/aes.rs	/^    key: TakeCell<'a, [u8]>,$/;"	m	struct:TestAes128Cbc
key	capsules/src/test/aes.rs	/^    key: TakeCell<'a, [u8]>,$/;"	m	struct:TestAes128Ctr
key0	chips/sam4l/src/aes.rs	/^    key0: WriteOnly<u32, Key::Register>,             \/\/   0x20$/;"	m	struct:AesRegisters
key1	chips/sam4l/src/aes.rs	/^    key1: WriteOnly<u32, Key::Register>,             \/\/   0x24$/;"	m	struct:AesRegisters
key2	chips/sam4l/src/aes.rs	/^    key2: WriteOnly<u32, Key::Register>,             \/\/   0x28$/;"	m	struct:AesRegisters
key3	chips/sam4l/src/aes.rs	/^    key3: WriteOnly<u32, Key::Register>,             \/\/   0x2c$/;"	m	struct:AesRegisters
key4	chips/sam4l/src/aes.rs	/^    key4: WriteOnly<u32, Key::Register>,             \/\/   0x30$/;"	m	struct:AesRegisters
key5	chips/sam4l/src/aes.rs	/^    key5: WriteOnly<u32, Key::Register>,             \/\/   0x34$/;"	m	struct:AesRegisters
key6	chips/sam4l/src/aes.rs	/^    key6: WriteOnly<u32, Key::Register>,             \/\/   0x38$/;"	m	struct:AesRegisters
key7	chips/sam4l/src/aes.rs	/^    key7: WriteOnly<u32, Key::Register>,             \/\/   0x3c$/;"	m	struct:AesRegisters
key_id	capsules/src/ieee802154/driver.rs	/^    key_id: KeyId,$/;"	m	struct:KeyDescriptor
key_id	capsules/src/net/ieee802154.rs	/^    pub key_id: KeyId,$/;"	m	struct:Security
key_procedure	capsules/src/ieee802154/framer.rs	/^    key_procedure: OptionalCell<&'a KeyProcedure>,$/;"	m	struct:Framer
keys	capsules/src/ieee802154/driver.rs	/^    keys: MapCell<[KeyDescriptor; MAX_KEYS]>,$/;"	m	struct:RadioDriver
keystream	chips/nrf5x/src/aes.rs	/^    keystream: Cell<[u8; MAX_LENGTH]>,$/;"	m	struct:AesECB
l1	example_program/loop.S	/^l1:$/;"	l
labelForToggleButton	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
langs	capsules/src/usb.rs	/^    pub langs: &'a [u16],$/;"	m	struct:LanguagesDescriptor
last_syscall	kernel/src/process.rs	/^    last_syscall: Option<Syscall>,$/;"	m	struct:ProcessDebug
latch	chips/nrf5x/src/gpio.rs	/^    latch: ReadWrite<u32, Latch::Register>,$/;"	m	struct:GpioRegisters
layer1	doc/courses/rustconf/console.svg	/^     transform="translate(61.5,-30.862206)">$/;"	i
layer1	doc/courses/rustconf/presentation/ipc.svg	/^     transform="translate(0,-87)">$/;"	i
layer1	doc/courses/rustconf/rustconf.svg	/^     id="layer1">$/;"	i
lcrh	chips/cc26x2/src/uart.rs	/^    lcrh: ReadWrite<u32, LineControl::Register>,$/;"	m	struct:UartRegisters
lcrh	chips/tm4c129x/src/uart.rs	/^    lcrh: VolatileCell<u32>,$/;"	m	struct:UartRegisters
lcv	chips/sam4l/src/adc.rs	/^    lcv: ReadOnly<u32, SequencerLastConvertedValue::Register>,$/;"	m	struct:AdcRegisters
ldodpctl	chips/tm4c129x/src/sysctl.rs	/^    ldodpctl: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ldospctl	chips/tm4c129x/src/sysctl.rs	/^    ldospctl: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
led	boards/arty-e21/src/main.rs	/^    led: &'static capsules::led::LED<'static, sifive::gpio::GpioPin>,$/;"	m	struct:ArtyE21
led	boards/ek-tm4c1294xl/src/main.rs	/^    led: &'static capsules::led::LED<'static, tm4c129x::gpio::GPIOPin>,$/;"	m	struct:EkTm4c1294xl
led	boards/hail/src/main.rs	/^    led: &'static capsules::led::LED<'static, sam4l::gpio::GPIOPin>,$/;"	m	struct:Hail
led	boards/hifive1/src/main.rs	/^    led: &'static capsules::led::LED<'static, sifive::gpio::GpioPin>,$/;"	m	struct:HiFive1
led	boards/imix/src/components/led.rs	/^    type Output = &'static led::LED<'static, sam4l::gpio::GPIOPin>;$/;"	v	implementation:LedComponent
led	boards/imix/src/components/mod.rs	/^pub mod led;$/;"	n
led	boards/imix/src/main.rs	/^    led: &'static capsules::led::LED<'static, sam4l::gpio::GPIOPin>,$/;"	m	struct:Imix
led	boards/launchxl/src/main.rs	/^    led: &'static capsules::led::LED<'static, cc26x2::gpio::GPIOPin>,$/;"	m	struct:Platform
led	boards/nordic/nrf51dk/src/main.rs	/^    led: &'static capsules::led::LED<'static, nrf5x::gpio::GPIOPin>,$/;"	m	struct:Platform
led	boards/nordic/nrf52dk_base/src/lib.rs	/^    led: &'static capsules::led::LED<'static, nrf5x::gpio::GPIOPin>,$/;"	m	struct:Platform
led	capsules/src/lib.rs	/^pub mod led;$/;"	n
led	kernel/src/hil/mod.rs	/^pub mod led;$/;"	n
legend	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
len	capsules/src/net/icmpv6/icmpv6.rs	/^    pub len: u16, \/\/ Not a real ICMP field, here for convenience$/;"	m	struct:ICMP6Header
len	capsules/src/net/udp/udp.rs	/^    pub len: u16,$/;"	m	struct:UDPHeader
len	capsules/src/spi.rs	/^    len: usize,$/;"	m	struct:App
len	capsules/src/spi.rs	/^    len: usize,$/;"	m	struct:SlaveApp
len	chips/cc26x2/src/i2c.rs	/^    len: usize,$/;"	m	struct:Transfer
len	chips/nrf51/src/uart.rs	/^    len: Cell<usize>,$/;"	m	struct:UART
len	chips/nrf52/src/nvmc.rs	/^    fn len(&self) -> usize {$/;"	F	implementation:NrfPage
len	chips/sam4l/src/flashcalw.rs	/^    fn len(&self) -> usize {$/;"	F	implementation:Sam4lPage
len	chips/sifive/src/uart.rs	/^    len: Cell<usize>,$/;"	m	struct:Uart
len	kernel/src/common/queue.rs	/^    fn len(&self) -> usize;$/;"	F	interface:Queue
len	kernel/src/common/ring_buffer.rs	/^    fn len(&self) -> usize {$/;"	F	implementation:RingBuffer
len	kernel/src/grant.rs	/^    len: usize,$/;"	m	struct:Iter
len	kernel/src/mem.rs	/^    len: usize,$/;"	m	struct:AppSlice
len	kernel/src/mem.rs	/^    pub fn len(&self) -> usize {$/;"	F	implementation:AppSlice
length	capsules/src/nonvolatile_storage_driver.rs	/^    length: usize,$/;"	m	struct:App
length	capsules/src/nonvolatile_to_pages.rs	/^    length: Cell<usize>,$/;"	m	struct:NonvolatileToPages
length	capsules/src/segger_rtt.rs	/^    length: u32,$/;"	m	struct:SeggerRttBuffer
length	capsules/src/usb.rs	/^    pub length: u16,$/;"	m	struct:SetupData
length	chips/cc26x2/src/uart.rs	/^    length: usize,$/;"	m	struct:Transaction
length	kernel/src/tbfheader.rs	/^    length: u16,$/;"	m	struct:TbfHeaderTlv
lev	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	c	class:execQuery.checkGenerics
lev	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:execQuery.checkGenerics.lev
lev	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:results
lev	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:results_in_args
lev	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:results_returned
level	capsules/src/ieee802154/driver.rs	/^    level: SecurityLevel,$/;"	m	struct:KeyDescriptor
level	capsules/src/net/ieee802154.rs	/^    pub level: SecurityLevel,$/;"	m	struct:Security
levenshtein	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
lfclk_enable	chips/cc26x2/src/aon.rs	/^    pub fn lfclk_enable(&self, enable: bool) {$/;"	F	implementation:Aon
lfclkrun	chips/nrf51/src/clock.rs	/^    lfclkrun: ReadOnly<u32, ClkRun::Register>,       \/\/ 0x414$/;"	m	struct:ClockRegisters
lfclkrun	chips/nrf52/src/clock.rs	/^    lfclkrun: ReadOnly<u32, Control::Register>,$/;"	m	struct:ClockRegisters
lfclksrc	chips/nrf51/src/clock.rs	/^    lfclksrc: ReadWrite<u32, LfClkSrc::Register>,    \/\/ 0x518$/;"	m	struct:ClockRegisters
lfclksrc	chips/nrf52/src/clock.rs	/^    lfclksrc: ReadWrite<u32, LfClkSrc::Register>,$/;"	m	struct:ClockRegisters
lfclksrccopy	chips/nrf51/src/clock.rs	/^    lfclksrccopy: ReadOnly<u32, LfClkSrc::Register>, \/\/ 0x41c$/;"	m	struct:ClockRegisters
lfclksrccopy	chips/nrf52/src/clock.rs	/^    lfclksrccopy: ReadOnly<u32, LfClkSrcCopy::Register>,$/;"	m	struct:ClockRegisters
lfclkstart	chips/nrf51/src/clock.rs	/^    lfclkstart: WriteOnly<u32, Task::Register>,      \/\/ 0x008$/;"	m	struct:ClockRegisters
lfclkstarted	chips/nrf51/src/clock.rs	/^    lfclkstarted: ReadWrite<u32, Event::Register>,   \/\/ 0x104$/;"	m	struct:ClockRegisters
lfclkstat	chips/nrf51/src/clock.rs	/^    lfclkstat: ReadOnly<u32, LfClkStat::Register>,   \/\/ 0x418$/;"	m	struct:ClockRegisters
lfclkstat	chips/nrf52/src/clock.rs	/^    lfclkstat: ReadWrite<u32, LfClkStat::Register>,$/;"	m	struct:ClockRegisters
lfclkstop	chips/nrf51/src/clock.rs	/^    lfclkstop: WriteOnly<u32, Task::Register>,       \/\/ 0x00c$/;"	m	struct:ClockRegisters
limit	chips/nrf52/src/adc.rs	/^    limit: ReadWrite<u32, LIMIT::Register>,$/;"	m	struct:AdcChRegisters
limith	chips/nrf52/src/adc.rs	/^    limith: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:AdcEventChRegisters
limitl	chips/nrf52/src/adc.rs	/^    limitl: ReadWrite<u32, EVENT::Register>,$/;"	m	struct:AdcEventChRegisters
linbr	chips/sam4l/src/usart.rs	/^    linbr: ReadOnly<u32, LinBaud::Register>,   \/\/ 0x5C$/;"	m	struct:UsartRegisters
lineNumbersFunc	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
linir	chips/sam4l/src/usart.rs	/^    linir: ReadWrite<u32, LinID::Register>,    \/\/ 0x58$/;"	m	struct:UsartRegisters
linmr	chips/sam4l/src/usart.rs	/^    linmr: ReadWrite<u32, LinMode::Register>,  \/\/ 0x54$/;"	m	struct:UsartRegisters
list	Makefile	/^list list-boards list-platforms:$/;"	t
list	kernel/src/common/mod.rs	/^pub mod list;$/;"	n
list-boards	Makefile	/^list list-boards list-platforms:$/;"	t
list-platforms	Makefile	/^list list-boards list-platforms:$/;"	t
listen	chips/nrf51/src/i2c.rs	/^    fn listen(&self) {$/;"	F	implementation:TWIM
listen	chips/nrf52/src/i2c.rs	/^    fn listen(&self) {$/;"	F	implementation:TWIM
listen	chips/sam4l/src/i2c.rs	/^    fn listen(&self) {$/;"	F	implementation:I2CHw
listen	kernel/src/hil/i2c.rs	/^    fn listen(&self);$/;"	F	interface:I2CSlave
listening	capsules/src/i2c_master_slave_driver.rs	/^    listening: Cell<bool>,$/;"	m	struct:I2CMasterSlaveDriver
load_processes	kernel/src/process.rs	/^pub fn load_processes<C: Chip>($/;"	f
load_relaxed	kernel/src/common/deferred_call.rs	/^    crate fn load_relaxed(&self) -> usize {$/;"	F	implementation:AtomicUsize
local	arch/riscv32i/target/debug/.fingerprint/bare-metal-24acc5d3590b7513/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0./;"	a
local	arch/riscv32i/target/debug/.fingerprint/bare-metal-7dd6462cd7700cd7/lib-bare_metal-7dd6462cd7700cd7.json	/^{"rustc":10377385455325587324,"features":"[]","target":10318145944003877215,"profile":1187018370/;"	a
local	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a
local	arch/riscv32i/target/debug/.fingerprint/bit_field-56ae9b63ca7874f1/lib-bit_field-56ae9b63ca7874f1.json	/^{"rustc":10377385455325587324,"features":"[]","target":6212214415640514931,"profile":11870183705/;"	a
local	arch/riscv32i/target/debug/.fingerprint/riscvregs-0c285ab8bbe41fa7/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"db/;"	a
local	arch/riscv32i/target/debug/.fingerprint/riscvregs-126b22abd70e245c/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0e/;"	a
local	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a
local	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a
local	arch/riscv32i/target/debug/.fingerprint/riscvregs-7b5528c14e2c7055/build-script-build_script_build-7b5528c14e2c7055.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a
local	arch/riscv32i/target/debug/.fingerprint/riscvregs-d6ebf6a6021a8976/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"78/;"	a
local	arch/riscv32i/target/debug/.fingerprint/riscvregs-e220008a48c83b01/build-script-build_script_build-e220008a48c83b01.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a
local	arch/riscv32i/target/debug/.fingerprint/riscvregs-e3787b41749bb5b0/build-script-build_script_build-e3787b41749bb5b0.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a
local	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a
local	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	a
local	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	a
local	arch/riscv32i/target/debug/.fingerprint/semver-parser-1d01b4b0efb84ec1/lib-semver_parser-1d01b4b0efb84ec1.json	/^{"rustc":10377385455325587324,"features":"[]","target":11042536386261824010,"profile":1187018370/;"	a
local	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	a
local	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	a
local	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	a
local	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	a
local	boards/hifive1/target/debug/.fingerprint/riscvregs-8a1ccaee318cf981/build-script-build_script_build-8a1ccaee318cf981.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	a
local	boards/hifive1/target/debug/.fingerprint/riscvregs-e5cf2a660cb8088f/build-script-build_script_build-e5cf2a660cb8088f.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	a
local	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	a
local	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	a
local	boards/hifive1/target/debug/.fingerprint/semver-parser-0cbc1426a8cfeede/lib-semver_parser-0cbc1426a8cfeede.json	/^{"rustc":4168008693276420879,"features":"[]","target":3650675185119913205,"profile":118386650091/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-3818320f62d4b526/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-5a31f60d1aed50ae/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-90db6ed0e5b8c3d4/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	a
local	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	a
local	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	a
local	kernel/target/debug/.fingerprint/tock-cells-816571e4fa975f6b/doc-lib-tock_cells-816571e4fa975f6b.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":3062756892/;"	a
local	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	a
local	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	a
local	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	a
local	kernel/target/debug/.fingerprint/tock-registers-e7eec879e9fa92db/doc-lib-tock_registers-e7eec879e9fa92db.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":30627568924/;"	a
local	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	a
location	arch/cortex-m/src/mpu.rs	/^    fn location(&self) -> Option<(*const u8, usize)> {$/;"	F	implementation:CortexMRegion
location	arch/cortex-m/src/mpu.rs	/^    location: Option<(*const u8, usize)>,$/;"	m	struct:CortexMRegion
lock	chips/tm4c129x/src/gpio.rs	/^    lock: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
lock_page_region	chips/sam4l/src/flashcalw.rs	/^    fn lock_page_region(&self, page_number: i32, lock: bool) {$/;"	F	implementation:FLASHCALW
log	tools/usb/bulk-echo-fast/main.c	/^#define log(/;"	d	file:
log_base_two	kernel/src/common/math.rs	/^pub fn log_base_two(num: u32) -> u32 {$/;"	f
log_base_two_u64	kernel/src/common/math.rs	/^pub fn log_base_two_u64(num: u64) -> u32 {$/;"	f
long_addr	capsules/src/ieee802154/driver.rs	/^    long_addr: [u8; 8],$/;"	m	struct:DeviceDescriptor
low_ie	chips/sifive/src/gpio.rs	/^    low_ie: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
low_ip	chips/sifive/src/gpio.rs	/^    low_ip: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
low_running	chips/nrf51/src/clock.rs	/^    pub fn low_running(&self) -> bool {$/;"	F	implementation:Clock
low_running	chips/nrf52/src/clock.rs	/^    pub fn low_running(&self) -> bool {$/;"	F	implementation:Clock
low_set_source	chips/nrf51/src/clock.rs	/^    pub fn low_set_source(&self, src: LowClockSource) {$/;"	F	implementation:Clock
low_set_source	chips/nrf52/src/clock.rs	/^    pub fn low_set_source(&self, clock_source: LowClockSource) {$/;"	F	implementation:Clock
low_source	chips/nrf51/src/clock.rs	/^    pub fn low_source(&self) -> LowClockSource {$/;"	F	implementation:Clock
low_source	chips/nrf52/src/clock.rs	/^    pub fn low_source(&self) -> LowClockSource {$/;"	F	implementation:Clock
low_start	chips/nrf51/src/clock.rs	/^    pub fn low_start(&self) {$/;"	F	implementation:Clock
low_start	chips/nrf52/src/clock.rs	/^    pub fn low_start(&self) {$/;"	F	implementation:Clock
low_started	chips/nrf51/src/clock.rs	/^    pub fn low_started(&self) -> bool {$/;"	F	implementation:Clock
low_started	chips/nrf52/src/clock.rs	/^    pub fn low_started(&self) -> bool {$/;"	F	implementation:Clock
low_stop	chips/nrf51/src/clock.rs	/^    pub fn low_stop(&self) {$/;"	F	implementation:Clock
low_stop	chips/nrf52/src/clock.rs	/^    pub fn low_stop(&self) {$/;"	F	implementation:Clock
lowpan_frag	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^pub mod lowpan_frag {$/;"	n
lps25hb	capsules/src/lib.rs	/^pub mod lps25hb;$/;"	n
ltc294x	capsules/src/lib.rs	/^pub mod ltc294x;$/;"	n
ltc294x	capsules/src/ltc294x.rs	/^    ltc294x: &'a LTC294X<'a>,$/;"	m	struct:LTC294XDriver
m_claim	arch/riscv32i/src/plic.rs	/^    m_claim: ReadWrite<u32>,$/;"	m	struct:PlicRegisters
m_enable	arch/riscv32i/src/plic.rs	/^    m_enable: [ReadWrite<u32>; 5],$/;"	m	struct:PlicRegisters
m_threshold	arch/riscv32i/src/plic.rs	/^    m_threshold: [ReadWrite<u32, priority::Register>],$/;"	m	struct:PlicRegisters
mac	capsules/src/ieee802154/driver.rs	/^    mac: &'a device::MacDevice<'a>,$/;"	m	struct:RadioDriver
mac	capsules/src/ieee802154/framer.rs	/^    mac: &'a M,$/;"	m	struct:Framer
mac	capsules/src/ieee802154/mod.rs	/^pub mod mac;$/;"	n
mac	capsules/src/ieee802154/virtual_mac.rs	/^    mac: &'a device::MacDevice<'a>,$/;"	m	struct:MuxMac
mac_payload_offset	capsules/src/ieee802154/framer.rs	/^    mac_payload_offset: usize,$/;"	m	struct:FrameInfo
macros	libraries/tock-register-interface/src/lib.rs	/^pub mod macros;$/;"	n
main	boards/arty-e21/build.rs	/^fn main() {$/;"	f
main	boards/ek-tm4c1294xl/build.rs	/^fn main() {$/;"	f
main	boards/hail/build.rs	/^fn main() {$/;"	f
main	boards/hifive1/build.rs	/^fn main() {$/;"	f
main	boards/imix/build.rs	/^fn main() {$/;"	f
main	boards/launchxl/build.rs	/^fn main() {$/;"	f
main	boards/nordic/nrf51dk/build.rs	/^fn main() {$/;"	f
main	boards/nordic/nrf52840dk/build.rs	/^fn main() {$/;"	f
main	boards/nordic/nrf52dk/build.rs	/^fn main() {$/;"	f
main	doc/courses/2018-11-SenSys/exercises/app/main.c	/^int main (void) {$/;"	f	typeref:typename:int
main	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^int main(void)$/;"	f	typeref:typename:int
main	doc/courses/2018-11-SenSys/exercises/app/solutions/repeat-hello.c	/^int main (void) {$/;"	f	typeref:typename:int
main	doc/courses/2018-11-SenSys/exercises/app/solutions/sensors.c	/^int main (void) {$/;"	f	typeref:typename:int
main	example_program/loooop.c	/^void main(){$/;"	f	typeref:typename:void
main	example_program/loooop.s	/^main:$/;"	l
main	kernel/src/tbfheader.rs	/^    main: Option<&'static TbfHeaderV2Main>,$/;"	m	struct:TbfHeaderV2
main	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
main	tools/svd2regs.py	/^def main():$/;"	f
main	tools/usb/bulk-echo-fast/main.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	tools/usb/bulk-echo/src/main.rs	/^fn main() {$/;"	f
main	tools/usb/bulk-test/src/main.rs	/^fn main() {$/;"	f
main	tools/usb/control-test/src/main.rs	/^fn main() {$/;"	f
mainTheme	kernel/target/doc/storage.js	/^ *\/var currentTheme=document.getElementById("themeStyle");var mainTheme=document.getElementById/;"	v
maint0	chips/sam4l/src/flashcalw.rs	/^    maint0: WriteOnly<u32, PicoCacheMaintenance0::Register>,$/;"	m	struct:FlashcalwRegisters
maint1	chips/sam4l/src/flashcalw.rs	/^    maint1: WriteOnly<u32, PicoCacheMaintenance1::Register>,$/;"	m	struct:FlashcalwRegisters
makeTabHeader	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
make_input	capsules/src/mcp230xx.rs	/^    fn make_input(&self, pin: usize, mode: hil::gpio::InputMode) -> ReturnCode {$/;"	F	implementation:MCP230xx
make_input	chips/cc26x2/src/gpio.rs	/^    fn make_input(&self) {$/;"	F	implementation:GPIOPin
make_input	chips/nrf5x/src/gpio.rs	/^    fn make_input(&self) {$/;"	F	implementation:GPIOPin
make_input	chips/sam4l/src/gpio.rs	/^    fn make_input(&self) {$/;"	F	implementation:GPIOPin
make_input	chips/sifive/src/gpio.rs	/^    fn make_input(&self) {$/;"	F	implementation:GpioPin
make_input	chips/tm4c129x/src/gpio.rs	/^    fn make_input(&self) {$/;"	F	implementation:GPIOPin
make_input	kernel/src/hil/gpio.rs	/^    fn make_input(&self);$/;"	F	interface:Pin
make_input	kernel/src/hil/gpio_async.rs	/^    fn make_input(&self, pin: usize, mode: hil::gpio::InputMode) -> ReturnCode;$/;"	F	interface:Port
make_output	capsules/src/mcp230xx.rs	/^    fn make_output(&self, pin: usize) -> ReturnCode {$/;"	F	implementation:MCP230xx
make_output	chips/cc26x2/src/gpio.rs	/^    fn make_output(&self) {$/;"	F	implementation:GPIOPin
make_output	chips/nrf5x/src/gpio.rs	/^    fn make_output(&self) {$/;"	F	implementation:GPIOPin
make_output	chips/sam4l/src/gpio.rs	/^    fn make_output(&self) {$/;"	F	implementation:GPIOPin
make_output	chips/sifive/src/gpio.rs	/^    fn make_output(&self) {$/;"	F	implementation:GpioPin
make_output	chips/tm4c129x/src/gpio.rs	/^    fn make_output(&self) {$/;"	F	implementation:GPIOPin
make_output	kernel/src/hil/gpio.rs	/^    fn make_output(&self);$/;"	F	interface:Pin
make_output	kernel/src/hil/gpio_async.rs	/^    fn make_output(&self, pin: usize) -> ReturnCode;$/;"	F	interface:Port
man	chips/sam4l/src/usart.rs	/^    man: ReadWrite<u32, Manchester::Register>, \/\/ 0x50$/;"	m	struct:UsartRegisters
manage	capsules/examples/traitobj_list.rs	/^    pub fn manage(&mut self, thing: &'a (Funky<'a>)) {$/;"	F	implementation:Manager
manufacturer_string	capsules/src/usb.rs	/^    pub manufacturer_string: u8,$/;"	m	struct:DeviceDescriptor
map	capsules/src/net/frag_utils.rs	/^    map: [u8; BITMAP_SIZE],$/;"	m	struct:Bitmap
map	libraries/tock-cells/src/map_cell.rs	/^    pub fn map<F, R>(&self, closure: F) -> Option<R>$/;"	F	implementation:MapCell
map	libraries/tock-cells/src/optional_cell.rs	/^    pub fn map<F, R>(&self, closure: F) -> Option<R>$/;"	F	implementation:OptionalCell
map	libraries/tock-cells/src/take_cell.rs	/^    pub fn map<F, R>(&self, closure: F) -> Option<R>$/;"	F	implementation:TakeCell
map_cell	libraries/tock-cells/src/lib.rs	/^pub mod map_cell;$/;"	n
map_or	libraries/tock-cells/src/map_cell.rs	/^    pub fn map_or<F, R>(&self, default: R, closure: F) -> R$/;"	F	implementation:MapCell
map_or	libraries/tock-cells/src/optional_cell.rs	/^    pub fn map_or<F, R>(&self, default: R, closure: F) -> R$/;"	F	implementation:OptionalCell
map_or	libraries/tock-cells/src/take_cell.rs	/^    pub fn map_or<F, R>(&self, default: R, closure: F) -> R$/;"	F	implementation:TakeCell
map_or_else	libraries/tock-cells/src/optional_cell.rs	/^    pub fn map_or_else<U, D, F>(&self, default: D, closure: F) -> U$/;"	F	implementation:OptionalCell
map_or_else	libraries/tock-cells/src/take_cell.rs	/^    pub fn map_or_else<U, D, F>(&self, default: D, f: F) -> U$/;"	F	implementation:TakeCell
map_state	chips/sam4l/src/usbc/mod.rs	/^    fn map_state<F, R>(&self, closure: F) -> R$/;"	F	implementation:Usbc
mar	chips/sam4l/src/dma.rs	/^    mar: ReadWrite<u32, MemoryAddress::Register>,$/;"	m	struct:DMARegisters
mark	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
marker5451	doc/courses/rustconf/rustconf.svg	/^       inkscape:isstock="true">$/;"	i
marker5533	doc/courses/rustconf/rustconf.svg	/^       inkscape:collect="always">$/;"	i
marker5738	doc/courses/rustconf/console.svg	/^       inkscape:collect="always">$/;"	i
marker5888	doc/courses/rustconf/console.svg	/^       inkscape:isstock="true">$/;"	i
marker6377	doc/courses/rustconf/rustconf.svg	/^       inkscape:collect="always">$/;"	i
marker6487	doc/courses/rustconf/rustconf.svg	/^       inkscape:isstock="true">$/;"	i
marr	chips/sam4l/src/dma.rs	/^    marr: ReadWrite<u32, MemoryAddressReload::Register>,$/;"	m	struct:DMARegisters
mask	libraries/tock-register-interface/src/registers.rs	/^    pub fn mask(self) -> u32 {$/;"	F	implementation:FieldValue
mask	libraries/tock-register-interface/src/registers.rs	/^    pub fn mask(self) -> u64 {$/;"	F	implementation:FieldValue
mask	libraries/tock-register-interface/src/registers.rs	/^    pub fn mask(self) -> u8 {$/;"	F	implementation:FieldValue
mask	libraries/tock-register-interface/src/registers.rs	/^    pub mask: T,$/;"	m	struct:Field
mask	libraries/tock-register-interface/src/registers.rs	/^    pub mask: T,$/;"	m	struct:FieldValue
mask_clock	chips/sam4l/src/pm.rs	/^macro_rules! mask_clock {$/;"	M
mask_length	capsules/src/net/thread/tlv.rs	/^    mask_length: u8,$/;"	m	struct:ChannelMaskEntry
master	chips/sam4l/src/i2c.rs	/^    master: pm::Clock,$/;"	m	struct:TWIMClock
master	chips/sam4l/src/i2c.rs	/^    master: pm::Clock,$/;"	m	struct:TWISClock
master_action	capsules/src/i2c_master_slave_driver.rs	/^    master_action: Cell<MasterAction>, \/\/ Whether we issued a write or read as master$/;"	m	struct:I2CMasterSlaveDriver
master_buffer	capsules/src/i2c_master_slave_driver.rs	/^    master_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:I2CMasterSlaveDriver
master_client	chips/sam4l/src/i2c.rs	/^    master_client: Cell<Option<&'static hil::i2c::I2CHwMasterClient>>,$/;"	m	struct:I2CHw
master_clock	chips/sam4l/src/i2c.rs	/^    master_clock: TWIMClock,$/;"	m	struct:I2CHw
master_enable	chips/sam4l/src/i2c.rs	/^    fn master_enable(&self, twim: &TWIMRegisterManager) {$/;"	F	implementation:I2CHw
master_mmio_address	chips/sam4l/src/i2c.rs	/^    master_mmio_address: StaticRef<TWIMRegisters>,$/;"	m	struct:I2CHw
master_rx_buffer	capsules/src/i2c_master_slave_driver.rs	/^    master_rx_buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
master_tx_buffer	capsules/src/i2c_master_slave_driver.rs	/^    master_tx_buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
matches_all	libraries/tock-register-interface/src/registers.rs	/^    pub fn matches_all(&self, field: FieldValue<T, R>) -> bool {$/;"	F	implementation:LocalRegisterCopy
matches_all	libraries/tock-register-interface/src/registers.rs	/^    pub fn matches_all(&self, field: FieldValue<T, R>) -> bool {$/;"	F	implementation:ReadOnly
matches_all	libraries/tock-register-interface/src/registers.rs	/^    pub fn matches_all(&self, field: FieldValue<T, R>) -> bool {$/;"	F	implementation:ReadWrite
matches_any	libraries/tock-register-interface/src/registers.rs	/^    pub fn matches_any(&self, field: FieldValue<T, R>) -> bool {$/;"	F	implementation:LocalRegisterCopy
matches_any	libraries/tock-register-interface/src/registers.rs	/^    pub fn matches_any(&self, field: FieldValue<T, R>) -> bool {$/;"	F	implementation:ReadOnly
matches_any	libraries/tock-register-interface/src/registers.rs	/^    pub fn matches_any(&self, field: FieldValue<T, R>) -> bool {$/;"	F	implementation:ReadWrite
matches_prefix	capsules/src/net/util.rs	/^pub fn matches_prefix(buf1: &[u8], buf2: &[u8], prefix_len: u8) -> bool {$/;"	f
math	kernel/src/common/mod.rs	/^pub mod math;$/;"	n
max17205	capsules/src/lib.rs	/^pub mod max17205;$/;"	n
max17205	capsules/src/max17205.rs	/^    max17205: &'a MAX17205<'a>,$/;"	m	struct:MAX17205Driver
max_packet_size	capsules/src/usb.rs	/^    pub max_packet_size: u16,$/;"	m	struct:EndpointDescriptor
max_packet_size_ep0	capsules/src/usb.rs	/^    pub max_packet_size_ep0: u8,$/;"	m	struct:DeviceDescriptor
max_poll_fds	tools/usb/bulk-echo-fast/main.c	/^static const size_t max_poll_fds = 10;$/;"	v	typeref:typename:const size_t	file:
max_power	capsules/src/usb.rs	/^    pub max_power: u8, \/\/ in 2mA units$/;"	m	struct:ConfigurationDescriptor
max_tx_pyld_len	capsules/src/net/udp/driver.rs	/^    max_tx_pyld_len: usize,$/;"	m	struct:UDPDriver
mcctrl	chips/sam4l/src/pm.rs	/^    mcctrl: ReadWrite<u32, MainClockControl::Register>,$/;"	m	struct:PmRegisters
mcfg	chips/sam4l/src/flashcalw.rs	/^    mcfg: ReadWrite<u32, PicoCacheMonitorConfiguration::Register>,$/;"	m	struct:FlashcalwRegisters
mcp230xx	capsules/src/lib.rs	/^pub mod mcp230xx;$/;"	n
mcr	chips/cc26x2/src/i2c.rs	/^    mcr: ReadWrite<u32, Configuration::Register>,$/;"	m	struct:I2CMasterRegisters
mctrl	chips/sam4l/src/flashcalw.rs	/^    mctrl: WriteOnly<u32, PicoCacheMonitorStatus::Register>,$/;"	m	struct:FlashcalwRegisters
mcu_clk	chips/cc26x2/src/prcm.rs	/^    mcu_clk: ReadWrite<u32>,$/;"	m	struct:AonPMCtlRegisters
mcu_set_ram_retention	chips/cc26x2/src/aon.rs	/^    pub fn mcu_set_ram_retention(&self, on: bool) {$/;"	F	implementation:Aon
mcu_wu_sel	chips/cc26x2/src/aon.rs	/^    mcu_wu_sel: ReadWrite<u32>,       \/\/ MCU Wake-up selector$/;"	m	struct:AonEventRegisters
mdr	chips/cc26x2/src/i2c.rs	/^    mdr: ReadWrite<u8>,$/;"	m	struct:I2CMasterRegisters
mem	kernel/src/lib.rs	/^mod mem;$/;"	n
mem_end	kernel/src/process.rs	/^    fn mem_end(&self) -> *const u8 {$/;"	F	implementation:Process
mem_end	kernel/src/process.rs	/^    fn mem_end(&self) -> *const u8;$/;"	F	interface:ProcessType
mem_start	kernel/src/process.rs	/^    fn mem_start(&self) -> *const u8 {$/;"	F	implementation:Process
mem_start	kernel/src/process.rs	/^    fn mem_start(&self) -> *const u8;$/;"	F	interface:ProcessType
memop	kernel/src/lib.rs	/^mod memop;$/;"	n
memop	kernel/src/memop.rs	/^crate fn memop(process: &ProcessType, op_type: usize, r1: usize) -> ReturnCode {$/;"	f
memory	kernel/src/process.rs	/^    memory: &'static mut [u8],$/;"	m	struct:Process
memtim0	chips/tm4c129x/src/sysctl.rs	/^    memtim0: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
men	chips/sam4l/src/flashcalw.rs	/^    men: ReadWrite<u32, PicoCacheMonitorEnable::Register>,$/;"	m	struct:FlashcalwRegisters
mergeArrays	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execSearch
metadata4311	doc/courses/rustconf/console.svg	/^     id="metadata4311">$/;"	i
metadata5	doc/courses/rustconf/presentation/ipc.svg	/^     id="metadata5">$/;"	i
metadata5	doc/courses/rustconf/rustconf.svg	/^     id="metadata5">$/;"	i
mic_len	capsules/src/ieee802154/framer.rs	/^    mic_len: usize,$/;"	m	struct:FrameInfo
mic_len	capsules/src/net/ieee802154.rs	/^    pub fn mic_len(&self) -> usize {$/;"	F	implementation:SecurityLevel
micr	chips/cc26x2/src/i2c.rs	/^    micr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:I2CMasterRegisters
mimr	chips/cc26x2/src/i2c.rs	/^    mimr: ReadWrite<u32, Interrupt::Register>,$/;"	m	struct:I2CMasterRegisters
min_stack_pointer	kernel/src/process.rs	/^    min_stack_pointer: *const u8,$/;"	m	struct:ProcessDebug
minimum_ram_size	kernel/src/tbfheader.rs	/^    minimum_ram_size: u32,$/;"	m	struct:TbfHeaderV2Main
mis	chips/cc26x2/src/uart.rs	/^    mis: ReadOnly<u32, Interrupts::Register>,$/;"	m	struct:UartRegisters
mis	chips/tm4c129x/src/gpio.rs	/^    mis: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
mis	chips/tm4c129x/src/gpt.rs	/^    mis: VolatileCell<u32>,$/;"	m	struct:GptRegisters
mis	chips/tm4c129x/src/uart.rs	/^    mis: VolatileCell<u32>,$/;"	m	struct:UartRegisters
misc	chips/tm4c129x/src/sysctl.rs	/^    misc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
miso	boards/nordic/nrf52dk_base/src/lib.rs	/^    miso: usize,$/;"	m	struct:SpiPins
mmfar	arch/cortex-m/src/scb.rs	/^    mmfar: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
mmfr	arch/cortex-m/src/scb.rs	/^    mmfr: [VolatileCell<u32>; 4],$/;"	m	struct:ScbRegisters
mmis	chips/cc26x2/src/i2c.rs	/^    mmis: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:I2CMasterRegisters
mode	capsules/src/adc.rs	/^    mode: Cell<AdcMode>,$/;"	m	struct:Adc
mode	chips/cc26x2/src/i2c.rs	/^    mode: TransferMode,$/;"	m	struct:Transfer
mode	chips/nrf51/src/radio.rs	/^    mode: ReadWrite<u32, Mode::Register>,        \/\/ 0x510 - 0x514$/;"	m	struct:RadioRegisters
mode	chips/nrf52/src/radio.rs	/^    mode: ReadWrite<u32, Mode::Register>,$/;"	m	struct:RadioRegisters
mode	chips/nrf5x/src/timer.rs	/^    mode: ReadWrite<u32>,$/;"	m	struct:TimerRegisters
mode	chips/sam4l/src/aes.rs	/^    mode: ReadWrite<u32, Mode::Register>,            \/\/   0x04$/;"	m	struct:AesRegisters
mode	chips/sam4l/src/usbc/mod.rs	/^    pub fn mode(&self) -> Option<Mode> {$/;"	F	implementation:Usbc
modecnf0	chips/nrf52/src/radio.rs	/^    modecnf0: ReadWrite<u32, RadioModeConfig::Register>,$/;"	m	struct:RadioRegisters
model	capsules/src/ltc294x.rs	/^    model: Cell<ChipModel>,$/;"	m	struct:LTC294X
modify	libraries/tock-register-interface/src/registers.rs	/^    pub fn modify(&self, field: FieldValue<T, R>) {$/;"	F	implementation:ReadWrite
modify	libraries/tock-register-interface/src/registers.rs	/^    pub fn modify(self, val: T) -> T {$/;"	F	implementation:FieldValue
modify_no_read	libraries/tock-register-interface/src/registers.rs	/^    pub fn modify_no_read(&self, original: LocalRegisterCopy<T, R>, field: FieldValue<T, R>) {$/;"	F	implementation:ReadWrite
modify_or_replace	libraries/tock-cells/src/map_cell.rs	/^    pub fn modify_or_replace<F, G>(&self, modify: F, mkval: G)$/;"	F	implementation:MapCell
modify_or_replace	libraries/tock-cells/src/take_cell.rs	/^    pub fn modify_or_replace<F, G>(&self, modify: F, mkval: G)$/;"	F	implementation:TakeCell
moscctl	chips/tm4c129x/src/sysctl.rs	/^    moscctl: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
mosi	boards/nordic/nrf52dk_base/src/lib.rs	/^    mosi: usize,$/;"	m	struct:SpiPins
mouseover_func	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:initSearchNav
mpu	arch/cortex-m/src/lib.rs	/^pub mod mpu;$/;"	n
mpu	chips/arty_exx/src/chip.rs	/^    fn mpu(&self) -> &Self::MPU {$/;"	F	implementation:ArtyExx
mpu	chips/cc26x2/src/chip.rs	/^    fn mpu(&self) -> &Self::MPU {$/;"	F	implementation:Cc26X2
mpu	chips/cc26x2/src/chip.rs	/^    mpu: cortexm4::mpu::MPU,$/;"	m	struct:Cc26X2
mpu	chips/e310x/src/chip.rs	/^    fn mpu(&self) -> &Self::MPU {$/;"	F	implementation:E310x
mpu	chips/nrf51/src/chip.rs	/^    fn mpu(&self) -> &Self::MPU {$/;"	F	implementation:NRF51
mpu	chips/nrf52/src/chip.rs	/^    fn mpu(&self) -> &Self::MPU {$/;"	F	implementation:NRF52
mpu	chips/nrf52/src/chip.rs	/^    mpu: cortexm4::mpu::MPU,$/;"	m	struct:NRF52
mpu	chips/sam4l/src/chip.rs	/^    fn mpu(&self) -> &cortexm4::mpu::MPU {$/;"	F	implementation:Sam4l
mpu	chips/sam4l/src/chip.rs	/^    mpu: cortexm4::mpu::MPU,$/;"	m	struct:Sam4l
mpu	chips/tm4c129x/src/chip.rs	/^    fn mpu(&self) -> &cortexm4::mpu::MPU {$/;"	F	implementation:Tm4c129x
mpu	chips/tm4c129x/src/chip.rs	/^    mpu: cortexm4::mpu::MPU,$/;"	m	struct:Tm4c129x
mpu	kernel/src/platform/mod.rs	/^    fn mpu(&self) -> &Self::MPU;$/;"	F	interface:Chip
mpu	kernel/src/platform/mod.rs	/^pub mod mpu;$/;"	n
mpu_type	arch/cortex-m/src/mpu.rs	/^    pub mpu_type: ReadOnly<u32, Type::Register>,$/;"	m	struct:MpuRegisters
mr	chips/sam4l/src/crccu.rs	/^    mr: ReadWrite<u32, Mode::Register>,$/;"	m	struct:CrccuRegisters
mr	chips/sam4l/src/dac.rs	/^    mr: ReadWrite<u32, Mode::Register>,    \/\/                Mode                          (0x/;"	m	struct:DacRegisters
mr	chips/sam4l/src/dma.rs	/^    mr: ReadWrite<u32, Mode::Register>,$/;"	m	struct:DMARegisters
mr	chips/sam4l/src/spi.rs	/^    mr: ReadWrite<u32, Mode::Register>,$/;"	m	struct:SpiRegisters
mr	chips/sam4l/src/usart.rs	/^    mr: ReadWrite<u32, Mode::Register>,          \/\/ 0x04$/;"	m	struct:UsartRegisters
mris	chips/cc26x2/src/i2c.rs	/^    mris: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:I2CMasterRegisters
msa	chips/cc26x2/src/i2c.rs	/^    msa: ReadWrite<u32, Address::Register>,$/;"	m	struct:I2CMasterRegisters
msr	chips/sam4l/src/flashcalw.rs	/^    msr: ReadOnly<u32, PicoCacheMonitorStatus::Register>,$/;"	m	struct:FlashcalwRegisters
mstat_ctrl	chips/cc26x2/src/i2c.rs	/^    mstat_ctrl: ControlStatReg,$/;"	m	struct:I2CMasterRegisters
mtpr	chips/cc26x2/src/i2c.rs	/^    mtpr: ReadWrite<u32, TimerPeriod::Register>,$/;"	m	struct:I2CMasterRegisters
mux	capsules/src/ieee802154/virtual_mac.rs	/^    mux: &'a MuxMac<'a>,$/;"	m	struct:MacUser
mux	capsules/src/virtual_alarm.rs	/^    mux: &'a MuxAlarm<'a, Alrm>,$/;"	m	struct:VirtualMuxAlarm
mux	capsules/src/virtual_flash.rs	/^    mux: &'a MuxFlash<'a, F>,$/;"	m	struct:FlashUser
mux	capsules/src/virtual_i2c.rs	/^    mux: &'a MuxI2C<'a>,$/;"	m	struct:I2CDevice
mux	capsules/src/virtual_spi.rs	/^    mux: &'a MuxSpiMaster<'a, Spi>,$/;"	m	struct:VirtualSpiMasterDevice
mux	capsules/src/virtual_uart.rs	/^    mux: &'a UartMux<'a>,$/;"	m	struct:UartDevice
mux_mac	boards/imix/src/components/udp_6lowpan.rs	/^    mux_mac: &'static capsules::ieee802154::virtual_mac::MuxMac<'static>,$/;"	m	struct:UDPComponent
mx25r6435f	capsules/src/lib.rs	/^pub mod mx25r6435f;$/;"	n
my_slave_address	chips/sam4l/src/i2c.rs	/^    my_slave_address: Cell<u8>,$/;"	m	struct:I2CHw
name	capsules/examples/traitobj_list.rs	/^    fn name(&self) -> &'static str {$/;"	F	implementation:Cheese
name	capsules/examples/traitobj_list.rs	/^    fn name(&self) -> &'static str {$/;"	F	implementation:Jazz
name	capsules/examples/traitobj_list.rs	/^    fn name(&self) -> &'static str;$/;"	F	interface:Funky
name	capsules/src/segger_rtt.rs	/^    name: *const u8, \/\/ Pointer to the name of this channel. Must be a 4 byte thin pointer.$/;"	m	struct:SeggerRttBuffer
name	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:buildIndex.row
name	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:paths
nav	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
nav	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
nav	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
nav	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
nav.main	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
nav.main .current	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
nav.main .current	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
nav.main .current	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
nav.main .separator	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
nav.main .separator	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
nav.main .separator	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
nav.sub	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
nav.sub form	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
nav.sum	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
nbytes	chips/sam4l/src/i2c.rs	/^    nbytes: ReadWrite<u32, Nbytes::Register>,$/;"	m	struct:TWISRegisters
ncmdr	chips/sam4l/src/i2c.rs	/^    ncmdr: ReadWrite<u32, Command::Register>,$/;"	m	struct:TWIMRegisters
needed	capsules/src/net/stream.rs	/^    pub fn needed(self) -> Option<usize> {$/;"	F	implementation:SResult
neighbors	capsules/src/ieee802154/driver.rs	/^    neighbors: MapCell<[DeviceDescriptor; MAX_NEIGHBORS]>,$/;"	m	struct:RadioDriver
ner	chips/sam4l/src/usart.rs	/^    ner: ReadOnly<u32, NumErrors::Register>,   \/\/ 0x44$/;"	m	struct:UsartRegisters
net	capsules/src/lib.rs	/^pub mod net;$/;"	n
new	arch/cortex-m/src/mpu.rs	/^    fn new($/;"	F	implementation:CortexMRegion
new	arch/cortex-m/src/mpu.rs	/^    pub const unsafe fn new() -> MPU {$/;"	F	implementation:MPU
new	arch/cortex-m/src/nvic.rs	/^    pub const unsafe fn new(idx: u32) -> Nvic {$/;"	F	implementation:Nvic
new	arch/cortex-m/src/syscall.rs	/^    pub const unsafe fn new() -> SysCall {$/;"	F	implementation:SysCall
new	arch/cortex-m/src/systick.rs	/^    pub unsafe fn new() -> SysTick {$/;"	F	implementation:SysTick
new	arch/riscv32i/src/syscall.rs	/^    pub const unsafe fn new() -> SysCall {$/;"	F	implementation:SysCall
new	boards/imix/src/components/adc.rs	/^    pub fn new() -> AdcComponent {$/;"	F	implementation:AdcComponent
new	boards/imix/src/components/alarm.rs	/^    pub fn new($/;"	F	implementation:AlarmDriverComponent
new	boards/imix/src/components/analog_comparator.rs	/^    pub fn new() -> AcComponent {$/;"	F	implementation:AcComponent
new	boards/imix/src/components/button.rs	/^    pub fn new(board_kernel: &'static kernel::Kernel) -> ButtonComponent {$/;"	F	implementation:ButtonComponent
new	boards/imix/src/components/console.rs	/^    pub fn new($/;"	F	implementation:ConsoleComponent
new	boards/imix/src/components/crc.rs	/^    pub fn new(board_kernel: &'static kernel::Kernel) -> CrcComponent {$/;"	F	implementation:CrcComponent
new	boards/imix/src/components/fxos8700.rs	/^    pub fn new($/;"	F	implementation:Fxos8700Component
new	boards/imix/src/components/fxos8700.rs	/^    pub fn new($/;"	F	implementation:NineDofComponent
new	boards/imix/src/components/gpio.rs	/^    pub fn new() -> GpioComponent {$/;"	F	implementation:GpioComponent
new	boards/imix/src/components/isl29035.rs	/^    pub fn new($/;"	F	implementation:AmbientLightComponent
new	boards/imix/src/components/isl29035.rs	/^    pub fn new($/;"	F	implementation:Isl29035Component
new	boards/imix/src/components/led.rs	/^    pub fn new() -> LedComponent {$/;"	F	implementation:LedComponent
new	boards/imix/src/components/nonvolatile_storage.rs	/^    pub fn new(board_kernel: &'static kernel::Kernel) -> Self {$/;"	F	implementation:NonvolatileStorageComponent
new	boards/imix/src/components/nrf51822.rs	/^    pub fn new($/;"	F	implementation:Nrf51822Component
new	boards/imix/src/components/process_console.rs	/^    pub fn new($/;"	F	implementation:ProcessConsoleComponent
new	boards/imix/src/components/radio.rs	/^    pub fn new($/;"	F	implementation:RadioComponent
new	boards/imix/src/components/rf233.rs	/^    pub fn new($/;"	F	implementation:RF233Component
new	boards/imix/src/components/rng.rs	/^    pub fn new(board_kernel: &'static kernel::Kernel) -> RngComponent {$/;"	F	implementation:RngComponent
new	boards/imix/src/components/si7021.rs	/^    pub fn new($/;"	F	implementation:HumidityComponent
new	boards/imix/src/components/si7021.rs	/^    pub fn new($/;"	F	implementation:SI7021Component
new	boards/imix/src/components/si7021.rs	/^    pub fn new($/;"	F	implementation:TemperatureComponent
new	boards/imix/src/components/spi.rs	/^    pub fn new(mux: &'static MuxSpiMaster<'static, sam4l::spi::SpiHw>) -> Self {$/;"	F	implementation:SpiComponent
new	boards/imix/src/components/spi.rs	/^    pub fn new(mux: &'static MuxSpiMaster<'static, sam4l::spi::SpiHw>) -> Self {$/;"	F	implementation:SpiSyscallComponent
new	boards/imix/src/components/usb.rs	/^    pub fn new(board_kernel: &'static kernel::Kernel) -> UsbComponent {$/;"	F	implementation:UsbComponent
new	boards/imix/src/icmp_lowpan_test.rs	/^    pub fn new($/;"	F	implementation:LowpanICMPTest
new	boards/imix/src/ipv6_lowpan_test.rs	/^    pub fn new(sixlowpan_tx: TxState<'a>, radio: &'a MacDevice<'a>, alarm: A) -> LowpanTest<'a, /;"	F	implementation:LowpanTest
new	boards/imix/src/sixlowpan_dummy.rs	/^    pub fn new(radio: &'a R, alarm: &'a A) -> LowpanTest<'a, R, A> {$/;"	F	implementation:LowpanTest
new	boards/imix/src/udp_lowpan_test.rs	/^    pub fn new($/;"	F	implementation:LowpanTest
new	boards/launchxl/src/uart_echo.rs	/^    pub fn new($/;"	F	implementation:UartEcho
new	boards/nordic/nrf52dk_base/src/lib.rs	/^    pub fn new(chip_select: usize, write_protect_pin: usize, hold_pin: usize) -> Self {$/;"	F	implementation:SpiMX25R6435FPins
new	boards/nordic/nrf52dk_base/src/lib.rs	/^    pub fn new(mosi: usize, miso: usize, clk: usize) -> Self {$/;"	F	implementation:SpiPins
new	boards/nordic/nrf52dk_base/src/lib.rs	/^    pub fn new(rts: usize, txd: usize, cts: usize, rxd: usize) -> Self {$/;"	F	implementation:UartPins
new	capsules/examples/traitobj_list.rs	/^    pub fn new() -> Manager<'a> {$/;"	F	implementation:Manager
new	capsules/examples/traitobj_list.rs	/^    pub fn new() -> Self {$/;"	F	implementation:Cheese
new	capsules/examples/traitobj_list.rs	/^    pub fn new() -> Self {$/;"	F	implementation:Jazz
new	capsules/src/aes_ccm.rs	/^    pub fn new(aes: &'a A, crypt_buf: &'static mut [u8]) -> AES128CCM<'a, A> {$/;"	F	implementation:AES128CCM
new	capsules/src/alarm.rs	/^    pub const fn new(alarm: &'a A, grant: Grant<AlarmData>) -> AlarmDriver<'a, A> {$/;"	F	implementation:AlarmDriver
new	capsules/src/ambient_light.rs	/^    pub fn new(sensor: &'a hil::sensors::AmbientLight, grant: Grant<App>) -> AmbientLight {$/;"	F	implementation:AmbientLight
new	capsules/src/analog_comparator.rs	/^    pub fn new($/;"	F	implementation:AnalogComparator
new	capsules/src/app_flash_driver.rs	/^    pub fn new($/;"	F	implementation:AppFlash
new	capsules/src/ble_advertising_driver.rs	/^    fn new() -> AlarmData {$/;"	F	implementation:AlarmData
new	capsules/src/ble_advertising_driver.rs	/^    pub fn new($/;"	f
new	capsules/src/button.rs	/^    pub fn new($/;"	F	implementation:Button
new	capsules/src/console.rs	/^    pub fn new($/;"	F	implementation:Console
new	capsules/src/crc.rs	/^    pub fn new(crc_unit: &'a C, apps: Grant<App>) -> Crc<'a, C> {$/;"	F	implementation:Crc
new	capsules/src/dac.rs	/^    pub fn new(dac: &'a hil::dac::DacChannel) -> Dac<'a> {$/;"	F	implementation:Dac
new	capsules/src/debug_process_restart.rs	/^    pub fn new(kernel: &'static Kernel, pin: &'a hil::gpio::Pin, cap: C) -> DebugProcessRestart</;"	F	implementation:DebugProcessRestart
new	capsules/src/fm25cl.rs	/^    pub fn new($/;"	F	implementation:FM25CL
new	capsules/src/fxos8700cq.rs	/^    pub fn new($/;"	F	implementation:Fxos8700cq
new	capsules/src/gpio.rs	/^    pub fn new(pins: &'a [&'a G]) -> GPIO<'a, G> {$/;"	F	implementation:GPIO
new	capsules/src/gpio_async.rs	/^    pub fn new(ports: &'a [&'a Port]) -> GPIOAsync<'a, Port> {$/;"	F	implementation:GPIOAsync
new	capsules/src/humidity.rs	/^    pub fn new(driver: &'a hil::sensors::HumidityDriver, grant: Grant<App>) -> HumiditySensor<'a/;"	F	implementation:HumiditySensor
new	capsules/src/i2c_master.rs	/^    pub fn new(i2c: &'static I, buf: &'static mut [u8], apps: Grant<App>) -> I2CMasterDriver<I> /;"	F	implementation:I2CMasterDriver
new	capsules/src/i2c_master_slave_driver.rs	/^    pub fn new($/;"	F	implementation:I2CMasterSlaveDriver
new	capsules/src/ieee802154/driver.rs	/^    pub fn new($/;"	F	implementation:RadioDriver
new	capsules/src/ieee802154/framer.rs	/^    pub fn new(mac: &'a M, aes_ccm: &'a A) -> Framer<'a, M, A> {$/;"	F	implementation:Framer
new	capsules/src/ieee802154/mac.rs	/^    pub fn new(radio: &'a R) -> AwakeMac<'a, R> {$/;"	F	implementation:AwakeMac
new	capsules/src/ieee802154/virtual_mac.rs	/^    pub const fn new(mac: &'a device::MacDevice<'a>) -> MuxMac<'a> {$/;"	F	implementation:MuxMac
new	capsules/src/ieee802154/virtual_mac.rs	/^    pub const fn new(mux: &'a MuxMac<'a>) -> MacUser<'a> {$/;"	F	implementation:MacUser
new	capsules/src/ieee802154/xmac.rs	/^    pub fn new(radio: &'a R, alarm: &'a A, rng: &'a Rng<'a>) -> XMac<'a, R, A> {$/;"	F	implementation:XMac
new	capsules/src/isl29035.rs	/^    pub fn new(i2c: &'a I2CDevice, alarm: &'a A, buffer: &'static mut [u8]) -> Isl29035<'a, A> {$/;"	F	implementation:Isl29035
new	capsules/src/led.rs	/^    pub fn new(pins_init: &'a [(&'a G, ActivationMode)]) -> LED<'a, G> {$/;"	F	implementation:LED
new	capsules/src/lps25hb.rs	/^    pub fn new($/;"	F	implementation:LPS25HB
new	capsules/src/ltc294x.rs	/^    pub fn new($/;"	F	implementation:LTC294X
new	capsules/src/ltc294x.rs	/^    pub fn new(ltc: &'a LTC294X) -> LTC294XDriver<'a> {$/;"	F	implementation:LTC294XDriver
new	capsules/src/max17205.rs	/^    pub fn new($/;"	F	implementation:MAX17205
new	capsules/src/max17205.rs	/^    pub fn new(max: &'a MAX17205) -> MAX17205Driver<'a> {$/;"	F	implementation:MAX17205Driver
new	capsules/src/mcp230xx.rs	/^    pub fn new($/;"	F	implementation:MCP230xx
new	capsules/src/mx25r6435f.rs	/^    pub const fn new() -> Mx25r6435fSector {$/;"	F	implementation:Mx25r6435fSector
new	capsules/src/mx25r6435f.rs	/^    pub fn new($/;"	F	implementation:MX25R6435F
new	capsules/src/net/frag_utils.rs	/^    pub fn new() -> Bitmap {$/;"	F	implementation:Bitmap
new	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn new(icmp_type: ICMP6Type) -> ICMP6Header {$/;"	F	implementation:ICMP6Header
new	capsules/src/net/icmpv6/icmpv6_send.rs	/^    pub fn new(ip_send_struct: &'a T) -> ICMP6SendStruct<'a, T> {$/;"	F	implementation:ICMP6SendStruct
new	capsules/src/net/ip.rs	/^    pub fn new() -> IP6Header {$/;"	F	implementation:IP6Header
new	capsules/src/net/ip.rs	/^    pub fn new() -> IPAddr {$/;"	F	implementation:IPAddr
new	capsules/src/net/ipv6/ip_utils.rs	/^    pub fn new() -> IPAddr {$/;"	F	implementation:IPAddr
new	capsules/src/net/ipv6/ipv6.rs	/^    pub fn new() -> IP6Header {$/;"	F	implementation:IP6Header
new	capsules/src/net/ipv6/ipv6.rs	/^    pub fn new(header: TransportHeader, payload: &'a mut [u8]) -> IPPayload<'a> {$/;"	F	implementation:IPPayload
new	capsules/src/net/ipv6/ipv6.rs	/^    pub fn new(payload: IPPayload<'a>) -> IP6Packet<'a> {$/;"	F	implementation:IP6Packet
new	capsules/src/net/ipv6/ipv6_recv.rs	/^    pub fn new() -> IP6RecvStruct<'a> {$/;"	F	implementation:IP6RecvStruct
new	capsules/src/net/ipv6/ipv6_send.rs	/^    pub fn new($/;"	F	implementation:IP6SendStruct
new	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    pub fn new(ctx_store: C, clock: &'a A) -> Sixlowpan<'a, A, C> {$/;"	F	implementation:Sixlowpan
new	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    pub fn new(packet: &'static mut [u8]) -> RxState<'a> {$/;"	F	implementation:RxState
new	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    pub fn new(sixlowpan: &'a SixlowpanState<'a>) -> TxState<'a> {$/;"	F	implementation:TxState
new	capsules/src/net/udp/driver.rs	/^    pub fn new($/;"	F	implementation:UDPDriver
new	capsules/src/net/udp/udp.rs	/^    pub fn new() -> UDPHeader {$/;"	F	implementation:UDPHeader
new	capsules/src/net/udp/udp_recv.rs	/^    pub fn new() -> UDPReceiver<'a> {$/;"	F	implementation:UDPReceiver
new	capsules/src/net/udp/udp_send.rs	/^    pub fn new(ip_send_struct: &'a T) -> UDPSendStruct<'a, T> {$/;"	F	implementation:UDPSendStruct
new	capsules/src/ninedof.rs	/^    pub fn new(driver: &'a hil::sensors::NineDof, grant: Grant<App>) -> NineDof<'a> {$/;"	F	implementation:NineDof
new	capsules/src/nonvolatile_storage_driver.rs	/^    pub fn new($/;"	F	implementation:NonvolatileStorage
new	capsules/src/nonvolatile_to_pages.rs	/^    pub fn new(driver: &'a F, buffer: &'static mut F::Page) -> NonvolatileToPages<'a, F> {$/;"	F	implementation:NonvolatileToPages
new	capsules/src/nrf51822_serialization.rs	/^    pub fn new($/;"	F	implementation:Nrf51822Serialization
new	capsules/src/pca9544a.rs	/^    pub fn new(i2c: &'a i2c::I2CDevice, buffer: &'static mut [u8]) -> PCA9544A<'a> {$/;"	F	implementation:PCA9544A
new	capsules/src/process_console.rs	/^    pub fn new($/;"	F	implementation:ProcessConsole
new	capsules/src/rf233.rs	/^    pub fn new($/;"	F	implementation:RF233
new	capsules/src/rng.rs	/^    fn new(rgen: &'a Rng<'a>) -> SynchronousRandom {$/;"	F	implementation:SynchronousRandom
new	capsules/src/rng.rs	/^    pub fn new(egen: &'a Entropy32<'a>) -> Entropy32To8<'a> {$/;"	F	implementation:Entropy32To8
new	capsules/src/rng.rs	/^    pub fn new(egen: &'a Entropy32<'a>) -> Entropy32ToRandom<'a> {$/;"	F	implementation:Entropy32ToRandom
new	capsules/src/rng.rs	/^    pub fn new(egen: &'a Entropy8<'a>) -> Entropy8To32<'a> {$/;"	F	implementation:Entropy8To32
new	capsules/src/rng.rs	/^    pub fn new(rng: &'a Rng<'a>, grant: Grant<App>) -> RngDriver<'a> {$/;"	F	implementation:RngDriver
new	capsules/src/segger_rtt.rs	/^    pub fn new($/;"	F	implementation:SeggerRtt
new	capsules/src/segger_rtt.rs	/^    pub fn new($/;"	F	implementation:SeggerRttMemory
new	capsules/src/si7021.rs	/^    pub fn new(i2c: &'a i2c::I2CDevice, alarm: &'a A, buffer: &'static mut [u8]) -> SI7021<'a, A/;"	F	implementation:SI7021
new	capsules/src/spi.rs	/^    pub fn new(spi_master: &'a S) -> Spi<'a, S> {$/;"	F	implementation:Spi
new	capsules/src/spi.rs	/^    pub fn new(spi_slave: &'a S) -> SpiSlave<'a, S> {$/;"	F	implementation:SpiSlave
new	capsules/src/temperature.rs	/^    pub fn new($/;"	F	implementation:TemperatureSensor
new	capsules/src/test/aes.rs	/^    pub fn new($/;"	F	implementation:TestAes128Cbc
new	capsules/src/test/aes.rs	/^    pub fn new($/;"	F	implementation:TestAes128Ctr
new	capsules/src/test/aes_ccm.rs	/^    pub fn new(aes_ccm: &'a A, buf: &'static mut [u8]) -> Test<'a, A> {$/;"	F	implementation:Test
new	capsules/src/test/rng.rs	/^    pub fn new(egen: &'a entropy::Entropy32<'a>) -> TestEntropy32<'a> {$/;"	F	implementation:TestEntropy32
new	capsules/src/test/rng.rs	/^    pub fn new(egen: &'a entropy::Entropy8<'a>) -> TestEntropy8<'a> {$/;"	F	implementation:TestEntropy8
new	capsules/src/test/rng.rs	/^    pub fn new(random: &'a rng::Random<'a>) -> TestRandom<'a> {$/;"	F	implementation:TestRandom
new	capsules/src/test/rng.rs	/^    pub fn new(rng: &'a rng::Rng<'a>) -> TestRng<'a> {$/;"	F	implementation:TestRng
new	capsules/src/test/virtual_uart.rs	/^    pub fn new(device: &'static UartDevice<'static>, buffer: &'static mut [u8]) -> Self {$/;"	F	implementation:TestVirtualUartReceive
new	capsules/src/tmp006.rs	/^    pub fn new($/;"	F	implementation:TMP006
new	capsules/src/tsl2561.rs	/^    pub fn new($/;"	F	implementation:TSL2561
new	capsules/src/usb.rs	/^    pub fn new(endpoint: usize, direction: TransferDirection) -> Self {$/;"	F	implementation:EndpointAddress
new	capsules/src/usb.rs	/^    pub fn new(is_self_powered: bool, supports_remote_wakeup: bool) -> Self {$/;"	F	implementation:ConfigurationAttributes
new	capsules/src/usb_user.rs	/^    pub fn new(usbc_client: &'a C, apps: Grant<App>) -> Self {$/;"	f
new	capsules/src/usbc_client.rs	/^    pub fn new(controller: &'a C) -> Self {$/;"	F	implementation:Client
new	capsules/src/virtual_alarm.rs	/^    pub const fn new(alarm: &'a Alrm) -> MuxAlarm<'a, Alrm> {$/;"	F	implementation:MuxAlarm
new	capsules/src/virtual_alarm.rs	/^    pub fn new(mux_alarm: &'a MuxAlarm<'a, Alrm>) -> VirtualMuxAlarm<'a, Alrm> {$/;"	F	implementation:VirtualMuxAlarm
new	capsules/src/virtual_flash.rs	/^    pub const fn new(flash: &'a F) -> MuxFlash<'a, F> {$/;"	F	implementation:MuxFlash
new	capsules/src/virtual_flash.rs	/^    pub const fn new(mux: &'a MuxFlash<'a, F>) -> FlashUser<'a, F> {$/;"	F	implementation:FlashUser
new	capsules/src/virtual_i2c.rs	/^    pub const fn new(i2c: &'a i2c::I2CMaster) -> MuxI2C<'a> {$/;"	F	implementation:MuxI2C
new	capsules/src/virtual_i2c.rs	/^    pub const fn new(mux: &'a MuxI2C<'a>, addr: u8) -> I2CDevice<'a> {$/;"	F	implementation:I2CDevice
new	capsules/src/virtual_spi.rs	/^    pub const fn new($/;"	F	implementation:VirtualSpiMasterDevice
new	capsules/src/virtual_spi.rs	/^    pub const fn new(spi: &'a Spi) -> MuxSpiMaster<'a, Spi> {$/;"	F	implementation:MuxSpiMaster
new	capsules/src/virtual_spi.rs	/^    pub const fn new(spi: &'a Spi) -> VirtualSpiSlaveDevice<'a, Spi> {$/;"	F	implementation:VirtualSpiSlaveDevice
new	capsules/src/virtual_uart.rs	/^    pub const fn new(mux: &'a UartMux<'a>, receiver: bool) -> UartDevice<'a> {$/;"	F	implementation:UartDevice
new	capsules/src/virtual_uart.rs	/^    pub fn new(uart: &'a hil::uart::UART, buffer: &'static mut [u8], speed: u32) -> UartMux<'a> /;"	F	implementation:UartMux
new	chips/arty_exx/src/chip.rs	/^    pub unsafe fn new() -> ArtyExx {$/;"	F	implementation:ArtyExx
new	chips/cc26x2/src/aon.rs	/^    const fn new() -> Aon {$/;"	F	implementation:Aon
new	chips/cc26x2/src/chip.rs	/^    pub unsafe fn new() -> Cc26X2 {$/;"	F	implementation:Cc26X2
new	chips/cc26x2/src/gpio.rs	/^    const fn new(pin: usize) -> GPIOPin {$/;"	F	implementation:GPIOPin
new	chips/cc26x2/src/i2c.rs	/^    const fn new(registers: StaticRef<I2CMasterRegisters>) -> I2CMaster<'a> {$/;"	F	implementation:I2CMaster
new	chips/cc26x2/src/rtc.rs	/^    const fn new() -> Rtc {$/;"	F	implementation:Rtc
new	chips/cc26x2/src/trng.rs	/^    const fn new() -> Trng<'a> {$/;"	F	implementation:Trng
new	chips/cc26x2/src/uart.rs	/^    const fn new(registers: &'static StaticRef<UartRegisters>) -> UART {$/;"	F	implementation:UART
new	chips/e310x/src/chip.rs	/^    pub unsafe fn new() -> E310x {$/;"	F	implementation:E310x
new	chips/nrf51/src/chip.rs	/^    pub unsafe fn new() -> NRF51 {$/;"	F	implementation:NRF51
new	chips/nrf51/src/clock.rs	/^    pub const fn new() -> Clock {$/;"	F	implementation:Clock
new	chips/nrf51/src/i2c.rs	/^    const fn new(instance: usize) -> TWIM {$/;"	F	implementation:TWIM
new	chips/nrf51/src/radio.rs	/^    pub const fn new() -> Radio {$/;"	F	implementation:Radio
new	chips/nrf51/src/uart.rs	/^    pub const fn new() -> UART {$/;"	F	implementation:UART
new	chips/nrf52/src/adc.rs	/^    const fn new(registers: StaticRef<AdcRegisters>) -> Adc {$/;"	F	implementation:Adc
new	chips/nrf52/src/chip.rs	/^    pub unsafe fn new() -> NRF52 {$/;"	F	implementation:NRF52
new	chips/nrf52/src/clock.rs	/^    pub const fn new() -> Clock {$/;"	F	implementation:Clock
new	chips/nrf52/src/ficr.rs	/^    const fn new() -> Ficr {$/;"	F	implementation:Ficr
new	chips/nrf52/src/i2c.rs	/^    const fn new(registers: StaticRef<TwimRegisters>) -> TWIM {$/;"	F	implementation:TWIM
new	chips/nrf52/src/nvmc.rs	/^    pub const fn new() -> NrfPage {$/;"	F	implementation:NrfPage
new	chips/nrf52/src/nvmc.rs	/^    pub const fn new() -> Nvmc {$/;"	F	implementation:Nvmc
new	chips/nrf52/src/ppi.rs	/^    pub const fn new() -> Ppi {$/;"	F	implementation:Ppi
new	chips/nrf52/src/radio.rs	/^    pub const fn new() -> Radio {$/;"	F	implementation:Radio
new	chips/nrf52/src/spi.rs	/^    const fn new(instance: usize) -> SPIM {$/;"	F	implementation:SPIM
new	chips/nrf52/src/uart.rs	/^    pub const fn new() -> Uarte {$/;"	F	implementation:Uarte
new	chips/nrf52/src/uicr.rs	/^    pub const fn new() -> Uicr {$/;"	F	implementation:Uicr
new	chips/nrf5x/src/aes.rs	/^    const fn new() -> AesECB<'a> {$/;"	F	implementation:AesECB
new	chips/nrf5x/src/gpio.rs	/^    const fn new(pin: u8) -> GPIOPin {$/;"	F	implementation:GPIOPin
new	chips/nrf5x/src/pinmux.rs	/^    pub unsafe fn new(pin: u32) -> Pinmux {$/;"	F	implementation:Pinmux
new	chips/nrf5x/src/temperature.rs	/^    const fn new() -> Temp {$/;"	F	implementation:Temp
new	chips/nrf5x/src/timer.rs	/^    const fn new(instance: usize) -> TimerAlarm {$/;"	F	implementation:TimerAlarm
new	chips/nrf5x/src/timer.rs	/^    pub const fn new(instance: usize) -> Timer {$/;"	F	implementation:Timer
new	chips/nrf5x/src/trng.rs	/^    const fn new() -> Trng<'a> {$/;"	F	implementation:Trng
new	chips/sam4l/src/acifc.rs	/^    const fn new() -> Acifc<'a> {$/;"	F	implementation:Acifc
new	chips/sam4l/src/acifc.rs	/^    const fn new(channel: Channel) -> AcChannel {$/;"	F	implementation:AcChannel
new	chips/sam4l/src/adc.rs	/^    const fn new($/;"	F	implementation:Adc
new	chips/sam4l/src/adc.rs	/^    const fn new(channel: Channel) -> AdcChannel {$/;"	F	implementation:AdcChannel
new	chips/sam4l/src/aes.rs	/^    const fn new() -> Aes<'a> {$/;"	F	implementation:Aes
new	chips/sam4l/src/chip.rs	/^    pub unsafe fn new() -> Sam4l {$/;"	F	implementation:Sam4l
new	chips/sam4l/src/crccu.rs	/^    const fn new(base_address: StaticRef<CrccuRegisters>) -> Self {$/;"	F	implementation:Crccu
new	chips/sam4l/src/crccu.rs	/^    const fn new(enable_interrupt: bool, trwidth: TrWidth, btsize: u16) -> Self {$/;"	F	implementation:TCR
new	chips/sam4l/src/dac.rs	/^    const fn new(base_address: StaticRef<DacRegisters>) -> Dac {$/;"	F	implementation:Dac
new	chips/sam4l/src/dma.rs	/^    const fn new(channel: DMAChannelNum) -> DMAChannel {$/;"	F	implementation:DMAChannel
new	chips/sam4l/src/flashcalw.rs	/^    const fn new($/;"	F	implementation:FLASHCALW
new	chips/sam4l/src/flashcalw.rs	/^    pub const fn new() -> Sam4lPage {$/;"	F	implementation:Sam4lPage
new	chips/sam4l/src/gpio.rs	/^    const fn new(pin: Pin) -> GPIOPin {$/;"	F	implementation:GPIOPin
new	chips/sam4l/src/i2c.rs	/^    const fn new($/;"	F	implementation:I2CHw
new	chips/sam4l/src/serial_num.rs	/^    pub fn new() -> SerialNum {$/;"	F	implementation:SerialNum
new	chips/sam4l/src/spi.rs	/^    const fn new() -> SpiHw {$/;"	F	implementation:SpiHw
new	chips/sam4l/src/trng.rs	/^    const fn new() -> Trng<'a> {$/;"	F	implementation:Trng
new	chips/sam4l/src/usart.rs	/^    const fn new($/;"	F	implementation:USART
new	chips/sam4l/src/usart.rs	/^    fn new(usart: &USART) -> USARTRegManager {$/;"	F	implementation:USARTRegManager
new	chips/sam4l/src/usbc/mod.rs	/^    const fn new() -> Self {$/;"	F	implementation:Usbc
new	chips/sam4l/src/usbc/mod.rs	/^    pub const fn new() -> Bank {$/;"	F	implementation:Bank
new	chips/sam4l/src/usbc/mod.rs	/^    pub const fn new() -> Self {$/;"	F	implementation:Requests
new	chips/sam4l/src/usbc/mod.rs	/^    pub fn new(index: usize) -> EndpointIndex {$/;"	F	implementation:EndpointIndex
new	chips/sam4l/src/wdt.rs	/^    const fn new() -> Wdt {$/;"	F	implementation:Wdt
new	chips/sifive/src/gpio.rs	/^    pub const fn new($/;"	F	implementation:GpioPin
new	chips/sifive/src/prci.rs	/^    pub const fn new(base: StaticRef<PrciRegisters>) -> Prci {$/;"	F	implementation:Prci
new	chips/sifive/src/pwm.rs	/^    pub const fn new(base: StaticRef<PwmRegisters>) -> Pwm {$/;"	F	implementation:Pwm
new	chips/sifive/src/rtc.rs	/^    pub const fn new(base: StaticRef<RtcRegisters>) -> Rtc {$/;"	F	implementation:Rtc
new	chips/sifive/src/uart.rs	/^    pub const fn new(base: StaticRef<UartRegisters>) -> Uart {$/;"	F	implementation:Uart
new	chips/sifive/src/watchdog.rs	/^    pub const fn new(base: StaticRef<WatchdogRegisters>) -> Watchdog {$/;"	F	implementation:Watchdog
new	chips/tm4c129x/src/chip.rs	/^    pub unsafe fn new() -> Tm4c129x {$/;"	F	implementation:Tm4c129x
new	chips/tm4c129x/src/gpio.rs	/^    const fn new(pin: Pin) -> GPIOPin {$/;"	F	implementation:GPIOPin
new	chips/tm4c129x/src/gpt.rs	/^    const fn new(base_addr: StaticRef<GptRegisters>, clock: sysctl::Clock) -> AlarmTimer {$/;"	F	implementation:AlarmTimer
new	chips/tm4c129x/src/uart.rs	/^    const fn new(base_addr: StaticRef<UartRegisters>, clock: sysctl::Clock) -> UART {$/;"	F	implementation:UART
new	kernel/src/callback.rs	/^    crate fn new(appid: AppId, appdata: usize, fn_ptr: NonNull<*mut ()>) -> Callback {$/;"	F	implementation:Callback
new	kernel/src/callback.rs	/^    crate fn new(kernel: &'static Kernel, idx: usize) -> AppId {$/;"	F	implementation:AppId
new	kernel/src/common/deferred_call.rs	/^    crate const fn new(v: usize) -> AtomicUsize {$/;"	F	implementation:AtomicUsize
new	kernel/src/common/deferred_call.rs	/^    pub const unsafe fn new(task: T) -> Self {$/;"	F	implementation:DeferredCall
new	kernel/src/common/list.rs	/^    pub const fn new() -> List<'a, T> {$/;"	F	implementation:List
new	kernel/src/common/peripherals.rs	/^    pub fn new(peripheral_hardware: &'a H) -> PeripheralManager<'a, H, C> {$/;"	f
new	kernel/src/common/ring_buffer.rs	/^    pub fn new(ring: &'a mut [T]) -> RingBuffer<'a, T> {$/;"	F	implementation:RingBuffer
new	kernel/src/common/static_ref.rs	/^    pub const unsafe fn new(ptr: *const T) -> StaticRef<T> {$/;"	F	implementation:StaticRef
new	kernel/src/debug.rs	/^    pub fn new($/;"	F	implementation:DebugWriter
new	kernel/src/debug.rs	/^    pub fn new(dw: &'static DebugWriter) -> DebugWriterWrapper {$/;"	F	implementation:DebugWriterWrapper
new	kernel/src/grant.rs	/^    crate fn new(kernel: &'static Kernel, grant_index: usize) -> Grant<T> {$/;"	F	implementation:Grant
new	kernel/src/grant.rs	/^    pub fn new(data: &'a mut T, appid: AppId) -> Borrowed<'a, T> {$/;"	F	implementation:Borrowed
new	kernel/src/grant.rs	/^    unsafe fn new(data: *mut T, appid: AppId) -> Owned<T> {$/;"	F	implementation:Owned
new	kernel/src/hil/led.rs	/^    pub fn new(p: &'a mut gpio::Pin) -> LedHigh {$/;"	F	implementation:LedHigh
new	kernel/src/hil/led.rs	/^    pub fn new(p: &'a mut gpio::Pin) -> LedLow {$/;"	F	implementation:LedLow
new	kernel/src/introspection.rs	/^    pub fn new(kernel: &'static Kernel) -> KernelInfo {$/;"	F	implementation:KernelInfo
new	kernel/src/ipc.rs	/^    pub fn new(kernel: &'static Kernel, capability: &MemoryAllocationCapability) -> IPC {$/;"	F	implementation:IPC
new	kernel/src/mem.rs	/^    crate fn new(ptr: *mut T, len: usize, appid: AppId) -> AppSlice<L, T> {$/;"	F	implementation:AppSlice
new	kernel/src/mem.rs	/^    unsafe fn new(ptr: *mut T, appid: AppId) -> AppPtr<L, T> {$/;"	F	implementation:AppPtr
new	kernel/src/platform/mpu.rs	/^    pub fn new(start_address: *const u8, size: usize) -> Region {$/;"	F	implementation:Region
new	kernel/src/sched.rs	/^    pub fn new(processes: &'static [Option<&'static process::ProcessType>]) -> Kernel {$/;"	F	implementation:Kernel
new	libraries/tock-cells/src/map_cell.rs	/^    pub const fn new(value: T) -> MapCell<T> {$/;"	F	implementation:MapCell
new	libraries/tock-cells/src/optional_cell.rs	/^    pub const fn new(val: T) -> OptionalCell<T> {$/;"	F	implementation:OptionalCell
new	libraries/tock-cells/src/take_cell.rs	/^    pub fn new(value: &'a mut T) -> TakeCell<'a, T> {$/;"	F	implementation:TakeCell
new	libraries/tock-cells/src/volatile_cell.rs	/^    pub const fn new(value: T) -> Self {$/;"	F	implementation:VolatileCell
new	libraries/tock-register-interface/src/registers.rs	/^    pub const fn new(mask: u16, shift: usize) -> Field<u16, R> {$/;"	F	implementation:Field
new	libraries/tock-register-interface/src/registers.rs	/^    pub const fn new(mask: u16, shift: usize, value: u16) -> Self {$/;"	F	implementation:FieldValue
new	libraries/tock-register-interface/src/registers.rs	/^    pub const fn new(mask: u32, shift: usize) -> Field<u32, R> {$/;"	F	implementation:Field
new	libraries/tock-register-interface/src/registers.rs	/^    pub const fn new(mask: u32, shift: usize, value: u32) -> Self {$/;"	F	implementation:FieldValue
new	libraries/tock-register-interface/src/registers.rs	/^    pub const fn new(mask: u64, shift: usize) -> Field<u64, R> {$/;"	F	implementation:Field
new	libraries/tock-register-interface/src/registers.rs	/^    pub const fn new(mask: u64, shift: usize, value: u64) -> Self {$/;"	F	implementation:FieldValue
new	libraries/tock-register-interface/src/registers.rs	/^    pub const fn new(mask: u8, shift: usize) -> Field<u8, R> {$/;"	F	implementation:Field
new	libraries/tock-register-interface/src/registers.rs	/^    pub const fn new(mask: u8, shift: usize, value: u8) -> Self {$/;"	F	implementation:FieldValue
new	libraries/tock-register-interface/src/registers.rs	/^    pub const fn new(value: T) -> Self {$/;"	F	implementation:LocalRegisterCopy
new	libraries/tock-register-interface/src/registers.rs	/^    pub const fn new(value: T) -> Self {$/;"	F	implementation:ReadOnly
new	libraries/tock-register-interface/src/registers.rs	/^    pub const fn new(value: T) -> Self {$/;"	F	implementation:ReadWrite
new	libraries/tock-register-interface/src/registers.rs	/^    pub const fn new(value: T) -> Self {$/;"	F	implementation:WriteOnly
new_endpoint	chips/sam4l/src/usbc/mod.rs	/^pub const fn new_endpoint() -> Endpoint {$/;"	f
new_with_calibration	arch/cortex-m/src/systick.rs	/^    pub unsafe fn new_with_calibration(clock_speed: u32) -> SysTick {$/;"	F	implementation:SysTick
next	capsules/examples/traitobj_list.rs	/^    fn next(&'a self) -> &'a ListLink<'a, Funky<'a>> {$/;"	F	implementation:Funky
next	capsules/examples/traitobj_list.rs	/^    next: ListLink<'a, Funky<'a>>,$/;"	m	struct:Cheese
next	capsules/examples/traitobj_list.rs	/^    next: ListLink<'a, Funky<'a>>,$/;"	m	struct:Jazz
next	capsules/src/ieee802154/virtual_mac.rs	/^    fn next(&'a self) -> &'a ListLink<'a, MacUser<'a>> {$/;"	F	implementation:MacUser
next	capsules/src/ieee802154/virtual_mac.rs	/^    next: ListLink<'a, MacUser<'a>>,$/;"	m	struct:MacUser
next	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn next(&'a self) -> &'a ListLink<RxState<'a>> {$/;"	F	implementation:RxState
next	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    next: ListLink<'a, RxState<'a>>,$/;"	m	struct:RxState
next	capsules/src/rng.rs	/^    fn next(&mut self) -> Option<u32> {$/;"	F	implementation:Entropy32ToRandomIter
next	capsules/src/rng.rs	/^    fn next(&mut self) -> Option<u32> {$/;"	F	implementation:Entropy8To32Iter
next	capsules/src/rng.rs	/^    fn next(&mut self) -> Option<u8> {$/;"	F	implementation:Entropy32To8Iter
next	capsules/src/virtual_alarm.rs	/^    fn next(&self) -> &'a ListLink<VirtualMuxAlarm<'a, A>> {$/;"	F	implementation:VirtualMuxAlarm
next	capsules/src/virtual_alarm.rs	/^    next: ListLink<'a, VirtualMuxAlarm<'a, Alrm>>,$/;"	m	struct:VirtualMuxAlarm
next	capsules/src/virtual_flash.rs	/^    fn next(&'a self) -> &'a ListLink<'a, FlashUser<'a, F>> {$/;"	F	implementation:FlashUser
next	capsules/src/virtual_flash.rs	/^    next: ListLink<'a, FlashUser<'a, F>>,$/;"	m	struct:FlashUser
next	capsules/src/virtual_i2c.rs	/^    fn next(&'a self) -> &'a ListLink<'a, I2CDevice<'a>> {$/;"	F	implementation:I2CDevice
next	capsules/src/virtual_i2c.rs	/^    next: ListLink<'a, I2CDevice<'a>>,$/;"	m	struct:I2CDevice
next	capsules/src/virtual_spi.rs	/^    fn next(&'a self) -> &'a ListLink<'a, VirtualSpiMasterDevice<'a, Spi>> {$/;"	F	implementation:VirtualSpiMasterDevice
next	capsules/src/virtual_spi.rs	/^    next: ListLink<'a, VirtualSpiMasterDevice<'a, Spi>>,$/;"	m	struct:VirtualSpiMasterDevice
next	capsules/src/virtual_uart.rs	/^    fn next(&'a self) -> &'a ListLink<'a, UartDevice<'a>> {$/;"	F	implementation:UartDevice
next	capsules/src/virtual_uart.rs	/^    next: ListLink<'a, UartDevice<'a>>,$/;"	m	struct:UartDevice
next	chips/cc26x2/src/trng.rs	/^    fn next(&mut self) -> Option<u32> {$/;"	F	implementation:TrngIter
next	chips/nrf5x/src/trng.rs	/^    fn next(&mut self) -> Option<u32> {$/;"	F	implementation:TrngIter
next	chips/sam4l/src/trng.rs	/^    fn next(&mut self) -> Option<u32> {$/;"	F	implementation:TrngIter
next	kernel/src/common/list.rs	/^    fn next(&'a self) -> &'a ListLink<'a, T>;$/;"	F	interface:ListNode
next	kernel/src/common/list.rs	/^    fn next(&mut self) -> Option<&'a T> {$/;"	F	implementation:ListIterator
next	kernel/src/grant.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	F	implementation:Iter
next_dgram_tag	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn next_dgram_tag(&self) -> u16 {$/;"	F	implementation:Sixlowpan
next_dgram_tag	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn next_dgram_tag(&self) -> u16;$/;"	F	interface:SixlowpanState
next_dma_buffer	chips/sam4l/src/adc.rs	/^    next_dma_buffer: TakeCell<'static, [u16]>,$/;"	m	struct:Adc
next_dma_length	chips/sam4l/src/adc.rs	/^    next_dma_length: Cell<usize>,$/;"	m	struct:Adc
next_fragment	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    pub fn next_fragment<'b>($/;"	F	implementation:TxState
next_funky_thing	capsules/examples/traitobj_list.rs	/^    fn next_funky_thing(&'a self) -> &'a ListLink<'a, Funky<'a>> {$/;"	F	implementation:Cheese
next_funky_thing	capsules/examples/traitobj_list.rs	/^    fn next_funky_thing(&'a self) -> &'a ListLink<'a, Funky<'a>> {$/;"	F	implementation:Jazz
next_funky_thing	capsules/examples/traitobj_list.rs	/^    fn next_funky_thing(&'a self) -> &'a ListLink<'a, Funky<'a>>;$/;"	F	interface:Funky
next_header	capsules/src/net/ip.rs	/^    pub next_header: u8,$/;"	m	struct:IP6Header
next_header	capsules/src/net/ipv6/ipv6.rs	/^    pub next_header: u8,$/;"	m	struct:IP6Header
next_pending	arch/cortex-m/src/nvic.rs	/^pub unsafe fn next_pending() -> Option<u32> {$/;"	f
next_pending	arch/riscv32i/src/plic.rs	/^pub unsafe fn next_pending() -> Option<u32> {$/;"	f
next_pending	kernel/src/common/deferred_call.rs	/^    pub fn next_pending() -> Option<T> {$/;"	F	implementation:DeferredCall
next_samples_outstanding	capsules/src/adc.rs	/^    next_samples_outstanding: Cell<usize>,$/;"	m	struct:Adc
next_test	capsules/src/test/aes_ccm.rs	/^    fn next_test(&self) -> bool {$/;"	F	implementation:Test
nfcpins	chips/nrf52/src/uicr.rs	/^    nfcpins: ReadWrite<u32, NfcPins::Register>,$/;"	m	struct:UicrRegisters
nhc	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^mod nhc {$/;"	n
nhc_to_ip6_nh	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^fn nhc_to_ip6_nh(nhc: u8) -> Result<u8, ()> {$/;"	f
ninedof	boards/hail/src/main.rs	/^    ninedof: &'static capsules::ninedof::NineDof<'static>,$/;"	m	struct:Hail
ninedof	boards/imix/src/main.rs	/^    ninedof: &'static capsules::ninedof::NineDof<'static>,$/;"	m	struct:Imix
ninedof	capsules/src/lib.rs	/^pub mod ninedof;$/;"	n
nmic	chips/tm4c129x/src/sysctl.rs	/^    nmic: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
nonce	capsules/src/aes_ccm.rs	/^    nonce: Cell<[u8; CCM_NONCE_LENGTH]>,$/;"	m	struct:AES128CCM
nonvolatile_storage	boards/imix/src/components/mod.rs	/^pub mod nonvolatile_storage;$/;"	n
nonvolatile_storage	boards/imix/src/main.rs	/^    nonvolatile_storage: &'static capsules::nonvolatile_storage_driver::NonvolatileStorage<'stat/;"	m	struct:Imix
nonvolatile_storage	boards/nordic/nrf52dk_base/src/lib.rs	/^    nonvolatile_storage:$/;"	m	struct:Platform
nonvolatile_storage	kernel/src/hil/mod.rs	/^pub mod nonvolatile_storage;$/;"	n
nonvolatile_storage_driver	capsules/src/lib.rs	/^pub mod nonvolatile_storage_driver;$/;"	n
nonvolatile_to_pages	capsules/src/lib.rs	/^pub mod nonvolatile_to_pages;$/;"	n
nop	arch/cortex-m/src/support.rs	/^pub fn nop() {$/;"	f
nop	arch/cortex-m/src/support.rs	/^pub fn nop() {}$/;"	f
nop	arch/riscv32i/src/support.rs	/^pub fn nop() {$/;"	f
now	capsules/src/virtual_alarm.rs	/^    fn now(&self) -> u32 {$/;"	F	implementation:VirtualMuxAlarm
now	chips/cc26x2/src/rtc.rs	/^    fn now(&self) -> u32 {$/;"	F	implementation:Rtc
now	chips/nrf5x/src/rtc.rs	/^    fn now(&self) -> u32 {$/;"	F	implementation:Rtc
now	chips/nrf5x/src/timer.rs	/^    fn now(&self) -> u32 {$/;"	F	implementation:TimerAlarm
now	chips/sam4l/src/ast.rs	/^    fn now(&self) -> u32 {$/;"	F	implementation:Ast
now	chips/tm4c129x/src/gpt.rs	/^    fn now(&self) -> u32 {$/;"	F	implementation:AlarmTimer
now	kernel/src/hil/time.rs	/^    fn now(&self) -> u32;$/;"	F	interface:Alarm
nrf51422	boards/imix/src/power.rs	/^    pub nrf51422: bool,$/;"	m	struct:SubmoduleConfig
nrf51822	boards/hail/src/main.rs	/^    nrf51822: &'static capsules::nrf51822_serialization::Nrf51822Serialization<$/;"	m	struct:Hail
nrf51822	boards/imix/src/components/mod.rs	/^pub mod nrf51822;$/;"	n
nrf51822	boards/imix/src/main.rs	/^    nrf51822: &'static capsules::nrf51822_serialization::Nrf51822Serialization<$/;"	m	struct:Imix
nrf51822_serialization	boards/imix/src/components/nrf51822.rs	/^        &'static nrf51822_serialization::Nrf51822Serialization<'static, sam4l::usart::USART>;$/;"	v	implementation:Nrf51822Component
nrf51822_serialization	capsules/src/lib.rs	/^pub mod nrf51822_serialization;$/;"	n
num_armed	capsules/src/alarm.rs	/^    num_armed: Cell<usize>,$/;"	m	struct:AlarmDriver
num_configurations	capsules/src/usb.rs	/^    pub num_configurations: u8,$/;"	m	struct:DeviceDescriptor
num_endpoints	capsules/src/usb.rs	/^    pub num_endpoints: u8,$/;"	m	struct:InterfaceDescriptor
num_interfaces	capsules/src/usb.rs	/^    pub num_interfaces: u8,$/;"	m	struct:ConfigurationDescriptor
num_keys	capsules/src/ieee802154/driver.rs	/^    num_keys: Cell<usize>,$/;"	m	struct:RadioDriver
num_neighbors	capsules/src/ieee802154/driver.rs	/^    num_neighbors: Cell<usize>,$/;"	m	struct:RadioDriver
num_tests	boards/imix/src/icmp_lowpan_test.rs	/^    fn num_tests(&self) -> usize {$/;"	F	implementation:LowpanICMPTest
num_tests	boards/imix/src/ipv6_lowpan_test.rs	/^    fn num_tests(&self) -> usize {$/;"	F	implementation:LowpanTest
num_tests	boards/imix/src/sixlowpan_dummy.rs	/^    fn num_tests(&self) -> usize {$/;"	F	implementation:LowpanTest
num_tests	boards/imix/src/udp_lowpan_test.rs	/^    fn num_tests(&self) -> usize {$/;"	F	implementation:LowpanTest
number_active_processes	kernel/src/introspection.rs	/^    pub fn number_active_processes(&self, _capability: &ProcessManagementCapability) -> usize {$/;"	F	implementation:KernelInfo
number_app_dropped_callbacks	kernel/src/introspection.rs	/^    pub fn number_app_dropped_callbacks($/;"	F	implementation:KernelInfo
number_app_restarts	kernel/src/introspection.rs	/^    pub fn number_app_restarts($/;"	F	implementation:KernelInfo
number_app_syscalls	kernel/src/introspection.rs	/^    pub fn number_app_syscalls($/;"	F	implementation:KernelInfo
number_app_timeslice_expirations	kernel/src/introspection.rs	/^    pub fn number_app_timeslice_expirations($/;"	F	implementation:KernelInfo
number_down_buffers	capsules/src/segger_rtt.rs	/^    number_down_buffers: u32,$/;"	m	struct:SeggerRttMemory
number_inactive_processes	kernel/src/introspection.rs	/^    pub fn number_inactive_processes(&self, _capability: &ProcessManagementCapability) -> usize /;"	F	implementation:KernelInfo
number_loaded_processes	kernel/src/introspection.rs	/^    pub fn number_loaded_processes(&self, _capability: &ProcessManagementCapability) -> usize {$/;"	F	implementation:KernelInfo
number_of_banks	capsules/src/mcp230xx.rs	/^    number_of_banks: u8, \/\/ How many GPIO banks this extender has (likely 1 or 2)$/;"	m	struct:MCP230xx
number_of_process_slots	kernel/src/sched.rs	/^    crate fn number_of_process_slots(&self) -> usize {$/;"	F	implementation:Kernel
number_total_regions	arch/cortex-m/src/mpu.rs	/^    fn number_total_regions(&self) -> usize {$/;"	F	implementation:MPU
number_total_regions	kernel/src/platform/mpu.rs	/^    fn number_total_regions(&self) -> usize {$/;"	F	interface:MPU
number_up_buffers	capsules/src/segger_rtt.rs	/^    number_up_buffers: u32,$/;"	m	struct:SeggerRttMemory
number_writeable_flash_regions	kernel/src/process.rs	/^    fn number_writeable_flash_regions(&self) -> usize {$/;"	F	implementation:Process
number_writeable_flash_regions	kernel/src/process.rs	/^    fn number_writeable_flash_regions(&self) -> usize;$/;"	F	interface:ProcessType
number_writeable_flash_regions	kernel/src/tbfheader.rs	/^    crate fn number_writeable_flash_regions(&self) -> usize {$/;"	F	implementation:TbfHeader
numeric_cell_ext	libraries/tock-cells/src/lib.rs	/^pub mod numeric_cell_ext;$/;"	n
nvic	arch/cortex-m/src/lib.rs	/^pub mod nvic;$/;"	n
nvic	chips/sam4l/src/lib.rs	/^pub mod nvic;$/;"	n
nvic	chips/tm4c129x/src/lib.rs	/^pub mod nvic;$/;"	n
nvmc	chips/nrf52/src/lib.rs	/^pub mod nvmc;$/;"	n
nvmstat	chips/tm4c129x/src/sysctl.rs	/^    nvmstat: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
occupied	libraries/tock-cells/src/map_cell.rs	/^    occupied: Cell<bool>,$/;"	m	struct:MapCell
ocdr0	chips/sam4l/src/gpio.rs	/^    ocdr0: Register,$/;"	m	struct:GpioRegisters
ocdr1	chips/sam4l/src/gpio.rs	/^    ocdr1: Register,$/;"	m	struct:GpioRegisters
odata	chips/sam4l/src/aes.rs	/^    odata: ReadOnly<u32, Data::Register>,            \/\/   0x60$/;"	m	struct:AesRegisters
odata	chips/sam4l/src/trng.rs	/^    odata: ReadOnly<u32, OutputData::Register>,$/;"	m	struct:TrngRegisters
oder	chips/sam4l/src/gpio.rs	/^    oder: Register,$/;"	m	struct:GpioRegisters
odr	chips/tm4c129x/src/gpio.rs	/^    odr: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
off	kernel/src/hil/led.rs	/^    fn off(&mut self) {$/;"	F	implementation:LedHigh
off	kernel/src/hil/led.rs	/^    fn off(&mut self) {$/;"	F	implementation:LedLow
off	kernel/src/hil/led.rs	/^    fn off(&mut self);$/;"	F	interface:Led
offset	capsules/src/nonvolatile_storage_driver.rs	/^    offset: usize,$/;"	m	struct:App
offset	chips/nrf52/src/uart.rs	/^    offset: Cell<usize>,$/;"	m	struct:Uarte
offset	chips/tm4c129x/src/uart.rs	/^    offset: Cell<usize>,$/;"	m	struct:UART
offset_and_control	capsules/src/net/tcp.rs	/^    pub offset_and_control: u16,$/;"	m	struct:TCPHeader
ok_or	libraries/tock-cells/src/optional_cell.rs	/^    pub fn ok_or<E>(self, err: E) -> Result<T, E> {$/;"	F	implementation:OptionalCell
ok_or_else	libraries/tock-cells/src/optional_cell.rs	/^    pub fn ok_or_else<E, F>(self, err: F) -> Result<T, E>$/;"	F	implementation:OptionalCell
ol	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
ol ol	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
ol ul	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
on	kernel/src/hil/led.rs	/^    fn on(&mut self) {$/;"	F	implementation:LedHigh
on	kernel/src/hil/led.rs	/^    fn on(&mut self) {$/;"	F	implementation:LedLow
on	kernel/src/hil/led.rs	/^    fn on(&mut self);$/;"	F	interface:Led
onEach	kernel/target/doc/storage.js	/^ *\/var currentTheme=document.getElementById("themeStyle");var mainTheme=document.getElementById/;"	f
onEveryMatchingChild	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
on_deck	capsules/src/si7021.rs	/^    on_deck: Cell<OnDeck>,$/;"	m	struct:SI7021
on_deck	chips/sam4l/src/i2c.rs	/^    on_deck: Cell<Option<(DMAPeripheral, usize)>>,$/;"	m	struct:I2CHw
onchange	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:search_input
onchange	kernel/target/doc/settings.js	/^ *\/(function(){function changeSetting(settingName,isEnabled){updateLocalStorage('rustdoc-'+sett/;"	f	function:toggle
onclick	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f	function:e
onclick	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f	function:newToggle
onclick	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f	function:sidebar_menu
onclick	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:document
onclick	kernel/target/doc/theme.js	/^    but.onclick = function(el) {$/;"	f	function:but
oneshot	kernel/src/hil/time.rs	/^    fn oneshot(&self, interval: u32);$/;"	F	interface:Timer
onfocus	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f	function:search_input
onkeydown	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:search_input
onpopstate	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:window
onresize	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f	function:window
open_device	tools/usb/bulk-echo-fast/main.c	/^void open_device(void) {$/;"	f	typeref:typename:void
operation	capsules/src/i2c_master.rs	/^    fn operation($/;"	F	implementation:I2CMasterDriver
operation	capsules/src/ieee802154/virtual_mac.rs	/^    operation: MapCell<Op>,$/;"	m	struct:MacUser
operation	capsules/src/virtual_flash.rs	/^    operation: Cell<Op>,$/;"	m	struct:FlashUser
operation	capsules/src/virtual_i2c.rs	/^    operation: Cell<Op>,$/;"	m	struct:I2CDevice
operation	capsules/src/virtual_spi.rs	/^    operation: Cell<Op>,$/;"	m	struct:VirtualSpiMasterDevice
operation	capsules/src/virtual_uart.rs	/^    operation: OptionalCell<Operation>,$/;"	m	struct:UartDevice
optgroup	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
optional_cell	libraries/tock-cells/src/lib.rs	/^pub mod optional_cell;$/;"	n
options	capsules/src/net/icmpv6/icmpv6.rs	/^    pub options: ICMP6HeaderOptions,$/;"	m	struct:ICMP6Header
or	libraries/tock-cells/src/optional_cell.rs	/^    pub fn or(self, optb: Option<T>) -> Option<T> {$/;"	F	implementation:OptionalCell
or_else	libraries/tock-cells/src/optional_cell.rs	/^    pub fn or_else<F>(self, f: F) -> Option<T>$/;"	F	implementation:OptionalCell
orc	chips/nrf52/src/spi.rs	/^    orc: ReadWrite<u32>,                             \/\/ Over-read character.$/;"	m	struct:SpimRegisters
original_app_break	kernel/src/process.rs	/^    original_app_break: *const u8,$/;"	m	struct:Process
original_kernel_memory_break	kernel/src/process.rs	/^    original_kernel_memory_break: *const u8,$/;"	m	struct:Process
original_stack_pointer	kernel/src/process.rs	/^    original_stack_pointer: *const u8,$/;"	m	struct:Process
oscctrl0	chips/sam4l/src/scif.rs	/^    oscctrl0: ReadWrite<u32, Oscillator::Register>,$/;"	m	struct:ScifRegisters
oscctrl32	chips/sam4l/src/bscif.rs	/^    oscctrl32: ReadWrite<u32, Oscillator32Control::Register>,$/;"	m	struct:BscifRegisters
oscillator_disable	chips/sam4l/src/scif.rs	/^pub fn oscillator_disable() {$/;"	f
oscillator_enable	chips/sam4l/src/scif.rs	/^pub fn oscillator_enable(internal: bool) {$/;"	f
osrr0	chips/sam4l/src/gpio.rs	/^    osrr0: Register,$/;"	m	struct:GpioRegisters
others	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:execQuery.ret
others	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:execSearch.results
out	chips/nrf5x/src/gpio.rs	/^    out: ReadWrite<u32, Out::Register>,$/;"	m	struct:GpioRegisters
out0	chips/cc26x2/src/trng.rs	/^    out0: ReadOnly<u32>,$/;"	m	struct:RngRegisters
out1	chips/cc26x2/src/trng.rs	/^    out1: ReadOnly<u32>,$/;"	m	struct:RngRegisters
out_xor	chips/sifive/src/gpio.rs	/^    out_xor: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
outclr	chips/nrf5x/src/gpio.rs	/^    outclr: ReadWrite<u32, OutClr::Register>,$/;"	m	struct:GpioRegisters
outgoing_frame_security	capsules/src/ieee802154/framer.rs	/^    fn outgoing_frame_security(&self, buf: &'static mut [u8], frame_info: FrameInfo) -> TxState /;"	F	implementation:Framer
output	chips/nrf5x/src/aes.rs	/^    output: TakeCell<'a, [u8]>,$/;"	m	struct:AesECB
output_buffer	kernel/src/debug.rs	/^    output_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:DebugWriter
output_data_ready	chips/sam4l/src/aes.rs	/^    fn output_data_ready(&self) -> bool {$/;"	F	implementation:Aes
output_en	chips/sifive/src/gpio.rs	/^    output_en: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
outputs	arch/riscv32i/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1164083562126845933":["rustc 1.32.0-nightl/;"	o
outputs	boards/hifive1/target/.rustc_info.json	/^{"rustc_fingerprint":6405865732497413016,"outputs":{"1164083562126845933":["rustc 1.35.0-nightly/;"	o
outputs	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	o
outputs	libraries/tock-register-interface/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1617349019360157463":["___\\nlib___.rlib\\/;"	o
outset	chips/nrf5x/src/gpio.rs	/^    outset: ReadWrite<u32, OutSet::Register>,$/;"	m	struct:GpioRegisters
overflowed	arch/cortex-m/src/systick.rs	/^    fn overflowed(&self) -> bool {$/;"	F	implementation:SysTick
overflowed	kernel/src/platform/systick.rs	/^    fn overflowed(&self) -> bool {$/;"	F	implementation:SysTick
overflowed	kernel/src/platform/systick.rs	/^    fn overflowed(&self) -> bool;$/;"	F	interface:SysTick
overlaps	arch/cortex-m/src/mpu.rs	/^    fn overlaps(&self, other_start: *const u8, other_size: usize) -> bool {$/;"	F	implementation:CortexMRegion
override0	chips/nrf51/src/radio.rs	/^    override0: ReadWrite<u32, TrimOverrideN::Register>, \/\/ 0x724 - 0x728$/;"	m	struct:RadioRegisters
override1	chips/nrf51/src/radio.rs	/^    override1: ReadWrite<u32, TrimOverrideN::Register>, \/\/ 0x728 - 0x72c$/;"	m	struct:RadioRegisters
override2	chips/nrf51/src/radio.rs	/^    override2: ReadWrite<u32, TrimOverrideN::Register>, \/\/ 0x72c - 0x730$/;"	m	struct:RadioRegisters
override3	chips/nrf51/src/radio.rs	/^    override3: ReadWrite<u32, TrimOverrideN::Register>, \/\/ 0x730 - 0x734$/;"	m	struct:RadioRegisters
override4	chips/nrf51/src/radio.rs	/^    override4: ReadWrite<u32, TrimOverride4::Register>, \/\/ 0x734 - 0x738$/;"	m	struct:RadioRegisters
oversample	chips/nrf52/src/adc.rs	/^    oversample: ReadWrite<u32>,$/;"	m	struct:AdcRegisters
ovr	chips/sam4l/src/gpio.rs	/^    ovr: Register,$/;"	m	struct:GpioRegisters
p	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
p.0	doc/courses/rustconf/presentation/rng.svg	/^<svg version="1.1" viewBox="0.0 0.0 960.0 720.0" fill="none" stroke="none" stroke-linecap="squar/;"	i
p_bits	capsules/src/net/thread/tlv.rs	/^    p_bits: u16,$/;"	m	struct:BorderRouterTlvValue
p_border_router_16	capsules/src/net/thread/tlv.rs	/^    p_border_router_16: u16,$/;"	m	struct:BorderRouterTlvValue
package	chips/nrf52/src/ficr.rs	/^    fn package(&self) -> Package {$/;"	F	implementation:Ficr
package_name	kernel/src/tbfheader.rs	/^    package_name: Option<&'static str>,$/;"	m	struct:TbfHeaderV2
packet	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    packet: TakeCell<'static, [u8]>,$/;"	m	struct:RxState
packet_size	chips/sam4l/src/usbc/mod.rs	/^    pub packet_size: ReadWrite<u32, PacketSize::Register>,$/;"	m	struct:Bank
packetptr	chips/nrf51/src/radio.rs	/^    packetptr: ReadWrite<u32, PacketPointer::Register>, \/\/ 0x504 - 0x508$/;"	m	struct:RadioRegisters
packetptr	chips/nrf52/src/radio.rs	/^    packetptr: ReadWrite<u32, PacketPointer::Register>,$/;"	m	struct:RadioRegisters
pagebuffer	capsules/src/nonvolatile_to_pages.rs	/^    pagebuffer: TakeCell<'static, F::Page>,$/;"	m	struct:NonvolatileToPages
pan	capsules/src/rf233.rs	/^    pan: Cell<u16>,$/;"	m	struct:RF233
pan_id	boards/imix/src/components/radio.rs	/^    pan_id: capsules::net::ieee802154::PanID,$/;"	m	struct:RadioComponent
panic	kernel/src/debug.rs	/^pub unsafe fn panic<L: hil::led::Led, W: Write>($/;"	f
panic_banner	kernel/src/debug.rs	/^pub unsafe fn panic_banner<W: Write>(writer: &mut W, panic_info: &PanicInfo) {$/;"	f
panic_begin	kernel/src/debug.rs	/^pub unsafe fn panic_begin(nop: &Fn()) {$/;"	f
panic_blink_forever	kernel/src/debug.rs	/^pub fn panic_blink_forever<L: hil::led::Led>(leds: &mut [&mut L]) -> ! {$/;"	f
panic_fmt	boards/arty-e21/src/io.rs	/^pub unsafe extern "C" fn panic_fmt(pi: &PanicInfo) -> ! {$/;"	f
panic_fmt	boards/ek-tm4c1294xl/src/io.rs	/^pub unsafe extern "C" fn panic_fmt(pi: &PanicInfo) -> ! {$/;"	f
panic_fmt	boards/hail/src/io.rs	/^pub unsafe extern "C" fn panic_fmt(pi: &PanicInfo) -> ! {$/;"	f
panic_fmt	boards/hifive1/src/io.rs	/^pub unsafe extern "C" fn panic_fmt(pi: &PanicInfo) -> ! {$/;"	f
panic_fmt	boards/imix/src/io.rs	/^pub unsafe extern "C" fn panic_fmt(pi: &PanicInfo) -> ! {$/;"	f
panic_fmt	boards/launchxl/src/ccfg.rs	/^pub unsafe extern "C" fn panic_fmt(_pi: &core::panic::PanicInfo) -> ! {$/;"	f
panic_fmt	boards/launchxl/src/io.rs	/^pub unsafe extern "C" fn panic_fmt(pi: &PanicInfo) -> ! {$/;"	f
panic_fmt	boards/nordic/nrf51dk/src/io.rs	/^pub unsafe extern "C" fn panic_fmt(pi: &PanicInfo) -> ! {$/;"	f
panic_fmt	boards/nordic/nrf52840dk/src/io.rs	/^pub unsafe extern "C" fn panic_fmt(pi: &PanicInfo) -> ! {$/;"	f
panic_fmt	boards/nordic/nrf52dk/src/io.rs	/^pub unsafe extern "C" fn panic_fmt(pi: &PanicInfo) -> ! {$/;"	f
panic_new	chips/sam4l/src/usart.rs	/^    pub fn panic_new(usart: &USART) -> USARTRegManager {$/;"	F	implementation:USARTRegManager
panic_process_info	kernel/src/debug.rs	/^pub unsafe fn panic_process_info<W: Write>($/;"	f
parameter	chips/sam4l/src/acifc.rs	/^    parameter: ReadOnly<u32, Parameter::Register>,$/;"	m	struct:AcifcRegisters
parameter	chips/sam4l/src/aes.rs	/^    parameter: ReadOnly<u32, Parameter::Register>,   \/\/   0x70$/;"	m	struct:AesRegisters
parameter	chips/sam4l/src/gpio.rs	/^    parameter: u32,$/;"	m	struct:GpioRegisters
parent	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:buildIndex.row
parity	kernel/src/hil/uart.rs	/^    pub parity: Parity,$/;"	m	struct:UARTParameters
parse	tools/svd2regs.py	/^def parse(peripheral_name, mcu, svd, group):$/;"	f
parse_and_validate_tbf_header	kernel/src/tbfheader.rs	/^crate unsafe fn parse_and_validate_tbf_header(address: *const u8) -> Option<TbfHeader> {$/;"	f
parse_args	tools/svd2regs.py	/^def parse_args():$/;"	f
parse_ip_port_pair	capsules/src/net/udp/driver.rs	/^    fn parse_ip_port_pair(&self, buf: &[u8]) -> Option<UDPEndpoint> {$/;"	F	implementation:UDPDriver
part	chips/nrf52/src/ficr.rs	/^    fn part(&self) -> Part {$/;"	F	implementation:Ficr
path	arch/riscv32i/target/debug/.fingerprint/bare-metal-24acc5d3590b7513/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0./;"	n
path	arch/riscv32i/target/debug/.fingerprint/bare-metal-7dd6462cd7700cd7/lib-bare_metal-7dd6462cd7700cd7.json	/^{"rustc":10377385455325587324,"features":"[]","target":10318145944003877215,"profile":1187018370/;"	n
path	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
path	arch/riscv32i/target/debug/.fingerprint/bit_field-56ae9b63ca7874f1/lib-bit_field-56ae9b63ca7874f1.json	/^{"rustc":10377385455325587324,"features":"[]","target":6212214415640514931,"profile":11870183705/;"	n
path	arch/riscv32i/target/debug/.fingerprint/riscvregs-0c285ab8bbe41fa7/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"db/;"	n
path	arch/riscv32i/target/debug/.fingerprint/riscvregs-126b22abd70e245c/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0e/;"	n
path	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n
path	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n
path	arch/riscv32i/target/debug/.fingerprint/riscvregs-7b5528c14e2c7055/build-script-build_script_build-7b5528c14e2c7055.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
path	arch/riscv32i/target/debug/.fingerprint/riscvregs-d6ebf6a6021a8976/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"78/;"	n
path	arch/riscv32i/target/debug/.fingerprint/riscvregs-e220008a48c83b01/build-script-build_script_build-e220008a48c83b01.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
path	arch/riscv32i/target/debug/.fingerprint/riscvregs-e3787b41749bb5b0/build-script-build_script_build-e3787b41749bb5b0.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
path	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n
path	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	n
path	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	n
path	arch/riscv32i/target/debug/.fingerprint/semver-parser-1d01b4b0efb84ec1/lib-semver_parser-1d01b4b0efb84ec1.json	/^{"rustc":10377385455325587324,"features":"[]","target":11042536386261824010,"profile":1187018370/;"	n
path	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	n
path	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	n
path	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n
path	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	n
path	boards/hifive1/target/debug/.fingerprint/riscvregs-8a1ccaee318cf981/build-script-build_script_build-8a1ccaee318cf981.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n
path	boards/hifive1/target/debug/.fingerprint/riscvregs-e5cf2a660cb8088f/build-script-build_script_build-e5cf2a660cb8088f.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n
path	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	n
path	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	n
path	boards/hifive1/target/debug/.fingerprint/semver-parser-0cbc1426a8cfeede/lib-semver_parser-0cbc1426a8cfeede.json	/^{"rustc":4168008693276420879,"features":"[]","target":3650675185119913205,"profile":118386650091/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-3818320f62d4b526/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-5a31f60d1aed50ae/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-90db6ed0e5b8c3d4/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	n
path	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	n
path	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	n
path	kernel/target/debug/.fingerprint/tock-cells-816571e4fa975f6b/doc-lib-tock_cells-816571e4fa975f6b.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":3062756892/;"	n
path	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	n
path	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	n
path	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	n
path	kernel/target/debug/.fingerprint/tock-registers-e7eec879e9fa92db/doc-lib-tock_registers-e7eec879e9fa92db.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":30627568924/;"	n
path	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:buildIndex.row
path	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	n
path3794	doc/courses/rustconf/presentation/ipc.svg	/^       inkscape:connector-curvature="0" \/>$/;"	i
path3794-1	doc/courses/rustconf/presentation/ipc.svg	/^       sodipodi:nodetypes="ccc" \/>$/;"	i
path4603	doc/courses/rustconf/presentation/ipc.svg	/^         transform="scale(0.8) translate(12.5,0)" \/>$/;"	i
path4606	doc/courses/rustconf/presentation/ipc.svg	/^         transform="scale(0.8) rotate(180) translate(12.5,0)" \/>$/;"	i
path4606-9	doc/courses/rustconf/presentation/ipc.svg	/^         transform="matrix(-0.8,0,0,-0.8,-10,0)" \/>$/;"	i
path4772	doc/courses/rustconf/rustconf.svg	/^         transform="scale(0.8) rotate(180) translate(12.5,0)" \/>$/;"	i
path4787	doc/courses/rustconf/rustconf.svg	/^         transform="scale(1.1) translate(1,0)" \/>$/;"	i
path4790	doc/courses/rustconf/rustconf.svg	/^         transform="scale(1.1) rotate(180) translate(1,0)" \/>$/;"	i
path5007	doc/courses/rustconf/console.svg	/^         inkscape:connector-curvature="0" \/>$/;"	i
path5019	doc/courses/rustconf/console.svg	/^         inkscape:connector-curvature="0" \/>$/;"	i
path5022	doc/courses/rustconf/console.svg	/^         inkscape:connector-curvature="0" \/>$/;"	i
path5025	doc/courses/rustconf/console.svg	/^         inkscape:connector-curvature="0" \/>$/;"	i
path5449	doc/courses/rustconf/rustconf.svg	/^         transform="scale(1.1) rotate(180) translate(1,0)" \/>$/;"	i
path5474	doc/courses/rustconf/console.svg	/^       sodipodi:nodetypes="cc" \/>$/;"	i
path5529	doc/courses/rustconf/rustconf.svg	/^       inkscape:connector-type="polyline" \/>$/;"	i
path5531	doc/courses/rustconf/rustconf.svg	/^         transform="scale(1.1) rotate(180) translate(1,0)" \/>$/;"	i
path5625	doc/courses/rustconf/rustconf.svg	/^       inkscape:connector-type="polyline" \/>$/;"	i
path5730	doc/courses/rustconf/console.svg	/^       sodipodi:nodetypes="csc" \/>$/;"	i
path5740	doc/courses/rustconf/console.svg	/^         inkscape:connector-curvature="0" \/>$/;"	i
path5886	doc/courses/rustconf/console.svg	/^       style="fill:none;fill-opacity:1;stroke:#000000;stroke-width:3;stroke-miterlimit:4;stroke-/;"	i
path5890	doc/courses/rustconf/console.svg	/^         inkscape:connector-curvature="0" \/>$/;"	i
path6367	doc/courses/rustconf/rustconf.svg	/^       inkscape:connector-type="polyline" \/>$/;"	i
path6375	doc/courses/rustconf/rustconf.svg	/^         id="path6375" \/>$/;"	i
path6477	doc/courses/rustconf/rustconf.svg	/^       inkscape:connector-type="polyline" \/>$/;"	i
path6485	doc/courses/rustconf/rustconf.svg	/^         transform="scale(1.1) rotate(180) translate(1,0)" \/>$/;"	i
pathSplitter	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
paths	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	c
paths	kernel/target/doc/search-index.js	/^searchIndex["tock_cells"]={"doc":"Tock Cell types.","items":[[0,"map_cell","tock_cells","Tock sp/;"	p	class:searchIndex
paths	kernel/target/doc/search-index.js	/^searchIndex["tock_registers"]={"doc":"Tock Register Interface","items":[[0,"macros","tock_regist/;"	p	class:searchIndex
payload	capsules/src/net/ipv6/ipv6.rs	/^    pub payload: &'a mut [u8],$/;"	m	struct:IPPayload
payload	capsules/src/net/ipv6/ipv6.rs	/^    pub payload: IPPayload<'a>,$/;"	m	struct:IP6Packet
payload	chips/nrf51/src/radio.rs	/^    payload: ReadWrite<u32, Event::Register>,    \/\/ 0x108 ---> 0x10c$/;"	m	struct:RadioRegisters
payload_ies	capsules/src/net/ieee802154.rs	/^    pub payload_ies: [PayloadIE<'a>; MAX_PAYLOAD_IES],$/;"	m	struct:Header
payload_ies_len	capsules/src/net/ieee802154.rs	/^    pub payload_ies_len: usize,$/;"	m	struct:Header
payload_len	capsules/src/net/ip.rs	/^    pub payload_len: u16,$/;"	m	struct:IP6Header
payload_len	capsules/src/net/ipv6/ipv6.rs	/^    pub payload_len: u16,$/;"	m	struct:IP6Header
pb_clock	chips/sam4l/src/flashcalw.rs	/^    pb_clock: pm::Clock,$/;"	m	struct:FLASHCALW
pbadivmask	chips/sam4l/src/pm.rs	/^    pbadivmask: ReadWrite<u32, DividedClockMask::Register>, \/\/ 0x040$/;"	m	struct:PmRegisters
pbamask	chips/sam4l/src/pm.rs	/^    pbamask: ReadWrite<u32, ClockMaskPba::Register>,$/;"	m	struct:PmRegisters
pbasel	chips/sam4l/src/pm.rs	/^    pbasel: ReadWrite<u32, PeripheralBusXClockSelect::Register>,$/;"	m	struct:PmRegisters
pbbmask	chips/sam4l/src/pm.rs	/^    pbbmask: ReadWrite<u32, ClockMaskPbb::Register>,$/;"	m	struct:PmRegisters
pbbsel	chips/sam4l/src/pm.rs	/^    pbbsel: ReadWrite<u32, PeripheralBusXClockSelect::Register>,$/;"	m	struct:PmRegisters
pbcmask	chips/sam4l/src/pm.rs	/^    pbcmask: ReadWrite<u32, ClockMaskPbc::Register>,$/;"	m	struct:PmRegisters
pbcsel	chips/sam4l/src/pm.rs	/^    pbcsel: ReadWrite<u32, PeripheralBusXClockSelect::Register>,$/;"	m	struct:PmRegisters
pbdmask	chips/sam4l/src/pm.rs	/^    pbdmask: ReadWrite<u32, ClockMaskPbd::Register>,$/;"	m	struct:PmRegisters
pbdsel	chips/sam4l/src/pm.rs	/^    pbdsel: ReadWrite<u32, PeripheralBusXClockSelect::Register>,$/;"	m	struct:PmRegisters
pc	chips/tm4c129x/src/gpio.rs	/^    pc: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
pc	kernel/src/process.rs	/^    pub pc: usize,$/;"	m	struct:FunctionCall
pca9544a	capsules/src/lib.rs	/^pub mod pca9544a;$/;"	n
pcacmp	chips/tm4c129x/src/sysctl.rs	/^    pcacmp: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pcadc	chips/tm4c129x/src/sysctl.rs	/^    pcadc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pccan	chips/tm4c129x/src/sysctl.rs	/^    pccan: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pcccm	chips/tm4c129x/src/sysctl.rs	/^    pcccm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pcdma	chips/tm4c129x/src/sysctl.rs	/^    pcdma: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pceeprom	chips/tm4c129x/src/sysctl.rs	/^    pceeprom: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pcemac	chips/tm4c129x/src/sysctl.rs	/^    pcemac: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pcephy	chips/tm4c129x/src/sysctl.rs	/^    pcephy: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pcepi	chips/tm4c129x/src/sysctl.rs	/^    pcepi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pcgpio	chips/tm4c129x/src/sysctl.rs	/^    pcgpio: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pchib	chips/tm4c129x/src/sysctl.rs	/^    pchib: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pci2c	chips/tm4c129x/src/sysctl.rs	/^    pci2c: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pclksr	chips/sam4l/src/bscif.rs	/^    pclksr: ReadOnly<u32, PowerClocksStatus::Register>,$/;"	m	struct:BscifRegisters
pclksr	chips/sam4l/src/scif.rs	/^    pclksr: ReadOnly<u32, Interrupt::Register>,$/;"	m	struct:ScifRegisters
pcnf0	chips/nrf51/src/radio.rs	/^    pcnf0: ReadWrite<u32, Pcnf0::Register>,      \/\/ 0x514 - 0x518$/;"	m	struct:RadioRegisters
pcnf0	chips/nrf52/src/radio.rs	/^    pcnf0: ReadWrite<u32, PacketConfiguration0::Register>,$/;"	m	struct:RadioRegisters
pcnf1	chips/nrf51/src/radio.rs	/^    pcnf1: ReadWrite<u32, Pcnf1::Register>,      \/\/ 0x518 - 0x51c$/;"	m	struct:RadioRegisters
pcnf1	chips/nrf52/src/radio.rs	/^    pcnf1: ReadWrite<u32, PacketConfiguration1::Register>,$/;"	m	struct:RadioRegisters
pconsole	boards/imix/src/main.rs	/^    pconsole: &'static capsules::process_console::ProcessConsole<$/;"	m	struct:Imix
pcpwm	chips/tm4c129x/src/sysctl.rs	/^    pcpwm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pcqei	chips/tm4c129x/src/sysctl.rs	/^    pcqei: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pcssi	chips/tm4c129x/src/sysctl.rs	/^    pcssi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pctimer	chips/tm4c129x/src/sysctl.rs	/^    pctimer: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pctl	chips/tm4c129x/src/gpio.rs	/^    pctl: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
pcuart	chips/tm4c129x/src/sysctl.rs	/^    pcuart: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pcusb	chips/tm4c129x/src/sysctl.rs	/^    pcusb: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pcwd	chips/tm4c129x/src/sysctl.rs	/^    pcwd: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pd_ctl0	chips/cc26x2/src/prcm.rs	/^    pub pd_ctl0: ReadWrite<u32, PowerDomain0::Register>,$/;"	m	struct:PrcmRegisters
pd_ctl0_peripheral	chips/cc26x2/src/prcm.rs	/^    pub pd_ctl0_peripheral: WriteOnly<u32, PowerDomainSingle::Register>,$/;"	m	struct:PrcmRegisters
pd_ctl0_rfc	chips/cc26x2/src/prcm.rs	/^    pub pd_ctl0_rfc: WriteOnly<u32, PowerDomainSingle::Register>,$/;"	m	struct:PrcmRegisters
pd_ctl0_serial	chips/cc26x2/src/prcm.rs	/^    pub pd_ctl0_serial: WriteOnly<u32, PowerDomainSingle::Register>,$/;"	m	struct:PrcmRegisters
pd_ctl1	chips/cc26x2/src/prcm.rs	/^    pub pd_ctl1: ReadWrite<u32, PowerDomain1::Register>,$/;"	m	struct:PrcmRegisters
pd_stat0	chips/cc26x2/src/prcm.rs	/^    pub pd_stat0: ReadOnly<u32, PowerDomainStatus0::Register>,$/;"	m	struct:PrcmRegisters
pd_stat0_periph	chips/cc26x2/src/prcm.rs	/^    pub pd_stat0_periph: ReadOnly<u32, PowerDomainSingle::Register>,$/;"	m	struct:PrcmRegisters
pd_stat0_rfc	chips/cc26x2/src/prcm.rs	/^    pub pd_stat0_rfc: ReadOnly<u32, PowerDomainSingle::Register>,$/;"	m	struct:PrcmRegisters
pd_stat0_serial	chips/cc26x2/src/prcm.rs	/^    pub pd_stat0_serial: ReadOnly<u32, PowerDomainSingle::Register>,$/;"	m	struct:PrcmRegisters
pd_stat1	chips/cc26x2/src/prcm.rs	/^    pub pd_stat1: ReadOnly<u32, PowerDomainStatus1::Register>,$/;"	m	struct:PrcmRegisters
pder	chips/sam4l/src/gpio.rs	/^    pder: Register,$/;"	m	struct:GpioRegisters
pdr	chips/tm4c129x/src/gpio.rs	/^    pdr: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
pdu_type	capsules/src/ble_advertising_driver.rs	/^    pdu_type: AdvPduType,$/;"	m	struct:App
pecr	chips/sam4l/src/i2c.rs	/^    pecr: ReadOnly<u32, PacketErrorCheck::Register>,$/;"	m	struct:TWISRegisters
pending	arch/riscv32i/src/plic.rs	/^    pending: [ReadOnly<u32>; 5],$/;"	m	struct:PlicRegisters
pending	capsules/src/ambient_light.rs	/^    pending: bool,$/;"	m	struct:App
pending_command	capsules/src/app_flash_driver.rs	/^    pending_command: bool,$/;"	m	struct:App
pending_command	capsules/src/ninedof.rs	/^    pending_command: bool,$/;"	m	struct:App
pending_command	capsules/src/nonvolatile_storage_driver.rs	/^    pending_command: bool,$/;"	m	struct:App
pending_tx	capsules/src/ieee802154/driver.rs	/^    pending_tx: Option<(u16, Option<(SecurityLevel, KeyId)>)>,$/;"	m	struct:App
pending_tx	capsules/src/net/udp/driver.rs	/^    pending_tx: Option<[UDPEndpoint; 2]>,$/;"	m	struct:App
pending_write	capsules/src/console.rs	/^    pending_write: bool,$/;"	m	struct:App
perform_op_async	capsules/src/ieee802154/virtual_mac.rs	/^    fn perform_op_async(&self, node: &'a MacUser<'a>, op: Op) {$/;"	F	implementation:MuxMac
perform_op_sync	capsules/src/ieee802154/virtual_mac.rs	/^    fn perform_op_sync($/;"	F	implementation:MuxMac
perform_tx_async	capsules/src/ieee802154/driver.rs	/^    fn perform_tx_async(&self, appid: AppId) {$/;"	F	implementation:RadioDriver
perform_tx_async	capsules/src/net/udp/driver.rs	/^    fn perform_tx_async(&self, appid: AppId) {$/;"	F	implementation:UDPDriver
perform_tx_sync	capsules/src/ieee802154/driver.rs	/^    fn perform_tx_sync(&self, appid: AppId) -> ReturnCode {$/;"	F	implementation:RadioDriver
perform_tx_sync	capsules/src/net/udp/driver.rs	/^    fn perform_tx_sync(&self, appid: AppId) -> ReturnCode {$/;"	F	implementation:UDPDriver
peripheral_hardware	kernel/src/common/peripherals.rs	/^    peripheral_hardware: &'a H,$/;"	m	struct:PeripheralManager
peripheral_interrupts	chips/cc26x2/src/lib.rs	/^pub mod peripheral_interrupts;$/;"	n
peripheral_interrupts	chips/nrf5x/src/lib.rs	/^pub mod peripheral_interrupts;$/;"	n
peripherals	kernel/src/common/mod.rs	/^pub mod peripherals;$/;"	n
perspective929	doc/courses/rustconf/rustconf.svg	/^       id="perspective929" \/>$/;"	i
pfr	arch/cortex-m/src/scb.rs	/^    pfr: [VolatileCell<u32>; 2],$/;"	m	struct:ScbRegisters
pico_enabled	chips/sam4l/src/flashcalw.rs	/^    fn pico_enabled(&self) -> bool {$/;"	F	implementation:FLASHCALW
pin	boards/imix/src/power.rs	/^    pin: &'static GPIOPin,$/;"	m	struct:DetachablePin
pin	chips/cc26x2/src/gpio.rs	/^    pin: usize,$/;"	m	struct:GPIOPin
pin	chips/nrf5x/src/gpio.rs	/^    pin: u8,$/;"	m	struct:GPIOPin
pin	chips/sifive/src/gpio.rs	/^    pin: Field<u32, pins::Register>,$/;"	m	struct:GpioPin
pin	chips/tm4c129x/src/gpio.rs	/^    pin: usize,$/;"	m	struct:GPIOPin
pin	kernel/src/hil/led.rs	/^    pub pin: &'a mut gpio::Pin,$/;"	m	struct:LedHigh
pin	kernel/src/hil/led.rs	/^    pub pin: &'a mut gpio::Pin,$/;"	m	struct:LedLow
pin_cnf	chips/nrf5x/src/gpio.rs	/^    pin_cnf: [ReadWrite<u32, PinConfig::Register>; 32],$/;"	m	struct:GpioRegisters
pin_mapping_cc1352p	boards/launchxl/src/main.rs	/^mod pin_mapping_cc1352p;$/;"	n
pin_mask	chips/cc26x2/src/gpio.rs	/^    pin_mask: u32,$/;"	m	struct:GPIOPin
pin_mask	chips/sam4l/src/gpio.rs	/^    pin_mask: u32,$/;"	m	struct:GPIOPin
pinmux	chips/nrf5x/src/lib.rs	/^pub mod pinmux;$/;"	n
pins	capsules/src/button.rs	/^    pins: &'a [(&'a G, GpioMode)],$/;"	m	struct:Button
pins	capsules/src/gpio.rs	/^    pins: &'a [&'a G],$/;"	m	struct:GPIO
pins	chips/arty_exx/src/gpio.rs	/^    pins: [GpioPin; 16],$/;"	m	struct:Port
pins	chips/cc26x2/src/gpio.rs	/^    pins: [GPIOPin; NUM_PINS],$/;"	m	struct:Port
pins	chips/e310x/src/gpio.rs	/^    pins: [GpioPin; 32],$/;"	m	struct:Port
pins	chips/nrf5x/src/gpio.rs	/^    pins: [GPIOPin; 32],$/;"	m	struct:Port
pins	chips/sam4l/src/gpio.rs	/^    pins: [GPIOPin; 32],$/;"	m	struct:Port
pins	chips/tm4c129x/src/gpio.rs	/^    pins: [GPIOPin; 8],$/;"	m	struct:Port
pins_init	capsules/src/led.rs	/^    pins_init: &'a [(&'a G, ActivationMode)],$/;"	m	struct:LED
piosccal	chips/tm4c129x/src/sysctl.rs	/^    piosccal: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pioscstat	chips/tm4c129x/src/sysctl.rs	/^    pioscstat: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pir0	chips/sam4l/src/ast.rs	/^    pir0: ReadWrite<u32, PeriodicInterval::Register>,$/;"	m	struct:AstRegisters
pir1	chips/sam4l/src/ast.rs	/^    pir1: ReadWrite<u32, PeriodicInterval::Register>,$/;"	m	struct:AstRegisters
platform	kernel/src/lib.rs	/^mod platform;$/;"	n
plic	arch/riscv32i/src/lib.rs	/^pub mod plic;$/;"	n
pll0	chips/sam4l/src/scif.rs	/^    pll0: ReadWrite<u32, PllControl::Register>,$/;"	m	struct:ScifRegisters
pllcfg	chips/sifive/src/prci.rs	/^    pllcfg: ReadWrite<u32, pllcfg::Register>,$/;"	m	struct:PrciRegisters
pllfreq0	chips/tm4c129x/src/sysctl.rs	/^    pllfreq0: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pllfreq1	chips/tm4c129x/src/sysctl.rs	/^    pllfreq1: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
plloutdiv	chips/sifive/src/prci.rs	/^    plloutdiv: ReadWrite<u32, plloutdiv::Register>,$/;"	m	struct:PrciRegisters
pllstat	chips/tm4c129x/src/sysctl.rs	/^    pllstat: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pm	chips/sam4l/src/lib.rs	/^pub mod pm;$/;"	n
pmcon	chips/sam4l/src/bpm.rs	/^    pmcon: ReadWrite<u32, PowerModeControl::Register>,$/;"	m	struct:BpmRegisters
pmr0	chips/sam4l/src/gpio.rs	/^    pmr0: Register,$/;"	m	struct:GpioRegisters
pmr1	chips/sam4l/src/gpio.rs	/^    pmr1: Register,$/;"	m	struct:GpioRegisters
pmr2	chips/sam4l/src/gpio.rs	/^    pmr2: Register,$/;"	m	struct:GpioRegisters
poly_for_alg	chips/sam4l/src/crccu.rs	/^fn poly_for_alg(alg: CrcAlg) -> FieldValue<u32, Mode::Register> {$/;"	f
pool	capsules/src/test/rng.rs	/^    pool: Cell<[u32; ELEMENTS]>,$/;"	m	struct:TestEntropy32
pool	capsules/src/test/rng.rs	/^    pool: Cell<[u32; ELEMENTS]>,$/;"	m	struct:TestRng
pool	capsules/src/test/rng.rs	/^    pool: Cell<[u8; ELEMENTS]>,$/;"	m	struct:TestEntropy8
pop_head	kernel/src/common/list.rs	/^    pub fn pop_head(&self) -> Option<&'a T> {$/;"	F	implementation:List
pop_syscall_stack_frame	arch/cortex-m/src/syscall.rs	/^    unsafe fn pop_syscall_stack_frame($/;"	F	implementation:SysCall
pop_syscall_stack_frame	arch/riscv32i/src/syscall.rs	/^    unsafe fn pop_syscall_stack_frame($/;"	F	implementation:SysCall
pop_syscall_stack_frame	kernel/src/process.rs	/^    unsafe fn pop_syscall_stack_frame(&self) {$/;"	F	implementation:Process
pop_syscall_stack_frame	kernel/src/process.rs	/^    unsafe fn pop_syscall_stack_frame(&self);$/;"	F	interface:ProcessType
pop_syscall_stack_frame	kernel/src/syscall.rs	/^    unsafe fn pop_syscall_stack_frame($/;"	F	interface:UserspaceKernelBoundary
port	capsules/src/net/udp/driver.rs	/^    port: u16,$/;"	m	struct:UDPEndpoint
port	chips/sam4l/src/gpio.rs	/^    port: StaticRef<GpioRegisters>,$/;"	m	struct:GPIOPin
port	chips/sam4l/src/gpio.rs	/^    port: StaticRef<GpioRegisters>,$/;"	m	struct:Port
port	chips/sifive/src/gpio.rs	/^    port: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
ports	capsules/src/gpio_async.rs	/^    ports: &'a [&'a Port],$/;"	m	struct:GPIOAsync
pos	capsules/src/aes_ccm.rs	/^    pos: Cell<(usize, usize, usize, usize)>,$/;"	m	struct:AES128CCM
pos	chips/nrf51/src/i2c.rs	/^    pos: Cell<usize>,$/;"	m	struct:TWIM
pos	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:execQuery.checkGenerics.lev
post_process	chips/sam4l/src/crccu.rs	/^fn post_process(result: u32, alg: CrcAlg) -> u32 {$/;"	f
power	boards/imix/src/main.rs	/^mod power;$/;"	n
power	boards/imix/src/power.rs	/^    fn power(&self, state: bool) {$/;"	F	implementation:Submodule
power	chips/nrf51/src/radio.rs	/^    power: ReadWrite<u32, Power::Register>,      \/\/ 0xFFC - 0x1000$/;"	m	struct:RadioRegisters
power	chips/nrf52/src/radio.rs	/^    power: ReadWrite<u32, Task::Register>,$/;"	m	struct:RadioRegisters
power	chips/nrf5x/src/rtc.rs	/^    power: ReadWrite<u32>,$/;"	m	struct:RtcRegisters
power_and_clock	chips/cc26x2/src/i2c.rs	/^    fn power_and_clock(&self) {$/;"	F	implementation:I2CMaster
power_and_clock	chips/cc26x2/src/uart.rs	/^    fn power_and_clock(&self) {$/;"	F	implementation:UART
power_client	capsules/src/rf233.rs	/^    power_client: OptionalCell<&'static radio::PowerClient>,$/;"	m	struct:RF233
power_client_pending	capsules/src/rf233.rs	/^    power_client_pending: Cell<bool>,$/;"	m	struct:RF233
power_scaling_ok	chips/sam4l/src/bpm.rs	/^unsafe fn power_scaling_ok() -> bool {$/;"	f
power_to_setting	capsules/src/rf233.rs	/^fn power_to_setting(power: i8) -> u8 {$/;"	f
pp	chips/tm4c129x/src/gpio.rs	/^    pp: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
pp	chips/tm4c129x/src/gpt.rs	/^    pp: VolatileCell<u32>,$/;"	m	struct:GptRegisters
pp	chips/tm4c129x/src/uart.rs	/^    pp: VolatileCell<u32>,$/;"	m	struct:UartRegisters
ppacmp	chips/tm4c129x/src/sysctl.rs	/^    ppacmp: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppadc	chips/tm4c129x/src/sysctl.rs	/^    ppadc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppcan	chips/tm4c129x/src/sysctl.rs	/^    ppcan: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppccm	chips/tm4c129x/src/sysctl.rs	/^    ppccm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppcr	chips/sam4l/src/pm.rs	/^    ppcr: ReadWrite<u32, PeripheralPowerControl::Register>, \/\/ 0x160$/;"	m	struct:PmRegisters
ppdma	chips/tm4c129x/src/sysctl.rs	/^    ppdma: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppeeprom	chips/tm4c129x/src/sysctl.rs	/^    ppeeprom: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppemac	chips/tm4c129x/src/sysctl.rs	/^    ppemac: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppephy	chips/tm4c129x/src/sysctl.rs	/^    ppephy: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppepi	chips/tm4c129x/src/sysctl.rs	/^    ppepi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppfan	chips/tm4c129x/src/sysctl.rs	/^    ppfan: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppgpio	chips/tm4c129x/src/sysctl.rs	/^    ppgpio: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pphib	chips/tm4c129x/src/sysctl.rs	/^    pphib: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pphim	chips/tm4c129x/src/sysctl.rs	/^    pphim: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppi	chips/nrf52/src/lib.rs	/^pub mod ppi;$/;"	n
ppi2c	chips/tm4c129x/src/sysctl.rs	/^    ppi2c: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pplcd	chips/tm4c129x/src/sysctl.rs	/^    pplcd: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pplpc	chips/tm4c129x/src/sysctl.rs	/^    pplpc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppowire	chips/tm4c129x/src/sysctl.rs	/^    ppowire: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pppeci	chips/tm4c129x/src/sysctl.rs	/^    pppeci: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pppwm	chips/tm4c129x/src/sysctl.rs	/^    pppwm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppqei	chips/tm4c129x/src/sysctl.rs	/^    ppqei: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pprts	chips/tm4c129x/src/sysctl.rs	/^    pprts: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppssi	chips/tm4c129x/src/sysctl.rs	/^    ppssi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pptimer	chips/tm4c129x/src/sysctl.rs	/^    pptimer: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppuart	chips/tm4c129x/src/sysctl.rs	/^    ppuart: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppusb	chips/tm4c129x/src/sysctl.rs	/^    ppusb: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppwd	chips/tm4c129x/src/sysctl.rs	/^    ppwd: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ppwtimer	chips/tm4c129x/src/sysctl.rs	/^    ppwtimer: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pr	chips/sam4l/src/i2c.rs	/^    pr: ReadOnly<u32>,$/;"	m	struct:TWIMRegisters
pr	chips/sam4l/src/i2c.rs	/^    pr: ReadOnly<u32>,$/;"	m	struct:TWISRegisters
pracmp	chips/tm4c129x/src/sysctl.rs	/^    pracmp: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pradc	chips/tm4c129x/src/sysctl.rs	/^    pradc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prcan	chips/tm4c129x/src/sysctl.rs	/^    prcan: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prccm	chips/tm4c129x/src/sysctl.rs	/^    prccm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prci	chips/e310x/src/lib.rs	/^pub mod prci;$/;"	n
prci	chips/sifive/src/lib.rs	/^pub mod prci;$/;"	n
prcm	chips/cc26x2/src/lib.rs	/^pub mod prcm;$/;"	n
prcm_commit	chips/cc26x2/src/prcm.rs	/^fn prcm_commit() {$/;"	f
prdma	chips/tm4c129x/src/sysctl.rs	/^    prdma: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pre	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	s
pre	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	s
pre	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
pre	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
pre.compile_fail	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.compile_fail	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.compile_fail:hover	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.compile_fail:hover	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.ignore	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.ignore	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.ignore:hover	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.ignore:hover	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
pre.rust .attribute	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .attribute	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .attribute .ident	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .attribute .ident	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .bool-val	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .bool-val	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .comment	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .comment	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .doccomment	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .doccomment	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .kw	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .kw	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .kw-2	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .kw-2	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .lifetime	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .lifetime	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .macro	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .macro	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .macro-nonterminal	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .macro-nonterminal	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .number	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .number	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .prelude-ty	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .prelude-ty	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .prelude-val	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .prelude-val	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .question-mark	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .question-mark	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .question-mark	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
pre.rust .self	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .self	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
pre.rust .string	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
pre.rust .string	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
preeprom	chips/tm4c129x/src/sysctl.rs	/^    preeprom: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prefix	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^    pub prefix: [u8; 16],$/;"	m	struct:Context
prefix0	chips/nrf51/src/radio.rs	/^    prefix0: ReadWrite<u32, Prefix0::Register>,  \/\/ 0x524 - 0x528$/;"	m	struct:RadioRegisters
prefix0	chips/nrf52/src/radio.rs	/^    prefix0: ReadWrite<u32, Prefix0::Register>,$/;"	m	struct:RadioRegisters
prefix1	chips/nrf51/src/radio.rs	/^    prefix1: ReadWrite<u32, Prefix1::Register>,  \/\/ 0x528 - 0x52c$/;"	m	struct:RadioRegisters
prefix1	chips/nrf52/src/radio.rs	/^    prefix1: ReadWrite<u32, Prefix1::Register>,$/;"	m	struct:RadioRegisters
prefix_len	capsules/src/net/sixlowpan/sixlowpan_compression.rs	/^    pub prefix_len: u8,$/;"	m	struct:Context
premac	chips/tm4c129x/src/sysctl.rs	/^    premac: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prepare_data_frame	capsules/src/ieee802154/device.rs	/^    fn prepare_data_frame($/;"	F	interface:MacDevice
prepare_data_frame	capsules/src/ieee802154/framer.rs	/^    fn prepare_data_frame($/;"	F	implementation:Framer
prepare_data_frame	capsules/src/ieee802154/virtual_mac.rs	/^    fn prepare_data_frame($/;"	F	implementation:MacUser
prepare_first_fragment	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn prepare_first_fragment<'b>($/;"	F	implementation:TxState
prepare_next_fragment	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn prepare_next_fragment<'b>($/;"	F	implementation:TxState
prepare_transfer	chips/sam4l/src/dma.rs	/^    pub fn prepare_transfer(&self, pid: DMAPeripheral, buf: &'static mut [u8], mut len: usize) {$/;"	F	implementation:DMAChannel
prephy	chips/tm4c129x/src/sysctl.rs	/^    prephy: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prepi	chips/tm4c129x/src/sysctl.rs	/^    prepi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prescaler	chips/nrf5x/src/rtc.rs	/^    prescaler: ReadWrite<u32, Prescaler::Register>,$/;"	m	struct:RtcRegisters
prescaler	chips/nrf5x/src/timer.rs	/^    prescaler: ReadWrite<u32>,$/;"	m	struct:TimerRegisters
presentation.pdf	doc/courses/2018-11-SenSys/presentation/Makefile	/^presentation.pdf: slides.md$/;"	t
prev	capsules/src/alarm.rs	/^    prev: Cell<u32>,$/;"	m	struct:AlarmDriver
prev	capsules/src/virtual_alarm.rs	/^    prev: Cell<u32>,$/;"	m	struct:MuxAlarm
prgpio	chips/tm4c129x/src/sysctl.rs	/^    prgpio: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prhib	chips/tm4c129x/src/sysctl.rs	/^    prhib: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pri2c	chips/tm4c129x/src/sysctl.rs	/^    pri2c: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
printTab	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
priority	arch/riscv32i/src/plic.rs	/^    priority: [ReadWrite<u32, priority::Register>; 132],$/;"	m	struct:PlicRegisters
process	kernel/src/lib.rs	/^mod process;$/;"	n
process	kernel/src/mem.rs	/^    process: AppId,$/;"	m	struct:AppPtr
process_alarm_states	capsules/src/sdcard.rs	/^    fn process_alarm_states(&self) {$/;"	F	implementation:SDCard
process_console	boards/imix/src/components/mod.rs	/^pub mod process_console;$/;"	n
process_console	boards/imix/src/components/process_console.rs	/^        &'static process_console::ProcessConsole<'static, UartDevice<'static>, Capability>;$/;"	v	implementation:ProcessConsoleComponent
process_console	capsules/src/lib.rs	/^pub mod process_console;$/;"	n
process_detail_fmt	arch/cortex-m/src/syscall.rs	/^    unsafe fn process_detail_fmt($/;"	F	implementation:SysCall
process_detail_fmt	arch/riscv32i/src/syscall.rs	/^    unsafe fn process_detail_fmt($/;"	F	implementation:SysCall
process_detail_fmt	kernel/src/process.rs	/^    unsafe fn process_detail_fmt(&self, writer: &mut Write) {$/;"	F	implementation:Process
process_detail_fmt	kernel/src/process.rs	/^    unsafe fn process_detail_fmt(&self, writer: &mut Write);$/;"	F	interface:ProcessType
process_detail_fmt	kernel/src/syscall.rs	/^    unsafe fn process_detail_fmt($/;"	F	interface:UserspaceKernelBoundary
process_each	kernel/src/sched.rs	/^    crate fn process_each<F>(&self, closure: F)$/;"	F	implementation:Kernel
process_each_capability	kernel/src/sched.rs	/^    pub fn process_each_capability<F>($/;"	F	implementation:Kernel
process_map_or	kernel/src/sched.rs	/^    crate fn process_map_or<F, R>(&self, default: R, process_index: usize, closure: F) -> R$/;"	F	implementation:Kernel
process_name	kernel/src/introspection.rs	/^    pub fn process_name($/;"	F	implementation:KernelInfo
process_name	kernel/src/process.rs	/^    process_name: &'static str,$/;"	m	struct:Process
process_spi_states	capsules/src/sdcard.rs	/^    fn process_spi_states($/;"	F	implementation:SDCard
process_status	capsules/src/ble_advertising_driver.rs	/^    process_status: Option<BLEState>,$/;"	m	struct:App
process_until	kernel/src/sched.rs	/^    crate fn process_until<F>(&self, closure: F) -> ReturnCode$/;"	F	implementation:Kernel
processes	kernel/src/sched.rs	/^    processes: &'static [Option<&'static process::ProcessType>],$/;"	m	struct:Kernel
processes_blocked	kernel/src/sched.rs	/^    fn processes_blocked(&self) -> bool {$/;"	F	implementation:Kernel
procs	kernel/src/lib.rs	/^pub mod procs {$/;"	n
product_id	capsules/src/usb.rs	/^    pub product_id: u16,$/;"	m	struct:DeviceDescriptor
product_string	capsules/src/usb.rs	/^    pub product_string: u8,$/;"	m	struct:DeviceDescriptor
profile	arch/riscv32i/target/debug/.fingerprint/bare-metal-24acc5d3590b7513/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0./;"	n
profile	arch/riscv32i/target/debug/.fingerprint/bare-metal-7dd6462cd7700cd7/lib-bare_metal-7dd6462cd7700cd7.json	/^{"rustc":10377385455325587324,"features":"[]","target":10318145944003877215,"profile":1187018370/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/bit_field-56ae9b63ca7874f1/lib-bit_field-56ae9b63ca7874f1.json	/^{"rustc":10377385455325587324,"features":"[]","target":6212214415640514931,"profile":11870183705/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/riscvregs-0c285ab8bbe41fa7/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"db/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/riscvregs-126b22abd70e245c/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0e/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/riscvregs-7b5528c14e2c7055/build-script-build_script_build-7b5528c14e2c7055.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/riscvregs-d6ebf6a6021a8976/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"78/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/riscvregs-e220008a48c83b01/build-script-build_script_build-e220008a48c83b01.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/riscvregs-e3787b41749bb5b0/build-script-build_script_build-e3787b41749bb5b0.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/semver-parser-1d01b4b0efb84ec1/lib-semver_parser-1d01b4b0efb84ec1.json	/^{"rustc":10377385455325587324,"features":"[]","target":11042536386261824010,"profile":1187018370/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	n
profile	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	n
profile	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n
profile	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	n
profile	boards/hifive1/target/debug/.fingerprint/riscvregs-8a1ccaee318cf981/build-script-build_script_build-8a1ccaee318cf981.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n
profile	boards/hifive1/target/debug/.fingerprint/riscvregs-e5cf2a660cb8088f/build-script-build_script_build-e5cf2a660cb8088f.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n
profile	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	n
profile	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	n
profile	boards/hifive1/target/debug/.fingerprint/semver-parser-0cbc1426a8cfeede/lib-semver_parser-0cbc1426a8cfeede.json	/^{"rustc":4168008693276420879,"features":"[]","target":3650675185119913205,"profile":118386650091/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-3818320f62d4b526/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-5a31f60d1aed50ae/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-90db6ed0e5b8c3d4/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	n
profile	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	n
profile	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	n
profile	kernel/target/debug/.fingerprint/tock-cells-816571e4fa975f6b/doc-lib-tock_cells-816571e4fa975f6b.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":3062756892/;"	n
profile	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	n
profile	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	n
profile	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	n
profile	kernel/target/debug/.fingerprint/tock-registers-e7eec879e9fa92db/doc-lib-tock_registers-e7eec879e9fa92db.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":30627568924/;"	n
profile	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	n
program	boards/ek-tm4c1294xl/Makefile	/^program: target\/$(TARGET)\/release\/$(PLATFORM).hex$/;"	t
program	boards/hail/Makefile	/^program: target\/$(TARGET)\/release\/$(PLATFORM).bin$/;"	t
program	boards/imix/Makefile	/^program: target\/$(TARGET)\/release\/$(PLATFORM).bin$/;"	t
program	boards/nordic/nrf51dk/Makefile	/^program: target\/$(TARGET)\/release\/$(PLATFORM).hex$/;"	t
program	boards/nordic/nrf52840dk/Makefile	/^program: target\/$(TARGET)\/release\/$(PLATFORM).hex$/;"	t
program	boards/nordic/nrf52dk/Makefile	/^program: target\/$(TARGET)\/release\/$(PLATFORM).hex$/;"	t
progress	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
protected_size	kernel/src/tbfheader.rs	/^    protected_size: u32,$/;"	m	struct:TbfHeaderV2Main
protocol	capsules/src/usb.rs	/^    pub protocol: u8,$/;"	m	struct:DeviceDescriptor
protocol_state	capsules/src/tmp006.rs	/^    protocol_state: Cell<ProtocolState>,$/;"	m	struct:TMP006
provide_buffer	chips/sam4l/src/adc.rs	/^    fn provide_buffer($/;"	F	implementation:Adc
provide_buffer	kernel/src/hil/adc.rs	/^    fn provide_buffer($/;"	F	interface:AdcHighSpeed
prpwm	chips/tm4c129x/src/sysctl.rs	/^    prpwm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prqei	chips/tm4c129x/src/sysctl.rs	/^    prqei: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prssi	chips/tm4c129x/src/sysctl.rs	/^    prssi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prtimer	chips/tm4c129x/src/sysctl.rs	/^    prtimer: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
pruart	chips/tm4c129x/src/sysctl.rs	/^    pruart: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prusb	chips/tm4c129x/src/sysctl.rs	/^    prusb: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
prwd	chips/tm4c129x/src/sysctl.rs	/^    prwd: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
psel_miso	chips/nrf52/src/spi.rs	/^    psel_miso: VolatileCell<Pinmux>,                 \/\/ Pin select for MISO signal$/;"	m	struct:SpimRegisters
psel_mosi	chips/nrf52/src/spi.rs	/^    psel_mosi: VolatileCell<Pinmux>,                 \/\/ Pin select for MOSI signal$/;"	m	struct:SpimRegisters
psel_sck	chips/nrf52/src/spi.rs	/^    psel_sck: VolatileCell<Pinmux>,                  \/\/ Pin select for SCK$/;"	m	struct:SpimRegisters
psel_scl	chips/nrf51/src/i2c.rs	/^    psel_scl: ReadWrite<u32, Psel::Register>,$/;"	m	struct:TwimRegisters
psel_scl	chips/nrf52/src/i2c.rs	/^    psel_scl: VolatileCell<Pinmux>,$/;"	m	struct:TwimRegisters
psel_sda	chips/nrf51/src/i2c.rs	/^    psel_sda: ReadWrite<u32, Psel::Register>,$/;"	m	struct:TwimRegisters
psel_sda	chips/nrf52/src/i2c.rs	/^    psel_sda: VolatileCell<Pinmux>,$/;"	m	struct:TwimRegisters
pselcts	chips/nrf51/src/uart.rs	/^    pselcts: ReadWrite<u32, Psel::Register>, \/\/........ 0x510$/;"	m	struct:UartRegisters
pselcts	chips/nrf52/src/uart.rs	/^    pselcts: ReadWrite<u32, Psel::Register>,$/;"	m	struct:UarteRegisters
pseln	chips/nrf52/src/adc.rs	/^    pseln: ReadWrite<u32, PSEL::Register>,$/;"	m	struct:AdcChRegisters
pselp	chips/nrf52/src/adc.rs	/^    pselp: ReadWrite<u32, PSEL::Register>,$/;"	m	struct:AdcChRegisters
pselreset0	chips/nrf52/src/uicr.rs	/^    pselreset0: ReadWrite<u32, Pselreset::Register>,$/;"	m	struct:UicrRegisters
pselreset1	chips/nrf52/src/uicr.rs	/^    pselreset1: ReadWrite<u32, Pselreset::Register>,$/;"	m	struct:UicrRegisters
pselrts	chips/nrf51/src/uart.rs	/^    pselrts: ReadWrite<u32, Psel::Register>, \/\/........ 0x508$/;"	m	struct:UartRegisters
pselrts	chips/nrf52/src/uart.rs	/^    pselrts: ReadWrite<u32, Psel::Register>,$/;"	m	struct:UarteRegisters
pselrxd	chips/nrf51/src/uart.rs	/^    pselrxd: ReadWrite<u32, Psel::Register>, \/\/........ 0x514$/;"	m	struct:UartRegisters
pselrxd	chips/nrf52/src/uart.rs	/^    pselrxd: ReadWrite<u32, Psel::Register>,$/;"	m	struct:UarteRegisters
pseltxd	chips/nrf51/src/uart.rs	/^    pseltxd: ReadWrite<u32, Psel::Register>, \/\/........ 0x50c$/;"	m	struct:UartRegisters
pseltxd	chips/nrf52/src/uart.rs	/^    pseltxd: ReadWrite<u32, Psel::Register>,$/;"	m	struct:UarteRegisters
psr	arch/cortex-m/src/syscall.rs	/^    psr: usize,$/;"	m	struct:CortexMStoredState
psr	chips/sam4l/src/dma.rs	/^    psr: VolatileCell<DMAPeripheral>,$/;"	m	struct:DMARegisters
ptboctl	chips/tm4c129x/src/sysctl.rs	/^    ptboctl: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ptr	kernel/src/common/static_ref.rs	/^    ptr: *const T,$/;"	m	struct:StaticRef
ptr	kernel/src/grant.rs	/^    ptr: PhantomData<T>,$/;"	m	struct:Grant
ptr	kernel/src/mem.rs	/^    ptr: AppPtr<L, T>,$/;"	m	struct:AppSlice
ptr	kernel/src/mem.rs	/^    ptr: Unique<T>,$/;"	m	struct:AppPtr
ptr	kernel/src/mem.rs	/^    pub fn ptr(&self) -> *const T {$/;"	F	implementation:AppSlice
publish_str	kernel/src/debug.rs	/^    fn publish_str(&self) {$/;"	F	implementation:DebugWriter
publish_str	kernel/src/debug.rs	/^    fn publish_str(&self) {$/;"	F	implementation:DebugWriterWrapper
puer	chips/sam4l/src/gpio.rs	/^    puer: Register,$/;"	m	struct:GpioRegisters
pullup	chips/sifive/src/gpio.rs	/^    pullup: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
pur	chips/tm4c129x/src/gpio.rs	/^    pur: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
push_function_call	arch/cortex-m/src/syscall.rs	/^    unsafe fn push_function_call($/;"	F	implementation:SysCall
push_function_call	arch/riscv32i/src/syscall.rs	/^    unsafe fn push_function_call($/;"	F	implementation:SysCall
push_function_call	kernel/src/process.rs	/^    unsafe fn push_function_call(&self, callback: FunctionCall) {$/;"	F	implementation:Process
push_function_call	kernel/src/process.rs	/^    unsafe fn push_function_call(&self, callback: FunctionCall);$/;"	F	interface:ProcessType
push_function_call	kernel/src/syscall.rs	/^    unsafe fn push_function_call($/;"	F	interface:UserspaceKernelBoundary
push_head	kernel/src/common/list.rs	/^    pub fn push_head(&self, node: &'a T) {$/;"	F	implementation:List
push_tail	kernel/src/common/list.rs	/^    pub fn push_tail(&self, node: &'a T) {$/;"	F	implementation:List
put	libraries/tock-cells/src/map_cell.rs	/^    pub fn put(&self, val: T) {$/;"	F	implementation:MapCell
put	libraries/tock-cells/src/take_cell.rs	/^    pub fn put(&self, val: Option<&'a mut T>) {$/;"	F	implementation:TakeCell
putBackSearch	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
put_u16	capsules/src/usb.rs	/^fn put_u16<'a>(buf: &'a [Cell<u8>], n: u16) {$/;"	f
pvr	chips/sam4l/src/gpio.rs	/^    pvr: ReadOnly<u32>,$/;"	m	struct:GpioRegisters
pwm	chips/arty_exx/src/lib.rs	/^pub mod pwm;$/;"	n
pwm	chips/e310x/src/lib.rs	/^pub mod pwm;$/;"	n
pwm	chips/sifive/src/lib.rs	/^pub mod pwm;$/;"	n
pwms	chips/sifive/src/pwm.rs	/^    pwms: ReadWrite<u32>,$/;"	m	struct:PwmRegisters
pwr_ctl	chips/cc26x2/src/aon.rs	/^    pwr_ctl: ReadWrite<u32, PwrCtl::Register>,$/;"	m	struct:AonPmCtlRegisters
pwr_stat	chips/cc26x2/src/aon.rs	/^    pwr_stat: ReadOnly<u32, PwrStat::Register>,$/;"	m	struct:AonPmCtlRegisters
pwrtc	chips/tm4c129x/src/sysctl.rs	/^    pwrtc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
queue	kernel/src/common/mod.rs	/^mod queue;$/;"	n
quick_user_page_read	chips/sam4l/src/flashcalw.rs	/^    fn quick_user_page_read(&self) -> bool {$/;"	F	implementation:FLASHCALW
r_border_router_16	capsules/src/net/thread/tlv.rs	/^    r_border_router_16: u16,$/;"	m	struct:HasRouteTlvValue
r_preference	capsules/src/net/thread/tlv.rs	/^    r_preference: u8,$/;"	m	struct:HasRouteTlvValue
ra	arch/riscv32i/src/lib.rs	/^    ra: u32,$/;"	m	struct:StackFrame
radio	boards/imix/src/components/mod.rs	/^pub mod radio;$/;"	n
radio	boards/imix/src/ipv6_lowpan_test.rs	/^    radio: &'a MacDevice<'a>,$/;"	m	struct:LowpanTest
radio	boards/imix/src/sixlowpan_dummy.rs	/^    radio: &'a R,$/;"	m	struct:LowpanTest
radio	capsules/src/ble_advertising_driver.rs	/^    radio: &'a B,$/;"	m	struct:BLE
radio	capsules/src/ieee802154/mac.rs	/^    radio: &'a R,$/;"	m	struct:AwakeMac
radio	capsules/src/ieee802154/xmac.rs	/^    radio: &'a R,$/;"	m	struct:XMac
radio	capsules/src/net/ipv6/ipv6_send.rs	/^    radio: &'a MacDevice<'a>,$/;"	m	struct:IP6SendStruct
radio	chips/nrf51/src/lib.rs	/^pub mod radio;$/;"	n
radio	chips/nrf52/src/lib.rs	/^pub mod radio;$/;"	n
radio	kernel/src/hil/mod.rs	/^pub mod radio;$/;"	n
radio_driver	boards/imix/src/main.rs	/^    radio_driver: &'static capsules::ieee802154::RadioDriver<'static>,$/;"	m	struct:Imix
radio_off	chips/nrf51/src/radio.rs	/^    fn radio_off(&self) {$/;"	F	implementation:Radio
radio_off	chips/nrf52/src/radio.rs	/^    fn radio_off(&self) {$/;"	F	implementation:Radio
radio_on	capsules/src/rf233.rs	/^    radio_on: Cell<bool>,$/;"	m	struct:RF233
radio_on	chips/nrf51/src/radio.rs	/^    fn radio_on(&self) {$/;"	F	implementation:Radio
radio_on	chips/nrf52/src/radio.rs	/^    fn radio_on(&self) {$/;"	F	implementation:Radio
ram	chips/nrf52/src/ficr.rs	/^    fn ram(&self) -> Ram {$/;"	F	implementation:Ficr
ram_cfg	chips/cc26x2/src/aon.rs	/^    ram_cfg: ReadWrite<u32, RamCfg::Register>,$/;"	m	struct:AonPmCtlRegisters
random	capsules/src/rng.rs	/^    fn random(&self) -> u32 {$/;"	F	implementation:SynchronousRandom
random	capsules/src/test/rng.rs	/^    random: &'a rng::Random<'a>,$/;"	m	struct:TestRandom
random	kernel/src/hil/rng.rs	/^    fn random(&self) -> u32;$/;"	F	interface:Random
random_nonce	capsules/src/ble_advertising_driver.rs	/^    fn random_nonce(&mut self) -> u32 {$/;"	F	implementation:App
random_nonce	capsules/src/ble_advertising_driver.rs	/^    random_nonce: u32,$/;"	m	struct:App
randomness	chips/nrf5x/src/trng.rs	/^    randomness: Cell<u32>,$/;"	m	struct:Trng
randomness_available	capsules/src/ieee802154/xmac.rs	/^    fn randomness_available($/;"	F	implementation:XMac
randomness_available	capsules/src/rng.rs	/^    fn randomness_available($/;"	F	implementation:RngDriver
randomness_available	capsules/src/rng.rs	/^    fn randomness_available($/;"	F	implementation:SynchronousRandom
randomness_available	capsules/src/test/rng.rs	/^    fn randomness_available($/;"	F	implementation:TestRng
randomness_available	kernel/src/hil/rng.rs	/^    fn randomness_available($/;"	F	interface:Client
rasr	arch/cortex-m/src/mpu.rs	/^    pub rasr: ReadWrite<u32, RegionAttributes::Register>,$/;"	m	struct:MpuRegisters
rbar	arch/cortex-m/src/mpu.rs	/^    pub rbar: ReadWrite<u32, RegionBaseAddress::Register>,$/;"	m	struct:MpuRegisters
rc1mcr	chips/sam4l/src/bscif.rs	/^    rc1mcr: ReadWrite<u32, RC1MClockConfig::Register>,$/;"	m	struct:BscifRegisters
rc32k_enabled	chips/sam4l/src/bscif.rs	/^pub fn rc32k_enabled() -> bool {$/;"	f
rc32kcr	chips/sam4l/src/bscif.rs	/^    rc32kcr: ReadWrite<u32, RC32Control::Register>,$/;"	m	struct:BscifRegisters
rc32ktune	chips/sam4l/src/bscif.rs	/^    rc32ktune: ReadWrite<u32, RC32kTuning::Register>,$/;"	m	struct:BscifRegisters
rc80mcr	chips/sam4l/src/scif.rs	/^    rc80mcr: ReadWrite<u32, Rc80m::Register>,$/;"	m	struct:ScifRegisters
rcause	chips/sam4l/src/pm.rs	/^    rcause: ReadOnly<u32, ResetCause::Register>, \/\/ 0x180$/;"	m	struct:PmRegisters
rccr	chips/sam4l/src/scif.rs	/^    rccr: ReadWrite<u32>,$/;"	m	struct:ScifRegisters
rcfastcfg	chips/sam4l/src/scif.rs	/^    rcfastcfg: ReadWrite<u32, Rcfast::Register>,$/;"	m	struct:ScifRegisters
rcfastsr	chips/sam4l/src/scif.rs	/^    rcfastsr: ReadOnly<u32>,$/;"	m	struct:ScifRegisters
rcgcacmp	chips/tm4c129x/src/sysctl.rs	/^    rcgcacmp: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcadc	chips/tm4c129x/src/sysctl.rs	/^    rcgcadc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgccan	chips/tm4c129x/src/sysctl.rs	/^    rcgccan: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcccm	chips/tm4c129x/src/sysctl.rs	/^    rcgcccm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcdma	chips/tm4c129x/src/sysctl.rs	/^    rcgcdma: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgceeprom	chips/tm4c129x/src/sysctl.rs	/^    rcgceeprom: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcemac	chips/tm4c129x/src/sysctl.rs	/^    rcgcemac: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcephy	chips/tm4c129x/src/sysctl.rs	/^    rcgcephy: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcepi	chips/tm4c129x/src/sysctl.rs	/^    rcgcepi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcgpio	chips/tm4c129x/src/sysctl.rs	/^    rcgcgpio: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgchib	chips/tm4c129x/src/sysctl.rs	/^    rcgchib: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgci2c	chips/tm4c129x/src/sysctl.rs	/^    rcgci2c: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcpwm	chips/tm4c129x/src/sysctl.rs	/^    rcgcpwm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcqei	chips/tm4c129x/src/sysctl.rs	/^    rcgcqei: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcssi	chips/tm4c129x/src/sysctl.rs	/^    rcgcssi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgctimer	chips/tm4c129x/src/sysctl.rs	/^    rcgctimer: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcuart	chips/tm4c129x/src/sysctl.rs	/^    rcgcuart: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcusb	chips/tm4c129x/src/sysctl.rs	/^    rcgcusb: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rcgcwd	chips/tm4c129x/src/sysctl.rs	/^    rcgcwd: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rdr	chips/sam4l/src/spi.rs	/^    pub mod rdr {$/;"	n	module:spi_consts
rdr	chips/sam4l/src/spi.rs	/^    rdr: ReadOnly<u32>,$/;"	m	struct:SpiRegisters
read	capsules/src/fm25cl.rs	/^    fn read(&self, buffer: &'static mut [u8], address: usize, length: usize) -> ReturnCode {$/;"	F	implementation:FM25CL
read	capsules/src/fm25cl.rs	/^    fn read(&self, data: &'static mut [u8], len: usize);$/;"	F	interface:FM25CLClient
read	capsules/src/fm25cl.rs	/^    pub fn read(&self, address: u16, buffer: &'static mut [u8], len: u16) -> ReturnCode {$/;"	F	implementation:FM25CL
read	capsules/src/mcp230xx.rs	/^    fn read(&self, pin: usize) -> ReturnCode {$/;"	F	implementation:MCP230xx
read	capsules/src/nonvolatile_storage_driver.rs	/^    fn read(&self, buffer: &'static mut [u8], address: usize, length: usize) -> ReturnCode {$/;"	F	implementation:NonvolatileStorage
read	capsules/src/nonvolatile_to_pages.rs	/^    fn read(&self, buffer: &'static mut [u8], address: usize, length: usize) -> ReturnCode {$/;"	F	implementation:NonvolatileToPages
read	capsules/src/virtual_i2c.rs	/^    fn read(&self, buffer: &'static mut [u8], len: u8) {$/;"	F	implementation:I2CDevice
read	chips/cc26x2/src/gpio.rs	/^    fn read(&self) -> bool {$/;"	F	implementation:GPIOPin
read	chips/cc26x2/src/i2c.rs	/^    fn read(&self, addr: u8, buffer: &'static mut [u8], len: u8) {$/;"	F	implementation:I2CMaster
read	chips/nrf51/src/i2c.rs	/^    fn read(&self, addr: u8, buffer: &'static mut [u8], len: u8) {$/;"	F	implementation:TWIM
read	chips/nrf52/src/i2c.rs	/^    fn read(&self, addr: u8, buffer: &'static mut [u8], len: u8) {$/;"	F	implementation:TWIM
read	chips/nrf5x/src/gpio.rs	/^    fn read(&self) -> bool {$/;"	F	implementation:GPIOPin
read	chips/sam4l/src/gpio.rs	/^    fn read(&self) -> bool {$/;"	F	implementation:GPIOPin
read	chips/sam4l/src/gpio.rs	/^    pub fn read(&self) -> bool {$/;"	F	implementation:GPIOPin
read	chips/sam4l/src/i2c.rs	/^    fn read($/;"	F	implementation:I2CHw
read	chips/sam4l/src/i2c.rs	/^    fn read(&self, addr: u8, data: &'static mut [u8], len: u8) {$/;"	F	implementation:I2CHw
read	chips/sifive/src/gpio.rs	/^    fn read(&self) -> bool {$/;"	F	implementation:GpioPin
read	chips/tm4c129x/src/gpio.rs	/^    fn read(&self) -> bool {$/;"	F	implementation:GPIOPin
read	chips/tm4c129x/src/gpio.rs	/^    pub fn read(&self) -> bool {$/;"	F	implementation:GPIOPin
read	kernel/src/hil/gpio.rs	/^    fn read(&self) -> bool;$/;"	F	interface:Pin
read	kernel/src/hil/gpio_async.rs	/^    fn read(&self, pin: usize) -> ReturnCode;$/;"	F	interface:Port
read	kernel/src/hil/i2c.rs	/^    fn read(&self, addr: u8, buffer: &'static mut [u8], len: u8);$/;"	F	interface:I2CMaster
read	kernel/src/hil/i2c.rs	/^    fn read(&self, buffer: &'static mut [u8], len: u8);$/;"	F	interface:I2CDevice
read	kernel/src/hil/led.rs	/^    fn read(&self) -> bool {$/;"	F	implementation:LedHigh
read	kernel/src/hil/led.rs	/^    fn read(&self) -> bool {$/;"	F	implementation:LedLow
read	kernel/src/hil/led.rs	/^    fn read(&self) -> bool;$/;"	F	interface:Led
read	kernel/src/hil/nonvolatile_storage.rs	/^    fn read(&self, buffer: &'static mut [u8], address: usize, length: usize) -> ReturnCode;$/;"	F	interface:NonvolatileStorage
read	libraries/tock-register-interface/src/registers.rs	/^    pub fn read(&self, field: Field<T, R>) -> T {$/;"	F	implementation:LocalRegisterCopy
read	libraries/tock-register-interface/src/registers.rs	/^    pub fn read(&self, field: Field<T, R>) -> T {$/;"	F	implementation:ReadOnly
read	libraries/tock-register-interface/src/registers.rs	/^    pub fn read(&self, field: Field<T, R>) -> T {$/;"	F	implementation:ReadWrite
read_accelerometer	capsules/src/fxos8700cq.rs	/^    fn read_accelerometer(&self) -> ReturnCode {$/;"	F	implementation:Fxos8700cq
read_accelerometer	kernel/src/hil/ninedof.rs	/^    fn read_accelerometer(&self) -> ReturnCode {$/;"	F	interface:NineDof
read_accelerometer	kernel/src/hil/sensors.rs	/^    fn read_accelerometer(&self) -> ReturnCode {$/;"	F	interface:NineDof
read_as_enum	libraries/tock-register-interface/src/registers.rs	/^    pub fn read_as_enum<E: TryFromValue<T, EnumType = E>>(&self, field: Field<T, R>) -> Option<E/;"	F	implementation:LocalRegisterCopy
read_as_enum	libraries/tock-register-interface/src/registers.rs	/^    pub fn read_as_enum<E: TryFromValue<T, EnumType = E>>(&self, field: Field<T, R>) -> Option<E/;"	F	implementation:ReadOnly
read_as_enum	libraries/tock-register-interface/src/registers.rs	/^    pub fn read_as_enum<E: TryFromValue<T, EnumType = E>>(&self, field: Field<T, R>) -> Option<E/;"	F	implementation:ReadWrite
read_block	chips/sam4l/src/aes.rs	/^    fn read_block(&self) -> bool {$/;"	F	implementation:Aes
read_blocks	capsules/src/sdcard.rs	/^    pub fn read_blocks(&self, buffer: &'static mut [u8], sector: u32, count: u32) -> ReturnCode /;"	F	implementation:SDCard
read_buffer	capsules/src/console.rs	/^    read_buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
read_buffer	capsules/src/sdcard.rs	/^    read_buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
read_byte	chips/cc26x2/src/i2c.rs	/^    fn read_byte(&self, first: bool, last: bool) {$/;"	F	implementation:I2CMaster
read_byte	chips/cc26x2/src/uart.rs	/^    pub fn read_byte(&self) -> u8 {$/;"	F	implementation:UART
read_byte	chips/nrf52/src/spi.rs	/^    fn read_byte(&self) -> u8 {$/;"	F	implementation:SPIM
read_byte	chips/sam4l/src/spi.rs	/^    fn read_byte(&self) -> u8 {$/;"	F	implementation:SpiHw
read_byte	chips/sam4l/src/usart.rs	/^    fn read_byte(&self) -> u8 {$/;"	F	implementation:USART
read_byte	kernel/src/hil/spi.rs	/^    fn read_byte(&self) -> u8;$/;"	F	interface:SpiMaster
read_bytes	capsules/src/sdcard.rs	/^    fn read_bytes($/;"	F	implementation:SDCard
read_callback	capsules/src/console.rs	/^    read_callback: Option<Callback>,$/;"	m	struct:App
read_command	capsules/src/process_console.rs	/^    fn read_command(&self) {$/;"	F	implementation:ProcessConsole
read_complete	capsules/src/nonvolatile_to_pages.rs	/^    fn read_complete(&self, pagebuffer: &'static mut F::Page, _error: hil::flash::Error) {$/;"	F	implementation:NonvolatileToPages
read_complete	capsules/src/virtual_flash.rs	/^    fn read_complete(&self, pagebuffer: &'static mut F::Page, error: hil::flash::Error) {$/;"	F	implementation:FlashUser
read_complete	capsules/src/virtual_flash.rs	/^    fn read_complete(&self, pagebuffer: &'static mut F::Page, error: hil::flash::Error) {$/;"	F	implementation:MuxFlash
read_complete	kernel/src/hil/flash.rs	/^    fn read_complete(&self, read_buffer: &'static mut F::Page, error: Error);$/;"	F	interface:Client
read_control	capsules/src/pca9544a.rs	/^    fn read_control(&self, field: ControlField) -> ReturnCode {$/;"	F	implementation:PCA9544A
read_counter	chips/cc26x2/src/rtc.rs	/^    fn read_counter(&self) -> u32 {$/;"	F	implementation:Rtc
read_done	capsules/src/app_flash_driver.rs	/^    fn read_done(&self, _buffer: &'static mut [u8], _length: usize) {}$/;"	F	implementation:AppFlash
read_done	capsules/src/nonvolatile_storage_driver.rs	/^    fn read_done(&self, buffer: &'static mut [u8], length: usize) {$/;"	F	implementation:NonvolatileStorage
read_done	capsules/src/sdcard.rs	/^    fn read_done(&self, data: &'static mut [u8], len: usize) {$/;"	F	implementation:SDCardDriver
read_done	capsules/src/sdcard.rs	/^    fn read_done(&self, data: &'static mut [u8], len: usize);$/;"	F	interface:SDCardClient
read_done	kernel/src/hil/nonvolatile_storage.rs	/^    fn read_done(&self, buffer: &'static mut [u8], length: usize);$/;"	F	interface:NonvolatileStorageClient
read_done	tools/usb/bulk-echo-fast/main.c	/^void LIBUSB_CALL read_done(struct libusb_transfer *transfer) {$/;"	f	typeref:typename:void LIBUSB_CALL
read_expected	capsules/src/i2c_master_slave_driver.rs	/^    fn read_expected(&self) {$/;"	F	implementation:I2CMasterSlaveDriver
read_expected	kernel/src/hil/i2c.rs	/^    fn read_expected(&self);$/;"	F	interface:I2CHwSlaveClient
read_gyroscope	kernel/src/hil/ninedof.rs	/^    fn read_gyroscope(&self) -> ReturnCode {$/;"	F	interface:NineDof
read_gyroscope	kernel/src/hil/sensors.rs	/^    fn read_gyroscope(&self) -> ReturnCode {$/;"	F	interface:NineDof
read_humidity	capsules/src/si7021.rs	/^    fn read_humidity(&self) -> kernel::ReturnCode {$/;"	F	implementation:SI7021
read_humidity	kernel/src/hil/sensors.rs	/^    fn read_humidity(&self) -> ReturnCode;$/;"	F	interface:HumidityDriver
read_id	capsules/src/si7021.rs	/^    pub fn read_id(&self) {$/;"	F	implementation:SI7021
read_id	capsules/src/tsl2561.rs	/^    pub fn read_id(&self) {$/;"	F	implementation:TSL2561
read_identification	capsules/src/mx25r6435f.rs	/^    pub fn read_identification(&self) -> ReturnCode {$/;"	F	implementation:MX25R6435F
read_index	chips/sam4l/src/aes.rs	/^    read_index: Cell<usize>,$/;"	m	struct:Aes
read_input	tools/usb/bulk-echo-fast/main.c	/^static size_t read_input(void) {$/;"	f	typeref:typename:size_t	file:
read_interrupts	capsules/src/pca9544a.rs	/^    fn read_interrupts(&self) -> ReturnCode {$/;"	F	implementation:PCA9544A
read_len	capsules/src/console.rs	/^    read_len: usize,$/;"	m	struct:App
read_len	capsules/src/i2c_master.rs	/^    read_len: OptionalCell<usize>,$/;"	m	struct:Transaction
read_light_intensity	capsules/src/isl29035.rs	/^    fn read_light_intensity(&self) -> ReturnCode {$/;"	F	implementation:Isl29035
read_light_intensity	kernel/src/hil/sensors.rs	/^    fn read_light_intensity(&self) -> ReturnCode {$/;"	F	interface:AmbientLight
read_magnetometer	capsules/src/fxos8700cq.rs	/^    fn read_magnetometer(&self) -> ReturnCode {$/;"	F	implementation:Fxos8700cq
read_magnetometer	kernel/src/hil/ninedof.rs	/^    fn read_magnetometer(&self) -> ReturnCode {$/;"	F	interface:NineDof
read_magnetometer	kernel/src/hil/sensors.rs	/^    fn read_magnetometer(&self) -> ReturnCode {$/;"	F	interface:NineDof
read_number_blocking	chips/cc26x2/src/trng.rs	/^    pub fn read_number_blocking(&self) -> u64 {$/;"	F	implementation:Trng
read_page	capsules/src/mx25r6435f.rs	/^    fn read_page(&self, page_number: usize, buf: &'static mut Self::Page) -> ReturnCode {$/;"	F	implementation:MX25R6435F
read_page	capsules/src/virtual_flash.rs	/^    fn read_page(&self, page_number: usize, buf: &'static mut Self::Page) -> ReturnCode {$/;"	F	implementation:FlashUser
read_page	chips/nrf52/src/nvmc.rs	/^    fn read_page(&self, page_number: usize, buf: &'static mut Self::Page) -> ReturnCode {$/;"	F	implementation:Nvmc
read_page	chips/sam4l/src/flashcalw.rs	/^    fn read_page(&self, page_number: usize, buf: &'static mut Self::Page) -> ReturnCode {$/;"	F	implementation:FLASHCALW
read_page	kernel/src/hil/flash.rs	/^    fn read_page(&self, page_number: usize, buf: &'static mut Self::Page) -> ReturnCode;$/;"	F	interface:Flash
read_pin	capsules/src/mcp230xx.rs	/^    fn read_pin(&self, pin_number: u8) -> ReturnCode {$/;"	F	implementation:MCP230xx
read_position	capsules/src/segger_rtt.rs	/^    read_position: u32,$/;"	m	struct:SeggerRttBuffer
read_range	chips/nrf52/src/nvmc.rs	/^    fn read_range(&self, page_number: usize, buffer: &'static mut NrfPage) -> ReturnCode {$/;"	F	implementation:Nvmc
read_range	chips/sam4l/src/flashcalw.rs	/^    fn read_range($/;"	F	implementation:FLASHCALW
read_sector	capsules/src/mx25r6435f.rs	/^    fn read_sector(&self, sector_index: u32, sector: &'static mut Mx25r6435fSector) -> ReturnCod/;"	F	implementation:MX25R6435F
read_selected_channels	capsules/src/pca9544a.rs	/^    fn read_selected_channels(&self) -> ReturnCode {$/;"	F	implementation:PCA9544A
read_send	chips/nrf51/src/i2c.rs	/^    fn read_send(&self, _data: &'static mut [u8], _max_len: u8) {$/;"	F	implementation:TWIM
read_send	chips/nrf52/src/i2c.rs	/^    fn read_send(&self, _data: &'static mut [u8], _max_len: u8) {$/;"	F	implementation:TWIM
read_send	chips/sam4l/src/i2c.rs	/^    fn read_send(&self, data: &'static mut [u8], max_len: u8) {$/;"	F	implementation:I2CHw
read_send	kernel/src/hil/i2c.rs	/^    fn read_send(&self, data: &'static mut [u8], max_len: u8);$/;"	F	interface:I2CSlave
read_status	capsules/src/fm25cl.rs	/^    fn read_status(&self) -> ReturnCode {$/;"	F	implementation:FM25CL
read_status	capsules/src/fm25cl.rs	/^    fn read_status(&self) -> ReturnCode;$/;"	F	interface:FM25CLCustom
read_status	capsules/src/ltc294x.rs	/^    pub fn read_status(&self) -> ReturnCode {$/;"	F	implementation:LTC294X
read_temperature	capsules/src/si7021.rs	/^    fn read_temperature(&self) -> kernel::ReturnCode {$/;"	F	implementation:SI7021
read_temperature	chips/nrf5x/src/temperature.rs	/^    fn read_temperature(&self) -> kernel::ReturnCode {$/;"	F	implementation:Temp
read_temperature	kernel/src/hil/sensors.rs	/^    fn read_temperature(&self) -> ReturnCode;$/;"	F	interface:TemperatureDriver
read_whoami	capsules/src/lps25hb.rs	/^    pub fn read_whoami(&self) {$/;"	F	implementation:LPS25HB
read_write_byte	chips/nrf52/src/spi.rs	/^    fn read_write_byte(&self, _val: u8) -> u8 {$/;"	F	implementation:SPIM
read_write_byte	chips/sam4l/src/spi.rs	/^    fn read_write_byte(&self, val: u8) -> u8 {$/;"	F	implementation:SpiHw
read_write_byte	chips/sam4l/src/usart.rs	/^    fn read_write_byte(&self, val: u8) -> u8 {$/;"	F	implementation:USART
read_write_byte	kernel/src/hil/spi.rs	/^    fn read_write_byte(&self, val: u8) -> u8;$/;"	F	interface:SpiMaster
read_write_bytes	capsules/src/virtual_spi.rs	/^    fn read_write_bytes($/;"	F	implementation:VirtualSpiMasterDevice
read_write_bytes	capsules/src/virtual_spi.rs	/^    fn read_write_bytes($/;"	F	implementation:VirtualSpiSlaveDevice
read_write_bytes	chips/nrf52/src/spi.rs	/^    fn read_write_bytes($/;"	F	implementation:SPIM
read_write_bytes	chips/sam4l/src/spi.rs	/^    fn read_write_bytes($/;"	F	implementation:SpiHw
read_write_bytes	chips/sam4l/src/usart.rs	/^    fn read_write_bytes($/;"	F	implementation:USART
read_write_bytes	kernel/src/hil/spi.rs	/^    fn read_write_bytes($/;"	F	interface:SpiMaster
read_write_bytes	kernel/src/hil/spi.rs	/^    fn read_write_bytes($/;"	F	interface:SpiMasterDevice
read_write_bytes	kernel/src/hil/spi.rs	/^    fn read_write_bytes($/;"	F	interface:SpiSlave
read_write_bytes	kernel/src/hil/spi.rs	/^    fn read_write_bytes($/;"	F	interface:SpiSlaveDevice
read_write_done	boards/imix/src/spi_dummy.rs	/^    fn read_write_done($/;"	F	implementation:DummyCB
read_write_done	boards/imix/src/spi_slave_dummy.rs	/^    fn read_write_done(&self,$/;"	F	implementation:SlaveCB
read_write_done	capsules/src/fm25cl.rs	/^    fn read_write_done($/;"	F	implementation:FM25CL
read_write_done	capsules/src/mx25r6435f.rs	/^    fn read_write_done($/;"	F	implementation:MX25R6435F
read_write_done	capsules/src/rf233.rs	/^    fn read_write_done($/;"	F	implementation:RF233
read_write_done	capsules/src/sdcard.rs	/^    fn read_write_done($/;"	F	implementation:SDCard
read_write_done	capsules/src/spi.rs	/^    fn read_write_done($/;"	F	implementation:Spi
read_write_done	capsules/src/spi.rs	/^    fn read_write_done($/;"	F	implementation:SpiSlave
read_write_done	capsules/src/virtual_spi.rs	/^    fn read_write_done($/;"	F	implementation:MuxSpiMaster
read_write_done	capsules/src/virtual_spi.rs	/^    fn read_write_done($/;"	F	implementation:VirtualSpiMasterDevice
read_write_done	capsules/src/virtual_spi.rs	/^    fn read_write_done($/;"	F	implementation:VirtualSpiSlaveDevice
read_write_done	kernel/src/hil/spi.rs	/^    fn read_write_done($/;"	F	interface:SpiMasterClient
read_write_done	kernel/src/hil/spi.rs	/^    fn read_write_done($/;"	F	interface:SpiSlaveClient
reading_in	tools/usb/bulk-echo-fast/main.c	/^static bool reading_in = false;$/;"	v	typeref:typename:bool	file:
ready	chips/nrf51/src/radio.rs	/^    ready: ReadWrite<u32, Event::Register>,      \/\/ 0x100 ---> 0x104$/;"	m	struct:RadioRegisters
ready	chips/nrf52/src/nvmc.rs	/^    pub ready: ReadOnly<u32, Ready::Register>,$/;"	m	struct:NvmcRegisters
real_new	chips/sam4l/src/usart.rs	/^    fn real_new(usart: &USART) -> USARTRegManager {$/;"	F	implementation:USARTRegManager
receive	boards/imix/src/ipv6_lowpan_test.rs	/^    fn receive(&self, buf: &[u8], len: usize, retcode: ReturnCode) {$/;"	F	implementation:LowpanTest
receive	capsules/src/ieee802154/device.rs	/^    fn receive<'a>(&self, buf: &'a [u8], header: Header<'a>, data_offset: usize, data_len: usize/;"	F	interface:RxClient
receive	capsules/src/ieee802154/driver.rs	/^    fn receive<'b>(&self, buf: &'b [u8], header: Header<'b>, data_offset: usize, data_len: usize/;"	F	implementation:RadioDriver
receive	capsules/src/ieee802154/framer.rs	/^    fn receive(&self, buf: &'static mut [u8], frame_len: usize, crc_valid: bool, _: ReturnCode) /;"	F	implementation:Framer
receive	capsules/src/ieee802154/mac.rs	/^    fn receive($/;"	F	implementation:AwakeMac
receive	capsules/src/ieee802154/virtual_mac.rs	/^    fn receive<'b>(&self, buf: &'b [u8], header: Header<'b>, data_offset: usize, data_len: usize/;"	F	implementation:MacUser
receive	capsules/src/ieee802154/virtual_mac.rs	/^    fn receive<'b>(&self, buf: &'b [u8], header: Header<'b>, data_offset: usize, data_len: usize/;"	F	implementation:MuxMac
receive	capsules/src/ieee802154/xmac.rs	/^    fn receive($/;"	F	implementation:XMac
receive	capsules/src/net/ipv6/ipv6_recv.rs	/^    fn receive(&self, buf: &[u8], len: usize, result: ReturnCode) {$/;"	F	implementation:IP6RecvStruct
receive	capsules/src/net/ipv6/ipv6_recv.rs	/^    fn receive(&self, header: IP6Header, payload: &[u8]);$/;"	F	interface:IP6RecvClient
receive	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn receive<'a>(&self, buf: &'a [u8], len: usize, result: ReturnCode);$/;"	F	interface:SixlowpanRxClient
receive	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn receive<'b>(&self, buf: &'b [u8], header: Header<'b>, data_offset: usize, data_len: usize/;"	F	implementation:Sixlowpan
receive	capsules/src/net/udp/driver.rs	/^    fn receive($/;"	F	implementation:UDPDriver
receive	capsules/src/net/udp/udp_recv.rs	/^    fn receive($/;"	F	interface:UDPRecvClient
receive	capsules/src/net/udp/udp_recv.rs	/^    fn receive(&self, ip_header: IP6Header, payload: &[u8]) {$/;"	F	implementation:UDPReceiver
receive	capsules/src/segger_rtt.rs	/^    fn receive(&self, _rx_buf: &'static mut [u8], _rx_len: usize) {}$/;"	F	implementation:SeggerRtt
receive	capsules/src/virtual_uart.rs	/^    fn receive(&self, rx_buffer: &'static mut [u8], rx_len: usize) {$/;"	F	implementation:UartDevice
receive	chips/cc26x2/src/uart.rs	/^    fn receive(&self, buffer: &'static mut [u8], len: usize) {$/;"	F	implementation:UART
receive	chips/nrf51/src/uart.rs	/^    fn receive(&self, rx_buffer: &'static mut [u8], rx_len: usize) {$/;"	F	implementation:UART
receive	chips/nrf52/src/uart.rs	/^    fn receive(&self, rx_buf: &'static mut [u8], rx_len: usize) {$/;"	F	implementation:Uarte
receive	chips/sam4l/src/usart.rs	/^    fn receive(&self, rx_buffer: &'static mut [u8], rx_len: usize) {$/;"	F	implementation:USART
receive	chips/sifive/src/uart.rs	/^    fn receive(&self, _rx_buffer: &'static mut [u8], _rx_len: usize) {}$/;"	F	implementation:Uart
receive	chips/tm4c129x/src/uart.rs	/^    fn receive(&self, _rx_buffer: &'static mut [u8], _rx_len: usize) {$/;"	F	implementation:UART
receive	kernel/src/hil/radio.rs	/^    fn receive($/;"	F	interface:RxClient
receive	kernel/src/hil/uart.rs	/^    fn receive(&self, rx_buffer: &'static mut [u8], rx_len: usize);$/;"	F	interface:UART
receive_advertisement	chips/nrf51/src/radio.rs	/^    fn receive_advertisement(&self, channel: RadioChannel) {$/;"	F	implementation:Radio
receive_advertisement	chips/nrf52/src/radio.rs	/^    fn receive_advertisement(&self, channel: RadioChannel) {$/;"	F	implementation:Radio
receive_advertisement	kernel/src/hil/ble_advertising.rs	/^    fn receive_advertisement(&self, channel: RadioChannel);$/;"	F	interface:BleAdvertisementDriver
receive_automatic	chips/sam4l/src/usart.rs	/^    fn receive_automatic(&self, rx_buffer: &'static mut [u8], interbyte_timeout: u8) {$/;"	F	implementation:USART
receive_automatic	kernel/src/hil/uart.rs	/^    fn receive_automatic(&self, rx_buffer: &'static mut [u8], interbyte_timeout: u8);$/;"	F	interface:UARTReceiveAdvanced
receive_complete	boards/launchxl/src/uart_echo.rs	/^    fn receive_complete(&self, buffer: &'static mut [u8], rx_len: usize, _error: uart::Error) {$/;"	F	implementation:UartEcho
receive_complete	capsules/src/console.rs	/^    fn receive_complete(&self, buffer: &'static mut [u8], rx_len: usize, error: uart::Error) {$/;"	F	implementation:Console
receive_complete	capsules/src/nrf51822_serialization.rs	/^    fn receive_complete(&self, buffer: &'static mut [u8], rx_len: usize, _error: uart::Error) {$/;"	F	implementation:Nrf51822Serialization
receive_complete	capsules/src/process_console.rs	/^    fn receive_complete(&self, read_buf: &'static mut [u8], rx_len: usize, error: uart::Error) {$/;"	F	implementation:ProcessConsole
receive_complete	capsules/src/test/virtual_uart.rs	/^    fn receive_complete($/;"	F	implementation:TestVirtualUartReceive
receive_complete	capsules/src/virtual_uart.rs	/^    fn receive_complete($/;"	F	implementation:UartDevice
receive_complete	capsules/src/virtual_uart.rs	/^    fn receive_complete(&self, buffer: &'static mut [u8], rx_len: usize, error: hil::uart::Error/;"	F	implementation:UartMux
receive_complete	kernel/src/debug.rs	/^    fn receive_complete($/;"	F	implementation:DebugWriter
receive_complete	kernel/src/hil/uart.rs	/^    fn receive_complete(&self, rx_buffer: &'static mut [u8], rx_len: usize, error: Error);$/;"	F	interface:Client
receive_event	capsules/src/ble_advertising_driver.rs	/^    fn receive_event(&self, buf: &'static mut [u8], len: u8, result: ReturnCode) {$/;"	f
receive_event	kernel/src/hil/ble_advertising.rs	/^    fn receive_event(&self, buf: &'static mut [u8], len: u8, result: ReturnCode);$/;"	F	interface:RxClient
receive_fragment	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn receive_fragment($/;"	F	implementation:Sixlowpan
receive_frame	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn receive_frame($/;"	F	implementation:Sixlowpan
receive_new	capsules/src/console.rs	/^    fn receive_new(&self, app_id: AppId, app: &mut App, len: usize) -> ReturnCode {$/;"	F	implementation:Console
receive_next_frame	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn receive_next_frame($/;"	F	implementation:RxState
receive_result	capsules/src/crc.rs	/^    fn receive_result(&self, result: u32) {$/;"	F	implementation:Crc
receive_result	kernel/src/hil/crc.rs	/^    fn receive_result(&self, u32);$/;"	F	interface:Client
receive_single_packet	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn receive_single_packet($/;"	F	implementation:Sixlowpan
receiver	capsules/src/net/udp/driver.rs	/^    receiver: &'a UDPReceiver<'a>,$/;"	m	struct:UDPDriver
receiver	capsules/src/virtual_uart.rs	/^    receiver: bool, \/\/ Whether or not to pass this UartDevice incoming messages.$/;"	m	struct:UartDevice
receiving	capsules/src/rf233.rs	/^    receiving: Cell<bool>,$/;"	m	struct:RF233
receiving_app	capsules/src/ble_advertising_driver.rs	/^    receiving_app: OptionalCell<kernel::AppId>,$/;"	m	struct:BLE
recipient	capsules/src/usb.rs	/^    pub fn recipient(self) -> Recipient {$/;"	F	implementation:DeviceRequestType
rect10	doc/courses/rustconf/presentation/ipc.svg	/^       ry="9.114295" \/>$/;"	i
rect10-6	doc/courses/rustconf/presentation/ipc.svg	/^       ry="9.114296" \/>$/;"	i
rect122	doc/courses/rustconf/presentation/ipc.svg	/^       ry="1.5969238" \/>$/;"	i
rect4854	doc/courses/rustconf/console.svg	/^       y="52.362198" \/>$/;"	i
rect4856	doc/courses/rustconf/console.svg	/^       y="32.362206" \/>$/;"	i
rect4858	doc/courses/rustconf/console.svg	/^       y="252.3622" \/>$/;"	i
rect4864	doc/courses/rustconf/console.svg	/^         style="fill:#ff6600;fill-opacity:0.50322583;stroke:#000000;stroke-width:2;stroke-miterl/;"	i
rect4885	doc/courses/rustconf/console.svg	/^         style="fill:#00bfff;fill-opacity:1;stroke:#000000;stroke-width:2;stroke-miterlimit:4;st/;"	i
rect4984	doc/courses/rustconf/console.svg	/^         y="327.62622" \/>$/;"	i
rect5456	doc/courses/rustconf/console.svg	/^       y="82.362206" \/>$/;"	i
rect5757	doc/courses/rustconf/presentation/ipc.svg	/^       ry="1.5969245" \/>$/;"	i
rect931	doc/courses/rustconf/rustconf.svg	/^       inkscape:connector-curvature="0" \/>$/;"	i
rect957	doc/courses/rustconf/rustconf.svg	/^       y="167.27267" \/>$/;"	i
regions	arch/cortex-m/src/mpu.rs	/^    regions: [CortexMRegion; 8],$/;"	m	struct:CortexMConfig
register_bitfields	libraries/tock-register-interface/src/macros.rs	/^macro_rules! register_bitfields {$/;"	M
register_bitmasks	libraries/tock-register-interface/src/macros.rs	/^macro_rules! register_bitmasks {$/;"	M
register_implementors	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:window
register_read	capsules/src/rf233.rs	/^    fn register_read(&self, reg: RF233Register) -> ReturnCode {$/;"	F	implementation:RF233
register_write	capsules/src/rf233.rs	/^    fn register_write(&self, reg: RF233Register, val: u8) -> ReturnCode {$/;"	F	implementation:RF233
registers	chips/cc26x2/src/gpio.rs	/^    registers: StaticRef<GpioRegisters>,$/;"	m	struct:GPIOPin
registers	chips/cc26x2/src/i2c.rs	/^    registers: StaticRef<I2CMasterRegisters>,$/;"	m	struct:I2CMaster
registers	chips/cc26x2/src/rtc.rs	/^    registers: StaticRef<RtcRegisters>,$/;"	m	struct:Rtc
registers	chips/cc26x2/src/trng.rs	/^    registers: StaticRef<RngRegisters>,$/;"	m	struct:Trng
registers	chips/cc26x2/src/uart.rs	/^    registers: &'static StaticRef<UartRegisters>,$/;"	m	struct:UART
registers	chips/nrf51/src/clock.rs	/^    registers: StaticRef<ClockRegisters>,$/;"	m	struct:Clock
registers	chips/nrf51/src/i2c.rs	/^    registers: StaticRef<TwimRegisters>,$/;"	m	struct:TWIM
registers	chips/nrf51/src/radio.rs	/^    registers: StaticRef<RadioRegisters>,$/;"	m	struct:Radio
registers	chips/nrf51/src/uart.rs	/^    registers: StaticRef<UartRegisters>,$/;"	m	struct:UART
registers	chips/nrf52/src/adc.rs	/^    registers: StaticRef<AdcRegisters>,$/;"	m	struct:Adc
registers	chips/nrf52/src/clock.rs	/^    registers: StaticRef<ClockRegisters>,$/;"	m	struct:Clock
registers	chips/nrf52/src/ficr.rs	/^    registers: StaticRef<FicrRegisters>,$/;"	m	struct:Ficr
registers	chips/nrf52/src/i2c.rs	/^    registers: StaticRef<TwimRegisters>,$/;"	m	struct:TWIM
registers	chips/nrf52/src/nvmc.rs	/^    registers: StaticRef<NvmcRegisters>,$/;"	m	struct:Nvmc
registers	chips/nrf52/src/ppi.rs	/^    registers: StaticRef<PpiRegisters>,$/;"	m	struct:Ppi
registers	chips/nrf52/src/radio.rs	/^    registers: StaticRef<RadioRegisters>,$/;"	m	struct:Radio
registers	chips/nrf52/src/spi.rs	/^    registers: StaticRef<SpimRegisters>,$/;"	m	struct:SPIM
registers	chips/nrf52/src/uart.rs	/^    registers: StaticRef<UarteRegisters>,$/;"	m	struct:Uarte
registers	chips/nrf52/src/uicr.rs	/^    registers: StaticRef<UicrRegisters>,$/;"	m	struct:Uicr
registers	chips/nrf5x/src/aes.rs	/^    registers: StaticRef<AesEcbRegisters>,$/;"	m	struct:AesECB
registers	chips/nrf5x/src/rtc.rs	/^    registers: StaticRef<RtcRegisters>,$/;"	m	struct:Rtc
registers	chips/nrf5x/src/temperature.rs	/^    registers: StaticRef<TempRegisters>,$/;"	m	struct:Temp
registers	chips/nrf5x/src/timer.rs	/^    registers: StaticRef<TimerRegisters>,$/;"	m	struct:Timer
registers	chips/nrf5x/src/timer.rs	/^    registers: StaticRef<TimerRegisters>,$/;"	m	struct:TimerAlarm
registers	chips/nrf5x/src/trng.rs	/^    registers: StaticRef<RngRegisters>,$/;"	m	struct:Trng
registers	chips/sam4l/src/adc.rs	/^    registers: StaticRef<AdcRegisters>,$/;"	m	struct:Adc
registers	chips/sam4l/src/aes.rs	/^    registers: StaticRef<AesRegisters>,$/;"	m	struct:Aes
registers	chips/sam4l/src/ast.rs	/^    registers: StaticRef<AstRegisters>,$/;"	m	struct:Ast
registers	chips/sam4l/src/crccu.rs	/^    registers: StaticRef<CrccuRegisters>,$/;"	m	struct:Crccu
registers	chips/sam4l/src/dac.rs	/^    registers: StaticRef<DacRegisters>,$/;"	m	struct:Dac
registers	chips/sam4l/src/dma.rs	/^    registers: StaticRef<DMARegisters>,$/;"	m	struct:DMAChannel
registers	chips/sam4l/src/flashcalw.rs	/^    registers: StaticRef<FlashcalwRegisters>,$/;"	m	struct:FLASHCALW
registers	chips/sam4l/src/usart.rs	/^    registers: &'a UsartRegisters,$/;"	m	struct:USARTRegManager
registers	chips/sam4l/src/usart.rs	/^    registers: StaticRef<UsartRegisters>,$/;"	m	struct:USART
registers	chips/sifive/src/gpio.rs	/^    registers: StaticRef<GpioRegisters>,$/;"	m	struct:GpioPin
registers	chips/sifive/src/prci.rs	/^    registers: StaticRef<PrciRegisters>,$/;"	m	struct:Prci
registers	chips/sifive/src/pwm.rs	/^    registers: StaticRef<PwmRegisters>,$/;"	m	struct:Pwm
registers	chips/sifive/src/rtc.rs	/^    registers: StaticRef<RtcRegisters>,$/;"	m	struct:Rtc
registers	chips/sifive/src/uart.rs	/^    registers: StaticRef<UartRegisters>,$/;"	m	struct:Uart
registers	chips/sifive/src/watchdog.rs	/^    registers: StaticRef<WatchdogRegisters>,$/;"	m	struct:Watchdog
registers	chips/tm4c129x/src/gpio.rs	/^    registers: StaticRef<GpioRegisters>,$/;"	m	struct:GPIOPin
registers	chips/tm4c129x/src/gpio.rs	/^    registers: StaticRef<GpioRegisters>,$/;"	m	struct:Port
registers	chips/tm4c129x/src/gpt.rs	/^    registers: StaticRef<GptRegisters>,$/;"	m	struct:AlarmTimer
registers	chips/tm4c129x/src/sysctl.rs	/^    registers: StaticRef<SysctlRegisters>,$/;"	m	struct:SystemControl
registers	chips/tm4c129x/src/uart.rs	/^    registers: StaticRef<UartRegisters>,$/;"	m	struct:UART
registers	kernel/src/common/peripherals.rs	/^    pub registers: &'a H::RegisterType,$/;"	m	struct:PeripheralManager
registers	libraries/tock-register-interface/src/lib.rs	/^pub mod registers;$/;"	n
regs	arch/cortex-m/src/syscall.rs	/^    regs: [usize; 8],$/;"	m	struct:CortexMStoredState
regs	chips/cc26x2/src/i2c.rs	/^mod regs {$/;"	n
regs	chips/sam4l/src/serial_num.rs	/^    regs: StaticRef<sam4lSerialRegister>,$/;"	m	struct:SerialNum
regs	chips/sam4l/src/trng.rs	/^    regs: StaticRef<TrngRegisters>,$/;"	m	struct:Trng
related_descriptor_length	capsules/src/usb.rs	/^    pub related_descriptor_length: usize,$/;"	m	struct:ConfigurationDescriptor
release_low	chips/nrf52/src/spi.rs	/^    fn release_low(&self) {$/;"	F	implementation:SPIM
release_low	chips/sam4l/src/spi.rs	/^    fn release_low(&self) {$/;"	F	implementation:SpiHw
release_low	chips/sam4l/src/usart.rs	/^    fn release_low(&self) {$/;"	F	implementation:USART
release_low	kernel/src/hil/spi.rs	/^    fn release_low(&self);$/;"	F	interface:SpiMaster
release_uldo	chips/cc26x2/src/prcm.rs	/^pub fn release_uldo() {$/;"	f
remaining	capsules/src/rng.rs	/^    remaining: usize,$/;"	m	struct:App
remaining	chips/tm4c129x/src/uart.rs	/^    remaining: Cell<usize>,$/;"	m	struct:UART
remaining_data_capacity	capsules/src/ieee802154/framer.rs	/^    pub fn remaining_data_capacity(&self) -> usize {$/;"	F	implementation:Frame
remaining_length	capsules/src/nonvolatile_to_pages.rs	/^    remaining_length: Cell<usize>,$/;"	m	struct:NonvolatileToPages
removeClass	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
remove_key	capsules/src/ieee802154/driver.rs	/^    fn remove_key(&self, index: usize) -> ReturnCode {$/;"	F	implementation:RadioDriver
remove_neighbor	capsules/src/ieee802154/driver.rs	/^    fn remove_neighbor(&self, index: usize) -> ReturnCode {$/;"	F	implementation:RadioDriver
remove_pin_interrupt_state	capsules/src/mcp230xx.rs	/^    fn remove_pin_interrupt_state(&self, pin_number: u8) {$/;"	F	implementation:MCP230xx
repeat	kernel/src/hil/time.rs	/^    fn repeat(&self, interval: u32);$/;"	F	interface:Timer
repeated_mode	capsules/src/tmp006.rs	/^    repeated_mode: Cell<bool>,$/;"	m	struct:TMP006
replace	libraries/tock-cells/src/map_cell.rs	/^    pub fn replace(&self, val: T) -> Option<T> {$/;"	F	implementation:MapCell
replace	libraries/tock-cells/src/optional_cell.rs	/^    pub fn replace(&self, val: T) -> Option<T> {$/;"	F	implementation:OptionalCell
replace	libraries/tock-cells/src/take_cell.rs	/^    pub fn replace(&self, val: &'a mut T) -> Option<&'a mut T> {$/;"	F	implementation:TakeCell
replace_buffer	capsules/src/adc.rs	/^    fn replace_buffer(&self, buf: &'static mut [u16]) -> &TakeCell<'static, [u16]> {$/;"	F	implementation:Adc
replace_radio_buffer	chips/nrf51/src/radio.rs	/^    pub fn replace_radio_buffer(&self, buf: &'static mut [u8], len: usize) -> &'static mut [u8] /;"	F	implementation:Radio
replace_radio_buffer	chips/nrf52/src/radio.rs	/^    fn replace_radio_buffer(&self, buf: &'static mut [u8]) -> &'static mut [u8] {$/;"	F	implementation:Radio
reply	chips/nrf51/src/i2c.rs	/^    fn reply(&self, result: i2c::Error) {$/;"	F	implementation:TWIM
report	capsules/examples/traitobj_list.rs	/^    pub fn report(&self) {$/;"	F	implementation:Manager
request_code	capsules/src/usb.rs	/^    pub request_code: u8,$/;"	m	struct:SetupData
request_type	capsules/src/usb.rs	/^    pub fn request_type(self) -> RequestType {$/;"	F	implementation:DeviceRequestType
request_type	capsules/src/usb.rs	/^    pub request_type: DeviceRequestType,$/;"	m	struct:SetupData
requests	chips/sam4l/src/usbc/mod.rs	/^    requests: [Cell<Requests>; N_ENDPOINTS],$/;"	m	struct:Usbc
resbehavctl	chips/tm4c129x/src/sysctl.rs	/^    resbehavctl: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
resc	chips/tm4c129x/src/sysctl.rs	/^    resc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
reseed	capsules/src/rng.rs	/^    fn reseed(&self, seed: u32) {$/;"	F	implementation:SynchronousRandom
reseed	kernel/src/hil/rng.rs	/^    fn reseed(&self, seed: u32);$/;"	F	interface:Random
reserved0	chips/sam4l/src/gpio.rs	/^    reserved0: u32,$/;"	m	struct:RegisterRC
reserved1	chips/sam4l/src/gpio.rs	/^    reserved1: u32,$/;"	m	struct:RegisterRC
reset	arch/cortex-m/src/scb.rs	/^pub unsafe fn reset() {$/;"	f
reset	arch/cortex-m/src/systick.rs	/^    fn reset(&self) {$/;"	F	implementation:SysTick
reset	boards/imix/src/components/rf233.rs	/^    reset: &'static hil::gpio::Pin,$/;"	m	struct:RF233Component
reset	capsules/src/net/ipv6/ipv6.rs	/^    pub fn reset(&mut self) {$/;"	F	implementation:IP6Packet
reset	capsules/src/nrf51822_serialization.rs	/^    pub fn reset(&self) {$/;"	F	implementation:Nrf51822Serialization
reset	capsules/src/rf233.rs	/^    fn reset(&self) -> ReturnCode {$/;"	F	implementation:RF233
reset	chips/sam4l/src/usart.rs	/^    fn reset(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
reset	kernel/src/hil/radio.rs	/^    fn reset(&self) -> ReturnCode;$/;"	F	interface:RadioConfig
reset	kernel/src/platform/systick.rs	/^    fn reset(&self) {}$/;"	F	implementation:SysTick
reset	kernel/src/platform/systick.rs	/^    fn reset(&self);$/;"	F	interface:SysTick
reset_active_alarm	capsules/src/alarm.rs	/^    fn reset_active_alarm(&self, now: u32) -> Option<u32> {$/;"	F	implementation:AlarmDriver
reset_active_alarm	capsules/src/ble_advertising_driver.rs	/^    fn reset_active_alarm(&self) {$/;"	f
reset_charge	capsules/src/ltc294x.rs	/^    fn reset_charge(&self) -> ReturnCode {$/;"	F	implementation:LTC294X
reset_handler	arch/riscv32i/src/lib.rs	/^    fn reset_handler();$/;"	f
reset_handler	boards/arty-e21/src/main.rs	/^pub unsafe fn reset_handler() {$/;"	f
reset_handler	boards/ek-tm4c1294xl/src/main.rs	/^pub unsafe fn reset_handler() {$/;"	f
reset_handler	boards/hail/src/main.rs	/^pub unsafe fn reset_handler() {$/;"	f
reset_handler	boards/hifive1/src/main.rs	/^pub unsafe fn reset_handler() {$/;"	f
reset_handler	boards/imix/src/main.rs	/^pub unsafe fn reset_handler() {$/;"	f
reset_handler	boards/launchxl/src/main.rs	/^pub unsafe fn reset_handler() {$/;"	f
reset_handler	boards/nordic/nrf51dk/src/main.rs	/^pub unsafe fn reset_handler() {$/;"	f
reset_handler	boards/nordic/nrf52840dk/src/main.rs	/^pub unsafe fn reset_handler() {$/;"	f
reset_handler	boards/nordic/nrf52dk/src/main.rs	/^pub unsafe fn reset_handler() {$/;"	f
reset_handler	chips/cc26x2/src/crt1.rs	/^    fn reset_handler();$/;"	f
reset_handler	chips/nrf51/src/crt1.rs	/^    fn reset_handler();$/;"	f
reset_handler	chips/nrf52/src/crt1.rs	/^    fn reset_handler();$/;"	f
reset_handler	chips/sam4l/src/lib.rs	/^    fn reset_handler();$/;"	f
reset_handler	chips/tm4c129x/src/lib.rs	/^    fn reset_handler();$/;"	f
reset_pin	boards/imix/src/components/nrf51822.rs	/^    reset_pin: &'static sam4l::gpio::GPIOPin,$/;"	m	struct:Nrf51822Component
reset_pin	capsules/src/nrf51822_serialization.rs	/^    reset_pin: &'a hil::gpio::Pin,$/;"	m	struct:Nrf51822Serialization
reset_pin	capsules/src/rf233.rs	/^    reset_pin: &'a gpio::Pin,$/;"	m	struct:RF233
resolution	chips/nrf52/src/adc.rs	/^    resolution: ReadWrite<u32, RESOLUTION::Register>,$/;"	m	struct:AdcRegisters
resourcesSuffix	kernel/target/doc/storage.js	/^var resourcesSuffix="";\/*!$/;"	v
restart_count	kernel/src/process.rs	/^    restart_count: usize,$/;"	m	struct:ProcessDebug
restore	boards/imix/src/power.rs	/^    fn restore(&self) {$/;"	F	implementation:DetachablePin
result_amount	chips/nrf52/src/adc.rs	/^    result_amount: ReadWrite<u32, RESULT_AMOUNT::Register>,$/;"	m	struct:AdcRegisters
result_maxcnt	chips/nrf52/src/adc.rs	/^    result_maxcnt: ReadWrite<u32, RESULT_MAXCNT::Register>,$/;"	m	struct:AdcRegisters
result_ptr	chips/nrf52/src/adc.rs	/^    result_ptr: VolatileCell<*const u16>,$/;"	m	struct:AdcRegisters
results	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	c
results	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	c	class:execSearch
results_in_args	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	c
results_returned	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	c
resume	chips/sam4l/src/usbc/mod.rs	/^    pub resume: bool,$/;"	m	struct:Requests
resume	kernel/src/process.rs	/^    fn resume(&self) {$/;"	F	implementation:Process
resume	kernel/src/process.rs	/^    fn resume(&self);$/;"	F	interface:ProcessType
ret	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	c	class:execQuery
retrieve_buffers	chips/sam4l/src/adc.rs	/^    fn retrieve_buffers($/;"	F	implementation:Adc
retrieve_buffers	kernel/src/hil/adc.rs	/^    fn retrieve_buffers($/;"	F	interface:AdcHighSpeed
return_buf	tools/usb/bulk-echo-fast/main.c	/^static unsigned char return_buf[return_buf_sz];$/;"	v	typeref:typename:unsigned char[]	file:
return_buf_sz	tools/usb/bulk-echo-fast/main.c	/^static const size_t return_buf_sz = 80;$/;"	v	typeref:typename:const size_t	file:
returncode	kernel/src/lib.rs	/^mod returncode;$/;"	n
returned	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:execQuery.ret
returned	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:execSearch.results
reverse_and_invert	chips/sam4l/src/crccu.rs	/^fn reverse_and_invert(n: u32) -> u32 {$/;"	f
reverse_end_ccm	capsules/src/aes_ccm.rs	/^    fn reverse_end_ccm(&self) {$/;"	F	implementation:AES128CCM
reversed	capsules/src/aes_ccm.rs	/^    fn reversed(&self) -> bool {$/;"	F	implementation:AES128CCM
rf233	boards/imix/src/components/mod.rs	/^pub mod rf233;$/;"	n
rf233	boards/imix/src/components/radio.rs	/^    rf233: &'static RF233Device,$/;"	m	struct:RadioComponent
rf233	boards/imix/src/power.rs	/^    pub rf233: bool,$/;"	m	struct:SubmoduleConfig
rf233	capsules/src/lib.rs	/^pub mod rf233;$/;"	n
rf233_const	capsules/src/lib.rs	/^pub mod rf233_const;$/;"	n
rf_mode_sel	chips/cc26x2/src/prcm.rs	/^pub fn rf_mode_sel(mode: u32) {$/;"	f
rfc_clk_gate	chips/cc26x2/src/prcm.rs	/^    pub rfc_clk_gate: ReadWrite<u32, ClockGate::Register>,$/;"	m	struct:PrcmRegisters
rfc_mode_sel	chips/cc26x2/src/prcm.rs	/^    pub rfc_mode_sel: ReadWrite<u32>,$/;"	m	struct:PrcmRegisters
rgen	capsules/src/rng.rs	/^    rgen: &'a Rng<'a>,$/;"	m	struct:SynchronousRandom
rhr	chips/sam4l/src/i2c.rs	/^    rhr: ReadOnly<u32, ReceiveHolding::Register>,$/;"	m	struct:TWIMRegisters
rhr	chips/sam4l/src/i2c.rs	/^    rhr: ReadOnly<u32, ReceiveHolding::Register>,$/;"	m	struct:TWISRegisters
rhr	chips/sam4l/src/usart.rs	/^    rhr: ReadOnly<u32, ReceiverHold::Register>,  \/\/ 0x18$/;"	m	struct:UsartRegisters
ring	kernel/src/common/ring_buffer.rs	/^    ring: &'a mut [T],$/;"	m	struct:RingBuffer
ring_buffer	kernel/src/common/mod.rs	/^mod ring_buffer;$/;"	n
ris	chips/cc26x2/src/uart.rs	/^    ris: ReadOnly<u32, Interrupts::Register>,$/;"	m	struct:UartRegisters
ris	chips/tm4c129x/src/gpio.rs	/^    ris: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
ris	chips/tm4c129x/src/gpt.rs	/^    ris: VolatileCell<u32>,$/;"	m	struct:GptRegisters
ris	chips/tm4c129x/src/sysctl.rs	/^    ris: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
ris	chips/tm4c129x/src/uart.rs	/^    ris: VolatileCell<u32>,$/;"	m	struct:UartRegisters
rise_ie	chips/sifive/src/gpio.rs	/^    rise_ie: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
rise_ip	chips/sifive/src/gpio.rs	/^    rise_ip: ReadWrite<u32, pins::Register>,$/;"	m	struct:GpioRegisters
rng	boards/hail/src/main.rs	/^    rng: &'static capsules::rng::RngDriver<'static>,$/;"	m	struct:Hail
rng	boards/imix/src/components/mod.rs	/^pub mod rng;$/;"	n
rng	boards/imix/src/components/rng.rs	/^    type Output = &'static rng::RngDriver<'static>;$/;"	v	implementation:RngComponent
rng	boards/imix/src/main.rs	/^    rng: &'static capsules::rng::RngDriver<'static>,$/;"	m	struct:Imix
rng	boards/launchxl/src/main.rs	/^    rng: &'static capsules::rng::RngDriver<'static>,$/;"	m	struct:Platform
rng	boards/nordic/nrf51dk/src/main.rs	/^    rng: &'static capsules::rng::RngDriver<'static>,$/;"	m	struct:Platform
rng	boards/nordic/nrf52dk_base/src/lib.rs	/^    rng: &'static capsules::rng::RngDriver<'static>,$/;"	m	struct:Platform
rng	capsules/src/ieee802154/xmac.rs	/^    rng: &'a Rng<'a>,$/;"	m	struct:XMac
rng	capsules/src/lib.rs	/^pub mod rng;$/;"	n
rng	capsules/src/rng.rs	/^    rng: &'a Rng<'a>,$/;"	m	struct:RngDriver
rng	capsules/src/test/mod.rs	/^pub mod rng;$/;"	n
rng	capsules/src/test/rng.rs	/^    rng: &'a rng::Rng<'a>,$/;"	m	struct:TestRng
rng	kernel/src/hil/mod.rs	/^pub mod rng;$/;"	n
rng_test	boards/imix/src/main.rs	/^mod rng_test;$/;"	n
rnr	arch/cortex-m/src/mpu.rs	/^    pub rnr: ReadWrite<u32, RegionNumber::Register>,$/;"	m	struct:MpuRegisters
role	chips/sam4l/src/spi.rs	/^    role: Cell<SpiRole>,$/;"	m	struct:SpiHw
romid	capsules/src/max17205.rs	/^    fn romid(&self, rid: u64, error: ReturnCode) {$/;"	F	implementation:MAX17205Driver
romid	capsules/src/max17205.rs	/^    fn romid(&self, rid: u64, error: ReturnCode);$/;"	F	interface:MAX17205Client
row	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	c	class:buildIndex
rsclkcfg	chips/tm4c129x/src/sysctl.rs	/^    rsclkcfg: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
rsr	chips/tm4c129x/src/uart.rs	/^    rsr: VolatileCell<u32>,$/;"	m	struct:UartRegisters
rsr_ecr	chips/cc26x2/src/uart.rs	/^    rsr_ecr: ReadWrite<u32>,$/;"	m	struct:UartRegisters
rssiend	chips/nrf51/src/radio.rs	/^    rssiend: ReadWrite<u32, Event::Register>,    \/\/ 0x11c -->  0x120$/;"	m	struct:RadioRegisters
rssisample	chips/nrf51/src/radio.rs	/^    rssisample: ReadOnly<u32, RssiSampleResult::Register>, \/\/ 0x548 - 0x54c$/;"	m	struct:RadioRegisters
rssisample	chips/nrf52/src/radio.rs	/^    rssisample: ReadWrite<u32, RssiSample::Register>,$/;"	m	struct:RadioRegisters
rssistart	chips/nrf51/src/radio.rs	/^    rssistart: WriteOnly<u32, Task::Register>,   \/\/ 0x014 ---> 0x018$/;"	m	struct:RadioRegisters
rssistop	chips/nrf51/src/radio.rs	/^    rssistop: WriteOnly<u32, Task::Register>,    \/\/ 0x018 ---> 0x01c$/;"	m	struct:RadioRegisters
rtc	chips/cc26x2/src/lib.rs	/^pub mod rtc;$/;"	n
rtc	chips/e310x/src/lib.rs	/^pub mod rtc;$/;"	n
rtc	chips/nrf5x/src/lib.rs	/^pub mod rtc;$/;"	n
rtc	chips/sifive/src/lib.rs	/^pub mod rtc;$/;"	n
rtc_sel	chips/cc26x2/src/aon.rs	/^    rtc_sel: ReadWrite<u32>,          \/\/ RTC Capture event selector for AON_RTC$/;"	m	struct:AonEventRegisters
rtccfg	chips/sifive/src/rtc.rs	/^    rtccfg: ReadWrite<u32, rtccfg::Register>,$/;"	m	struct:RtcRegisters
rtccmp	chips/sifive/src/rtc.rs	/^    rtccmp: ReadWrite<u32, rtccmp::Register>,$/;"	m	struct:RtcRegisters
rtchi	chips/sifive/src/rtc.rs	/^    rtchi: ReadWrite<u32>,$/;"	m	struct:RtcRegisters
rtclo	chips/sifive/src/rtc.rs	/^    rtclo: ReadWrite<u32, rtclo::Register>,$/;"	m	struct:RtcRegisters
rtcpd	chips/tm4c129x/src/gpt.rs	/^    rtcpd: VolatileCell<u32>,$/;"	m	struct:GptRegisters
rtcs	chips/sifive/src/rtc.rs	/^    rtcs: ReadWrite<u32>,$/;"	m	struct:RtcRegisters
rtor	chips/sam4l/src/usart.rs	/^    rtor: ReadWrite<u32, RxTimeout::Register>,   \/\/ 0x24$/;"	m	struct:UsartRegisters
rts	boards/nordic/nrf52dk_base/src/lib.rs	/^    rts: usize,$/;"	m	struct:UartPins
rts_disable_spi_deassert_cs	chips/sam4l/src/usart.rs	/^    fn rts_disable_spi_deassert_cs(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
rts_enable_spi_assert_cs	chips/sam4l/src/usart.rs	/^    fn rts_enable_spi_assert_cs(&self, usart: &USARTRegManager) {$/;"	F	implementation:USART
run	boards/imix/src/aes_ccm_test.rs	/^pub unsafe fn run() {$/;"	f
run	boards/nordic/nrf51dk/src/aes_test.rs	/^pub fn run() {$/;"	f
run	boards/nordic/nrf52dk/src/tests/aes.rs	/^pub unsafe fn run() {$/;"	f
run	boards/nordic/nrf52dk/src/tests/uart.rs	/^pub unsafe fn run() {$/;"	f
run	capsules/src/test/aes.rs	/^    pub fn run(&self) {$/;"	F	implementation:TestAes128Cbc
run	capsules/src/test/aes.rs	/^    pub fn run(&self) {$/;"	F	implementation:TestAes128Ctr
run	capsules/src/test/aes_ccm.rs	/^    pub fn run(&self) {$/;"	F	implementation:Test
run	capsules/src/test/rng.rs	/^    pub fn run(&self) {$/;"	F	implementation:TestEntropy32
run	capsules/src/test/rng.rs	/^    pub fn run(&self) {$/;"	F	implementation:TestEntropy8
run	capsules/src/test/rng.rs	/^    pub fn run(&self) {$/;"	F	implementation:TestRandom
run	capsules/src/test/rng.rs	/^    pub fn run(&self) {$/;"	F	implementation:TestRng
run	capsules/src/test/virtual_uart.rs	/^    pub fn run(&self) {$/;"	F	implementation:TestVirtualUartReceive
run_aes128_cbc	boards/imix/src/aes_test.rs	/^pub unsafe fn run_aes128_cbc() {$/;"	f
run_aes128_ctr	boards/imix/src/aes_test.rs	/^pub unsafe fn run_aes128_ctr() {$/;"	f
run_check_test	boards/imix/src/ipv6_lowpan_test.rs	/^    fn run_check_test(&self, test_id: usize, buf: &[u8], len: usize) {$/;"	F	implementation:LowpanTest
run_entropy32	boards/imix/src/rng_test.rs	/^pub unsafe fn run_entropy32() {$/;"	f
run_test	boards/imix/src/icmp_lowpan_test.rs	/^    fn run_test(&self, test_id: usize) {$/;"	F	implementation:LowpanICMPTest
run_test	boards/imix/src/ipv6_lowpan_test.rs	/^    fn run_test(&self, test_id: usize) {$/;"	F	implementation:LowpanTest
run_test	boards/imix/src/sixlowpan_dummy.rs	/^    fn run_test(&self, test_id: usize) {$/;"	F	implementation:LowpanTest
run_test	boards/imix/src/udp_lowpan_test.rs	/^    fn run_test(&self, test_id: usize) {$/;"	F	implementation:LowpanTest
run_test_and_increment	boards/imix/src/icmp_lowpan_test.rs	/^    fn run_test_and_increment(&self) {$/;"	F	implementation:LowpanICMPTest
run_test_and_increment	boards/imix/src/ipv6_lowpan_test.rs	/^    fn run_test_and_increment(&self) {$/;"	F	implementation:LowpanTest
run_test_and_increment	boards/imix/src/sixlowpan_dummy.rs	/^    fn run_test_and_increment(&self) {$/;"	F	implementation:LowpanTest
run_test_and_increment	boards/imix/src/udp_lowpan_test.rs	/^    fn run_test_and_increment(&self) {$/;"	F	implementation:LowpanTest
run_virtual_uart_receive	boards/imix/src/virtual_uart_rx_test.rs	/^pub unsafe fn run_virtual_uart_receive(mux: &'static UartMux<'static>) {$/;"	f
running	capsules/src/process_console.rs	/^    running: Cell<bool>,$/;"	m	struct:ProcessConsole
rustc	arch/riscv32i/target/debug/.fingerprint/bare-metal-24acc5d3590b7513/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0./;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/bare-metal-7dd6462cd7700cd7/lib-bare_metal-7dd6462cd7700cd7.json	/^{"rustc":10377385455325587324,"features":"[]","target":10318145944003877215,"profile":1187018370/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/bit_field-56ae9b63ca7874f1/lib-bit_field-56ae9b63ca7874f1.json	/^{"rustc":10377385455325587324,"features":"[]","target":6212214415640514931,"profile":11870183705/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/riscvregs-0c285ab8bbe41fa7/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"db/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/riscvregs-126b22abd70e245c/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0e/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/riscvregs-7b5528c14e2c7055/build-script-build_script_build-7b5528c14e2c7055.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/riscvregs-d6ebf6a6021a8976/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"78/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/riscvregs-e220008a48c83b01/build-script-build_script_build-e220008a48c83b01.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/riscvregs-e3787b41749bb5b0/build-script-build_script_build-e3787b41749bb5b0.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/semver-parser-1d01b4b0efb84ec1/lib-semver_parser-1d01b4b0efb84ec1.json	/^{"rustc":10377385455325587324,"features":"[]","target":11042536386261824010,"profile":1187018370/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	n
rustc	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	n
rustc	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n
rustc	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	n
rustc	boards/hifive1/target/debug/.fingerprint/riscvregs-8a1ccaee318cf981/build-script-build_script_build-8a1ccaee318cf981.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n
rustc	boards/hifive1/target/debug/.fingerprint/riscvregs-e5cf2a660cb8088f/build-script-build_script_build-e5cf2a660cb8088f.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n
rustc	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	n
rustc	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	n
rustc	boards/hifive1/target/debug/.fingerprint/semver-parser-0cbc1426a8cfeede/lib-semver_parser-0cbc1426a8cfeede.json	/^{"rustc":4168008693276420879,"features":"[]","target":3650675185119913205,"profile":118386650091/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-3818320f62d4b526/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-5a31f60d1aed50ae/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-90db6ed0e5b8c3d4/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	n
rustc	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	n
rustc	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	n
rustc	kernel/target/debug/.fingerprint/tock-cells-816571e4fa975f6b/doc-lib-tock_cells-816571e4fa975f6b.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":3062756892/;"	n
rustc	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	n
rustc	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	n
rustc	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	n
rustc	kernel/target/debug/.fingerprint/tock-registers-e7eec879e9fa92db/doc-lib-tock_registers-e7eec879e9fa92db.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":30627568924/;"	n
rustc	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	n
rustc_fingerprint	arch/riscv32i/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1164083562126845933":["rustc 1.32.0-nightl/;"	n
rustc_fingerprint	boards/hifive1/target/.rustc_info.json	/^{"rustc_fingerprint":6405865732497413016,"outputs":{"1164083562126845933":["rustc 1.35.0-nightly/;"	n
rustc_fingerprint	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	n
rustc_fingerprint	libraries/tock-register-interface/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1617349019360157463":["___\\nlib___.rlib\\/;"	n
rustflags	arch/riscv32i/target/debug/.fingerprint/bare-metal-24acc5d3590b7513/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0./;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/bare-metal-7dd6462cd7700cd7/lib-bare_metal-7dd6462cd7700cd7.json	/^{"rustc":10377385455325587324,"features":"[]","target":10318145944003877215,"profile":1187018370/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/bit_field-56ae9b63ca7874f1/lib-bit_field-56ae9b63ca7874f1.json	/^{"rustc":10377385455325587324,"features":"[]","target":6212214415640514931,"profile":11870183705/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/riscvregs-0c285ab8bbe41fa7/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"db/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/riscvregs-126b22abd70e245c/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0e/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/riscvregs-7b5528c14e2c7055/build-script-build_script_build-7b5528c14e2c7055.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/riscvregs-d6ebf6a6021a8976/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"78/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/riscvregs-e220008a48c83b01/build-script-build_script_build-e220008a48c83b01.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/riscvregs-e3787b41749bb5b0/build-script-build_script_build-e3787b41749bb5b0.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/semver-parser-1d01b4b0efb84ec1/lib-semver_parser-1d01b4b0efb84ec1.json	/^{"rustc":10377385455325587324,"features":"[]","target":11042536386261824010,"profile":1187018370/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	a
rustflags	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	a
rustflags	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	a
rustflags	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	a
rustflags	boards/hifive1/target/debug/.fingerprint/riscvregs-8a1ccaee318cf981/build-script-build_script_build-8a1ccaee318cf981.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	a
rustflags	boards/hifive1/target/debug/.fingerprint/riscvregs-e5cf2a660cb8088f/build-script-build_script_build-e5cf2a660cb8088f.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	a
rustflags	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	a
rustflags	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	a
rustflags	boards/hifive1/target/debug/.fingerprint/semver-parser-0cbc1426a8cfeede/lib-semver_parser-0cbc1426a8cfeede.json	/^{"rustc":4168008693276420879,"features":"[]","target":3650675185119913205,"profile":118386650091/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-3818320f62d4b526/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-5a31f60d1aed50ae/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-90db6ed0e5b8c3d4/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	a
rustflags	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	a
rustflags	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	a
rustflags	kernel/target/debug/.fingerprint/tock-cells-816571e4fa975f6b/doc-lib-tock_cells-816571e4fa975f6b.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":3062756892/;"	a
rustflags	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	a
rustflags	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	a
rustflags	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	a
rustflags	kernel/target/debug/.fingerprint/tock-registers-e7eec879e9fa92db/doc-lib-tock_registers-e7eec879e9fa92db.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":30627568924/;"	a
rustflags	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	a
rustfmt	tools/svd2regs.py	/^def rustfmt(code, path, *args):$/;"	f
rx	chips/cc26x2/src/uart.rs	/^    rx: MapCell<Transaction>,$/;"	m	struct:UART
rx	chips/nrf51/src/radio.rs	/^    fn rx(&self) {$/;"	F	implementation:Radio
rx	chips/nrf52/src/radio.rs	/^    fn rx(&self) {$/;"	F	implementation:Radio
rx	chips/tm4c129x/src/uart.rs	/^    rx: OptionalCell<&'static gpio::GPIOPin>,$/;"	m	struct:UART
rx_abort_in_progress	chips/nrf52/src/uart.rs	/^    rx_abort_in_progress: Cell<bool>,$/;"	m	struct:Uarte
rx_buf	boards/launchxl/src/uart_echo.rs	/^    rx_buf: MapCell<&'static mut [u8]>,$/;"	m	struct:UartEcho
rx_buf	capsules/src/rf233.rs	/^    rx_buf: TakeCell<'static, [u8]>,$/;"	m	struct:RF233
rx_buf	chips/nrf52/src/spi.rs	/^    rx_buf: TakeCell<'static, [u8]>,$/;"	m	struct:SPIM
rx_buffer	capsules/src/console.rs	/^    rx_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:Console
rx_buffer	capsules/src/nrf51822_serialization.rs	/^    rx_buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
rx_buffer	capsules/src/nrf51822_serialization.rs	/^    rx_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:Nrf51822Serialization
rx_buffer	capsules/src/process_console.rs	/^    rx_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:ProcessConsole
rx_buffer	capsules/src/virtual_uart.rs	/^    rx_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:UartDevice
rx_buffer	chips/nrf52/src/uart.rs	/^    rx_buffer: kernel::common::cells::TakeCell<'static, [u8]>,$/;"	m	struct:Uarte
rx_callback	capsules/src/ieee802154/driver.rs	/^    rx_callback: Option<Callback>,$/;"	m	struct:App
rx_callback	capsules/src/net/udp/driver.rs	/^    rx_callback: Option<Callback>,$/;"	m	struct:App
rx_client	capsules/src/ieee802154/framer.rs	/^    rx_client: OptionalCell<&'a RxClient>,$/;"	m	struct:Framer
rx_client	capsules/src/ieee802154/mac.rs	/^    rx_client: OptionalCell<&'static radio::RxClient>,$/;"	m	struct:AwakeMac
rx_client	capsules/src/ieee802154/virtual_mac.rs	/^    rx_client: Cell<Option<&'a device::RxClient>>,$/;"	m	struct:MacUser
rx_client	capsules/src/ieee802154/xmac.rs	/^    rx_client: OptionalCell<&'static radio::RxClient>,$/;"	m	struct:XMac
rx_client	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    rx_client: Cell<Option<&'a SixlowpanRxClient>>,$/;"	m	struct:Sixlowpan
rx_client	capsules/src/rf233.rs	/^    rx_client: OptionalCell<&'static radio::RxClient>,$/;"	m	struct:RF233
rx_client	chips/cc26x2/src/uart.rs	/^    rx_client: OptionalCell<&'static uart::Client>,$/;"	m	struct:UART
rx_client	chips/nrf51/src/radio.rs	/^    rx_client: OptionalCell<&'static ble_advertising::RxClient>,$/;"	m	struct:Radio
rx_client	chips/nrf52/src/radio.rs	/^    rx_client: OptionalCell<&'static ble_advertising::RxClient>,$/;"	m	struct:Radio
rx_dma	chips/sam4l/src/adc.rs	/^    rx_dma: OptionalCell<&'static dma::DMAChannel>,$/;"	m	struct:Adc
rx_dma	chips/sam4l/src/usart.rs	/^    rx_dma: Cell<Option<&'static dma::DMAChannel>>,$/;"	m	struct:USART
rx_dma	chips/sam4l/src/usart.rs	/^    rx_dma: Option<&'static dma::DMAChannel>,$/;"	m	struct:USARTRegManager
rx_dma_peripheral	chips/sam4l/src/adc.rs	/^    rx_dma_peripheral: dma::DMAPeripheral,$/;"	m	struct:Adc
rx_dma_peripheral	chips/sam4l/src/usart.rs	/^    rx_dma_peripheral: dma::DMAPeripheral,$/;"	m	struct:USART
rx_fifo_not_empty	chips/cc26x2/src/uart.rs	/^    pub fn rx_fifo_not_empty(&self) -> bool {$/;"	F	implementation:UART
rx_in_progress	capsules/src/console.rs	/^    rx_in_progress: OptionalCell<AppId>,$/;"	m	struct:Console
rx_in_progress	capsules/src/process_console.rs	/^    rx_in_progress: Cell<bool>,$/;"	m	struct:ProcessConsole
rx_len	capsules/src/virtual_uart.rs	/^    rx_len: Cell<usize>,$/;"	m	struct:UartDevice
rx_len	chips/nrf51/src/i2c.rs	/^    rx_len: Cell<u8>,$/;"	m	struct:TWIM
rx_len	chips/sam4l/src/usart.rs	/^    rx_len: Cell<usize>,$/;"	m	struct:USART
rx_length	chips/sam4l/src/adc.rs	/^    rx_length: Cell<usize>,$/;"	m	struct:Adc
rx_pending	capsules/src/ieee802154/xmac.rs	/^    rx_pending: Cell<bool>,$/;"	m	struct:XMac
rx_position	capsules/src/virtual_uart.rs	/^    rx_position: Cell<usize>,$/;"	m	struct:UartDevice
rx_ready	chips/nrf51/src/uart.rs	/^    fn rx_ready(&self) -> bool {$/;"	F	implementation:UART
rx_ready	chips/nrf52/src/uart.rs	/^    pub fn rx_ready(&self) -> bool {$/;"	F	implementation:Uarte
rx_recv_so_far	capsules/src/nrf51822_serialization.rs	/^    rx_recv_so_far: usize, \/\/ How many RX bytes we have currently received.$/;"	m	struct:App
rx_recv_total	capsules/src/nrf51822_serialization.rs	/^    rx_recv_total: usize,  \/\/ The total number of bytes we expect to receive.$/;"	m	struct:App
rx_remaining_bytes	chips/nrf52/src/uart.rs	/^    rx_remaining_bytes: Cell<usize>,$/;"	m	struct:Uarte
rx_state	capsules/src/ieee802154/framer.rs	/^    rx_state: MapCell<RxState>,$/;"	m	struct:Framer
rx_states	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    rx_states: List<'a, RxState<'a>>,$/;"	m	struct:Sixlowpan
rxaddresses	chips/nrf51/src/radio.rs	/^    rxaddresses: ReadWrite<u32, ReceiveAddress::Register>, \/\/ 0x530 - 0x534$/;"	m	struct:RadioRegisters
rxaddresses	chips/nrf52/src/radio.rs	/^    rxaddresses: ReadWrite<u32, ReceiveAddresses::Register>,$/;"	m	struct:RadioRegisters
rxbuffer	capsules/src/fm25cl.rs	/^    rxbuffer: TakeCell<'static, [u8]>,$/;"	m	struct:FM25CL
rxbuffer	capsules/src/mx25r6435f.rs	/^    rxbuffer: TakeCell<'static, [u8]>,$/;"	m	struct:MX25R6435F
rxbuffer	capsules/src/sdcard.rs	/^    rxbuffer: TakeCell<'static, [u8]>,$/;"	m	struct:SDCard
rxbuffer	capsules/src/virtual_spi.rs	/^    rxbuffer: TakeCell<'static, [u8]>,$/;"	m	struct:VirtualSpiMasterDevice
rxcrc	chips/nrf51/src/radio.rs	/^    rxcrc: ReadOnly<u32, RxCrc::Register>,       \/\/ 0x40c - 0x410$/;"	m	struct:RadioRegisters
rxcrc	chips/nrf52/src/radio.rs	/^    rxcrc: ReadOnly<u32, ReceiveCrc::Register>,$/;"	m	struct:RadioRegisters
rxctrl	chips/sifive/src/uart.rs	/^    rxctrl: ReadWrite<u32, rxctrl::Register>,$/;"	m	struct:UartRegisters
rxd	boards/nordic/nrf52dk_base/src/lib.rs	/^    rxd: usize,$/;"	m	struct:UartPins
rxd	chips/nrf51/src/i2c.rs	/^    rxd: ReadOnly<u32, Data::Register>,$/;"	m	struct:TwimRegisters
rxd	chips/nrf51/src/uart.rs	/^    rxd: ReadWrite<u32, Rxd::Register>,      \/\/........ 0x518$/;"	m	struct:UartRegisters
rxd_amount	chips/nrf52/src/i2c.rs	/^    rxd_amount: ReadWrite<u32>,$/;"	m	struct:TwimRegisters
rxd_amount	chips/nrf52/src/spi.rs	/^    rxd_amount: ReadWrite<u32>,                      \/\/ Number of bytes transferred$/;"	m	struct:SpimRegisters
rxd_amount	chips/nrf52/src/uart.rs	/^    rxd_amount: ReadOnly<u32, Counter::Register>,$/;"	m	struct:UarteRegisters
rxd_list	chips/nrf52/src/i2c.rs	/^    rxd_list: ReadWrite<u32>,$/;"	m	struct:TwimRegisters
rxd_list	chips/nrf52/src/spi.rs	/^    rxd_list: ReadWrite<u32>,                        \/\/ EasyDMA list type$/;"	m	struct:SpimRegisters
rxd_maxcnt	chips/nrf52/src/i2c.rs	/^    rxd_maxcnt: ReadWrite<u32, MAXCNT::Register>,$/;"	m	struct:TwimRegisters
rxd_maxcnt	chips/nrf52/src/spi.rs	/^    rxd_maxcnt: ReadWrite<u32, MAXCNT::Register>,    \/\/ Maximum number of bytes in receive buf/;"	m	struct:SpimRegisters
rxd_maxcnt	chips/nrf52/src/uart.rs	/^    rxd_maxcnt: ReadWrite<u32, Counter::Register>,$/;"	m	struct:UarteRegisters
rxd_ptr	chips/nrf52/src/i2c.rs	/^    rxd_ptr: VolatileCell<*mut u8>,$/;"	m	struct:TwimRegisters
rxd_ptr	chips/nrf52/src/spi.rs	/^    rxd_ptr: VolatileCell<*mut u8>,                  \/\/ Data pointer$/;"	m	struct:SpimRegisters
rxd_ptr	chips/nrf52/src/uart.rs	/^    rxd_ptr: ReadWrite<u32, Pointer::Register>,$/;"	m	struct:UarteRegisters
rxdata	chips/sifive/src/uart.rs	/^    rxdata: ReadWrite<u32, rxdata::Register>,$/;"	m	struct:UartRegisters
rxen	chips/nrf51/src/radio.rs	/^    rxen: WriteOnly<u32, Task::Register>,        \/\/ 0x004 ---> 0x008$/;"	m	struct:RadioRegisters
rxmatch	chips/nrf51/src/radio.rs	/^    rxmatch: ReadOnly<u32, RxMatch::Register>,   \/\/ 0x408 - 0x40c$/;"	m	struct:RadioRegisters
rxmatch	chips/nrf52/src/radio.rs	/^    rxmatch: ReadOnly<u32, ReceiveMatch::Register>,$/;"	m	struct:RadioRegisters
s_claim	arch/riscv32i/src/plic.rs	/^    s_claim: ReadWrite<u32>,$/;"	m	struct:PlicRegisters
s_enable	arch/riscv32i/src/plic.rs	/^    s_enable: [ReadWrite<u32>; 5],$/;"	m	struct:PlicRegisters
s_threshold	arch/riscv32i/src/plic.rs	/^    s_threshold: ReadWrite<u32, priority::Register>,$/;"	m	struct:PlicRegisters
sam4lSerialRegister	chips/sam4l/src/serial_num.rs	/^struct sam4lSerialRegister {$/;"	s
samp	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
sample	capsules/src/adc.rs	/^    fn sample(&self, channel: usize) -> ReturnCode {$/;"	F	implementation:Adc
sample	chips/nrf52/src/adc.rs	/^    fn sample(&self, channel: &Self::Channel) -> ReturnCode {$/;"	F	implementation:Adc
sample	chips/sam4l/src/adc.rs	/^    fn sample(&self, channel: &Self::Channel) -> ReturnCode {$/;"	F	implementation:Adc
sample	kernel/src/hil/adc.rs	/^    fn sample(&self, channel: &Self::Channel) -> ReturnCode;$/;"	F	interface:Adc
sample_buffer	capsules/src/adc.rs	/^    fn sample_buffer(&self, channel: usize, frequency: u32) -> ReturnCode {$/;"	F	implementation:Adc
sample_buffer_continuous	capsules/src/adc.rs	/^    fn sample_buffer_continuous(&self, channel: usize, frequency: u32) -> ReturnCode {$/;"	F	implementation:Adc
sample_continuous	capsules/src/adc.rs	/^    fn sample_continuous(&self, channel: usize, frequency: u32) -> ReturnCode {$/;"	F	implementation:Adc
sample_continuous	chips/nrf52/src/adc.rs	/^    fn sample_continuous(&self, _channel: &Self::Channel, _frequency: u32) -> ReturnCode {$/;"	F	implementation:Adc
sample_continuous	chips/sam4l/src/adc.rs	/^    fn sample_continuous(&self, channel: &Self::Channel, frequency: u32) -> ReturnCode {$/;"	F	implementation:Adc
sample_continuous	kernel/src/hil/adc.rs	/^    fn sample_continuous(&self, channel: &Self::Channel, frequency: u32) -> ReturnCode;$/;"	F	interface:Adc
sample_highspeed	chips/sam4l/src/adc.rs	/^    fn sample_highspeed($/;"	F	implementation:Adc
sample_highspeed	kernel/src/hil/adc.rs	/^    fn sample_highspeed($/;"	F	interface:AdcHighSpeed
sample_ready	capsules/src/adc.rs	/^    fn sample_ready(&self, sample: u16) {$/;"	F	implementation:Adc
sample_ready	kernel/src/hil/adc.rs	/^    fn sample_ready(&self, sample: u16);$/;"	F	interface:Client
samplerate	chips/nrf52/src/adc.rs	/^    samplerate: ReadWrite<u32, SAMPLERATE::Register>,$/;"	m	struct:AdcRegisters
samples_outstanding	capsules/src/adc.rs	/^    samples_outstanding: Cell<usize>,$/;"	m	struct:Adc
samples_ready	capsules/src/adc.rs	/^    fn samples_ready(&self, buf: &'static mut [u16], length: usize) {$/;"	F	implementation:Adc
samples_ready	kernel/src/hil/adc.rs	/^    fn samples_ready(&self, buf: &'static mut [u16], length: usize);$/;"	F	interface:HighSpeedClient
samples_remaining	capsules/src/adc.rs	/^    samples_remaining: Cell<usize>,$/;"	m	struct:Adc
sampling_period	capsules/src/tmp006.rs	/^    sampling_period: Cell<u8>,$/;"	m	struct:TMP006
save_pin_interrupt_state	capsules/src/mcp230xx.rs	/^    fn save_pin_interrupt_state($/;"	F	implementation:MCP230xx
save_tag_block	capsules/src/aes_ccm.rs	/^    fn save_tag_block(&self) {$/;"	F	implementation:AES128CCM
savedHref	kernel/target/doc/storage.js	/^ *\/var currentTheme=document.getElementById("themeStyle");var mainTheme=document.getElementById/;"	v
saved_tag	capsules/src/aes_ccm.rs	/^    saved_tag: Cell<[u8; AES128_BLOCK_SIZE]>,$/;"	m	struct:AES128CCM
sbrk	kernel/src/process.rs	/^    fn sbrk(&self, increment: isize) -> Result<*const u8, Error> {$/;"	F	implementation:Process
sbrk	kernel/src/process.rs	/^    fn sbrk(&self, increment: isize) -> Result<*const u8, Error>;$/;"	F	interface:ProcessType
scan_buffer	capsules/src/ble_advertising_driver.rs	/^    scan_buffer: Option<kernel::AppSlice<kernel::Shared, u8>>,$/;"	m	struct:App
scan_callback	capsules/src/ble_advertising_driver.rs	/^    scan_callback: Option<kernel::Callback>,$/;"	m	struct:App
scb	arch/cortex-m/src/lib.rs	/^pub mod scb;$/;"	n
scgcacmp	chips/tm4c129x/src/sysctl.rs	/^    scgcacmp: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcadc	chips/tm4c129x/src/sysctl.rs	/^    scgcadc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgccan	chips/tm4c129x/src/sysctl.rs	/^    scgccan: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcccm	chips/tm4c129x/src/sysctl.rs	/^    scgcccm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcdma	chips/tm4c129x/src/sysctl.rs	/^    scgcdma: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgceeprom	chips/tm4c129x/src/sysctl.rs	/^    scgceeprom: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcemac	chips/tm4c129x/src/sysctl.rs	/^    scgcemac: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcephy	chips/tm4c129x/src/sysctl.rs	/^    scgcephy: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcepi	chips/tm4c129x/src/sysctl.rs	/^    scgcepi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcgpio	chips/tm4c129x/src/sysctl.rs	/^    scgcgpio: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgchib	chips/tm4c129x/src/sysctl.rs	/^    scgchib: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgci2c	chips/tm4c129x/src/sysctl.rs	/^    scgci2c: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcpwm	chips/tm4c129x/src/sysctl.rs	/^    scgcpwm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcqei	chips/tm4c129x/src/sysctl.rs	/^    scgcqei: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcssi	chips/tm4c129x/src/sysctl.rs	/^    scgcssi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgctimer	chips/tm4c129x/src/sysctl.rs	/^    scgctimer: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcuart	chips/tm4c129x/src/sysctl.rs	/^    scgcuart: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcusb	chips/tm4c129x/src/sysctl.rs	/^    scgcusb: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
scgcwd	chips/tm4c129x/src/sysctl.rs	/^    scgcwd: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
sched	kernel/src/lib.rs	/^mod sched;$/;"	n
schedule	kernel/src/callback.rs	/^    pub fn schedule(&mut self, r0: usize, r1: usize, r2: usize) -> bool {$/;"	F	implementation:Callback
schedule_callback	kernel/src/ipc.rs	/^    pub unsafe fn schedule_callback($/;"	F	implementation:IPC
schedule_next	boards/imix/src/icmp_lowpan_test.rs	/^    fn schedule_next(&self) {$/;"	F	implementation:LowpanICMPTest
schedule_next	boards/imix/src/ipv6_lowpan_test.rs	/^    fn schedule_next(&self) {$/;"	F	implementation:LowpanTest
schedule_next	boards/imix/src/sixlowpan_dummy.rs	/^    fn schedule_next(&self) {$/;"	F	implementation:LowpanTest
schedule_next	boards/imix/src/udp_lowpan_test.rs	/^    fn schedule_next(&self) {$/;"	F	implementation:LowpanTest
scif	chips/sam4l/src/lib.rs	/^pub mod scif;$/;"	n
scr	arch/cortex-m/src/scb.rs	/^    scr: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
scr	chips/sam4l/src/adc.rs	/^    scr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:AdcRegisters
scr	chips/sam4l/src/ast.rs	/^    scr: WriteOnly<u32, Interrupt::Register>,$/;"	m	struct:AstRegisters
scr	chips/sam4l/src/i2c.rs	/^    scr: WriteOnly<u32, StatusClear::Register>,$/;"	m	struct:TWIMRegisters
scr	chips/sam4l/src/i2c.rs	/^    scr: WriteOnly<u32, StatusClearSlave::Register>,$/;"	m	struct:TWISRegisters
sdcard	capsules/src/lib.rs	/^pub mod sdcard;$/;"	n
sdcard	capsules/src/sdcard.rs	/^    sdcard: &'a SDCard<'a, A>,$/;"	m	struct:SDCardDriver
search	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
searchIndex	kernel/target/doc/search-index.js	/^searchIndex["tock_cells"]={"doc":"Tock Cell types.","items":[[0,"map_cell","tock_cells","Tock sp/;"	c
searchIndex	kernel/target/doc/search-index.js	/^searchIndex["tock_registers"]={"doc":"Tock Register Interface","items":[[0,"macros","tock_regist/;"	c
searchIndex	kernel/target/doc/search-index.js	/^var N = null;var searchIndex = {};$/;"	v
sec	chips/cc26x2/src/rtc.rs	/^    sec: ReadWrite<u32>,$/;"	m	struct:RtcRegisters
sec_dma_clk_deep_sleep	chips/cc26x2/src/prcm.rs	/^    pub sec_dma_clk_deep_sleep: ReadWrite<u32, SECDMAClockGate::Register>,$/;"	m	struct:PrcmRegisters
sec_dma_clk_run	chips/cc26x2/src/prcm.rs	/^    pub sec_dma_clk_run: ReadWrite<u32, SECDMAClockGate::Register>,$/;"	m	struct:PrcmRegisters
sec_dma_clk_sleep	chips/cc26x2/src/prcm.rs	/^    pub sec_dma_clk_sleep: ReadWrite<u32, SECDMAClockGate::Register>,$/;"	m	struct:PrcmRegisters
section	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
secured_length	capsules/src/ieee802154/framer.rs	/^    fn secured_length(&self) -> usize {$/;"	F	implementation:FrameInfo
security	capsules/src/net/ieee802154.rs	/^    pub security: Option<Security>,$/;"	m	struct:Header
security	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    security: Cell<Option<(SecurityLevel, KeyId)>>,$/;"	m	struct:TxState
security_control	capsules/src/net/ieee802154.rs	/^mod security_control {$/;"	n
security_params	capsules/src/ieee802154/framer.rs	/^    security_params: Option<(SecurityLevel, [u8; 16], [u8; 13])>,$/;"	m	struct:FrameInfo
seed	capsules/src/rng.rs	/^    seed: Cell<u32>,$/;"	m	struct:SynchronousRandom
segger_rtt	capsules/src/lib.rs	/^pub mod segger_rtt;$/;"	n
select	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
select_channels	capsules/src/pca9544a.rs	/^    fn select_channels(&self, channel_bitmask: u8) -> ReturnCode {$/;"	F	implementation:PCA9544A
select_clock	chips/sam4l/src/ast.rs	/^    fn select_clock(&self, clock: Clock) {$/;"	F	implementation:Ast
select_clock	chips/sam4l/src/wdt.rs	/^    fn select_clock(&self, clock: WdtClockSource) {$/;"	F	implementation:Wdt
select_main_clock	chips/sam4l/src/pm.rs	/^fn select_main_clock(clock: MainClock) {$/;"	f
select_peripheral	chips/sam4l/src/gpio.rs	/^    pub fn select_peripheral(&self, function: PeripheralFunction) {$/;"	F	implementation:GPIOPin
selected_callback	capsules/src/spi.rs	/^    selected_callback: Option<Callback>,$/;"	m	struct:SlaveApp
send	capsules/src/console.rs	/^    fn send(&self, app_id: AppId, app: &mut App, slice: AppSlice<Shared, u8>) {$/;"	F	implementation:Console
send	capsules/src/net/icmpv6/icmpv6_send.rs	/^    fn send(&self, dest: IPAddr, icmp_header: ICMP6Header, buf: &'a [u8]) -> ReturnCode;$/;"	F	interface:ICMP6Sender
send	capsules/src/net/icmpv6/icmpv6_send.rs	/^    fn send(&self, dest: IPAddr, mut icmp_header: ICMP6Header, buf: &'a [u8]) -> ReturnCode {$/;"	F	implementation:ICMP6SendStruct
send	capsules/src/net/udp/udp_send.rs	/^    fn send(&self, dest: IPAddr, mut udp_header: UDPHeader, buf: &[u8]) -> ReturnCode {$/;"	F	implementation:UDPSendStruct
send	capsules/src/net/udp/udp_send.rs	/^    fn send(&self, dest: IPAddr, udp_header: UDPHeader, buf: &[u8]) -> ReturnCode;$/;"	F	interface:UDPSender
send_advertisement	capsules/src/ble_advertising_driver.rs	/^    fn send_advertisement<'a, B, A>(&self, ble: &BLE<'a, B, A>, channel: RadioChannel) -> Return/;"	F	implementation:App
send_byte	chips/cc26x2/src/uart.rs	/^    pub fn send_byte(&self, c: u8) {$/;"	F	implementation:UART
send_byte	chips/nrf51/src/uart.rs	/^    pub unsafe fn send_byte(&self, byte: u8) {$/;"	F	implementation:UART
send_byte	chips/nrf52/src/uart.rs	/^    pub unsafe fn send_byte(&self, byte: u8) {$/;"	F	implementation:Uarte
send_byte	chips/sam4l/src/usart.rs	/^    pub fn send_byte(&self, usart: &USARTRegManager, byte: u8) {$/;"	F	implementation:USART
send_byte	chips/tm4c129x/src/uart.rs	/^    pub fn send_byte(&self, byte: u8) {$/;"	F	implementation:UART
send_command	capsules/src/sdcard.rs	/^    fn send_command($/;"	F	implementation:SDCard
send_completed	capsules/src/net/ipv6/ipv6_send.rs	/^    fn send_completed(&self, result: ReturnCode) {$/;"	F	implementation:IP6SendStruct
send_continue	capsules/src/console.rs	/^    fn send_continue(&self, app_id: AppId, app: &mut App) -> Result<bool, ReturnCode> {$/;"	F	implementation:Console
send_done	boards/imix/src/icmp_lowpan_test.rs	/^    fn send_done(&self, result: ReturnCode) {$/;"	F	implementation:LowpanICMPTest
send_done	boards/imix/src/ipv6_lowpan_test.rs	/^    fn send_done(&self, tx_buf: &'static mut [u8], _acked: bool, result: ReturnCode) {$/;"	F	implementation:LowpanTest
send_done	boards/imix/src/udp_lowpan_test.rs	/^    fn send_done(&self, result: ReturnCode) {$/;"	F	implementation:LowpanTest
send_done	capsules/src/ieee802154/device.rs	/^    fn send_done(&self, spi_buf: &'static mut [u8], acked: bool, result: ReturnCode);$/;"	F	interface:TxClient
send_done	capsules/src/ieee802154/driver.rs	/^    fn send_done(&self, spi_buf: &'static mut [u8], acked: bool, result: ReturnCode) {$/;"	F	implementation:RadioDriver
send_done	capsules/src/ieee802154/framer.rs	/^    fn send_done(&self, buf: &'static mut [u8], acked: bool, result: ReturnCode) {$/;"	F	implementation:Framer
send_done	capsules/src/ieee802154/mac.rs	/^    fn send_done(&self, buf: &'static mut [u8], acked: bool, result: ReturnCode) {$/;"	F	implementation:AwakeMac
send_done	capsules/src/ieee802154/virtual_mac.rs	/^    fn send_done(&self, spi_buf: &'static mut [u8], acked: bool, result: ReturnCode) {$/;"	F	implementation:MacUser
send_done	capsules/src/ieee802154/virtual_mac.rs	/^    fn send_done(&self, spi_buf: &'static mut [u8], acked: bool, result: ReturnCode) {$/;"	F	implementation:MuxMac
send_done	capsules/src/ieee802154/xmac.rs	/^    fn send_done(&self, buf: &'static mut [u8], acked: bool, result: ReturnCode) {$/;"	F	implementation:XMac
send_done	capsules/src/net/icmpv6/icmpv6_send.rs	/^    fn send_done(&self, result: ReturnCode) {$/;"	F	implementation:ICMP6SendStruct
send_done	capsules/src/net/icmpv6/icmpv6_send.rs	/^    fn send_done(&self, result: ReturnCode);$/;"	F	interface:ICMP6SendClient
send_done	capsules/src/net/ipv6/ipv6_send.rs	/^    fn send_done(&self, result: ReturnCode);$/;"	F	interface:IP6SendClient
send_done	capsules/src/net/ipv6/ipv6_send.rs	/^    fn send_done(&self, tx_buf: &'static mut [u8], acked: bool, result: ReturnCode) {$/;"	F	implementation:IP6SendStruct
send_done	capsules/src/net/udp/driver.rs	/^    fn send_done(&self, result: ReturnCode) {$/;"	F	implementation:UDPDriver
send_done	capsules/src/net/udp/udp_send.rs	/^    fn send_done(&self, result: ReturnCode) {$/;"	F	implementation:UDPSendStruct
send_done	capsules/src/net/udp/udp_send.rs	/^    fn send_done(&self, result: ReturnCode);$/;"	F	interface:UDPSendClient
send_done	kernel/src/hil/radio.rs	/^    fn send_done(&self, buf: &'static mut [u8], acked: bool, result: ReturnCode);$/;"	F	interface:TxClient
send_ipv6_packet	boards/imix/src/icmp_lowpan_test.rs	/^    unsafe fn send_ipv6_packet(&self) {$/;"	F	implementation:LowpanICMPTest
send_ipv6_packet	boards/imix/src/ipv6_lowpan_test.rs	/^    unsafe fn send_ipv6_packet(&self, _: &[u8]) {$/;"	F	implementation:LowpanTest
send_ipv6_packet	boards/imix/src/sixlowpan_dummy.rs	/^unsafe fn send_ipv6_packet<'a>(radio: &'a Radio,$/;"	f
send_ipv6_packet	boards/imix/src/udp_lowpan_test.rs	/^    unsafe fn send_ipv6_packet(&self) {$/;"	F	implementation:LowpanTest
send_new	capsules/src/console.rs	/^    fn send_new(&self, app_id: AppId, app: &mut App, len: usize) -> ReturnCode {$/;"	F	implementation:Console
send_next	boards/imix/src/icmp_lowpan_test.rs	/^    fn send_next(&self) {$/;"	F	implementation:LowpanICMPTest
send_next	boards/imix/src/ipv6_lowpan_test.rs	/^    fn send_next(&self, tx_buf: &'static mut [u8]) {$/;"	F	implementation:LowpanTest
send_next	boards/imix/src/udp_lowpan_test.rs	/^    fn send_next(&self) {$/;"	F	implementation:LowpanTest
send_next	chips/tm4c129x/src/uart.rs	/^    fn send_next(&self) {$/;"	F	implementation:UART
send_next_fragment	capsules/src/net/ipv6/ipv6_send.rs	/^    fn send_next_fragment(&self) -> ReturnCode {$/;"	F	implementation:IP6SendStruct
send_to	capsules/src/net/ipv6/ipv6_send.rs	/^    fn send_to($/;"	F	implementation:IP6SendStruct
send_to	capsules/src/net/ipv6/ipv6_send.rs	/^    fn send_to(&self, dst: IPAddr, transport_header: TransportHeader, payload: &[u8])$/;"	F	interface:IP6Sender
send_to	capsules/src/net/udp/udp_send.rs	/^    fn send_to(&self, dest: IPAddr, dst_port: u16, src_port: u16, buf: &[u8]) -> ReturnCode {$/;"	F	implementation:UDPSendStruct
send_to	capsules/src/net/udp/udp_send.rs	/^    fn send_to(&self, dest: IPAddr, dst_port: u16, src_port: u16, buf: &[u8]) -> ReturnCode;$/;"	F	interface:UDPSender
sender	capsules/src/net/udp/driver.rs	/^    sender: &'a UDPSender<'a>,$/;"	m	struct:UDPDriver
sending_app	capsules/src/ble_advertising_driver.rs	/^    sending_app: OptionalCell<kernel::AppId>,$/;"	m	struct:BLE
sensor	capsules/src/ambient_light.rs	/^    sensor: &'a hil::sensors::AmbientLight,$/;"	m	struct:AmbientLight
sensor_type_e	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^} sensor_type_e;$/;"	t	typeref:enum:__anon22758edd0103	file:
sensor_update_t	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^} sensor_update_t;$/;"	t	typeref:struct:__anon22758edd0208	file:
sensors	boards/imix/src/power.rs	/^    pub sensors: bool,$/;"	m	struct:SubmoduleConfig
sensors	kernel/src/hil/mod.rs	/^pub mod sensors;$/;"	n
seq	capsules/src/net/ieee802154.rs	/^    pub seq: Option<u8>,$/;"	m	struct:Header
seq_num	capsules/src/net/tcp.rs	/^    pub seq_num: u32,$/;"	m	struct:TCPHeader
seqcfg	chips/sam4l/src/adc.rs	/^    seqcfg: ReadWrite<u32, SequencerConfig::Register>,$/;"	m	struct:AdcRegisters
serial_num	chips/sam4l/src/lib.rs	/^pub mod serial_num;$/;"	n
serial_num	chips/sam4l/src/serial_num.rs	/^    serial_num: [u8; 15],$/;"	m	struct:sam4lSerialRegister
serial_number_string	capsules/src/usb.rs	/^    pub serial_number_string: u8,$/;"	m	struct:DeviceDescriptor
serve_waiting_apps	capsules/src/crc.rs	/^    fn serve_waiting_apps(&self) {$/;"	F	implementation:Crc
serve_waiting_apps	capsules/src/usb_user.rs	/^    fn serve_waiting_apps(&self) {$/;"	f
service_pending_interrupts	chips/arty_exx/src/chip.rs	/^    fn service_pending_interrupts(&self) {$/;"	F	implementation:ArtyExx
service_pending_interrupts	chips/cc26x2/src/chip.rs	/^    fn service_pending_interrupts(&self) {$/;"	F	implementation:Cc26X2
service_pending_interrupts	chips/e310x/src/chip.rs	/^    fn service_pending_interrupts(&self) {$/;"	F	implementation:E310x
service_pending_interrupts	chips/nrf51/src/chip.rs	/^    fn service_pending_interrupts(&self) {$/;"	F	implementation:NRF51
service_pending_interrupts	chips/nrf52/src/chip.rs	/^    fn service_pending_interrupts(&self) {$/;"	F	implementation:NRF52
service_pending_interrupts	chips/sam4l/src/chip.rs	/^    fn service_pending_interrupts(&self) {$/;"	F	implementation:Sam4l
service_pending_interrupts	chips/tm4c129x/src/chip.rs	/^    fn service_pending_interrupts(&self) {$/;"	F	implementation:Tm4c129x
service_pending_interrupts	kernel/src/platform/mod.rs	/^    fn service_pending_interrupts(&self);$/;"	F	interface:Chip
serving_app	capsules/src/crc.rs	/^    serving_app: OptionalCell<AppId>,$/;"	m	struct:Crc
serving_app	capsules/src/usb_user.rs	/^    serving_app: OptionalCell<AppId>,$/;"	m	struct:UsbSyscallDriver
set	capsules/src/mcp230xx.rs	/^    fn set(&self, pin: usize) -> ReturnCode {$/;"	F	implementation:MCP230xx
set	chips/cc26x2/src/gpio.rs	/^    fn set(&self) {$/;"	F	implementation:GPIOPin
set	chips/nrf5x/src/gpio.rs	/^    fn set(&self) {$/;"	F	implementation:GPIOPin
set	chips/sam4l/src/gpio.rs	/^    fn set(&self) {$/;"	F	implementation:GPIOPin
set	chips/sam4l/src/gpio.rs	/^    pub fn set(&self) {$/;"	F	implementation:GPIOPin
set	chips/sam4l/src/gpio.rs	/^    set: WriteOnly<u32>,$/;"	m	struct:Register
set	chips/sifive/src/gpio.rs	/^    fn set(&self) {$/;"	F	implementation:GpioPin
set	chips/sifive/src/gpio.rs	/^    set: FieldValue<u32, pins::Register>,$/;"	m	struct:GpioPin
set	chips/tm4c129x/src/gpio.rs	/^    fn set(&self) {$/;"	F	implementation:GPIOPin
set	chips/tm4c129x/src/gpio.rs	/^    pub fn set(&self) {$/;"	F	implementation:GPIOPin
set	kernel/src/common/deferred_call.rs	/^    pub fn set(&self) {$/;"	F	implementation:DeferredCall
set	kernel/src/hil/gpio.rs	/^    fn set(&self);$/;"	F	interface:Pin
set	kernel/src/hil/gpio_async.rs	/^    fn set(&self, pin: usize) -> ReturnCode;$/;"	F	interface:Port
set	libraries/tock-cells/src/optional_cell.rs	/^    pub fn set(&self, val: T) {$/;"	F	implementation:OptionalCell
set	libraries/tock-cells/src/volatile_cell.rs	/^    pub fn set(&self, value: T) {$/;"	F	implementation:VolatileCell
set	libraries/tock-register-interface/src/registers.rs	/^    pub fn set(&self, value: T) {$/;"	F	implementation:ReadWrite
set	libraries/tock-register-interface/src/registers.rs	/^    pub fn set(&self, value: T) {$/;"	F	implementation:WriteOnly
setEvents	kernel/target/doc/settings.js	/^ *\/(function(){function changeSetting(settingName,isEnabled){updateLocalStorage('rustdoc-'+sett/;"	f
set_active_peripheral	chips/sam4l/src/spi.rs	/^    pub fn set_active_peripheral(&self, peripheral: Peripheral) {$/;"	F	implementation:SpiHw
set_addr	capsules/src/net/ipv6/ipv6_send.rs	/^    fn set_addr(&self, src_addr: IPAddr) {$/;"	F	implementation:IP6SendStruct
set_addr	capsules/src/net/ipv6/ipv6_send.rs	/^    fn set_addr(&self, src_addr: IPAddr);$/;"	F	interface:IP6Sender
set_addr	chips/sam4l/src/usbc/mod.rs	/^    pub fn set_addr(&self, addr: *mut u8) {$/;"	F	implementation:Bank
set_address	capsules/src/ieee802154/device.rs	/^    fn set_address(&self, addr: u16);$/;"	F	interface:MacDevice
set_address	capsules/src/ieee802154/framer.rs	/^    fn set_address(&self, addr: u16) {$/;"	F	implementation:Framer
set_address	capsules/src/ieee802154/mac.rs	/^    fn set_address(&self, addr: u16) {$/;"	F	implementation:AwakeMac
set_address	capsules/src/ieee802154/mac.rs	/^    fn set_address(&self, addr: u16);$/;"	F	interface:Mac
set_address	capsules/src/ieee802154/virtual_mac.rs	/^    fn set_address(&self, addr: u16) {$/;"	F	implementation:MacUser
set_address	capsules/src/ieee802154/xmac.rs	/^    fn set_address(&self, addr: u16) {$/;"	F	implementation:XMac
set_address	capsules/src/rf233.rs	/^    fn set_address(&self, addr: u16) {$/;"	F	implementation:RF233
set_address	chips/nrf51/src/i2c.rs	/^    fn set_address(&self, _addr: u8) {$/;"	F	implementation:TWIM
set_address	chips/nrf52/src/i2c.rs	/^    fn set_address(&self, _addr: u8) {$/;"	F	implementation:TWIM
set_address	chips/sam4l/src/i2c.rs	/^    fn set_address(&self, addr: u8) {$/;"	F	implementation:I2CHw
set_address	chips/sam4l/src/usbc/mod.rs	/^    fn set_address(&self, addr: u16) {$/;"	F	implementation:Usbc
set_address	kernel/src/hil/i2c.rs	/^    fn set_address(&self, addr: u8);$/;"	F	interface:I2CSlave
set_address	kernel/src/hil/radio.rs	/^    fn set_address(&self, addr: u16);$/;"	F	interface:RadioConfig
set_address	kernel/src/hil/usb.rs	/^    fn set_address(&self, addr: u16);$/;"	F	interface:UsbController
set_alarm	capsules/src/virtual_alarm.rs	/^    fn set_alarm(&self, when: u32) {$/;"	F	implementation:VirtualMuxAlarm
set_alarm	chips/cc26x2/src/rtc.rs	/^    fn set_alarm(&self, tics: u32) {$/;"	F	implementation:Rtc
set_alarm	chips/nrf5x/src/rtc.rs	/^    fn set_alarm(&self, tics: u32) {$/;"	F	implementation:Rtc
set_alarm	chips/nrf5x/src/timer.rs	/^    fn set_alarm(&self, tics: u32) {$/;"	F	implementation:TimerAlarm
set_alarm	chips/sam4l/src/ast.rs	/^    fn set_alarm(&self, mut tics: u32) {$/;"	F	implementation:Ast
set_alarm	chips/tm4c129x/src/gpt.rs	/^    fn set_alarm(&self, tics: u32) {$/;"	F	implementation:AlarmTimer
set_alarm	kernel/src/hil/time.rs	/^    fn set_alarm(&self, tics: u32);$/;"	F	interface:Alarm
set_baud_rate	chips/cc26x2/src/uart.rs	/^    fn set_baud_rate(&self, baud_rate: u32) {$/;"	F	implementation:UART
set_baud_rate	chips/nrf51/src/uart.rs	/^    fn set_baud_rate(&self, baud_rate: u32) {$/;"	F	implementation:UART
set_baud_rate	chips/nrf52/src/uart.rs	/^    fn set_baud_rate(&self, baud_rate: u32) {$/;"	F	implementation:Uarte
set_baud_rate	chips/sam4l/src/spi.rs	/^    pub fn set_baud_rate(&self, rate: u32) -> u32 {$/;"	F	implementation:SpiHw
set_baud_rate	chips/sam4l/src/usart.rs	/^    fn set_baud_rate(&self, usart: &USARTRegManager, baud_rate: u32) {$/;"	F	implementation:USART
set_baud_rate	chips/sifive/src/uart.rs	/^    fn set_baud_rate(&self, baud_rate: u32) {$/;"	F	implementation:Uart
set_baud_rate	chips/tm4c129x/src/uart.rs	/^    fn set_baud_rate(&self, baud_rate: u32) {$/;"	F	implementation:UART
set_bit	capsules/src/net/frag_utils.rs	/^    pub fn set_bit(&mut self, idx: usize) {$/;"	F	implementation:Bitmap
set_bits	capsules/src/net/frag_utils.rs	/^    pub fn set_bits(&mut self, start_idx: usize, end_idx: usize) -> bool {$/;"	F	implementation:Bitmap
set_bus_speed	chips/sam4l/src/i2c.rs	/^    fn set_bus_speed(&self, twim: &TWIMRegisterManager) {$/;"	F	implementation:I2CHw
set_channel	capsules/src/rf233.rs	/^    fn set_channel(&self, chan: u8) -> ReturnCode {$/;"	F	implementation:RF233
set_channel	kernel/src/hil/radio.rs	/^    fn set_channel(&self, chan: u8) -> ReturnCode;$/;"	F	interface:RadioConfig
set_channel_freq	chips/nrf51/src/radio.rs	/^    fn set_channel_freq(&self, channel: RadioChannel) {$/;"	F	implementation:Radio
set_channel_rate	chips/nrf51/src/radio.rs	/^    fn set_channel_rate(&self, rate: u32) {$/;"	F	implementation:Radio
set_ck32source	chips/sam4l/src/bpm.rs	/^pub unsafe fn set_ck32source(source: CK32Source) {$/;"	f
set_cksum	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn set_cksum(&mut self, cksum: u16) {$/;"	F	implementation:ICMP6Header
set_cksum	capsules/src/net/udp/udp.rs	/^    pub fn set_cksum(&mut self, cksum: u16) {$/;"	F	implementation:UDPHeader
set_client	capsules/src/aes_ccm.rs	/^    fn set_client(&self, client: &'a symmetric_encryption::CCMClient) {$/;"	F	implementation:AES128CCM
set_client	capsules/src/fm25cl.rs	/^    fn set_client(&self, client: &'static hil::nonvolatile_storage::NonvolatileStorageClient) {$/;"	F	implementation:FM25CL
set_client	capsules/src/fm25cl.rs	/^    pub fn set_client<C: FM25CLClient>(&self, client: &'static C) {$/;"	F	implementation:FM25CL
set_client	capsules/src/fxos8700cq.rs	/^    fn set_client(&self, client: &'static hil::sensors::NineDofClient) {$/;"	F	implementation:Fxos8700cq
set_client	capsules/src/isl29035.rs	/^    fn set_client(&self, client: &'static AmbientLightClient) {$/;"	F	implementation:Isl29035
set_client	capsules/src/ltc294x.rs	/^    pub fn set_client<C: LTC294XClient>(&self, client: &'static C) {$/;"	F	implementation:LTC294X
set_client	capsules/src/max17205.rs	/^    pub fn set_client<C: MAX17205Client>(&self, client: &'static C) {$/;"	F	implementation:MAX17205
set_client	capsules/src/mcp230xx.rs	/^    pub fn set_client<C: hil::gpio_async::Client>(&self, client: &'static C) {$/;"	F	implementation:MCP230xx
set_client	capsules/src/mx25r6435f.rs	/^    fn set_client(&self, client: &'a C) {$/;"	F	implementation:MX25R6435F
set_client	capsules/src/net/icmpv6/icmpv6_send.rs	/^    fn set_client(&self, client: &'a ICMP6SendClient) {$/;"	F	implementation:ICMP6SendStruct
set_client	capsules/src/net/icmpv6/icmpv6_send.rs	/^    fn set_client(&self, client: &'a ICMP6SendClient);$/;"	F	interface:ICMP6Sender
set_client	capsules/src/net/ipv6/ipv6_recv.rs	/^    fn set_client(&self, client: &'a IP6RecvClient) {$/;"	F	implementation:IP6RecvStruct
set_client	capsules/src/net/ipv6/ipv6_recv.rs	/^    fn set_client(&self, client: &'a IP6RecvClient);$/;"	F	interface:IP6Receiver
set_client	capsules/src/net/ipv6/ipv6_send.rs	/^    fn set_client(&self, client: &'a IP6SendClient) {$/;"	F	implementation:IP6SendStruct
set_client	capsules/src/net/ipv6/ipv6_send.rs	/^    fn set_client(&self, client: &'a IP6SendClient);$/;"	F	interface:IP6Sender
set_client	capsules/src/net/udp/udp_recv.rs	/^    pub fn set_client(&self, client: &'a UDPRecvClient) {$/;"	F	implementation:UDPReceiver
set_client	capsules/src/net/udp/udp_send.rs	/^    fn set_client(&self, client: &'a UDPSendClient) {$/;"	F	implementation:UDPSendStruct
set_client	capsules/src/net/udp/udp_send.rs	/^    fn set_client(&self, client: &'a UDPSendClient);$/;"	F	interface:UDPSender
set_client	capsules/src/nonvolatile_storage_driver.rs	/^    fn set_client(&self, client: &'static hil::nonvolatile_storage::NonvolatileStorageClient) {$/;"	F	implementation:NonvolatileStorage
set_client	capsules/src/nonvolatile_to_pages.rs	/^    fn set_client(&self, client: &'static hil::nonvolatile_storage::NonvolatileStorageClient) {$/;"	F	implementation:NonvolatileToPages
set_client	capsules/src/rng.rs	/^    fn set_client(&'a self, client: &'a entropy::Client32) {$/;"	F	implementation:Entropy8To32
set_client	capsules/src/rng.rs	/^    fn set_client(&'a self, client: &'a entropy::Client8) {$/;"	F	implementation:Entropy32To8
set_client	capsules/src/rng.rs	/^    fn set_client(&'a self, client: &'a rng::Client) {$/;"	F	implementation:Entropy32ToRandom
set_client	capsules/src/sdcard.rs	/^    pub fn set_client<C: SDCardClient>(&self, client: &'static C) {$/;"	F	implementation:SDCard
set_client	capsules/src/segger_rtt.rs	/^    fn set_client(&self, client: &'static hil::uart::Client) {$/;"	F	implementation:SeggerRtt
set_client	capsules/src/si7021.rs	/^    fn set_client(&self, client: &'static kernel::hil::sensors::HumidityClient) {$/;"	F	implementation:SI7021
set_client	capsules/src/si7021.rs	/^    fn set_client(&self, client: &'static kernel::hil::sensors::TemperatureClient) {$/;"	F	implementation:SI7021
set_client	capsules/src/virtual_alarm.rs	/^    pub fn set_client(&'a self, client: &'a time::Client) {$/;"	F	implementation:VirtualMuxAlarm
set_client	capsules/src/virtual_flash.rs	/^    fn set_client(&'a self, client: &'a C) {$/;"	F	implementation:FlashUser
set_client	capsules/src/virtual_i2c.rs	/^    pub fn set_client(&'a self, client: &'a I2CClient) {$/;"	F	implementation:I2CDevice
set_client	capsules/src/virtual_spi.rs	/^    pub fn set_client(&'a self, client: &'a hil::spi::SpiMasterClient) {$/;"	F	implementation:VirtualSpiMasterDevice
set_client	capsules/src/virtual_spi.rs	/^    pub fn set_client(&'a self, client: &'a hil::spi::SpiSlaveClient) {$/;"	F	implementation:VirtualSpiSlaveDevice
set_client	capsules/src/virtual_uart.rs	/^    fn set_client(&self, client: &'a hil::uart::Client) {$/;"	F	implementation:UartDevice
set_client	chips/cc26x2/src/gpio.rs	/^    pub fn set_client<C: hil::gpio::Client>(&self, client: &'static C) {$/;"	F	implementation:GPIOPin
set_client	chips/cc26x2/src/i2c.rs	/^    pub fn set_client(&'a self, client: &'a i2c::I2CHwMasterClient) {$/;"	F	implementation:I2CMaster
set_client	chips/cc26x2/src/rtc.rs	/^    pub fn set_client(&self, client: &'static time::Client) {$/;"	F	implementation:Rtc
set_client	chips/cc26x2/src/trng.rs	/^    fn set_client(&'a self, client: &'a entropy::Client32) {$/;"	F	implementation:Trng
set_client	chips/cc26x2/src/uart.rs	/^    fn set_client(&self, client: &'static kernel::hil::uart::Client) {$/;"	F	implementation:UART
set_client	chips/nrf51/src/clock.rs	/^    pub fn set_client(&self, client: &'static ClockClient) {$/;"	F	implementation:Clock
set_client	chips/nrf51/src/i2c.rs	/^    pub fn set_client(&self, client: &'static i2c::I2CHwMasterClient) {$/;"	F	implementation:TWIM
set_client	chips/nrf51/src/uart.rs	/^    fn set_client(&self, client: &'static uart::Client) {$/;"	F	implementation:UART
set_client	chips/nrf52/src/adc.rs	/^    pub fn set_client(&self, client: &'static hil::adc::Client) {$/;"	F	implementation:Adc
set_client	chips/nrf52/src/clock.rs	/^    pub fn set_client(&self, client: &'static ClockClient) {$/;"	F	implementation:Clock
set_client	chips/nrf52/src/i2c.rs	/^    pub fn set_client(&self, client: &'static hil::i2c::I2CHwMasterClient) {$/;"	F	implementation:TWIM
set_client	chips/nrf52/src/nvmc.rs	/^    fn set_client(&self, client: &'static C) {$/;"	F	implementation:Nvmc
set_client	chips/nrf52/src/spi.rs	/^    fn set_client(&self, client: &'static hil::spi::SpiMasterClient) {$/;"	F	implementation:SPIM
set_client	chips/nrf52/src/uart.rs	/^    fn set_client(&self, client: &'static kernel::hil::uart::Client) {$/;"	F	implementation:Uarte
set_client	chips/nrf5x/src/aes.rs	/^    fn set_client(&'a self, client: &'a symmetric_encryption::Client<'a>) {$/;"	F	implementation:AesECB
set_client	chips/nrf5x/src/gpio.rs	/^    pub fn set_client<C: hil::gpio::Client>(&self, client: &'static C) {$/;"	F	implementation:GPIOPin
set_client	chips/nrf5x/src/rtc.rs	/^    pub fn set_client(&self, client: &'static time::Client) {$/;"	F	implementation:Rtc
set_client	chips/nrf5x/src/temperature.rs	/^    fn set_client(&self, client: &'static kernel::hil::sensors::TemperatureClient) {$/;"	F	implementation:Temp
set_client	chips/nrf5x/src/timer.rs	/^    pub fn set_client(&self, client: &'static CompareClient) {$/;"	F	implementation:Timer
set_client	chips/nrf5x/src/timer.rs	/^    pub fn set_client(&self, client: &'static hil::time::Client) {$/;"	F	implementation:TimerAlarm
set_client	chips/nrf5x/src/trng.rs	/^    fn set_client(&'a self, client: &'a entropy::Client32) {$/;"	F	implementation:Trng
set_client	chips/sam4l/src/acifc.rs	/^    pub fn set_client(&self, client: &'a analog_comparator::Client) {$/;"	F	implementation:Acifc
set_client	chips/sam4l/src/adc.rs	/^    pub fn set_client<C: EverythingClient>(&self, client: &'static C) {$/;"	F	implementation:Adc
set_client	chips/sam4l/src/aes.rs	/^    fn set_client(&'a self, client: &'a hil::symmetric_encryption::Client<'a>) {$/;"	F	implementation:Aes
set_client	chips/sam4l/src/ast.rs	/^    pub fn set_client(&self, client: &'a time::Client) {$/;"	F	implementation:Ast
set_client	chips/sam4l/src/crccu.rs	/^    pub fn set_client(&mut self, client: &'a crc::Client) {$/;"	F	implementation:Crccu
set_client	chips/sam4l/src/flashcalw.rs	/^    fn set_client(&self, client: &'static C) {$/;"	F	implementation:FLASHCALW
set_client	chips/sam4l/src/gpio.rs	/^    pub fn set_client<C: hil::gpio::Client>(&self, client: &'static C) {$/;"	F	implementation:GPIOPin
set_client	chips/sam4l/src/spi.rs	/^    fn set_client(&self, client: &'static SpiMasterClient) {$/;"	F	implementation:SpiHw
set_client	chips/sam4l/src/spi.rs	/^    fn set_client(&self, client: Option<&'static SpiSlaveClient>) {$/;"	F	implementation:SpiHw
set_client	chips/sam4l/src/trng.rs	/^    fn set_client(&'a self, client: &'a entropy::Client32) {$/;"	F	implementation:Trng
set_client	chips/sam4l/src/usart.rs	/^    fn set_client(&self, client: &'static hil::spi::SpiMasterClient) {$/;"	F	implementation:USART
set_client	chips/sam4l/src/usart.rs	/^    fn set_client(&self, client: &'static hil::uart::Client) {$/;"	F	implementation:USART
set_client	chips/sam4l/src/usbc/mod.rs	/^    pub fn set_client(&mut self, client: &'a hil::usb::Client) {$/;"	F	implementation:Usbc
set_client	chips/sifive/src/gpio.rs	/^    pub fn set_client<C: hil::gpio::Client>(&self, client: &'static C) {$/;"	F	implementation:GpioPin
set_client	chips/sifive/src/uart.rs	/^    fn set_client(&self, client: &'static hil::uart::Client) {$/;"	F	implementation:Uart
set_client	chips/tm4c129x/src/gpio.rs	/^    pub fn set_client<C: hil::gpio::Client>(&self, client: &'static C) {$/;"	F	implementation:GPIOPin
set_client	chips/tm4c129x/src/uart.rs	/^    fn set_client(&self, client: &'static hil::uart::Client) {$/;"	F	implementation:UART
set_client	kernel/src/hil/entropy.rs	/^    fn set_client(&'a self, &'a Client32);$/;"	F	interface:Entropy32
set_client	kernel/src/hil/entropy.rs	/^    fn set_client(&'a self, &'a Client8);$/;"	F	interface:Entropy8
set_client	kernel/src/hil/flash.rs	/^    fn set_client(&'a self, client: &'a C);$/;"	F	interface:HasClient
set_client	kernel/src/hil/ninedof.rs	/^    fn set_client(&self, client: &'a NineDofClient);$/;"	F	interface:NineDof
set_client	kernel/src/hil/nonvolatile_storage.rs	/^    fn set_client(&self, client: &'static NonvolatileStorageClient);$/;"	F	interface:NonvolatileStorage
set_client	kernel/src/hil/rng.rs	/^    fn set_client(&'a self, &'a Client);$/;"	F	interface:Rng
set_client	kernel/src/hil/sensors.rs	/^    fn set_client(&self, client: &'static AmbientLightClient);$/;"	F	interface:AmbientLight
set_client	kernel/src/hil/sensors.rs	/^    fn set_client(&self, client: &'static HumidityClient);$/;"	F	interface:HumidityDriver
set_client	kernel/src/hil/sensors.rs	/^    fn set_client(&self, client: &'static NineDofClient);$/;"	F	interface:NineDof
set_client	kernel/src/hil/sensors.rs	/^    fn set_client(&self, client: &'static TemperatureClient);$/;"	F	interface:TemperatureDriver
set_client	kernel/src/hil/spi.rs	/^    fn set_client(&self, client: &'static SpiMasterClient);$/;"	F	interface:SpiMaster
set_client	kernel/src/hil/spi.rs	/^    fn set_client(&self, client: Option<&'static SpiSlaveClient>);$/;"	F	interface:SpiSlave
set_client	kernel/src/hil/symmetric_encryption.rs	/^    fn set_client(&'a self, client: &'a CCMClient);$/;"	F	interface:AES128CCM
set_client	kernel/src/hil/symmetric_encryption.rs	/^    fn set_client(&'a self, client: &'a Client<'a>);$/;"	F	interface:AES128
set_client	kernel/src/hil/uart.rs	/^    fn set_client(&self, client: &'static Client);$/;"	F	interface:UART
set_clock	chips/nrf52/src/spi.rs	/^    fn set_clock(&self, polarity: hil::spi::ClockPolarity) {$/;"	F	implementation:SPIM
set_clock	chips/sam4l/src/spi.rs	/^    fn set_clock(&self, polarity: ClockPolarity) {$/;"	F	implementation:SpiHw
set_clock	chips/sam4l/src/usart.rs	/^    fn set_clock(&self, polarity: hil::spi::ClockPolarity) {$/;"	F	implementation:USART
set_clock	kernel/src/hil/spi.rs	/^    fn set_clock(&self, polarity: ClockPolarity);$/;"	F	interface:SpiMaster
set_clock	kernel/src/hil/spi.rs	/^    fn set_clock(&self, polarity: ClockPolarity);$/;"	F	interface:SpiSlave
set_clock_frequency	chips/sifive/src/prci.rs	/^    pub fn set_clock_frequency(&self, frequency: ClockFrequency) {$/;"	F	implementation:Prci
set_code	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn set_code(&mut self, code: u8) {$/;"	F	implementation:ICMP6Header
set_config_client	capsules/src/ieee802154/mac.rs	/^    fn set_config_client(&self, client: &'static radio::ConfigClient) {$/;"	F	implementation:AwakeMac
set_config_client	capsules/src/ieee802154/mac.rs	/^    fn set_config_client(&self, client: &'static radio::ConfigClient);$/;"	F	interface:Mac
set_config_client	capsules/src/ieee802154/xmac.rs	/^    fn set_config_client(&self, client: &'static radio::ConfigClient) {$/;"	F	implementation:XMac
set_config_client	capsules/src/rf233.rs	/^    fn set_config_client(&self, client: &'static radio::ConfigClient) {$/;"	F	implementation:RF233
set_config_client	kernel/src/hil/radio.rs	/^    fn set_config_client(&self, client: &'static ConfigClient);$/;"	F	interface:RadioConfig
set_crc_config	chips/nrf51/src/radio.rs	/^    fn set_crc_config(&self) {$/;"	F	implementation:Radio
set_data_whitening	chips/nrf51/src/radio.rs	/^    fn set_data_whitening(&self, channel: RadioChannel) {$/;"	F	implementation:Radio
set_dcdc_enabled	chips/cc26x2/src/aon.rs	/^    pub fn set_dcdc_enabled(&self, enabled: bool) {$/;"	F	implementation:Aon
set_debug_writer_wrapper	kernel/src/debug.rs	/^pub unsafe fn set_debug_writer_wrapper(debug_writer: &'static mut DebugWriterWrapper) {$/;"	f
set_descriptor	chips/sam4l/src/crccu.rs	/^    fn set_descriptor(&self, addr: u32, ctrl: TCR, crc: u32) {$/;"	F	implementation:Crccu
set_device_procedure	capsules/src/ieee802154/framer.rs	/^    pub fn set_device_procedure(&self, device_procedure: &'a DeviceProcedure) {$/;"	F	implementation:Framer
set_direction	capsules/src/mcp230xx.rs	/^    fn set_direction(&self, pin_number: u8, direction: Direction) -> ReturnCode {$/;"	F	implementation:MCP230xx
set_dma	chips/nrf5x/src/aes.rs	/^    fn set_dma(&self) {$/;"	F	implementation:AesECB
set_dma	chips/sam4l/src/adc.rs	/^    pub fn set_dma(&self, rx_dma: &'static dma::DMAChannel) {$/;"	F	implementation:Adc
set_dma	chips/sam4l/src/i2c.rs	/^    pub fn set_dma(&self, dma: &'static DMAChannel) {$/;"	F	implementation:I2CHw
set_dma	chips/sam4l/src/spi.rs	/^    pub fn set_dma(&mut self, read: &'static DMAChannel, write: &'static DMAChannel) {$/;"	F	implementation:SpiHw
set_dma	chips/sam4l/src/usart.rs	/^    pub fn set_dma(&self, rx_dma: &'static dma::DMAChannel, tx_dma: &'static dma::DMAChannel) {$/;"	F	implementation:USART
set_dma_ptr	chips/nrf51/src/radio.rs	/^    fn set_dma_ptr(&self) {$/;"	F	implementation:Radio
set_dma_ptr	chips/nrf52/src/radio.rs	/^    fn set_dma_ptr(&self) {$/;"	F	implementation:Radio
set_dscp	capsules/src/net/ip.rs	/^    pub fn set_dscp(&mut self, new_dscp: u8) {$/;"	F	implementation:IP6Header
set_dscp	capsules/src/net/ipv6/ipv6.rs	/^    pub fn set_dscp(&mut self, new_dscp: u8) {$/;"	F	implementation:IP6Header
set_dst_port	capsules/src/net/udp/udp.rs	/^    pub fn set_dst_port(&mut self, port: u16) {$/;"	F	implementation:UDPHeader
set_ecn	capsules/src/net/ip.rs	/^    pub fn set_ecn(&mut self, new_ecn: u8) {$/;"	F	implementation:IP6Header
set_ecn	capsules/src/net/ipv6/ipv6.rs	/^    pub fn set_ecn(&mut self, new_ecn: u8) {$/;"	F	implementation:IP6Header
set_fault_state	kernel/src/process.rs	/^    fn set_fault_state(&self) {$/;"	F	implementation:Process
set_fault_state	kernel/src/process.rs	/^    fn set_fault_state(&self);$/;"	F	interface:ProcessType
set_flash_waitstate_and_readmode	chips/sam4l/src/flashcalw.rs	/^    fn set_flash_waitstate_and_readmode($/;"	F	implementation:FLASHCALW
set_flash_waitstate_and_readmode	chips/sam4l/src/flashcalw.rs	/^    fn set_flash_waitstate_and_readmode(&self, cpu_freq: u32, _ps_val: u32, _is_fwu_enabled: boo/;"	F	implementation:FLASHCALW
set_flow_label	capsules/src/net/ip.rs	/^    pub fn set_flow_label(&mut self, new_fl_val: u32) {$/;"	F	implementation:IP6Header
set_flow_label	capsules/src/net/ipv6/ipv6.rs	/^    pub fn set_flow_label(&mut self, new_fl_val: u32) {$/;"	F	implementation:IP6Header
set_frag_hdr	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^fn set_frag_hdr($/;"	f
set_fragment	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:document.onclick
set_gateway	capsules/src/net/ipv6/ipv6_send.rs	/^    fn set_gateway(&self, gateway: MacAddress) {$/;"	F	implementation:IP6SendStruct
set_gateway	capsules/src/net/ipv6/ipv6_send.rs	/^    fn set_gateway(&self, gateway: MacAddress);$/;"	F	interface:IP6Sender
set_header	capsules/src/net/ipv6/ipv6_send.rs	/^    fn set_header(&mut self, ip6_header: IP6Header) {$/;"	F	implementation:IP6SendStruct
set_header	capsules/src/net/ipv6/ipv6_send.rs	/^    fn set_header(&mut self, ip6_header: IP6Header);$/;"	F	interface:IP6Sender
set_high_threshold	capsules/src/ltc294x.rs	/^    fn set_high_threshold(&self, threshold: u16) -> ReturnCode {$/;"	F	implementation:LTC294X
set_hop_limit	capsules/src/net/ip.rs	/^    pub fn set_hop_limit(&mut self, new_hl: u8) {$/;"	F	implementation:IP6Header
set_hop_limit	capsules/src/net/ipv6/ipv6.rs	/^    pub fn set_hop_limit(&mut self, new_hl: u8) {$/;"	F	implementation:IP6Header
set_idle	capsules/src/si7021.rs	/^    fn set_idle(&self, buffer: &'static mut [u8]) {$/;"	F	implementation:SI7021
set_input_mode	chips/cc26x2/src/gpio.rs	/^    fn set_input_mode(&self, mode: hil::gpio::InputMode) {$/;"	F	implementation:GPIOPin
set_input_mode	chips/nrf5x/src/gpio.rs	/^    fn set_input_mode(&self, mode: hil::gpio::InputMode) {$/;"	F	implementation:GPIOPin
set_input_mode	chips/sam4l/src/gpio.rs	/^    fn set_input_mode(&self, mode: hil::gpio::InputMode) {$/;"	F	implementation:GPIOPin
set_input_mode	chips/sifive/src/gpio.rs	/^    fn set_input_mode(&self, mode: hil::gpio::InputMode) {$/;"	F	implementation:GpioPin
set_input_mode	chips/tm4c129x/src/gpio.rs	/^    fn set_input_mode(&self, mode: hil::gpio::InputMode) {$/;"	F	implementation:GPIOPin
set_input_mode	kernel/src/hil/gpio.rs	/^    fn set_input_mode(&self, InputMode);$/;"	F	interface:PinCtl
set_interrupt_mode	chips/sam4l/src/gpio.rs	/^    pub fn set_interrupt_mode(&self, mode: u8) {$/;"	F	implementation:GPIOPin
set_interrupt_mode	chips/tm4c129x/src/gpio.rs	/^    pub fn set_interrupt_mode(&self, mode: u8) {$/;"	F	implementation:GPIOPin
set_iv	chips/nrf5x/src/aes.rs	/^    fn set_iv(&self, iv: &[u8]) -> ReturnCode {$/;"	F	implementation:AesECB
set_iv	chips/sam4l/src/aes.rs	/^    fn set_iv(&self, iv: &[u8]) -> ReturnCode {$/;"	F	implementation:Aes
set_iv	kernel/src/hil/symmetric_encryption.rs	/^    fn set_iv(&self, iv: &[u8]) -> ReturnCode;$/;"	F	interface:AES128
set_key	capsules/src/aes_ccm.rs	/^    fn set_key(&self, key: &[u8]) -> ReturnCode {$/;"	F	implementation:AES128CCM
set_key	chips/nrf5x/src/aes.rs	/^    fn set_key(&self, key: &[u8]) -> ReturnCode {$/;"	F	implementation:AesECB
set_key	chips/sam4l/src/aes.rs	/^    fn set_key(&self, key: &[u8]) -> ReturnCode {$/;"	F	implementation:Aes
set_key	kernel/src/hil/symmetric_encryption.rs	/^    fn set_key(&self, key: &[u8]) -> ReturnCode;$/;"	F	interface:AES128
set_key	kernel/src/hil/symmetric_encryption.rs	/^    fn set_key(&self, key: &[u8]) -> ReturnCode;$/;"	F	interface:AES128CCM
set_key_procedure	capsules/src/ieee802154/framer.rs	/^    pub fn set_key_procedure(&self, key_procedure: &'a KeyProcedure) {$/;"	F	implementation:Framer
set_len	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn set_len(&mut self, len: u16) {$/;"	F	implementation:ICMP6Header
set_len	capsules/src/net/udp/udp.rs	/^    pub fn set_len(&mut self, len: u16) {$/;"	F	implementation:UDPHeader
set_low_threshold	capsules/src/ltc294x.rs	/^    fn set_low_threshold(&self, threshold: u16) -> ReturnCode {$/;"	F	implementation:LTC294X
set_master_client	chips/sam4l/src/i2c.rs	/^    pub fn set_master_client(&self, client: &'static hil::i2c::I2CHwMasterClient) {$/;"	F	implementation:I2CHw
set_mode	chips/sam4l/src/aes.rs	/^    fn set_mode(&self, encrypting: bool, mode: ConfidentialityMode) {$/;"	F	implementation:Aes
set_mode	chips/sam4l/src/usart.rs	/^    pub fn set_mode(&self, mode: UsartMode) {$/;"	F	implementation:USART
set_mode_aes128cbc	chips/sam4l/src/aes.rs	/^    fn set_mode_aes128cbc(&self, encrypting: bool) {$/;"	F	implementation:Aes
set_mode_aes128cbc	kernel/src/hil/symmetric_encryption.rs	/^    fn set_mode_aes128cbc(&self, encrypting: bool);$/;"	F	interface:AES128CBC
set_mode_aes128ctr	chips/nrf5x/src/aes.rs	/^    fn set_mode_aes128ctr(&self, _encrypting: bool) {$/;"	F	implementation:AesECB
set_mode_aes128ctr	chips/sam4l/src/aes.rs	/^    fn set_mode_aes128ctr(&self, encrypting: bool) {$/;"	F	implementation:Aes
set_mode_aes128ctr	kernel/src/hil/symmetric_encryption.rs	/^    fn set_mode_aes128ctr(&self, encrypting: bool);$/;"	F	interface:AES128Ctr
set_model	capsules/src/ltc294x.rs	/^    fn set_model(&self, model_num: usize) -> ReturnCode {$/;"	F	implementation:LTC294X
set_next_alarm	capsules/src/ble_advertising_driver.rs	/^    fn set_next_alarm<F: Frequency>(&mut self, now: u32) {$/;"	F	implementation:App
set_next_header	capsules/src/net/ip.rs	/^    pub fn set_next_header(&mut self, new_nh: u8) {$/;"	F	implementation:IP6Header
set_next_header	capsules/src/net/ipv6/ipv6.rs	/^    pub fn set_next_header(&mut self, new_nh: u8) {$/;"	F	implementation:IP6Header
set_nonce	capsules/src/aes_ccm.rs	/^    fn set_nonce(&self, nonce: &[u8]) -> ReturnCode {$/;"	F	implementation:AES128CCM
set_nonce	kernel/src/hil/symmetric_encryption.rs	/^    fn set_nonce(&self, nonce: &[u8]) -> ReturnCode;$/;"	F	interface:AES128CCM
set_options	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn set_options(&mut self, options: ICMP6HeaderOptions) {$/;"	F	implementation:ICMP6Header
set_packet_config	chips/nrf51/src/radio.rs	/^    fn set_packet_config(&self, _: u32) {$/;"	F	implementation:Radio
set_pan	capsules/src/ieee802154/device.rs	/^    fn set_pan(&self, id: u16);$/;"	F	interface:MacDevice
set_pan	capsules/src/ieee802154/framer.rs	/^    fn set_pan(&self, id: u16) {$/;"	F	implementation:Framer
set_pan	capsules/src/ieee802154/mac.rs	/^    fn set_pan(&self, id: u16) {$/;"	F	implementation:AwakeMac
set_pan	capsules/src/ieee802154/mac.rs	/^    fn set_pan(&self, id: u16);$/;"	F	interface:Mac
set_pan	capsules/src/ieee802154/virtual_mac.rs	/^    fn set_pan(&self, id: u16) {$/;"	F	implementation:MacUser
set_pan	capsules/src/ieee802154/xmac.rs	/^    fn set_pan(&self, id: u16) {$/;"	F	implementation:XMac
set_pan	capsules/src/rf233.rs	/^    fn set_pan(&self, id: u16) {$/;"	F	implementation:RF233
set_pan	kernel/src/hil/radio.rs	/^    fn set_pan(&self, id: u16);$/;"	F	interface:RadioConfig
set_payload	capsules/src/net/ipv6/ipv6.rs	/^    pub fn set_payload(&mut self, transport_header: TransportHeader, payload: &[u8]) -> (u8, u16/;"	F	implementation:IPPayload
set_payload	capsules/src/net/ipv6/ipv6.rs	/^    pub fn set_payload(&mut self, transport_header: TransportHeader, payload: &[u8]) {$/;"	F	implementation:IP6Packet
set_payload_len	capsules/src/net/ip.rs	/^    pub fn set_payload_len(&mut self, new_len: u16) {$/;"	F	implementation:IP6Header
set_payload_len	capsules/src/net/ipv6/ipv6.rs	/^    pub fn set_payload_len(&mut self, new_len: u16) {$/;"	F	implementation:IP6Header
set_phase	capsules/src/virtual_spi.rs	/^    fn set_phase(&self, cpal: hil::spi::ClockPhase) {$/;"	F	implementation:VirtualSpiMasterDevice
set_phase	capsules/src/virtual_spi.rs	/^    fn set_phase(&self, cpal: hil::spi::ClockPhase) {$/;"	F	implementation:VirtualSpiSlaveDevice
set_phase	chips/nrf52/src/spi.rs	/^    fn set_phase(&self, phase: hil::spi::ClockPhase) {$/;"	F	implementation:SPIM
set_phase	chips/sam4l/src/spi.rs	/^    fn set_phase(&self, phase: ClockPhase) {$/;"	F	implementation:SpiHw
set_phase	chips/sam4l/src/usart.rs	/^    fn set_phase(&self, phase: hil::spi::ClockPhase) {$/;"	F	implementation:USART
set_phase	kernel/src/hil/spi.rs	/^    fn set_phase(&self, cpal: ClockPhase);$/;"	F	interface:SpiMasterDevice
set_phase	kernel/src/hil/spi.rs	/^    fn set_phase(&self, cpal: ClockPhase);$/;"	F	interface:SpiSlaveDevice
set_phase	kernel/src/hil/spi.rs	/^    fn set_phase(&self, phase: ClockPhase);$/;"	F	interface:SpiMaster
set_phase	kernel/src/hil/spi.rs	/^    fn set_phase(&self, phase: ClockPhase);$/;"	F	interface:SpiSlave
set_pin	capsules/src/mcp230xx.rs	/^    fn set_pin(&self, pin_number: u8, value: PinState) -> ReturnCode {$/;"	F	implementation:MCP230xx
set_pin_primary_functions	boards/hail/src/main.rs	/^unsafe fn set_pin_primary_functions() {$/;"	f
set_pin_primary_functions	boards/imix/src/main.rs	/^unsafe fn set_pin_primary_functions() {$/;"	f
set_polarity	capsules/src/virtual_spi.rs	/^    fn set_polarity(&self, cpol: hil::spi::ClockPolarity) {$/;"	F	implementation:VirtualSpiMasterDevice
set_polarity	capsules/src/virtual_spi.rs	/^    fn set_polarity(&self, cpol: hil::spi::ClockPolarity) {$/;"	F	implementation:VirtualSpiSlaveDevice
set_polarity	kernel/src/hil/spi.rs	/^    fn set_polarity(&self, cpol: ClockPolarity);$/;"	F	interface:SpiMasterDevice
set_polarity	kernel/src/hil/spi.rs	/^    fn set_polarity(&self, cpol: ClockPolarity);$/;"	F	interface:SpiSlaveDevice
set_power_client	capsules/src/rf233.rs	/^    fn set_power_client(&self, client: &'static radio::PowerClient) {$/;"	F	implementation:RF233
set_power_client	kernel/src/hil/radio.rs	/^    fn set_power_client(&self, client: &'static PowerClient);$/;"	F	interface:RadioConfig
set_power_down_source	chips/cc26x2/src/prcm.rs	/^    pub fn set_power_down_source(source: u32) {$/;"	F	implementation:Clock
set_power_scaling	chips/sam4l/src/bpm.rs	/^pub unsafe fn set_power_scaling(ps_value: PowerScaling) {$/;"	f
set_prefix	capsules/src/net/ip.rs	/^    pub fn set_prefix(&mut self, prefix: &[u8], prefix_len: u8) {$/;"	F	implementation:IPAddr
set_prefix	capsules/src/net/ipv6/ip_utils.rs	/^    pub fn set_prefix(&mut self, prefix: &[u8], prefix_len: u8) {$/;"	F	implementation:IPAddr
set_prescalar	chips/sam4l/src/ast.rs	/^    fn set_prescalar(&self, val: u8) {$/;"	F	implementation:Ast
set_psel0_reset_pin	chips/nrf52/src/uicr.rs	/^    pub fn set_psel0_reset_pin(&self, pin: usize) {$/;"	F	implementation:Uicr
set_psel1_reset_pin	chips/nrf52/src/uicr.rs	/^    pub fn set_psel1_reset_pin(&self, pin: usize) {$/;"	F	implementation:Uicr
set_rate	capsules/src/virtual_spi.rs	/^    fn set_rate(&self, rate: u32) {$/;"	F	implementation:VirtualSpiMasterDevice
set_rate	chips/nrf52/src/spi.rs	/^    fn set_rate(&self, rate: u32) -> u32 {$/;"	F	implementation:SPIM
set_rate	chips/sam4l/src/spi.rs	/^    fn set_rate(&self, rate: u32) -> u32 {$/;"	F	implementation:SpiHw
set_rate	chips/sam4l/src/usart.rs	/^    fn set_rate(&self, rate: u32) -> u32 {$/;"	F	implementation:USART
set_rate	kernel/src/hil/spi.rs	/^    fn set_rate(&self, rate: u32) -> u32;$/;"	F	interface:SpiMaster
set_rate	kernel/src/hil/spi.rs	/^    fn set_rate(&self, rate: u32);$/;"	F	interface:SpiMasterDevice
set_receive_buffer	capsules/src/ieee802154/mac.rs	/^    fn set_receive_buffer(&self, buffer: &'static mut [u8]) {$/;"	F	implementation:AwakeMac
set_receive_buffer	capsules/src/ieee802154/mac.rs	/^    fn set_receive_buffer(&self, buffer: &'static mut [u8]);$/;"	F	interface:Mac
set_receive_buffer	capsules/src/ieee802154/xmac.rs	/^    fn set_receive_buffer(&self, buffer: &'static mut [u8]) {$/;"	F	implementation:XMac
set_receive_buffer	capsules/src/rf233.rs	/^    fn set_receive_buffer(&self, buffer: &'static mut [u8]) {$/;"	F	implementation:RF233
set_receive_buffer	kernel/src/hil/radio.rs	/^    fn set_receive_buffer(&self, receive_buffer: &'static mut [u8]);$/;"	F	interface:RadioData
set_receive_client	capsules/src/ieee802154/device.rs	/^    fn set_receive_client(&self, client: &'a RxClient);$/;"	F	interface:MacDevice
set_receive_client	capsules/src/ieee802154/framer.rs	/^    fn set_receive_client(&self, client: &'a RxClient) {$/;"	F	implementation:Framer
set_receive_client	capsules/src/ieee802154/mac.rs	/^    fn set_receive_client(&self, client: &'static radio::RxClient) {$/;"	F	implementation:AwakeMac
set_receive_client	capsules/src/ieee802154/mac.rs	/^    fn set_receive_client(&self, client: &'static radio::RxClient);$/;"	F	interface:Mac
set_receive_client	capsules/src/ieee802154/virtual_mac.rs	/^    fn set_receive_client(&self, client: &'a device::RxClient) {$/;"	F	implementation:MacUser
set_receive_client	capsules/src/ieee802154/xmac.rs	/^    fn set_receive_client(&self, client: &'static radio::RxClient) {$/;"	F	implementation:XMac
set_receive_client	capsules/src/rf233.rs	/^    fn set_receive_client(&self, client: &'static radio::RxClient, buffer: &'static mut [u8]) {$/;"	F	implementation:RF233
set_receive_client	chips/nrf51/src/radio.rs	/^    fn set_receive_client(&self, client: &'static ble_advertising::RxClient) {$/;"	F	implementation:Radio
set_receive_client	chips/nrf52/src/radio.rs	/^    fn set_receive_client(&self, client: &'static ble_advertising::RxClient) {$/;"	F	implementation:Radio
set_receive_client	kernel/src/hil/ble_advertising.rs	/^    fn set_receive_client(&self, client: &'static RxClient);$/;"	F	interface:BleAdvertisementDriver
set_receive_client	kernel/src/hil/radio.rs	/^    fn set_receive_client(&self, client: &'static RxClient, receive_buffer: &'static mut [u8]);$/;"	F	interface:RadioData
set_rx_address	chips/nrf51/src/radio.rs	/^    fn set_rx_address(&self, _: u32) {$/;"	F	implementation:Radio
set_rx_address	chips/nrf52/src/radio.rs	/^    fn set_rx_address(&self) {$/;"	F	implementation:Radio
set_rx_client	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn set_rx_client(&'a self, client: &'a SixlowpanRxClient) {$/;"	F	implementation:Sixlowpan
set_rx_client	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn set_rx_client(&'a self, client: &'a SixlowpanRxClient);$/;"	F	interface:SixlowpanState
set_rx_client	chips/cc26x2/src/uart.rs	/^    pub fn set_rx_client(&self, client: &'static kernel::hil::uart::Client) {$/;"	F	implementation:UART
set_rx_dma_pointer_to_buffer	chips/nrf52/src/uart.rs	/^    fn set_rx_dma_pointer_to_buffer(&self) {$/;"	F	implementation:Uarte
set_slave_client	chips/sam4l/src/i2c.rs	/^    pub fn set_slave_client(&self, client: &'static hil::i2c::I2CHwSlaveClient) {$/;"	F	implementation:I2CHw
set_sleepdeep	arch/cortex-m/src/scb.rs	/^pub unsafe fn set_sleepdeep() {$/;"	f
set_speed	chips/nrf51/src/i2c.rs	/^    pub fn set_speed(&self, speed: FieldValue<u32, Frequency::Register>) {$/;"	F	implementation:TWIM
set_speed	chips/nrf52/src/i2c.rs	/^    pub fn set_speed(&self, speed: Speed) {$/;"	F	implementation:TWIM
set_spi_fast_mode	capsules/src/sdcard.rs	/^    fn set_spi_fast_mode(&self) {$/;"	F	implementation:SDCard
set_spi_slow_mode	capsules/src/sdcard.rs	/^    fn set_spi_slow_mode(&self) {$/;"	F	implementation:SDCard
set_src_port	capsules/src/net/udp/udp.rs	/^    pub fn set_src_port(&mut self, port: u16) {$/;"	F	implementation:UDPHeader
set_state	chips/sam4l/src/usbc/mod.rs	/^    fn set_state(&self, state: State) {$/;"	F	implementation:Usbc
set_syscall_return_value	arch/cortex-m/src/syscall.rs	/^    unsafe fn set_syscall_return_value(&self, stack_pointer: *const usize, return_value: isize) /;"	F	implementation:SysCall
set_syscall_return_value	arch/riscv32i/src/syscall.rs	/^    unsafe fn set_syscall_return_value(&self, _stack_pointer: *const usize, _return_value: isize/;"	F	implementation:SysCall
set_syscall_return_value	kernel/src/process.rs	/^    unsafe fn set_syscall_return_value(&self, return_value: isize) {$/;"	F	implementation:Process
set_syscall_return_value	kernel/src/process.rs	/^    unsafe fn set_syscall_return_value(&self, return_value: isize);$/;"	F	interface:ProcessType
set_syscall_return_value	kernel/src/syscall.rs	/^    unsafe fn set_syscall_return_value(&self, stack_pointer: *const usize, return_value: isize);$/;"	F	interface:UserspaceKernelBoundary
set_time_period	chips/cc26x2/src/i2c.rs	/^    fn set_time_period(&self, freq: u32) {$/;"	F	implementation:I2CMaster
set_timer	arch/cortex-m/src/systick.rs	/^    fn set_timer(&self, us: u32) {$/;"	F	implementation:SysTick
set_timer	kernel/src/platform/systick.rs	/^    fn set_timer(&self, _: u32) {}$/;"	F	implementation:SysTick
set_timer	kernel/src/platform/systick.rs	/^    fn set_timer(&self, us: u32);$/;"	F	interface:SysTick
set_timer_ms	capsules/src/ieee802154/xmac.rs	/^    fn set_timer_ms<T: Time>(&self, ms: u32) {$/;"	F	implementation:XMac
set_traffic_class	capsules/src/net/ip.rs	/^    pub fn set_traffic_class(&mut self, new_tc: u8) {$/;"	F	implementation:IP6Header
set_traffic_class	capsules/src/net/ipv6/ipv6.rs	/^    pub fn set_traffic_class(&mut self, new_tc: u8) {$/;"	F	implementation:IP6Header
set_transmit_client	capsules/src/ieee802154/device.rs	/^    fn set_transmit_client(&self, client: &'a TxClient);$/;"	F	interface:MacDevice
set_transmit_client	capsules/src/ieee802154/framer.rs	/^    fn set_transmit_client(&self, client: &'a TxClient) {$/;"	F	implementation:Framer
set_transmit_client	capsules/src/ieee802154/mac.rs	/^    fn set_transmit_client(&self, client: &'static radio::TxClient) {$/;"	F	implementation:AwakeMac
set_transmit_client	capsules/src/ieee802154/mac.rs	/^    fn set_transmit_client(&self, client: &'static radio::TxClient);$/;"	F	interface:Mac
set_transmit_client	capsules/src/ieee802154/virtual_mac.rs	/^    fn set_transmit_client(&self, client: &'a device::TxClient) {$/;"	F	implementation:MacUser
set_transmit_client	capsules/src/ieee802154/xmac.rs	/^    fn set_transmit_client(&self, client: &'static radio::TxClient) {$/;"	F	implementation:XMac
set_transmit_client	capsules/src/rf233.rs	/^    fn set_transmit_client(&self, client: &'static radio::TxClient) {$/;"	F	implementation:RF233
set_transmit_client	chips/nrf51/src/radio.rs	/^    fn set_transmit_client(&self, client: &'static ble_advertising::TxClient) {$/;"	F	implementation:Radio
set_transmit_client	chips/nrf52/src/radio.rs	/^    fn set_transmit_client(&self, client: &'static ble_advertising::TxClient) {$/;"	F	implementation:Radio
set_transmit_client	kernel/src/hil/ble_advertising.rs	/^    fn set_transmit_client(&self, client: &'static TxClient);$/;"	F	interface:BleAdvertisementDriver
set_transmit_client	kernel/src/hil/radio.rs	/^    fn set_transmit_client(&self, client: &'static TxClient);$/;"	F	interface:RadioData
set_transport_checksum	capsules/src/net/ipv6/ipv6.rs	/^    pub fn set_transport_checksum(&mut self) {$/;"	F	implementation:IP6Packet
set_tx_address	chips/nrf51/src/radio.rs	/^    fn set_tx_address(&self, _: u32) {$/;"	F	implementation:Radio
set_tx_address	chips/nrf52/src/radio.rs	/^    fn set_tx_address(&self) {$/;"	F	implementation:Radio
set_tx_client	chips/cc26x2/src/uart.rs	/^    pub fn set_tx_client(&self, client: &'static kernel::hil::uart::Client) {$/;"	F	implementation:UART
set_tx_dma_pointer_to_buffer	chips/nrf52/src/uart.rs	/^    fn set_tx_dma_pointer_to_buffer(&self) {$/;"	F	implementation:Uarte
set_tx_power	capsules/src/rf233.rs	/^    fn set_tx_power(&self, power: i8) -> ReturnCode {$/;"	F	implementation:RF233
set_tx_power	chips/nrf51/src/radio.rs	/^    fn set_tx_power(&self) {$/;"	F	implementation:Radio
set_tx_power	chips/nrf51/src/radio.rs	/^    fn set_tx_power(&self, tx_power: u8) -> kernel::ReturnCode {$/;"	F	implementation:Radio
set_tx_power	chips/nrf52/src/radio.rs	/^    fn set_tx_power(&self) {$/;"	F	implementation:Radio
set_tx_power	chips/nrf52/src/radio.rs	/^    fn set_tx_power(&self, tx_power: u8) -> kernel::ReturnCode {$/;"	F	implementation:Radio
set_tx_power	kernel/src/hil/ble_advertising.rs	/^    fn set_tx_power(&self, power: u8) -> ReturnCode;$/;"	F	interface:BleConfig
set_tx_power	kernel/src/hil/radio.rs	/^    fn set_tx_power(&self, power: i8) -> ReturnCode;$/;"	F	interface:RadioConfig
set_type	capsules/src/net/icmpv6/icmpv6.rs	/^    pub fn set_type(&mut self, icmp_type: ICMP6Type) {$/;"	F	implementation:ICMP6Header
set_unicast_link_local	capsules/src/net/ip.rs	/^    pub fn set_unicast_link_local(&mut self) {$/;"	F	implementation:IPAddr
set_unicast_link_local	capsules/src/net/ipv6/ip_utils.rs	/^    pub fn set_unicast_link_local(&mut self) {$/;"	F	implementation:IPAddr
set_upd_en	chips/cc26x2/src/rtc.rs	/^    pub fn set_upd_en(&self, value: bool) {$/;"	F	implementation:Rtc
set_value	chips/sam4l/src/dac.rs	/^    fn set_value(&self, value: usize) -> ReturnCode {$/;"	F	implementation:Dac
set_value	kernel/src/hil/dac.rs	/^    fn set_value(&self, value: usize) -> ReturnCode;$/;"	F	interface:DacChannel
set_wait_state	chips/sam4l/src/flashcalw.rs	/^    pub fn set_wait_state(&self, wait_state: u32) {$/;"	F	implementation:FLASHCALW
set_write_byte	chips/sam4l/src/spi.rs	/^    fn set_write_byte(&self, write_byte: u8) {$/;"	F	implementation:SpiHw
set_write_byte	kernel/src/hil/spi.rs	/^    fn set_write_byte(&self, write_byte: u8);$/;"	F	interface:SpiSlave
set_yielded_state	kernel/src/process.rs	/^    fn set_yielded_state(&self) {$/;"	F	implementation:Process
set_yielded_state	kernel/src/process.rs	/^    fn set_yielded_state(&self);$/;"	F	interface:ProcessType
setting_to_power	capsules/src/rf233.rs	/^fn setting_to_power(setting: u8) -> i8 {$/;"	f
setup	capsules/src/virtual_uart.rs	/^    pub fn setup(&'a self) {$/;"	F	implementation:UartDevice
setup	chips/cc26x2/src/aon.rs	/^    pub fn setup(&self) {$/;"	F	implementation:Aon
setup_board	boards/nordic/nrf52dk_base/src/lib.rs	/^pub unsafe fn setup_board($/;"	f
setup_dfll_rc32k_48mhz	chips/sam4l/src/scif.rs	/^pub fn setup_dfll_rc32k_48mhz() {$/;"	f
setup_mpu	kernel/src/process.rs	/^    fn setup_mpu(&self) {$/;"	F	implementation:Process
setup_mpu	kernel/src/process.rs	/^    fn setup_mpu(&self);$/;"	F	interface:ProcessType
setup_nextfer	chips/sam4l/src/i2c.rs	/^    fn setup_nextfer($/;"	F	implementation:I2CHw
setup_osc_16mhz_fast_startup	chips/sam4l/src/scif.rs	/^pub unsafe fn setup_osc_16mhz_fast_startup() {$/;"	f
setup_osc_16mhz_slow_startup	chips/sam4l/src/scif.rs	/^pub unsafe fn setup_osc_16mhz_slow_startup() {$/;"	f
setup_pll_osc_48mhz	chips/sam4l/src/scif.rs	/^pub unsafe fn setup_pll_osc_48mhz() {$/;"	f
setup_rc_1mhz	chips/sam4l/src/bscif.rs	/^pub fn setup_rc_1mhz() {$/;"	f
setup_rc_80mhz	chips/sam4l/src/scif.rs	/^pub unsafe fn setup_rc_80mhz() {$/;"	f
setup_rcfast_12mhz	chips/sam4l/src/scif.rs	/^pub unsafe fn setup_rcfast_12mhz() {$/;"	f
setup_rcfast_4mhz	chips/sam4l/src/scif.rs	/^pub unsafe fn setup_rcfast_4mhz() {$/;"	f
setup_rcfast_8mhz	chips/sam4l/src/scif.rs	/^pub unsafe fn setup_rcfast_8mhz() {$/;"	f
setup_read_coulomb	capsules/src/max17205.rs	/^    fn setup_read_coulomb(&self) -> ReturnCode {$/;"	F	implementation:MAX17205
setup_read_curvolt	capsules/src/max17205.rs	/^    fn setup_read_curvolt(&self) -> ReturnCode {$/;"	F	implementation:MAX17205
setup_read_romid	capsules/src/max17205.rs	/^    fn setup_read_romid(&self) -> ReturnCode {$/;"	F	implementation:MAX17205
setup_read_soc	capsules/src/max17205.rs	/^    fn setup_read_soc(&self) -> ReturnCode {$/;"	F	implementation:MAX17205
setup_read_status	capsules/src/max17205.rs	/^    fn setup_read_status(&self) -> ReturnCode {$/;"	F	implementation:MAX17205
setup_system_clock	chips/sam4l/src/pm.rs	/^    pub unsafe fn setup_system_clock(&self, clock_source: SystemClockSource) {$/;"	F	implementation:PowerManager
setup_system_clock	chips/tm4c129x/src/sysctl.rs	/^    pub unsafe fn setup_system_clock(&self, clock_source: SystemClockSource) {$/;"	F	implementation:SystemControl
setup_transfer	chips/sam4l/src/i2c.rs	/^    fn setup_transfer($/;"	F	implementation:I2CHw
shared_memory	kernel/src/ipc.rs	/^    shared_memory: [Option<AppSlice<Shared, u8>>; 8],$/;"	m	struct:IPCData
shcsr	arch/cortex-m/src/scb.rs	/^    shcsr: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
shift	libraries/tock-register-interface/src/registers.rs	/^    pub shift: usize,$/;"	m	struct:Field
short_addr	boards/imix/src/components/radio.rs	/^    short_addr: u16,$/;"	m	struct:RadioComponent
short_addr	capsules/src/ieee802154/driver.rs	/^    short_addr: u16,$/;"	m	struct:DeviceDescriptor
shorts	chips/nrf51/src/i2c.rs	/^    shorts: ReadWrite<u32, Shorts::Register>,$/;"	m	struct:TwimRegisters
shorts	chips/nrf51/src/radio.rs	/^    shorts: ReadWrite<u32, Shortcuts::Register>, \/\/ 0x200 ---> 0x204$/;"	m	struct:RadioRegisters
shorts	chips/nrf52/src/i2c.rs	/^    shorts: ReadWrite<u32, SHORTS::Register>,$/;"	m	struct:TwimRegisters
shorts	chips/nrf52/src/radio.rs	/^    shorts: ReadWrite<u32, Shortcut::Register>,$/;"	m	struct:RadioRegisters
shorts	chips/nrf52/src/spi.rs	/^    shorts: ReadWrite<u32>,                          \/\/ Shortcut register$/;"	m	struct:SpimRegisters
shorts	chips/nrf52/src/uart.rs	/^    shorts: ReadWrite<u32, Shorts::Register>,$/;"	m	struct:UarteRegisters
shorts	chips/nrf5x/src/timer.rs	/^    shorts: ReadWrite<u32, Shorts::Register>,$/;"	m	struct:TimerRegisters
shorts	chips/nrf5x/src/trng.rs	/^    pub shorts: ReadWrite<u32, Shorts::Register>,$/;"	m	struct:RngRegisters
should_not_transmit	boards/nordic/nrf52dk/src/tests/uart.rs	/^unsafe fn should_not_transmit(buf: &'static mut [u8]) {$/;"	f
showItemDeclarations	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	v
showModal	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
showResults	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
showSidebar	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
shp	arch/cortex-m/src/scb.rs	/^    shp: [VolatileCell<u32>; 3],$/;"	m	struct:ScbRegisters
shutdown	capsules/src/ltc294x.rs	/^    fn shutdown(&self) -> ReturnCode {$/;"	F	implementation:LTC294X
shutdown	chips/cc26x2/src/aon.rs	/^    pub fn shutdown(&self) {$/;"	F	implementation:Aon
shutdown	chips/cc26x2/src/aon.rs	/^    shutdown: ReadWrite<u32, Shutdown::Register>,$/;"	m	struct:AonPmCtlRegisters
si	chips/tm4c129x/src/gpio.rs	/^    si: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
si7021	boards/imix/src/components/mod.rs	/^pub mod si7021;$/;"	n
si7021	boards/imix/src/components/si7021.rs	/^    si7021: &'static SI7021<'static, VirtualMuxAlarm<'static, sam4l::ast::Ast<'static>>>,$/;"	m	struct:HumidityComponent
si7021	boards/imix/src/components/si7021.rs	/^    si7021: &'static SI7021<'static, VirtualMuxAlarm<'static, sam4l::ast::Ast<'static>>>,$/;"	m	struct:TemperatureComponent
si7021	capsules/src/lib.rs	/^pub mod si7021;$/;"	n
sidebar_menu	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	v
sixlowpan	capsules/src/net/ipv6/ipv6_send.rs	/^    sixlowpan: TxState<'a>,$/;"	m	struct:IP6SendStruct
sixlowpan	capsules/src/net/mod.rs	/^pub mod sixlowpan;$/;"	n
sixlowpan	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    sixlowpan: &'a SixlowpanState<'a>,$/;"	m	struct:TxState
sixlowpan_compression	capsules/src/net/sixlowpan/mod.rs	/^pub mod sixlowpan_compression;$/;"	n
sixlowpan_state	capsules/src/net/sixlowpan/mod.rs	/^pub mod sixlowpan_state;$/;"	n
sixlowpan_tx	boards/imix/src/ipv6_lowpan_test.rs	/^    sixlowpan_tx: TxState<'a>,$/;"	m	struct:LowpanTest
size	capsules/src/usb.rs	/^    fn size(&self) -> usize {$/;"	F	implementation:ConfigurationDescriptor
size	capsules/src/usb.rs	/^    fn size(&self) -> usize {$/;"	F	implementation:DeviceDescriptor
size	capsules/src/usb.rs	/^    fn size(&self) -> usize {$/;"	F	implementation:EndpointDescriptor
size	capsules/src/usb.rs	/^    fn size(&self) -> usize {$/;"	F	implementation:InterfaceDescriptor
size	capsules/src/usb.rs	/^    fn size(&self) -> usize {$/;"	F	implementation:LanguagesDescriptor
size	capsules/src/usb.rs	/^    fn size(&self) -> usize {$/;"	F	implementation:StringDescriptor
size	capsules/src/usb.rs	/^    fn size(&self) -> usize;$/;"	F	interface:Descriptor
size	kernel/src/platform/mpu.rs	/^    pub fn size(&self) -> usize {$/;"	F	implementation:Region
size	kernel/src/platform/mpu.rs	/^    size: usize,$/;"	m	struct:Region
slave	chips/sam4l/src/i2c.rs	/^    slave: Option<pm::Clock>,$/;"	m	struct:TWIMClock
slave	chips/sam4l/src/i2c.rs	/^    slave: Option<pm::Clock>,$/;"	m	struct:TWISClock
slave_buffer1	capsules/src/i2c_master_slave_driver.rs	/^    slave_buffer1: TakeCell<'static, [u8]>,$/;"	m	struct:I2CMasterSlaveDriver
slave_buffer2	capsules/src/i2c_master_slave_driver.rs	/^    slave_buffer2: TakeCell<'static, [u8]>,$/;"	m	struct:I2CMasterSlaveDriver
slave_client	chips/sam4l/src/i2c.rs	/^    slave_client: Cell<Option<&'static hil::i2c::I2CHwSlaveClient>>,$/;"	m	struct:I2CHw
slave_client	chips/sam4l/src/spi.rs	/^    slave_client: OptionalCell<&'static SpiSlaveClient>,$/;"	m	struct:SpiHw
slave_clock	chips/sam4l/src/i2c.rs	/^    slave_clock: TWISClock,$/;"	m	struct:I2CHw
slave_disable_interrupts	chips/sam4l/src/i2c.rs	/^    fn slave_disable_interrupts(&self, twis: &TWISRegisterManager) {$/;"	F	implementation:I2CHw
slave_enabled	chips/sam4l/src/i2c.rs	/^    slave_enabled: Cell<bool>,$/;"	m	struct:I2CHw
slave_listen	chips/sam4l/src/i2c.rs	/^    fn slave_listen(&self) {$/;"	F	implementation:I2CHw
slave_mmio_address	chips/sam4l/src/i2c.rs	/^    slave_mmio_address: Option<StaticRef<TWISRegisters>>,$/;"	m	struct:I2CHw
slave_read_buffer	chips/sam4l/src/i2c.rs	/^    slave_read_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:I2CHw
slave_read_buffer_index	chips/sam4l/src/i2c.rs	/^    slave_read_buffer_index: Cell<u8>,$/;"	m	struct:I2CHw
slave_read_buffer_len	chips/sam4l/src/i2c.rs	/^    slave_read_buffer_len: Cell<u8>,$/;"	m	struct:I2CHw
slave_read_send	chips/sam4l/src/i2c.rs	/^    fn slave_read_send(&self, buffer: &'static mut [u8], len: u8) {$/;"	F	implementation:I2CHw
slave_rx_buffer	capsules/src/i2c_master_slave_driver.rs	/^    slave_rx_buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
slave_set_address	chips/sam4l/src/i2c.rs	/^    fn slave_set_address(&self, address: u8) {$/;"	F	implementation:I2CHw
slave_tx_buffer	capsules/src/i2c_master_slave_driver.rs	/^    slave_tx_buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
slave_write_buffer	chips/sam4l/src/i2c.rs	/^    slave_write_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:I2CHw
slave_write_buffer_index	chips/sam4l/src/i2c.rs	/^    slave_write_buffer_index: Cell<u8>,$/;"	m	struct:I2CHw
slave_write_buffer_len	chips/sam4l/src/i2c.rs	/^    slave_write_buffer_len: Cell<u8>,$/;"	m	struct:I2CHw
slave_write_receive	chips/sam4l/src/i2c.rs	/^    fn slave_write_receive(&self, buffer: &'static mut [u8], len: u8) {$/;"	F	implementation:I2CHw
sleep	boards/imix/src/components/rf233.rs	/^    sleep: &'static hil::gpio::Pin,$/;"	m	struct:RF233Component
sleep	capsules/src/ieee802154/xmac.rs	/^    fn sleep(&self) {$/;"	F	implementation:XMac
sleep	chips/arty_exx/src/chip.rs	/^    fn sleep(&self) {$/;"	F	implementation:ArtyExx
sleep	chips/cc26x2/src/chip.rs	/^    fn sleep(&self) {$/;"	F	implementation:Cc26X2
sleep	chips/e310x/src/chip.rs	/^    fn sleep(&self) {$/;"	F	implementation:E310x
sleep	chips/nrf51/src/chip.rs	/^    fn sleep(&self) {$/;"	F	implementation:NRF51
sleep	chips/nrf52/src/chip.rs	/^    fn sleep(&self) {$/;"	F	implementation:NRF52
sleep	chips/sam4l/src/chip.rs	/^    fn sleep(&self) {$/;"	F	implementation:Sam4l
sleep	chips/tm4c129x/src/chip.rs	/^    fn sleep(&self) {$/;"	F	implementation:Tm4c129x
sleep	kernel/src/platform/mod.rs	/^    fn sleep(&self);$/;"	F	interface:Chip
sleep_pending	capsules/src/rf233.rs	/^    sleep_pending: Cell<bool>,$/;"	m	struct:RF233
sleep_pin	capsules/src/rf233.rs	/^    sleep_pin: &'a gpio::Pin,$/;"	m	struct:RF233
sleep_time	capsules/src/ieee802154/xmac.rs	/^    fn sleep_time(&self) -> u32 {$/;"	F	implementation:XMac
slice	capsules/src/i2c_master.rs	/^    slice: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
slice_to_u16	capsules/src/net/util.rs	/^pub fn slice_to_u16(buf: &[u8]) -> u16 {$/;"	f
slppwrcfg	chips/tm4c129x/src/sysctl.rs	/^    slppwrcfg: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
slr	chips/tm4c129x/src/gpio.rs	/^    slr: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
small	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
smbtr	chips/sam4l/src/i2c.rs	/^    smbtr: ReadWrite<u32, SmbusTiming::Register>,$/;"	m	struct:TWIMRegisters
soc	capsules/src/max17205.rs	/^    soc: Cell<u16>,$/;"	m	struct:MAX17205
soc_mah	capsules/src/max17205.rs	/^    soc_mah: Cell<u16>,$/;"	m	struct:MAX17205
sortResults	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execQuery
source	capsules/src/test/aes.rs	/^    source: TakeCell<'a, [u8]>,$/;"	m	struct:TestAes128Cbc
source	capsules/src/test/aes.rs	/^    source: TakeCell<'a, [u8]>,$/;"	m	struct:TestAes128Ctr
source	chips/sam4l/src/aes.rs	/^    source: TakeCell<'a, [u8]>,$/;"	m	struct:Aes
sp	kernel/src/process.rs	/^    fn sp(&self) -> *const usize {$/;"	F	implementation:Process
span.since	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
specify_chip_select	chips/nrf52/src/spi.rs	/^    fn specify_chip_select(&self, cs: Self::ChipSelect) {$/;"	F	implementation:SPIM
specify_chip_select	chips/sam4l/src/spi.rs	/^    fn specify_chip_select(&self, cs: Self::ChipSelect) {$/;"	F	implementation:SpiHw
specify_chip_select	chips/sam4l/src/usart.rs	/^    fn specify_chip_select(&self, cs: Self::ChipSelect) {$/;"	F	implementation:USART
specify_chip_select	kernel/src/hil/spi.rs	/^    fn specify_chip_select(&self, cs: Self::ChipSelect);$/;"	F	interface:SpiMaster
specify_pins	chips/tm4c129x/src/uart.rs	/^    pub fn specify_pins(&self, rx: &'static gpio::GPIOPin, tx: &'static gpio::GPIOPin) {$/;"	F	implementation:UART
speed	capsules/src/virtual_uart.rs	/^    speed: u32,$/;"	m	struct:UartMux
speed	chips/sam4l/src/usbc/mod.rs	/^    pub fn speed(&self) -> Option<Speed> {$/;"	F	implementation:Usbc
spi	boards/hail/src/main.rs	/^    spi: &'static capsules::spi::Spi<'static, VirtualSpiMasterDevice<'static, sam4l::spi::SpiHw>/;"	m	struct:Hail
spi	boards/imix/src/components/mod.rs	/^pub mod spi;$/;"	n
spi	boards/imix/src/components/rf233.rs	/^    spi: &'static VirtualSpiMasterDevice<'static, sam4l::spi::SpiHw>,$/;"	m	struct:RF233Component
spi	boards/imix/src/main.rs	/^    spi: &'static capsules::spi::Spi<'static, VirtualSpiMasterDevice<'static, sam4l::spi::SpiHw>/;"	m	struct:Imix
spi	capsules/src/fm25cl.rs	/^    spi: &'a S,$/;"	m	struct:FM25CL
spi	capsules/src/lib.rs	/^pub mod spi;$/;"	n
spi	capsules/src/mx25r6435f.rs	/^    spi: &'a S,$/;"	m	struct:MX25R6435F
spi	capsules/src/rf233.rs	/^    spi: &'a S,$/;"	m	struct:RF233
spi	capsules/src/sdcard.rs	/^    spi: &'a hil::spi::SpiMasterDevice,$/;"	m	struct:SDCard
spi	capsules/src/virtual_spi.rs	/^    spi: &'a Spi,$/;"	m	struct:MuxSpiMaster
spi	capsules/src/virtual_spi.rs	/^    spi: &'a Spi,$/;"	m	struct:VirtualSpiSlaveDevice
spi	chips/nrf52/src/lib.rs	/^pub mod spi;$/;"	n
spi	chips/sam4l/src/lib.rs	/^pub mod spi;$/;"	n
spi	kernel/src/hil/mod.rs	/^pub mod spi;$/;"	n
spi_buf	capsules/src/rf233.rs	/^    spi_buf: TakeCell<'static, [u8]>,$/;"	m	struct:RF233
spi_busy	capsules/src/rf233.rs	/^    spi_busy: Cell<bool>,$/;"	m	struct:RF233
spi_chip_select	chips/sam4l/src/usart.rs	/^    spi_chip_select: OptionalCell<&'static hil::gpio::Pin>,$/;"	m	struct:USART
spi_consts	chips/sam4l/src/spi.rs	/^mod spi_consts {$/;"	n
spi_dummy	boards/imix/src/main.rs	/^mod spi_dummy;$/;"	n
spi_dummy_test	boards/imix/src/spi_dummy.rs	/^pub unsafe fn spi_dummy_test() {$/;"	f
spi_master	capsules/src/spi.rs	/^    spi_master: &'a S,$/;"	m	struct:Spi
spi_mux	boards/imix/src/components/spi.rs	/^    spi_mux: &'static MuxSpiMaster<'static, sam4l::spi::SpiHw>,$/;"	m	struct:SpiComponent
spi_mux	boards/imix/src/components/spi.rs	/^    spi_mux: &'static MuxSpiMaster<'static, sam4l::spi::SpiHw>,$/;"	m	struct:SpiSyscallComponent
spi_rx	capsules/src/rf233.rs	/^    spi_rx: TakeCell<'static, [u8]>,$/;"	m	struct:RF233
spi_slave	capsules/src/spi.rs	/^    spi_slave: &'a S,$/;"	m	struct:SpiSlave
spi_slave_dummy_test	boards/imix/src/spi_slave_dummy.rs	/^pub unsafe fn spi_slave_dummy_test() {$/;"	f
spi_tx	capsules/src/rf233.rs	/^    spi_tx: TakeCell<'static, [u8]>,$/;"	m	struct:RF233
sqrtf32	kernel/src/common/math.rs	/^pub fn sqrtf32(num: f32) -> f32 {$/;"	f
sr	chips/sam4l/src/acifc.rs	/^    sr: ReadOnly<u32, Status::Register>,$/;"	m	struct:AcifcRegisters
sr	chips/sam4l/src/adc.rs	/^    sr: ReadOnly<u32, Status::Register>,$/;"	m	struct:AdcRegisters
sr	chips/sam4l/src/aes.rs	/^    sr: ReadOnly<u32, Status::Register>,             \/\/   0x0c$/;"	m	struct:AesRegisters
sr	chips/sam4l/src/ast.rs	/^    sr: ReadOnly<u32, Status::Register>,$/;"	m	struct:AstRegisters
sr	chips/sam4l/src/bpm.rs	/^    sr: ReadOnly<u32, Status::Register>,$/;"	m	struct:BpmRegisters
sr	chips/sam4l/src/crccu.rs	/^    sr: ReadOnly<u32, Status::Register>,$/;"	m	struct:CrccuRegisters
sr	chips/sam4l/src/dma.rs	/^    sr: ReadOnly<u32, Status::Register>,$/;"	m	struct:DMARegisters
sr	chips/sam4l/src/flashcalw.rs	/^    sr: ReadWrite<u32, PicoCacheStatus::Register>,$/;"	m	struct:FlashcalwRegisters
sr	chips/sam4l/src/i2c.rs	/^    sr: ReadOnly<u32, Status::Register>,$/;"	m	struct:TWIMRegisters
sr	chips/sam4l/src/i2c.rs	/^    sr: ReadOnly<u32, StatusSlave::Register>,$/;"	m	struct:TWISRegisters
sr	chips/sam4l/src/pm.rs	/^    sr: ReadOnly<u32, InterruptOrStatus::Register>,$/;"	m	struct:PmRegisters
sr	chips/sam4l/src/spi.rs	/^    sr: ReadOnly<u32, Status::Register>,$/;"	m	struct:SpiRegisters
sr	chips/sam4l/src/wdt.rs	/^    sr: ReadOnly<u32, Status::Register>,$/;"	m	struct:WdtRegisters
sracmp	chips/tm4c129x/src/sysctl.rs	/^    sracmp: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
sradc	chips/tm4c129x/src/sysctl.rs	/^    sradc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
src_addr	capsules/src/ieee802154/xmac.rs	/^    pub src_addr: Option<MacAddress>,$/;"	m	struct:XMacHeaderInfo
src_addr	capsules/src/net/ieee802154.rs	/^    pub src_addr: Option<MacAddress>,$/;"	m	struct:Header
src_addr	capsules/src/net/ip.rs	/^    pub src_addr: IPAddr,$/;"	m	struct:IP6Header
src_addr	capsules/src/net/ipv6/ipv6.rs	/^    pub src_addr: IPAddr,$/;"	m	struct:IP6Header
src_addr	capsules/src/net/ipv6/ipv6_send.rs	/^    src_addr: Cell<IPAddr>,$/;"	m	struct:IP6SendStruct
src_mac_addr	boards/imix/src/components/udp_6lowpan.rs	/^    src_mac_addr: MacAddress,$/;"	m	struct:UDPComponent
src_mac_addr	capsules/src/net/ipv6/ipv6_send.rs	/^    src_mac_addr: MacAddress,$/;"	m	struct:IP6SendStruct
src_mac_addr	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    src_mac_addr: Cell<MacAddress>,$/;"	m	struct:RxState
src_mac_addr	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    src_mac_addr: Cell<MacAddress>,$/;"	m	struct:TxState
src_pan	capsules/src/ieee802154/xmac.rs	/^    pub src_pan: Option<PanID>,$/;"	m	struct:XMacHeaderInfo
src_pan	capsules/src/net/ieee802154.rs	/^    pub src_pan: Option<PanID>,$/;"	m	struct:Header
src_pan	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    src_pan: Cell<PanID>,$/;"	m	struct:TxState
src_port	capsules/src/net/tcp.rs	/^    pub src_port: u16,$/;"	m	struct:TCPHeader
src_port	capsules/src/net/udp/udp.rs	/^    pub src_port: u16,$/;"	m	struct:UDPHeader
srcan	chips/tm4c129x/src/sysctl.rs	/^    srcan: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
srccm	chips/tm4c129x/src/sysctl.rs	/^    srccm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
srdma	chips/tm4c129x/src/sysctl.rs	/^    srdma: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
sreeprom	chips/tm4c129x/src/sysctl.rs	/^    sreeprom: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
sremac	chips/tm4c129x/src/sysctl.rs	/^    sremac: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
srephy	chips/tm4c129x/src/sysctl.rs	/^    srephy: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
srepi	chips/tm4c129x/src/sysctl.rs	/^    srepi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
srgpio	chips/tm4c129x/src/sysctl.rs	/^    srgpio: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
srhib	chips/tm4c129x/src/sysctl.rs	/^    srhib: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
sri2c	chips/tm4c129x/src/sysctl.rs	/^    sri2c: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
srpwm	chips/tm4c129x/src/sysctl.rs	/^    srpwm: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
srqei	chips/tm4c129x/src/sysctl.rs	/^    srqei: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
srr	chips/sam4l/src/i2c.rs	/^    srr: ReadWrite<u32, SlewRate::Register>,$/;"	m	struct:TWIMRegisters
srr	chips/sam4l/src/i2c.rs	/^    srr: ReadWrite<u32, SlewRateSlave::Register>,$/;"	m	struct:TWISRegisters
srssi	chips/tm4c129x/src/sysctl.rs	/^    srssi: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
srtimer	chips/tm4c129x/src/sysctl.rs	/^    srtimer: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
sruart	chips/tm4c129x/src/sysctl.rs	/^    sruart: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
srusb	chips/tm4c129x/src/sysctl.rs	/^    srusb: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
srwd	chips/tm4c129x/src/sysctl.rs	/^    srwd: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
start	boards/imix/src/icmp_lowpan_test.rs	/^    pub fn start(&self) {$/;"	F	implementation:LowpanICMPTest
start	boards/imix/src/ipv6_lowpan_test.rs	/^    pub fn start(&self) {$/;"	F	implementation:LowpanTest
start	boards/imix/src/sixlowpan_dummy.rs	/^    pub fn start(&self) {$/;"	F	implementation:LowpanTest
start	boards/imix/src/udp_lowpan_test.rs	/^    pub fn start(&self) {$/;"	F	implementation:LowpanTest
start	capsules/src/process_console.rs	/^    pub fn start(&self) -> ReturnCode {$/;"	F	implementation:ProcessConsole
start	capsules/src/rf233.rs	/^    fn start(&self) -> ReturnCode {$/;"	F	implementation:RF233
start	chips/cc26x2/src/rtc.rs	/^    pub fn start(&self) {$/;"	F	implementation:Rtc
start	chips/nrf51/src/radio.rs	/^    start: WriteOnly<u32, Task::Register>,       \/\/ 0x008 ---> 0x00c$/;"	m	struct:RadioRegisters
start	chips/nrf5x/src/rtc.rs	/^    pub fn start(&self) {$/;"	F	implementation:Rtc
start	chips/sam4l/src/wdt.rs	/^    fn start(&self, period: usize) {$/;"	F	implementation:Wdt
start	kernel/src/hil/radio.rs	/^    fn start(&self) -> ReturnCode;$/;"	F	interface:RadioConfig
start	kernel/src/hil/watchdog.rs	/^    fn start(&self, period: usize);$/;"	F	interface:Watchdog
startSearch	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
start_address	kernel/src/platform/mpu.rs	/^    pub fn start_address(&self) -> *const u8 {$/;"	F	implementation:Region
start_address	kernel/src/platform/mpu.rs	/^    start_address: *const u8,$/;"	m	struct:Region
start_ccm_auth	capsules/src/aes_ccm.rs	/^    fn start_ccm_auth(&self) -> ReturnCode {$/;"	F	implementation:AES128CCM
start_ccm_encrypt	capsules/src/aes_ccm.rs	/^    fn start_ccm_encrypt(&self) -> ReturnCode {$/;"	F	implementation:AES128CCM
start_comparing	capsules/src/analog_comparator.rs	/^    fn start_comparing(&self, channel: usize) -> ReturnCode {$/;"	F	implementation:AnalogComparator
start_comparing	chips/sam4l/src/acifc.rs	/^    fn start_comparing(&self, channel: &Self::Channel) -> ReturnCode {$/;"	F	implementation:Acifc
start_comparing	kernel/src/hil/analog_comparator.rs	/^    fn start_comparing(&self, channel: &Self::Channel) -> ReturnCode;$/;"	F	interface:AnalogComparator
start_idx	chips/nrf5x/src/aes.rs	/^    start_idx: Cell<usize>,$/;"	m	struct:AesECB
start_message	chips/nrf5x/src/aes.rs	/^    fn start_message(&self) {$/;"	F	implementation:AesECB
start_message	chips/sam4l/src/aes.rs	/^    fn start_message(&self) {$/;"	F	implementation:Aes
start_message	kernel/src/hil/symmetric_encryption.rs	/^    fn start_message(&self);$/;"	F	interface:AES128
start_read	chips/nrf51/src/i2c.rs	/^    fn start_read(&self) {$/;"	F	implementation:TWIM
start_read_accel	capsules/src/fxos8700cq.rs	/^    fn start_read_accel(&self) {$/;"	F	implementation:Fxos8700cq
start_read_lux	capsules/src/isl29035.rs	/^    pub fn start_read_lux(&self) {$/;"	F	implementation:Isl29035
start_read_magnetometer	capsules/src/fxos8700cq.rs	/^    fn start_read_magnetometer(&self) {$/;"	F	implementation:Fxos8700cq
start_receive	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn start_receive($/;"	F	implementation:RxState
start_receive	capsules/src/virtual_uart.rs	/^    fn start_receive(&self, rx_len: usize) -> bool {$/;"	F	implementation:UartMux
start_rng	chips/nrf5x/src/trng.rs	/^    fn start_rng(&self) {$/;"	F	implementation:Trng
start_time	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    start_time: Cell<u32>,$/;"	m	struct:RxState
start_transfer	chips/sam4l/src/dma.rs	/^    pub fn start_transfer(&self) {$/;"	F	implementation:DMAChannel
start_transmit	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn start_transmit<'b>($/;"	F	implementation:TxState
start_trap_rust	arch/riscv32i/src/lib.rs	/^pub unsafe extern "C" fn start_trap_rust() {$/;"	f
startsWith	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	m	class:String
stat	chips/cc26x2/src/i2c.rs	/^        pub fn stat(&self) -> &ReadOnly<u32, super::Status::Register> {$/;"	F	implementation:regs::ControlStatReg
state	boards/imix/src/i2c_dummy.rs	/^    state: Cell<AccelClientState>,$/;"	m	struct:AccelClient
state	boards/imix/src/i2c_dummy.rs	/^    state: Cell<LiClientState>,$/;"	m	struct:LiClient
state	boards/launchxl/src/i2c_tests.rs	/^    state: Cell<AccelClientState>,$/;"	m	struct:AccelClient
state	capsules/src/aes_ccm.rs	/^    state: Cell<CCMState>,$/;"	m	struct:AES128CCM
state	capsules/src/fm25cl.rs	/^    state: Cell<State>,$/;"	m	struct:FM25CL
state	capsules/src/fxos8700cq.rs	/^    state: Cell<State>,$/;"	m	struct:Fxos8700cq
state	capsules/src/ieee802154/xmac.rs	/^    state: Cell<XMacState>,$/;"	m	struct:XMac
state	capsules/src/isl29035.rs	/^    state: Cell<State>,$/;"	m	struct:Isl29035
state	capsules/src/lps25hb.rs	/^    state: Cell<State>,$/;"	m	struct:LPS25HB
state	capsules/src/ltc294x.rs	/^    state: Cell<State>,$/;"	m	struct:LTC294X
state	capsules/src/max17205.rs	/^    state: Cell<State>,$/;"	m	struct:MAX17205
state	capsules/src/mcp230xx.rs	/^    state: Cell<State>,$/;"	m	struct:MCP230xx
state	capsules/src/mx25r6435f.rs	/^    state: Cell<State>,$/;"	m	struct:MX25R6435F
state	capsules/src/nonvolatile_to_pages.rs	/^    state: Cell<State>,$/;"	m	struct:NonvolatileToPages
state	capsules/src/pca9544a.rs	/^    state: Cell<State>,$/;"	m	struct:PCA9544A
state	capsules/src/rf233.rs	/^    state: Cell<InternalState>,$/;"	m	struct:RF233
state	capsules/src/sdcard.rs	/^    state: Cell<SpiState>,$/;"	m	struct:SDCard
state	capsules/src/si7021.rs	/^    state: Cell<State>,$/;"	m	struct:SI7021
state	capsules/src/tsl2561.rs	/^    state: Cell<State>,$/;"	m	struct:TSL2561
state	capsules/src/usbc_client.rs	/^    state: [Cell<State>; N_ENDPOINTS],$/;"	m	struct:Client
state	capsules/src/virtual_uart.rs	/^    state: Cell<UartDeviceReceiveState>,$/;"	m	struct:UartDevice
state	chips/nrf51/src/radio.rs	/^    state: ReadOnly<u32, State::Register>,       \/\/ 0x550 - 0x554$/;"	m	struct:RadioRegisters
state	chips/nrf52/src/nvmc.rs	/^    state: Cell<FlashState>,$/;"	m	struct:Nvmc
state	chips/nrf52/src/radio.rs	/^    state: ReadOnly<u32, State::Register>,$/;"	m	struct:RadioRegisters
state	chips/sam4l/src/crccu.rs	/^    state: Cell<State>,$/;"	m	struct:Crccu
state	chips/sam4l/src/usbc/mod.rs	/^    state: OptionalCell<State>,$/;"	m	struct:Usbc
state_of_charge	capsules/src/max17205.rs	/^    fn state_of_charge(&self, percent: u16, capacity: u16, full_capacity: u16, error: ReturnCode/;"	F	implementation:MAX17205Driver
state_of_charge	capsules/src/max17205.rs	/^    fn state_of_charge(&self, percent: u16, capacity: u16, full_capacity: u16, error: ReturnCode/;"	F	interface:MAX17205Client
state_transition_read	capsules/src/rf233.rs	/^    fn state_transition_read(&self, reg: RF233Register, state: InternalState) {$/;"	F	implementation:RF233
state_transition_write	capsules/src/rf233.rs	/^    fn state_transition_write(&self, reg: RF233Register, val: u8, state: InternalState) {$/;"	F	implementation:RF233
static_init	kernel/src/common/utils.rs	/^macro_rules! static_init {$/;"	M
static_init_ccm	boards/imix/src/aes_ccm_test.rs	/^unsafe fn static_init_ccm() -> &'static mut aes_ccm::AES128CCM<'static, Aes<'static>> {$/;"	f
static_init_test	boards/imix/src/aes_ccm_test.rs	/^unsafe fn static_init_test(aes_ccm: &'static AESCCM) -> &'static mut Test<'static, AESCCM> {$/;"	f
static_init_test	boards/nordic/nrf51dk/src/aes_test.rs	/^fn static_init_test() -> &'static mut TestAes128Ctr<'static, AesECB<'static>> {$/;"	f
static_init_test	boards/nordic/nrf52dk/src/tests/aes.rs	/^unsafe fn static_init_test() -> &'static mut TestAes128Ctr<'static, AesECB<'static>> {$/;"	f
static_init_test_cbc	boards/imix/src/aes_test.rs	/^unsafe fn static_init_test_cbc() -> &'static mut TestAes128Cbc<'static, Aes<'static>> {$/;"	f
static_init_test_ctr	boards/imix/src/aes_test.rs	/^unsafe fn static_init_test_ctr() -> &'static mut TestAes128Ctr<'static, Aes<'static>> {$/;"	f
static_init_test_entropy32	boards/imix/src/rng_test.rs	/^unsafe fn static_init_test_entropy32() -> &'static TestRng<'static> {$/;"	f
static_init_test_receive_large	boards/imix/src/virtual_uart_rx_test.rs	/^unsafe fn static_init_test_receive_large($/;"	f
static_init_test_receive_small	boards/imix/src/virtual_uart_rx_test.rs	/^unsafe fn static_init_test_receive_small($/;"	f
static_ref	kernel/src/common/mod.rs	/^mod static_ref;$/;"	n
status	capsules/src/fm25cl.rs	/^    fn status(&self, status: u8);$/;"	F	interface:FM25CLClient
status	capsules/src/ltc294x.rs	/^    fn status($/;"	F	implementation:LTC294XDriver
status	capsules/src/ltc294x.rs	/^    fn status($/;"	F	interface:LTC294XClient
status	capsules/src/max17205.rs	/^    fn status(&self, status: u16, error: ReturnCode) {$/;"	F	implementation:MAX17205Driver
status	capsules/src/max17205.rs	/^    fn status(&self, status: u16, error: ReturnCode);$/;"	F	interface:MAX17205Client
status	chips/nrf52/src/adc.rs	/^    status: ReadOnly<u32>,$/;"	m	struct:AdcRegisters
stdin_fdi	tools/usb/bulk-echo-fast/main.c	/^static size_t stdin_fdi;$/;"	v	typeref:typename:size_t	file:
step_receive_state	capsules/src/ieee802154/framer.rs	/^    fn step_receive_state(&self) {$/;"	F	implementation:Framer
step_transmit_state	capsules/src/ieee802154/framer.rs	/^    fn step_transmit_state(&self) -> (ReturnCode, Option<&'static mut [u8]>) {$/;"	F	implementation:Framer
ster	chips/sam4l/src/gpio.rs	/^    ster: Register,$/;"	m	struct:GpioRegisters
stop	capsules/src/rf233.rs	/^    fn stop(&self) -> ReturnCode {$/;"	F	implementation:RF233
stop	chips/cc26x2/src/rtc.rs	/^    pub fn stop(&self) {$/;"	F	implementation:Rtc
stop	chips/nrf51/src/radio.rs	/^    stop: WriteOnly<u32, Task::Register>,        \/\/ 0x00c ---> 0x010$/;"	m	struct:RadioRegisters
stop	chips/nrf5x/src/rtc.rs	/^    pub fn stop(&self) {$/;"	F	implementation:Rtc
stop	chips/sam4l/src/wdt.rs	/^    fn stop(&self) {$/;"	F	implementation:Wdt
stop	kernel/src/hil/radio.rs	/^    fn stop(&self) -> ReturnCode;$/;"	F	interface:RadioConfig
stop	kernel/src/hil/watchdog.rs	/^    fn stop(&self);$/;"	F	interface:Watchdog
stop	kernel/src/process.rs	/^    fn stop(&self) {$/;"	F	implementation:Process
stop	kernel/src/process.rs	/^    fn stop(&self);$/;"	F	interface:ProcessType
stop_bits	chips/sifive/src/uart.rs	/^    stop_bits: Cell<hil::uart::StopBits>,$/;"	m	struct:Uart
stop_bits	kernel/src/hil/uart.rs	/^    pub stop_bits: StopBits,$/;"	m	struct:UARTParameters
stop_comparing	capsules/src/analog_comparator.rs	/^    fn stop_comparing(&self, channel: usize) -> ReturnCode {$/;"	F	implementation:AnalogComparator
stop_comparing	chips/sam4l/src/acifc.rs	/^    fn stop_comparing(&self, channel: &Self::Channel) -> ReturnCode {$/;"	F	implementation:Acifc
stop_comparing	kernel/src/hil/analog_comparator.rs	/^    fn stop_comparing(&self, channel: &Self::Channel) -> ReturnCode;$/;"	F	interface:AnalogComparator
stop_index	chips/sam4l/src/aes.rs	/^    stop_index: Cell<usize>,$/;"	m	struct:Aes
stop_sampling	capsules/src/adc.rs	/^    fn stop_sampling(&self) -> ReturnCode {$/;"	F	implementation:Adc
stop_sampling	chips/nrf52/src/adc.rs	/^    fn stop_sampling(&self) -> ReturnCode {$/;"	F	implementation:Adc
stop_sampling	chips/sam4l/src/adc.rs	/^    fn stop_sampling(&self) -> ReturnCode {$/;"	F	implementation:Adc
stop_sampling	kernel/src/hil/adc.rs	/^    fn stop_sampling(&self) -> ReturnCode;$/;"	F	interface:Adc
stopped_buffer	chips/sam4l/src/adc.rs	/^    stopped_buffer: TakeCell<'static, [u16]>,$/;"	m	struct:Adc
storage_volume	kernel/src/common/utils.rs	/^macro_rules! storage_volume {$/;"	M
store_relaxed	kernel/src/common/deferred_call.rs	/^    crate fn store_relaxed(&self, val: usize) {$/;"	F	implementation:AtomicUsize
stored_state	kernel/src/process.rs	/^    stored_state:$/;"	m	struct:Process
str	capsules/src/usbc_client.rs	/^static STRINGS: &'static [&'static str] = &[$/;"	v
stream	capsules/src/net/mod.rs	/^pub mod stream;$/;"	n
stream_cond	capsules/src/net/stream.rs	/^macro_rules! stream_cond {$/;"	M
stream_done	capsules/src/net/stream.rs	/^macro_rules! stream_done {$/;"	M
stream_err	capsules/src/net/stream.rs	/^macro_rules! stream_err {$/;"	M
stream_from_option	capsules/src/net/stream.rs	/^macro_rules! stream_from_option {$/;"	M
stream_len_cond	capsules/src/net/stream.rs	/^macro_rules! stream_len_cond {$/;"	M
string	capsules/src/usb.rs	/^    pub string: &'a str,$/;"	m	struct:StringDescriptor
string_index	capsules/src/usb.rs	/^    pub string_index: u8,$/;"	m	struct:ConfigurationDescriptor
string_index	capsules/src/usb.rs	/^    pub string_index: u8,$/;"	m	struct:InterfaceDescriptor
strong	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
sub	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
subclass	capsules/src/usb.rs	/^    pub subclass: u8,$/;"	m	struct:DeviceDescriptor
submit_transfers	tools/usb/bulk-echo-fast/main.c	/^void submit_transfers(void) {$/;"	f	typeref:typename:void
subscribe	capsules/src/adc.rs	/^    fn subscribe($/;"	F	implementation:Adc
subscribe	capsules/src/alarm.rs	/^    fn subscribe($/;"	F	implementation:AlarmDriver
subscribe	capsules/src/ambient_light.rs	/^    fn subscribe($/;"	F	implementation:AmbientLight
subscribe	capsules/src/analog_comparator.rs	/^    fn subscribe($/;"	F	implementation:AnalogComparator
subscribe	capsules/src/app_flash_driver.rs	/^    fn subscribe($/;"	F	implementation:AppFlash
subscribe	capsules/src/ble_advertising_driver.rs	/^    fn subscribe($/;"	f
subscribe	capsules/src/button.rs	/^    fn subscribe($/;"	F	implementation:Button
subscribe	capsules/src/console.rs	/^    fn subscribe($/;"	F	implementation:Console
subscribe	capsules/src/crc.rs	/^    fn subscribe($/;"	F	implementation:Crc
subscribe	capsules/src/gpio.rs	/^    fn subscribe($/;"	F	implementation:GPIO
subscribe	capsules/src/gpio_async.rs	/^    fn subscribe($/;"	F	implementation:GPIOAsync
subscribe	capsules/src/humidity.rs	/^    fn subscribe($/;"	F	implementation:HumiditySensor
subscribe	capsules/src/i2c_master.rs	/^    fn subscribe($/;"	F	implementation:I2CMasterDriver
subscribe	capsules/src/i2c_master_slave_driver.rs	/^    fn subscribe($/;"	F	implementation:I2CMasterSlaveDriver
subscribe	capsules/src/ieee802154/driver.rs	/^    fn subscribe($/;"	F	implementation:RadioDriver
subscribe	capsules/src/lps25hb.rs	/^    fn subscribe($/;"	F	implementation:LPS25HB
subscribe	capsules/src/ltc294x.rs	/^    fn subscribe($/;"	F	implementation:LTC294XDriver
subscribe	capsules/src/max17205.rs	/^    fn subscribe($/;"	F	implementation:MAX17205Driver
subscribe	capsules/src/net/udp/driver.rs	/^    fn subscribe($/;"	F	implementation:UDPDriver
subscribe	capsules/src/ninedof.rs	/^    fn subscribe($/;"	F	implementation:NineDof
subscribe	capsules/src/nonvolatile_storage_driver.rs	/^    fn subscribe($/;"	F	implementation:NonvolatileStorage
subscribe	capsules/src/nrf51822_serialization.rs	/^    fn subscribe($/;"	F	implementation:Nrf51822Serialization
subscribe	capsules/src/pca9544a.rs	/^    fn subscribe($/;"	F	implementation:PCA9544A
subscribe	capsules/src/rng.rs	/^    fn subscribe($/;"	F	implementation:RngDriver
subscribe	capsules/src/sdcard.rs	/^    fn subscribe($/;"	F	implementation:SDCardDriver
subscribe	capsules/src/spi.rs	/^    fn subscribe($/;"	F	implementation:Spi
subscribe	capsules/src/spi.rs	/^    fn subscribe($/;"	F	implementation:SpiSlave
subscribe	capsules/src/temperature.rs	/^    fn subscribe($/;"	F	implementation:TemperatureSensor
subscribe	capsules/src/tmp006.rs	/^    fn subscribe($/;"	F	implementation:TMP006
subscribe	capsules/src/tsl2561.rs	/^    fn subscribe($/;"	F	implementation:TSL2561
subscribe	capsules/src/usb_user.rs	/^    fn subscribe($/;"	f
subscribe	kernel/src/driver.rs	/^    fn subscribe(&self, minor_num: usize, callback: Option<Callback>, app_id: AppId) -> ReturnCo/;"	F	interface:Driver
subscribe	kernel/src/ipc.rs	/^    fn subscribe($/;"	F	implementation:IPC
subscribed	capsules/src/humidity.rs	/^    subscribed: bool,$/;"	m	struct:App
subscribed	capsules/src/temperature.rs	/^    subscribed: bool,$/;"	m	struct:App
subsec	chips/cc26x2/src/rtc.rs	/^    subsec: ReadOnly<u32>,$/;"	m	struct:RtcRegisters
subtract	libraries/tock-cells/src/numeric_cell_ext.rs	/^    fn subtract(&self, val: T) {$/;"	f
subtract	libraries/tock-cells/src/numeric_cell_ext.rs	/^    fn subtract(&self, val: T);$/;"	F	interface:NumericCellExt
successes	arch/riscv32i/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1164083562126845933":["rustc 1.32.0-nightl/;"	o
successes	boards/hifive1/target/.rustc_info.json	/^{"rustc_fingerprint":6405865732497413016,"outputs":{"1164083562126845933":["rustc 1.35.0-nightly/;"	o
successes	kernel/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"15337506775154344876":["___\\nlib___.rlib\\/;"	o
successes	libraries/tock-register-interface/target/.rustc_info.json	/^{"rustc_fingerprint":17056625503994609500,"outputs":{"1617349019360157463":["___\\nlib___.rlib\\/;"	o
summary	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
summary	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
sup	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
support	arch/cortex-m/src/lib.rs	/^pub mod support;$/;"	n
support	arch/riscv32i/src/lib.rs	/^pub mod support;$/;"	n
svc_handler	arch/cortex-m3/src/lib.rs	/^pub unsafe extern "C" fn svc_handler() {$/;"	f
svc_handler	arch/cortex-m3/src/lib.rs	/^pub unsafe extern "C" fn svc_handler() {}$/;"	f
svc_handler	arch/cortex-m4/src/lib.rs	/^pub unsafe extern "C" fn svc_handler() {$/;"	f
svc_handler	arch/cortex-m4/src/lib.rs	/^pub unsafe extern "C" fn svc_handler() {}$/;"	f
svg:not(:root)	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
sw_reset	chips/cc26x2/src/trng.rs	/^    sw_reset: ReadWrite<u32, SoftwareReset::Register>,$/;"	m	struct:RngRegisters
swap_tag_block	capsules/src/aes_ccm.rs	/^    fn swap_tag_block(&self) {$/;"	F	implementation:AES128CCM
switchTheme	kernel/target/doc/storage.js	/^ *\/var currentTheme=document.getElementById("themeStyle");var mainTheme=document.getElementById/;"	f
switchThemeButtonState	kernel/target/doc/theme.js	/^function switchThemeButtonState() {$/;"	f
switch_to	kernel/src/process.rs	/^    unsafe fn switch_to(&self) -> Option<syscall::ContextSwitchReason> {$/;"	F	implementation:Process
switch_to	kernel/src/process.rs	/^    unsafe fn switch_to(&self) -> Option<syscall::ContextSwitchReason>;$/;"	F	interface:ProcessType
switch_to_process	arch/cortex-m/src/syscall.rs	/^    unsafe fn switch_to_process($/;"	F	implementation:SysCall
switch_to_process	arch/riscv32i/src/syscall.rs	/^    unsafe fn switch_to_process($/;"	F	implementation:SysCall
switch_to_process	kernel/src/syscall.rs	/^    unsafe fn switch_to_process($/;"	F	interface:UserspaceKernelBoundary
switch_to_user	arch/cortex-m3/src/lib.rs	/^pub unsafe extern "C" fn switch_to_user(user_stack: *const u8, process_got: *const u8) -> *mut u/;"	f
switch_to_user	arch/cortex-m4/src/lib.rs	/^pub unsafe extern "C" fn switch_to_user(user_stack: *const u8, process_got: *const u8) -> *mut u/;"	f
symmetric_encryption	kernel/src/hil/mod.rs	/^pub mod symmetric_encryption;$/;"	n
sync	chips/cc26x2/src/aon.rs	/^    pub fn sync(&self) {$/;"	F	implementation:Aon
sync	chips/cc26x2/src/rtc.rs	/^    pub fn sync(&self) {$/;"	F	implementation:Rtc
sync	chips/cc26x2/src/rtc.rs	/^    sync: ReadOnly<u32>,$/;"	m	struct:RtcRegisters
sync	chips/tm4c129x/src/gpt.rs	/^    sync: VolatileCell<u32>,$/;"	m	struct:GptRegisters
syscall	arch/cortex-m/src/lib.rs	/^pub mod syscall;$/;"	n
syscall	arch/riscv32i/src/lib.rs	/^pub mod syscall;$/;"	n
syscall	kernel/src/lib.rs	/^pub mod syscall;$/;"	n
syscall_count	kernel/src/process.rs	/^    syscall_count: usize,$/;"	m	struct:ProcessDebug
sysctl	chips/tm4c129x/src/lib.rs	/^pub mod sysctl;$/;"	n
sysprop	chips/tm4c129x/src/sysctl.rs	/^    sysprop: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
syst_calib	arch/cortex-m/src/systick.rs	/^    syst_calib: ReadOnly<u32, CalibrationValue::Register>,$/;"	m	struct:SystickRegisters
syst_csr	arch/cortex-m/src/systick.rs	/^    syst_csr: ReadWrite<u32, ControlAndStatus::Register>,$/;"	m	struct:SystickRegisters
syst_cvr	arch/cortex-m/src/systick.rs	/^    syst_cvr: ReadWrite<u32, CurrentValue::Register>,$/;"	m	struct:SystickRegisters
syst_rvr	arch/cortex-m/src/systick.rs	/^    syst_rvr: ReadWrite<u32, ReloadValue::Register>,$/;"	m	struct:SystickRegisters
system_clock_source	chips/sam4l/src/pm.rs	/^    system_clock_source: Cell<SystemClockSource>,$/;"	m	struct:PowerManager
system_clock_source	chips/tm4c129x/src/sysctl.rs	/^    system_clock_source: Cell<SystemClockSource>,$/;"	m	struct:SystemControl
system_frequency	chips/tm4c129x/src/sysctl.rs	/^    system_frequency: Cell<u32>,$/;"	m	struct:SystemControl
system_initial_configs	chips/sam4l/src/pm.rs	/^    system_initial_configs: Cell<bool>,$/;"	m	struct:PowerManager
system_on_clocks	chips/sam4l/src/pm.rs	/^    system_on_clocks: Cell<u32>,$/;"	m	struct:PowerManager
systick	arch/cortex-m/src/lib.rs	/^pub mod systick;$/;"	n
systick	chips/arty_exx/src/chip.rs	/^    fn systick(&self) -> &Self::SysTick {$/;"	F	implementation:ArtyExx
systick	chips/cc26x2/src/chip.rs	/^    fn systick(&self) -> &Self::SysTick {$/;"	F	implementation:Cc26X2
systick	chips/cc26x2/src/chip.rs	/^    systick: cortexm4::systick::SysTick,$/;"	m	struct:Cc26X2
systick	chips/e310x/src/chip.rs	/^    fn systick(&self) -> &Self::SysTick {$/;"	F	implementation:E310x
systick	chips/nrf51/src/chip.rs	/^    fn systick(&self) -> &Self::SysTick {$/;"	F	implementation:NRF51
systick	chips/nrf52/src/chip.rs	/^    fn systick(&self) -> &Self::SysTick {$/;"	F	implementation:NRF52
systick	chips/nrf52/src/chip.rs	/^    systick: cortexm4::systick::SysTick,$/;"	m	struct:NRF52
systick	chips/sam4l/src/chip.rs	/^    fn systick(&self) -> &cortexm4::systick::SysTick {$/;"	F	implementation:Sam4l
systick	chips/sam4l/src/chip.rs	/^    systick: cortexm4::systick::SysTick,$/;"	m	struct:Sam4l
systick	chips/tm4c129x/src/chip.rs	/^    fn systick(&self) -> &cortexm4::systick::SysTick {$/;"	F	implementation:Tm4c129x
systick	chips/tm4c129x/src/chip.rs	/^    systick: cortexm4::systick::SysTick,$/;"	m	struct:Tm4c129x
systick	kernel/src/platform/mod.rs	/^    fn systick(&self) -> &Self::SysTick;$/;"	F	interface:Chip
systick	kernel/src/platform/mod.rs	/^crate mod systick;$/;"	n
systick_handler	arch/cortex-m3/src/lib.rs	/^pub unsafe extern "C" fn systick_handler() {$/;"	f
systick_handler	arch/cortex-m3/src/lib.rs	/^pub unsafe extern "C" fn systick_handler() {}$/;"	f
systick_handler	arch/cortex-m4/src/lib.rs	/^pub unsafe extern "C" fn systick_handler() {$/;"	f
systick_handler	arch/cortex-m4/src/lib.rs	/^pub unsafe extern "C" fn systick_handler() {}$/;"	f
t	chips/nrf5x/src/temperature.rs	/^    pub t: [ReadWrite<u32, B::Register>; 5],$/;"	m	struct:TempRegisters
t0	arch/riscv32i/src/lib.rs	/^    t0: u32,$/;"	m	struct:StackFrame
t0	capsules/src/ble_advertising_driver.rs	/^    t0: u32,$/;"	m	struct:AlarmData
t1	arch/riscv32i/src/lib.rs	/^    t1: u32,$/;"	m	struct:StackFrame
t2	arch/riscv32i/src/lib.rs	/^    t2: u32,$/;"	m	struct:StackFrame
t3	arch/riscv32i/src/lib.rs	/^    t3: u32,$/;"	m	struct:StackFrame
t4	arch/riscv32i/src/lib.rs	/^    t4: u32,$/;"	m	struct:StackFrame
t5	arch/riscv32i/src/lib.rs	/^    t5: u32,$/;"	m	struct:StackFrame
t6	arch/riscv32i/src/lib.rs	/^    t6: u32,$/;"	m	struct:StackFrame
table	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
tail	kernel/src/common/ring_buffer.rs	/^    tail: usize,$/;"	m	struct:RingBuffer
tail	kernel/src/debug.rs	/^    tail: Cell<usize>,$/;"	m	struct:DebugWriter
tailr	chips/tm4c129x/src/gpt.rs	/^    tailr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
take	libraries/tock-cells/src/map_cell.rs	/^    pub fn take(&self) -> Option<T> {$/;"	F	implementation:MapCell
take	libraries/tock-cells/src/optional_cell.rs	/^    pub fn take(&self) -> Option<T> {$/;"	F	implementation:OptionalCell
take	libraries/tock-cells/src/take_cell.rs	/^    pub fn take(&self) -> Option<&'a mut T> {$/;"	F	implementation:TakeCell
take_and_map_buffer	capsules/src/adc.rs	/^    fn take_and_map_buffer<F: FnOnce(&'static mut [u16])>(&self, closure: F) {$/;"	F	implementation:Adc
take_cell	libraries/tock-cells/src/lib.rs	/^pub mod take_cell;$/;"	n
take_measurement	capsules/src/lps25hb.rs	/^    pub fn take_measurement(&self) {$/;"	F	implementation:LPS25HB
take_measurement	capsules/src/tsl2561.rs	/^    pub fn take_measurement(&self) {$/;"	F	implementation:TSL2561
tamatchr	chips/tm4c129x/src/gpt.rs	/^    tamatchr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tamr	chips/tm4c129x/src/gpt.rs	/^    tamr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tapmr	chips/tm4c129x/src/gpt.rs	/^    tapmr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tapr	chips/tm4c129x/src/gpt.rs	/^    tapr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
taps	chips/tm4c129x/src/gpt.rs	/^    taps: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tar	chips/tm4c129x/src/gpt.rs	/^    tar: VolatileCell<u32>,$/;"	m	struct:GptRegisters
target	arch/riscv32i/target/debug/.fingerprint/bare-metal-24acc5d3590b7513/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0./;"	n
target	arch/riscv32i/target/debug/.fingerprint/bare-metal-7dd6462cd7700cd7/lib-bare_metal-7dd6462cd7700cd7.json	/^{"rustc":10377385455325587324,"features":"[]","target":10318145944003877215,"profile":1187018370/;"	n
target	arch/riscv32i/target/debug/.fingerprint/bare-metal-ecc3390b063d2ba5/build-script-build_script_build-ecc3390b063d2ba5.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
target	arch/riscv32i/target/debug/.fingerprint/bit_field-56ae9b63ca7874f1/lib-bit_field-56ae9b63ca7874f1.json	/^{"rustc":10377385455325587324,"features":"[]","target":6212214415640514931,"profile":11870183705/;"	n
target	arch/riscv32i/target/debug/.fingerprint/riscvregs-0c285ab8bbe41fa7/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"db/;"	n
target	arch/riscv32i/target/debug/.fingerprint/riscvregs-126b22abd70e245c/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"0e/;"	n
target	arch/riscv32i/target/debug/.fingerprint/riscvregs-5a5c5be2e4869277/lib-riscvregs-5a5c5be2e4869277.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n
target	arch/riscv32i/target/debug/.fingerprint/riscvregs-6139b500506bfce3/lib-riscvregs-6139b500506bfce3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n
target	arch/riscv32i/target/debug/.fingerprint/riscvregs-7b5528c14e2c7055/build-script-build_script_build-7b5528c14e2c7055.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
target	arch/riscv32i/target/debug/.fingerprint/riscvregs-d6ebf6a6021a8976/build.json	/^{"rustc":0,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"Precalculated":"78/;"	n
target	arch/riscv32i/target/debug/.fingerprint/riscvregs-e220008a48c83b01/build-script-build_script_build-e220008a48c83b01.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
target	arch/riscv32i/target/debug/.fingerprint/riscvregs-e3787b41749bb5b0/build-script-build_script_build-e3787b41749bb5b0.json	/^{"rustc":10377385455325587324,"features":"[]","target":4944179213620976468,"profile":11870183705/;"	n
target	arch/riscv32i/target/debug/.fingerprint/riscvregs-e94078cbf5b0f6a3/lib-riscvregs-e94078cbf5b0f6a3.json	/^{"rustc":10377385455325587324,"features":"[]","target":16753873847787040594,"profile":1187018370/;"	n
target	arch/riscv32i/target/debug/.fingerprint/rustc_version-a620c0f7e23e40a0/lib-rustc_version-a620c0f7e23e40a0.json	/^{"rustc":10377385455325587324,"features":"[]","target":16038813452913567370,"profile":1187018370/;"	n
target	arch/riscv32i/target/debug/.fingerprint/semver-ef5ff75654b36efe/lib-semver-ef5ff75654b36efe.json	/^{"rustc":10377385455325587324,"features":"[\\"default\\"]","target":11637645323780128689,"profil/;"	n
target	arch/riscv32i/target/debug/.fingerprint/semver-parser-1d01b4b0efb84ec1/lib-semver_parser-1d01b4b0efb84ec1.json	/^{"rustc":10377385455325587324,"features":"[]","target":11042536386261824010,"profile":1187018370/;"	n
target	arch/riscv32i/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1006188090/;"	n
target	arch/riscv32i/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10061880903/;"	n
target	boards/hifive1/target/debug/.fingerprint/bare-metal-51c18718648243e1/build-script-build_script_build-51c18718648243e1.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n
target	boards/hifive1/target/debug/.fingerprint/hifive1-5cce7ff173b75472/build-script-build_script_build-5cce7ff173b75472.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":14070521851/;"	n
target	boards/hifive1/target/debug/.fingerprint/riscvregs-8a1ccaee318cf981/build-script-build_script_build-8a1ccaee318cf981.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n
target	boards/hifive1/target/debug/.fingerprint/riscvregs-e5cf2a660cb8088f/build-script-build_script_build-e5cf2a660cb8088f.json	/^{"rustc":4168008693276420879,"features":"[]","target":10088282520713642473,"profile":11838665009/;"	n
target	boards/hifive1/target/debug/.fingerprint/rustc_version-5252bde5aa6d4fb3/lib-rustc_version-5252bde5aa6d4fb3.json	/^{"rustc":4168008693276420879,"features":"[]","target":6313960884421907368,"profile":118386650091/;"	n
target	boards/hifive1/target/debug/.fingerprint/semver-33b39b3be6af5b03/lib-semver-33b39b3be6af5b03.json	/^{"rustc":4168008693276420879,"features":"[\\"default\\"]","target":2853601631441890360,"profile"/;"	n
target	boards/hifive1/target/debug/.fingerprint/semver-parser-0cbc1426a8cfeede/lib-semver_parser-0cbc1426a8cfeede.json	/^{"rustc":4168008693276420879,"features":"[]","target":3650675185119913205,"profile":118386650091/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-3818320f62d4b526/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bare-metal-df9644ec3304112d/lib-bare_metal-df9644ec3304112d.json	/^{"rustc":4168008693276420879,"features":"[]","target":7077261942879914497,"profile":118211342193/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/bit_field-721b8b64413c870e/lib-bit_field-721b8b64413c870e.json	/^{"rustc":4168008693276420879,"features":"[]","target":11722199695916508143,"profile":11821134219/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/capsules-8446fecba67c6dfa/lib-capsules-8446fecba67c6dfa.json	/^{"rustc":4168008693276420879,"features":"[]","target":121680906932594235,"profile":1444818756805/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/enum_primitive-6ebee197439cf7a2/lib-enum_primitive-6ebee197439cf7a2.json	/^{"rustc":4168008693276420879,"features":"[]","target":3942536768587213105,"profile":144481875680/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/hifive1-a6b62b954b8606fa/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/kernel-9ebfa2d8ff5d794f/lib-kernel-9ebfa2d8ff5d794f.json	/^{"rustc":4168008693276420879,"features":"[]","target":8017820070242040378,"profile":144481875680/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-5a31f60d1aed50ae/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-761a395f62d877d1/lib-riscvregs-761a395f62d877d1.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-8be0eb18a6918b57/lib-riscvregs-8be0eb18a6918b57.json	/^{"rustc":4168008693276420879,"features":"[]","target":18016643315384587521,"profile":11821134219/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/riscvregs-90db6ed0e5b8c3d4/build.json	/^{"rustc":4168008693276420879,"features":"","target":0,"profile":0,"path":0,"deps":[],"local":[{"/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-cells-9ea7c56b37594747/lib-tock_cells-9ea7c56b37594747.json	/^{"rustc":4168008693276420879,"features":"[]","target":2209818711842856171,"profile":144481875680/;"	n
target	boards/hifive1/target/riscv32imac-unknown-none-elf/debug/.fingerprint/tock-registers-83461ade2c4163b4/lib-tock_registers-83461ade2c4163b4.json	/^{"rustc":4168008693276420879,"features":"[]","target":12483910918268340367,"profile":14448187568/;"	n
target	kernel/target/debug/.fingerprint/tock-cells-4785a5da0b404aaf/lib-tock_cells-4785a5da0b404aaf.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1074755647/;"	n
target	kernel/target/debug/.fingerprint/tock-cells-816571e4fa975f6b/doc-lib-tock_cells-816571e4fa975f6b.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":3062756892/;"	n
target	kernel/target/debug/.fingerprint/tock-cells-83087cc1a3bdbc03/lib-tock_cells-83087cc1a3bdbc03.json	/^{"rustc":10377385455325587324,"features":"[]","target":10014355644295998321,"profile":1100302216/;"	n
target	kernel/target/debug/.fingerprint/tock-registers-087033513e74094b/lib-tock_registers-087033513e74094b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":10747556477/;"	n
target	kernel/target/debug/.fingerprint/tock-registers-5d2373dc0aee2c59/lib-tock_registers-5d2373dc0aee2c59.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11003022163/;"	n
target	kernel/target/debug/.fingerprint/tock-registers-e7eec879e9fa92db/doc-lib-tock_registers-e7eec879e9fa92db.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":30627568924/;"	n
target	libraries/tock-register-interface/target/debug/.fingerprint/tock-registers-483cd88bab46326b/test-lib-tock_registers-483cd88bab46326b.json	/^{"rustc":10377385455325587324,"features":"[]","target":8988515968745722915,"profile":11221779804/;"	n
target/$(TARGET)/release/$(PLATFORM)-$(APP).hex	boards/ek-tm4c1294xl/Makefile	/^target\/$(TARGET)\/release\/$(PLATFORM)-$(APP).hex: target\/$(TARGET)\/release\/$(PLATFORM)-$(AP/;"	t
task_bcstart	chips/nrf52/src/radio.rs	/^    task_bcstart: WriteOnly<u32, Task::Register>,$/;"	m	struct:RadioRegisters
task_bcstop	chips/nrf52/src/radio.rs	/^    task_bcstop: WriteOnly<u32, Task::Register>,$/;"	m	struct:RadioRegisters
task_disable	chips/nrf52/src/radio.rs	/^    task_disable: WriteOnly<u32, Task::Register>,$/;"	m	struct:RadioRegisters
task_flush_rx	chips/nrf52/src/uart.rs	/^    task_flush_rx: WriteOnly<u32, Task::Register>,$/;"	m	struct:UarteRegisters
task_out	chips/nrf5x/src/gpio.rs	/^    task_out: [ReadWrite<u32, TasksOut::Register>; NUM_GPIOTE],$/;"	m	struct:GpioteRegisters
task_rssistart	chips/nrf52/src/radio.rs	/^    task_rssistart: WriteOnly<u32, Task::Register>,$/;"	m	struct:RadioRegisters
task_rssistop	chips/nrf52/src/radio.rs	/^    task_rssistop: WriteOnly<u32, Task::Register>,$/;"	m	struct:RadioRegisters
task_rxen	chips/nrf52/src/radio.rs	/^    task_rxen: WriteOnly<u32, Task::Register>,$/;"	m	struct:RadioRegisters
task_start	chips/nrf52/src/radio.rs	/^    task_start: WriteOnly<u32, Task::Register>,$/;"	m	struct:RadioRegisters
task_start	chips/nrf5x/src/temperature.rs	/^    pub task_start: WriteOnly<u32, Task::Register>,$/;"	m	struct:TempRegisters
task_start	chips/nrf5x/src/trng.rs	/^    pub task_start: WriteOnly<u32, Task::Register>,$/;"	m	struct:RngRegisters
task_startecb	chips/nrf5x/src/aes.rs	/^    task_startecb: WriteOnly<u32, Task::Register>,$/;"	m	struct:AesEcbRegisters
task_startrx	chips/nrf51/src/uart.rs	/^    task_startrx: WriteOnly<u32, Task::Register>, \/\/... 0x000$/;"	m	struct:UartRegisters
task_startrx	chips/nrf52/src/uart.rs	/^    task_startrx: WriteOnly<u32, Task::Register>,$/;"	m	struct:UarteRegisters
task_starttx	chips/nrf51/src/uart.rs	/^    task_starttx: WriteOnly<u32, Task::Register>, \/\/... 0x008$/;"	m	struct:UartRegisters
task_starttx	chips/nrf52/src/uart.rs	/^    task_starttx: WriteOnly<u32, Task::Register>,$/;"	m	struct:UarteRegisters
task_stop	chips/nrf52/src/radio.rs	/^    task_stop: WriteOnly<u32, Task::Register>,$/;"	m	struct:RadioRegisters
task_stop	chips/nrf5x/src/temperature.rs	/^    pub task_stop: WriteOnly<u32, Task::Register>,$/;"	m	struct:TempRegisters
task_stop	chips/nrf5x/src/trng.rs	/^    pub task_stop: WriteOnly<u32, Task::Register>,$/;"	m	struct:RngRegisters
task_stopecb	chips/nrf5x/src/aes.rs	/^    task_stopecb: WriteOnly<u32, Task::Register>,$/;"	m	struct:AesEcbRegisters
task_stoprx	chips/nrf51/src/uart.rs	/^    task_stoprx: WriteOnly<u32, Task::Register>,  \/\/... 0x004$/;"	m	struct:UartRegisters
task_stoprx	chips/nrf52/src/uart.rs	/^    task_stoprx: WriteOnly<u32, Task::Register>,$/;"	m	struct:UarteRegisters
task_stoptx	chips/nrf51/src/uart.rs	/^    task_stoptx: WriteOnly<u32, Task::Register>,  \/\/... 0x00c$/;"	m	struct:UartRegisters
task_stoptx	chips/nrf52/src/uart.rs	/^    task_stoptx: WriteOnly<u32, Task::Register>,$/;"	m	struct:UarteRegisters
task_suspend	chips/nrf51/src/uart.rs	/^    task_suspend: WriteOnly<u32, Task::Register>, \/\/... 0x01c$/;"	m	struct:UartRegisters
task_txen	chips/nrf52/src/radio.rs	/^    task_txen: WriteOnly<u32, Task::Register>,$/;"	m	struct:RadioRegisters
tasks_cal	chips/nrf52/src/clock.rs	/^    tasks_cal: WriteOnly<u32, Control::Register>,$/;"	m	struct:ClockRegisters
tasks_calibrateoffset	chips/nrf52/src/adc.rs	/^    tasks_calibrateoffset: WriteOnly<u32, TASK::Register>,$/;"	m	struct:AdcRegisters
tasks_capture	chips/nrf5x/src/timer.rs	/^    tasks_capture: [WriteOnly<u32, Task::Register>; 4],$/;"	m	struct:TimerRegisters
tasks_chg0_dis	chips/nrf52/src/ppi.rs	/^    tasks_chg0_dis: ReadWrite<u32, Control::Register>,$/;"	m	struct:PpiRegisters
tasks_chg0_en	chips/nrf52/src/ppi.rs	/^    tasks_chg0_en: ReadWrite<u32, Control::Register>,$/;"	m	struct:PpiRegisters
tasks_chg1_dis	chips/nrf52/src/ppi.rs	/^    tasks_chg1_dis: ReadWrite<u32, Control::Register>,$/;"	m	struct:PpiRegisters
tasks_chg1_en	chips/nrf52/src/ppi.rs	/^    tasks_chg1_en: ReadWrite<u32, Control::Register>,$/;"	m	struct:PpiRegisters
tasks_chg2_dis	chips/nrf52/src/ppi.rs	/^    tasks_chg2_dis: ReadWrite<u32, Control::Register>,$/;"	m	struct:PpiRegisters
tasks_chg2_en	chips/nrf52/src/ppi.rs	/^    tasks_chg2_en: ReadWrite<u32, Control::Register>,$/;"	m	struct:PpiRegisters
tasks_chg3_dis	chips/nrf52/src/ppi.rs	/^    tasks_chg3_dis: ReadWrite<u32, Control::Register>,$/;"	m	struct:PpiRegisters
tasks_chg3_en	chips/nrf52/src/ppi.rs	/^    tasks_chg3_en: ReadWrite<u32, Control::Register>,$/;"	m	struct:PpiRegisters
tasks_chg4_dis	chips/nrf52/src/ppi.rs	/^    tasks_chg4_dis: ReadWrite<u32, Control::Register>,$/;"	m	struct:PpiRegisters
tasks_chg4_en	chips/nrf52/src/ppi.rs	/^    tasks_chg4_en: ReadWrite<u32, Control::Register>,$/;"	m	struct:PpiRegisters
tasks_chg5_dis	chips/nrf52/src/ppi.rs	/^    tasks_chg5_dis: ReadWrite<u32, Control::Register>,$/;"	m	struct:PpiRegisters
tasks_chg5_en	chips/nrf52/src/ppi.rs	/^    tasks_chg5_en: ReadWrite<u32, Control::Register>,$/;"	m	struct:PpiRegisters
tasks_clear	chips/nrf5x/src/rtc.rs	/^    tasks_clear: WriteOnly<u32, Task::Register>,$/;"	m	struct:RtcRegisters
tasks_clear	chips/nrf5x/src/timer.rs	/^    tasks_clear: WriteOnly<u32, Task::Register>,$/;"	m	struct:TimerRegisters
tasks_count	chips/nrf5x/src/timer.rs	/^    tasks_count: WriteOnly<u32, Task::Register>,$/;"	m	struct:TimerRegisters
tasks_ctstart	chips/nrf52/src/clock.rs	/^    tasks_ctstart: WriteOnly<u32, Control::Register>,$/;"	m	struct:ClockRegisters
tasks_ctstop	chips/nrf52/src/clock.rs	/^    tasks_ctstop: WriteOnly<u32, Control::Register>,$/;"	m	struct:ClockRegisters
tasks_hfclkstart	chips/nrf52/src/clock.rs	/^    tasks_hfclkstart: WriteOnly<u32, Control::Register>,$/;"	m	struct:ClockRegisters
tasks_hfclkstop	chips/nrf52/src/clock.rs	/^    tasks_hfclkstop: WriteOnly<u32, Control::Register>,$/;"	m	struct:ClockRegisters
tasks_lfclkstart	chips/nrf52/src/clock.rs	/^    tasks_lfclkstart: ReadWrite<u32, Control::Register>,$/;"	m	struct:ClockRegisters
tasks_lfclkstop	chips/nrf52/src/clock.rs	/^    tasks_lfclkstop: WriteOnly<u32, Control::Register>,$/;"	m	struct:ClockRegisters
tasks_resume	chips/nrf51/src/i2c.rs	/^    tasks_resume: WriteOnly<u32, Task::Register>,$/;"	m	struct:TwimRegisters
tasks_resume	chips/nrf52/src/i2c.rs	/^    tasks_resume: WriteOnly<u32, TASK::Register>,$/;"	m	struct:TwimRegisters
tasks_resume	chips/nrf52/src/spi.rs	/^    tasks_resume: WriteOnly<u32, TASK::Register>,    \/\/ Resume SPI transaction$/;"	m	struct:SpimRegisters
tasks_sample	chips/nrf52/src/adc.rs	/^    tasks_sample: WriteOnly<u32, TASK::Register>,$/;"	m	struct:AdcRegisters
tasks_shutdown	chips/nrf5x/src/timer.rs	/^    tasks_shutdown: WriteOnly<u32, Task::Register>,$/;"	m	struct:TimerRegisters
tasks_start	chips/nrf52/src/adc.rs	/^    tasks_start: WriteOnly<u32, TASK::Register>,$/;"	m	struct:AdcRegisters
tasks_start	chips/nrf52/src/spi.rs	/^    tasks_start: WriteOnly<u32, TASK::Register>,     \/\/ Start SPI transaction$/;"	m	struct:SpimRegisters
tasks_start	chips/nrf5x/src/rtc.rs	/^    tasks_start: WriteOnly<u32, Task::Register>,$/;"	m	struct:RtcRegisters
tasks_start	chips/nrf5x/src/timer.rs	/^    tasks_start: WriteOnly<u32, Task::Register>,$/;"	m	struct:TimerRegisters
tasks_startrx	chips/nrf51/src/i2c.rs	/^    tasks_startrx: WriteOnly<u32, Task::Register>,$/;"	m	struct:TwimRegisters
tasks_startrx	chips/nrf52/src/i2c.rs	/^    tasks_startrx: WriteOnly<u32, TASK::Register>,$/;"	m	struct:TwimRegisters
tasks_starttx	chips/nrf51/src/i2c.rs	/^    tasks_starttx: WriteOnly<u32, Task::Register>,$/;"	m	struct:TwimRegisters
tasks_starttx	chips/nrf52/src/i2c.rs	/^    tasks_starttx: WriteOnly<u32, TASK::Register>,$/;"	m	struct:TwimRegisters
tasks_stop	chips/nrf51/src/i2c.rs	/^    tasks_stop: WriteOnly<u32, Task::Register>,$/;"	m	struct:TwimRegisters
tasks_stop	chips/nrf52/src/adc.rs	/^    tasks_stop: WriteOnly<u32, TASK::Register>,$/;"	m	struct:AdcRegisters
tasks_stop	chips/nrf52/src/i2c.rs	/^    tasks_stop: WriteOnly<u32, TASK::Register>,$/;"	m	struct:TwimRegisters
tasks_stop	chips/nrf52/src/spi.rs	/^    tasks_stop: WriteOnly<u32, TASK::Register>,      \/\/ Stop SPI transaction$/;"	m	struct:SpimRegisters
tasks_stop	chips/nrf5x/src/rtc.rs	/^    tasks_stop: WriteOnly<u32, Task::Register>,$/;"	m	struct:RtcRegisters
tasks_stop	chips/nrf5x/src/timer.rs	/^    tasks_stop: WriteOnly<u32, Task::Register>,$/;"	m	struct:TimerRegisters
tasks_suspend	chips/nrf51/src/i2c.rs	/^    tasks_suspend: WriteOnly<u32, Task::Register>,$/;"	m	struct:TwimRegisters
tasks_suspend	chips/nrf52/src/i2c.rs	/^    tasks_suspend: WriteOnly<u32, TASK::Register>,$/;"	m	struct:TwimRegisters
tasks_suspend	chips/nrf52/src/spi.rs	/^    tasks_suspend: WriteOnly<u32, TASK::Register>,   \/\/ Suspend SPI transaction$/;"	m	struct:SpimRegisters
tasks_trigovrflw	chips/nrf5x/src/rtc.rs	/^    tasks_trigovrflw: WriteOnly<u32, Task::Register>,$/;"	m	struct:RtcRegisters
tav	chips/tm4c129x/src/gpt.rs	/^    tav: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tbfheader	kernel/src/lib.rs	/^mod tbfheader;$/;"	n
tbilr	chips/tm4c129x/src/gpt.rs	/^    tbilr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tbmatchr	chips/tm4c129x/src/gpt.rs	/^    tbmatchr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tbmr	chips/tm4c129x/src/gpt.rs	/^    tbmr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tbpmr	chips/tm4c129x/src/gpt.rs	/^    tbpmr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tbpr	chips/tm4c129x/src/gpt.rs	/^    tbpr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tbps	chips/tm4c129x/src/gpt.rs	/^    tbps: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tbr	chips/tm4c129x/src/gpt.rs	/^    tbr: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tbv	chips/tm4c129x/src/gpt.rs	/^    tbv: VolatileCell<u32>,$/;"	m	struct:GptRegisters
tcp	capsules/src/net/mod.rs	/^pub mod tcp;$/;"	n
tcr	chips/sam4l/src/dma.rs	/^    tcr: ReadWrite<u32, TransferCounter::Register>,$/;"	m	struct:DMARegisters
tcrr	chips/sam4l/src/dma.rs	/^    tcrr: ReadWrite<u32, TransferCounter::Register>,$/;"	m	struct:DMARegisters
td	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
td.summary-column	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
tdr	chips/sam4l/src/spi.rs	/^    pub mod tdr {$/;"	n	module:spi_consts
tdr	chips/sam4l/src/spi.rs	/^    tdr: WriteOnly<u32, TransmitData::Register>,$/;"	m	struct:SpiRegisters
temp	boards/hail/src/main.rs	/^    temp: &'static capsules::temperature::TemperatureSensor<'static>,$/;"	m	struct:Hail
temp	boards/imix/src/main.rs	/^    temp: &'static capsules::temperature::TemperatureSensor<'static>,$/;"	m	struct:Imix
temp	boards/nordic/nrf51dk/src/main.rs	/^    temp: &'static capsules::temperature::TemperatureSensor<'static>,$/;"	m	struct:Platform
temp	boards/nordic/nrf52dk_base/src/lib.rs	/^    temp: &'static capsules::temperature::TemperatureSensor<'static>,$/;"	m	struct:Platform
temp	chips/nrf5x/src/temperature.rs	/^    pub temp: ReadOnly<u32, Temperature::Register>,$/;"	m	struct:TempRegisters
temp_callback	capsules/src/si7021.rs	/^    temp_callback: OptionalCell<&'static kernel::hil::sensors::TemperatureClient>,$/;"	m	struct:SI7021
temperature	capsules/src/lib.rs	/^pub mod temperature;$/;"	n
temperature	chips/nrf5x/src/lib.rs	/^pub mod temperature;$/;"	n
template	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
test	capsules/src/lib.rs	/^pub mod test;$/;"	n
test	chips/nrf51/src/radio.rs	/^    test: ReadWrite<u32, Test::Register>,        \/\/ 0x540 - 0x544$/;"	m	struct:RadioRegisters
test_counter	boards/imix/src/icmp_lowpan_test.rs	/^    test_counter: Cell<usize>,$/;"	m	struct:LowpanICMPTest
test_counter	boards/imix/src/ipv6_lowpan_test.rs	/^    test_counter: Cell<usize>,$/;"	m	struct:LowpanTest
test_counter	boards/imix/src/sixlowpan_dummy.rs	/^    test_counter: Cell<usize>,$/;"	m	struct:LowpanTest
test_counter	boards/imix/src/udp_lowpan_test.rs	/^    test_counter: Cell<usize>,$/;"	m	struct:LowpanTest
test_map_cell	boards/hail/src/test_take_map_cell.rs	/^unsafe fn test_map_cell<'a, A>(tc: &MapCell<A>) {$/;"	f
test_take_map_cell	boards/hail/src/main.rs	/^mod test_take_map_cell;$/;"	n
test_take_map_cell	boards/hail/src/test_take_map_cell.rs	/^pub unsafe fn test_take_map_cell() {$/;"	f
tests	boards/nordic/nrf52dk/src/main.rs	/^mod tests;$/;"	n
tests	capsules/src/test/aes_ccm.rs	/^    tests: [($/;"	m	struct:Test
testvercomp	tools/semver.sh	/^testvercomp () {$/;"	f
text1063	doc/courses/rustconf/rustconf.svg	/^       id="text1063"><tspan$/;"	i
text29	doc/courses/rustconf/presentation/ipc.svg	/^       id="text29"><tspan$/;"	i
text29-6	doc/courses/rustconf/presentation/ipc.svg	/^       id="text29-6"><tspan$/;"	i
text4860	doc/courses/rustconf/console.svg	/^       sodipodi:linespacing="125%"><tspan$/;"	i
text4866	doc/courses/rustconf/console.svg	/^         xml:space="preserve"><tspan$/;"	i
text4875	doc/courses/rustconf/console.svg	/^       sodipodi:linespacing="125%"><tspan$/;"	i
text4879	doc/courses/rustconf/console.svg	/^       sodipodi:linespacing="125%"><tspan$/;"	i
text4887	doc/courses/rustconf/console.svg	/^         sodipodi:linespacing="125%"><tspan$/;"	i
text4895	doc/courses/rustconf/console.svg	/^         sodipodi:linespacing="125%"><tspan$/;"	i
text4899	doc/courses/rustconf/console.svg	/^         xml:space="preserve"><tspan$/;"	i
text4986	doc/courses/rustconf/console.svg	/^         sodipodi:linespacing="125%"><tspan$/;"	i
text5237	doc/courses/rustconf/presentation/ipc.svg	/^       id="text5237"><tspan$/;"	i
text5237-2	doc/courses/rustconf/presentation/ipc.svg	/^       id="text5237-2"><tspan$/;"	i
text5458	doc/courses/rustconf/console.svg	/^       sodipodi:linespacing="125%"><tspan$/;"	i
text5662	doc/courses/rustconf/console.svg	/^       sodipodi:linespacing="125%"><tspan$/;"	i
text5761	doc/courses/rustconf/presentation/ipc.svg	/^       id="text5761"><tspan$/;"	i
text6108	doc/courses/rustconf/console.svg	/^       sodipodi:linespacing="125%"><tspan$/;"	i
text6112	doc/courses/rustconf/console.svg	/^       sodipodi:linespacing="125%"><tspan$/;"	i
text6719	doc/courses/rustconf/rustconf.svg	/^       id="text6719"><tspan$/;"	i
text6744	doc/courses/rustconf/rustconf.svg	/^       id="text6744"><tspan$/;"	i
text6748	doc/courses/rustconf/rustconf.svg	/^       id="text6748"><tspan$/;"	i
text6752	doc/courses/rustconf/rustconf.svg	/^       id="text6752"><tspan$/;"	i
text981	doc/courses/rustconf/rustconf.svg	/^       id="text981"><tspan$/;"	i
text989	doc/courses/rustconf/rustconf.svg	/^       id="text989"><tspan$/;"	i
textarea	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
th	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
themePicker	kernel/target/doc/theme.js	/^var themePicker = document.getElementById("theme-picker");$/;"	v
themes	kernel/target/doc/theme.js	/^var themes = document.getElementById("theme-choices");$/;"	v
thr	chips/sam4l/src/i2c.rs	/^    thr: WriteOnly<u32, TransmitHolding::Register>,$/;"	m	struct:TWIMRegisters
thr	chips/sam4l/src/i2c.rs	/^    thr: WriteOnly<u32, TransmitHolding::Register>,$/;"	m	struct:TWISRegisters
thr	chips/sam4l/src/usart.rs	/^    thr: WriteOnly<u32, TransmitHold::Register>, \/\/ 0x1C$/;"	m	struct:UsartRegisters
thread	capsules/src/net/mod.rs	/^pub mod thread;$/;"	n
tickle	chips/sam4l/src/wdt.rs	/^    fn tickle(&self) {$/;"	F	implementation:Wdt
tickle	kernel/src/hil/watchdog.rs	/^    fn tickle(&self);$/;"	F	interface:Watchdog
tifs	chips/nrf51/src/radio.rs	/^    tifs: ReadWrite<u32, TimeInterframeSpacing::Register>, \/\/ 0x544 - 0x548$/;"	m	struct:RadioRegisters
tifs	chips/nrf52/src/radio.rs	/^    tifs: ReadWrite<u32, InterFrameSpacing::Register>,$/;"	m	struct:RadioRegisters
tim	chips/sam4l/src/adc.rs	/^    tim: ReadWrite<u32, TimingConfiguration::Register>,$/;"	m	struct:AdcRegisters
time	chips/nrf5x/src/rtc.rs	/^    type Config = &'static time::Client;$/;"	v	implementation:Rtc
time	chips/sam4l/src/ast.rs	/^    type Config = &'static time::Client;$/;"	v	implementation:Ast
time	kernel/src/hil/mod.rs	/^pub mod time;$/;"	n
timeout_never	tools/usb/bulk-echo-fast/main.c	/^static const int timeout_never = -1;$/;"	v	typeref:typename:const int	file:
timer	chips/nrf5x/src/lib.rs	/^pub mod timer;$/;"	n
timer_counts	chips/sam4l/src/adc.rs	/^    timer_counts: Cell<u8>,$/;"	m	struct:Adc
timer_repeats	chips/sam4l/src/adc.rs	/^    timer_repeats: Cell<u8>,$/;"	m	struct:Adc
timeslice_expiration_count	kernel/src/process.rs	/^    timeslice_expiration_count: usize,$/;"	m	struct:ProcessDebug
timeslice_expirations	kernel/src/introspection.rs	/^    pub fn timeslice_expirations(&self, _capability: &ProcessManagementCapability) -> usize {$/;"	F	implementation:KernelInfo
timeval_zero	tools/usb/bulk-echo-fast/main.c	/^static struct timeval timeval_zero = { 0, 0 };$/;"	v	typeref:struct:timeval	file:
tipe	kernel/src/tbfheader.rs	/^    tipe: TbfHeaderTypes,$/;"	m	struct:TbfHeaderTlv
tlv	capsules/src/net/thread/mod.rs	/^pub mod tlv;$/;"	n
tmp006	capsules/src/lib.rs	/^pub mod tmp006;$/;"	n
to_i16	libraries/enum_primitive/src/cast.rs	/^    fn to_i16(&self) -> Option<i16> {$/;"	F	interface:ToPrimitive
to_i32	libraries/enum_primitive/src/cast.rs	/^    fn to_i32(&self) -> Option<i32> {$/;"	F	interface:ToPrimitive
to_i64	libraries/enum_primitive/src/cast.rs	/^    fn to_i64(&self) -> Option<i64>;$/;"	F	interface:ToPrimitive
to_i8	libraries/enum_primitive/src/cast.rs	/^    fn to_i8(&self) -> Option<i8> {$/;"	F	interface:ToPrimitive
to_isize	libraries/enum_primitive/src/cast.rs	/^    fn to_isize(&self) -> Option<isize> {$/;"	F	interface:ToPrimitive
to_u16	libraries/enum_primitive/src/cast.rs	/^    fn to_u16(&self) -> Option<u16> {$/;"	F	interface:ToPrimitive
to_u32	chips/sam4l/src/usbc/mod.rs	/^    pub fn to_u32(self) -> u32 {$/;"	F	implementation:EndpointIndex
to_u32	libraries/enum_primitive/src/cast.rs	/^    fn to_u32(&self) -> Option<u32> {$/;"	F	interface:ToPrimitive
to_u64	libraries/enum_primitive/src/cast.rs	/^    fn to_u64(&self) -> Option<u64>;$/;"	F	interface:ToPrimitive
to_u8	libraries/enum_primitive/src/cast.rs	/^    fn to_u8(&self) -> Option<u8> {$/;"	F	interface:ToPrimitive
to_usize	libraries/enum_primitive/src/cast.rs	/^    fn to_usize(&self) -> Option<usize> {$/;"	F	interface:ToPrimitive
toggle	capsules/src/mcp230xx.rs	/^    fn toggle(&self, pin: usize) -> ReturnCode {$/;"	F	implementation:MCP230xx
toggle	chips/cc26x2/src/gpio.rs	/^    fn toggle(&self) {$/;"	F	implementation:GPIOPin
toggle	chips/nrf5x/src/gpio.rs	/^    fn toggle(&self) {$/;"	F	implementation:GPIOPin
toggle	chips/sam4l/src/gpio.rs	/^    fn toggle(&self) {$/;"	F	implementation:GPIOPin
toggle	chips/sam4l/src/gpio.rs	/^    pub fn toggle(&self) {$/;"	F	implementation:GPIOPin
toggle	chips/sam4l/src/gpio.rs	/^    toggle: WriteOnly<u32>,$/;"	m	struct:Register
toggle	chips/sifive/src/gpio.rs	/^    fn toggle(&self) {$/;"	F	implementation:GpioPin
toggle	chips/tm4c129x/src/gpio.rs	/^    fn toggle(&self) {$/;"	F	implementation:GPIOPin
toggle	chips/tm4c129x/src/gpio.rs	/^    pub fn toggle(&self) {$/;"	F	implementation:GPIOPin
toggle	kernel/src/hil/gpio.rs	/^    fn toggle(&self);$/;"	F	interface:Pin
toggle	kernel/src/hil/gpio_async.rs	/^    fn toggle(&self, pin: usize) -> ReturnCode;$/;"	F	interface:Port
toggle	kernel/src/hil/led.rs	/^    fn toggle(&mut self) {$/;"	F	implementation:LedHigh
toggle	kernel/src/hil/led.rs	/^    fn toggle(&mut self) {$/;"	F	implementation:LedLow
toggle	kernel/src/hil/led.rs	/^    fn toggle(&mut self);$/;"	F	interface:Led
toggle	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	v
toggleAllDocs	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	f
toggle_pin	capsules/src/mcp230xx.rs	/^    fn toggle_pin(&self, pin_number: u8) -> ReturnCode {$/;"	F	implementation:MCP230xx
total_size	kernel/src/tbfheader.rs	/^    total_size: u32,$/;"	m	struct:TbfHeaderV2Base
tr	chips/sam4l/src/acifc.rs	/^    tr: ReadWrite<u32, Test::Register>,$/;"	m	struct:AcifcRegisters
tr	chips/sam4l/src/i2c.rs	/^    tr: ReadWrite<u32, Timing::Register>,$/;"	m	struct:TWISRegisters
tr.result span.keyword::after	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
tr.result span.keyword::after	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
tr.result span.keyword::after	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
tr.result span.primitive::after	kernel/target/doc/dark.css	/^body{background-color:#353535;color:#ddd;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymet/;"	c
tr.result span.primitive::after	kernel/target/doc/light.css	/^body{background-color:white;color:black;}h1,h2,h3:not(.impl):not(.method):not(.type):not(.tymeth/;"	c
tr.result span.primitive::after	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	c
traceconfig	chips/nrf52/src/clock.rs	/^    traceconfig: ReadWrite<u32, TraceConfig::Register>,$/;"	m	struct:ClockRegisters
transfer	chips/cc26x2/src/i2c.rs	/^    transfer: MapCell<Transfer>,$/;"	m	struct:I2CMaster
transfer_counter	chips/sam4l/src/dma.rs	/^    pub fn transfer_counter(&self) -> usize {$/;"	F	implementation:DMAChannel
transfer_direction	capsules/src/usb.rs	/^    pub fn transfer_direction(self) -> TransferDirection {$/;"	F	implementation:DeviceRequestType
transfer_done	chips/sam4l/src/adc.rs	/^    fn transfer_done(&self, pid: dma::DMAPeripheral) {$/;"	F	implementation:Adc
transfer_done	chips/sam4l/src/dma.rs	/^    fn transfer_done(&self, pid: DMAPeripheral);$/;"	F	interface:DMAClient
transfer_done	chips/sam4l/src/i2c.rs	/^    fn transfer_done(&self, _pid: DMAPeripheral) {}$/;"	F	implementation:I2CHw
transfer_done	chips/sam4l/src/spi.rs	/^    fn transfer_done(&self, _pid: DMAPeripheral) {$/;"	F	implementation:SpiHw
transfer_done	chips/sam4l/src/usart.rs	/^    fn transfer_done(&self, pid: dma::DMAPeripheral) {$/;"	F	implementation:USART
transfer_len	chips/nrf52/src/spi.rs	/^    transfer_len: Cell<usize>,$/;"	m	struct:SPIM
transfer_type	capsules/src/usb.rs	/^    pub transfer_type: TransferType,$/;"	m	struct:EndpointDescriptor
transfers_in_progress	chips/sam4l/src/spi.rs	/^    transfers_in_progress: Cell<u8>,$/;"	m	struct:SpiHw
transformResults	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execQuery
transmit	capsules/src/ieee802154/device.rs	/^    fn transmit(&self, frame: Frame) -> (ReturnCode, Option<&'static mut [u8]>);$/;"	F	interface:MacDevice
transmit	capsules/src/ieee802154/framer.rs	/^    fn transmit(&self, frame: Frame) -> (ReturnCode, Option<&'static mut [u8]>) {$/;"	F	implementation:Framer
transmit	capsules/src/ieee802154/mac.rs	/^    fn transmit($/;"	F	implementation:AwakeMac
transmit	capsules/src/ieee802154/mac.rs	/^    fn transmit($/;"	F	interface:Mac
transmit	capsules/src/ieee802154/virtual_mac.rs	/^    fn transmit(&self, frame: framer::Frame) -> (ReturnCode, Option<&'static mut [u8]>) {$/;"	F	implementation:MacUser
transmit	capsules/src/ieee802154/xmac.rs	/^    fn transmit($/;"	F	implementation:XMac
transmit	capsules/src/rf233.rs	/^    fn transmit($/;"	F	implementation:RF233
transmit	capsules/src/segger_rtt.rs	/^    fn transmit(&self, tx_data: &'static mut [u8], tx_len: usize) {$/;"	F	implementation:SeggerRtt
transmit	capsules/src/virtual_uart.rs	/^    fn transmit(&self, tx_data: &'static mut [u8], tx_len: usize) {$/;"	F	implementation:UartDevice
transmit	chips/cc26x2/src/uart.rs	/^    fn transmit(&self, buffer: &'static mut [u8], len: usize) {$/;"	F	implementation:UART
transmit	chips/nrf51/src/uart.rs	/^    fn transmit(&self, tx_data: &'static mut [u8], tx_len: usize) {$/;"	F	implementation:UART
transmit	chips/nrf52/src/uart.rs	/^    fn transmit(&self, tx_data: &'static mut [u8], tx_len: usize) {$/;"	F	implementation:Uarte
transmit	chips/sam4l/src/usart.rs	/^    fn transmit(&self, tx_data: &'static mut [u8], tx_len: usize) {$/;"	F	implementation:USART
transmit	chips/sifive/src/uart.rs	/^    fn transmit(&self, tx_data: &'static mut [u8], tx_len: usize) {$/;"	F	implementation:Uart
transmit	chips/tm4c129x/src/uart.rs	/^    fn transmit(&self, tx_data: &'static mut [u8], tx_len: usize) {$/;"	F	implementation:UART
transmit	kernel/src/hil/radio.rs	/^    fn transmit($/;"	F	interface:RadioData
transmit	kernel/src/hil/uart.rs	/^    fn transmit(&self, tx_data: &'static mut [u8], tx_len: usize);$/;"	F	interface:UART
transmit_254	boards/nordic/nrf52dk/src/tests/uart.rs	/^unsafe fn transmit_254(buf: &'static mut [u8]) {$/;"	f
transmit_512	boards/nordic/nrf52dk/src/tests/uart.rs	/^unsafe fn transmit_512(buf: &'static mut [u8]) {$/;"	f
transmit_advertisement	chips/nrf51/src/radio.rs	/^    fn transmit_advertisement($/;"	F	implementation:Radio
transmit_advertisement	chips/nrf52/src/radio.rs	/^    fn transmit_advertisement($/;"	F	implementation:Radio
transmit_advertisement	kernel/src/hil/ble_advertising.rs	/^    fn transmit_advertisement($/;"	F	interface:BleAdvertisementDriver
transmit_complete	boards/launchxl/src/uart_echo.rs	/^    fn transmit_complete(&self, buffer: &'static mut [u8], _error: uart::Error) {$/;"	F	implementation:UartEcho
transmit_complete	capsules/src/console.rs	/^    fn transmit_complete(&self, buffer: &'static mut [u8], _error: uart::Error) {$/;"	F	implementation:Console
transmit_complete	capsules/src/nrf51822_serialization.rs	/^    fn transmit_complete(&self, buffer: &'static mut [u8], _error: uart::Error) {$/;"	F	implementation:Nrf51822Serialization
transmit_complete	capsules/src/process_console.rs	/^    fn transmit_complete(&self, buffer: &'static mut [u8], _error: uart::Error) {$/;"	F	implementation:ProcessConsole
transmit_complete	capsules/src/test/virtual_uart.rs	/^    fn transmit_complete(&self, _tx_buffer: &'static mut [u8], _error: hil::uart::Error) {}$/;"	F	implementation:TestVirtualUartReceive
transmit_complete	capsules/src/virtual_uart.rs	/^    fn transmit_complete(&self, tx_buffer: &'static mut [u8], error: hil::uart::Error) {$/;"	F	implementation:UartDevice
transmit_complete	capsules/src/virtual_uart.rs	/^    fn transmit_complete(&self, tx_buffer: &'static mut [u8], error: hil::uart::Error) {$/;"	F	implementation:UartMux
transmit_complete	kernel/src/debug.rs	/^    fn transmit_complete(&self, buffer: &'static mut [u8], _error: hil::uart::Error) {$/;"	F	implementation:DebugWriter
transmit_complete	kernel/src/hil/uart.rs	/^    fn transmit_complete(&self, tx_buffer: &'static mut [u8], error: Error);$/;"	F	interface:Client
transmit_entire_buffer	boards/nordic/nrf52dk/src/tests/uart.rs	/^unsafe fn transmit_entire_buffer(buf: &'static mut [u8]) {$/;"	f
transmit_event	capsules/src/ble_advertising_driver.rs	/^    fn transmit_event(&self, _crc_ok: ReturnCode) {$/;"	f
transmit_event	kernel/src/hil/ble_advertising.rs	/^    fn transmit_event(&self, result: ReturnCode);$/;"	F	interface:TxClient
transmit_packet	capsules/src/ieee802154/xmac.rs	/^    fn transmit_packet(&self) {$/;"	F	implementation:XMac
transmit_preamble	capsules/src/ieee802154/xmac.rs	/^    fn transmit_preamble(&self) {$/;"	F	implementation:XMac
transmitting	capsules/src/rf233.rs	/^    transmitting: Cell<bool>,$/;"	m	struct:RF233
trap_save_cause	boards/hifive1/src/main.rs	/^pub unsafe fn trap_save_cause(mepc: u32) {$/;"	f
trigger_test	capsules/src/test/aes_ccm.rs	/^    fn trigger_test(&self) {$/;"	F	implementation:Test
trimmer	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execQuery
trng	boards/imix/src/power.rs	/^    pub trng: bool,$/;"	m	struct:SubmoduleConfig
trng	chips/cc26x2/src/lib.rs	/^pub mod trng;$/;"	n
trng	chips/nrf5x/src/lib.rs	/^pub mod trng;$/;"	n
trng	chips/sam4l/src/lib.rs	/^pub mod trng;$/;"	n
try_from	chips/nrf52/src/deferred_call_tasks.rs	/^    fn try_from(value: usize) -> Result<DeferredCallTask, ()> {$/;"	F	implementation:DeferredCallTask
try_from	chips/nrf5x/src/constants.rs	/^    fn try_from(val: u8) -> Result<TxPower, ()> {$/;"	F	implementation:TxPower
try_from	chips/sam4l/src/deferred_call_tasks.rs	/^    fn try_from(value: usize) -> Result<Task, ()> {$/;"	F	implementation:Task
try_from	libraries/tock-register-interface/src/registers.rs	/^    fn try_from(v: V) -> Option<Self::EnumType>;$/;"	F	interface:TryFromValue
try_set_indices	chips/sam4l/src/aes.rs	/^    fn try_set_indices(&self, start_index: usize, stop_index: usize) -> bool {$/;"	F	implementation:Aes
tsl2561	capsules/src/lib.rs	/^pub mod tsl2561;$/;"	n
tspan1061	doc/courses/rustconf/rustconf.svg	/^         style="stroke-width:0.26458332px">fxos8700<\/tspan><\/text>$/;"	i
tspan27	doc/courses/rustconf/presentation/ipc.svg	/^         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;fon/;"	i
tspan31	doc/courses/rustconf/presentation/ipc.svg	/^         id="tspan31">Service<\/tspan><\/text>$/;"	i
tspan31-5	doc/courses/rustconf/presentation/ipc.svg	/^         id="tspan31-5">My App<\/tspan><\/text>$/;"	i
tspan4862	doc/courses/rustconf/console.svg	/^         style="font-weight:bold">Application<\/tspan><\/text>$/;"	i
tspan4868	doc/courses/rustconf/console.svg	/^           sodipodi:role="line">app buffer<\/tspan><\/text>$/;"	i
tspan4877	doc/courses/rustconf/console.svg	/^         style="font-weight:bold">Console<\/tspan><\/text>$/;"	i
tspan4881	doc/courses/rustconf/console.svg	/^         style="font-weight:bold">UART<\/tspan><\/text>$/;"	i
tspan4889	doc/courses/rustconf/console.svg	/^           y="219.50505" \/><\/text>$/;"	i
tspan4897	doc/courses/rustconf/console.svg	/^           y="529.50507"><\/tspan><\/text>$/;"	i
tspan4901	doc/courses/rustconf/console.svg	/^           sodipodi:role="line">static buffer<\/tspan><\/text>$/;"	i
tspan4988	doc/courses/rustconf/console.svg	/^           y="356.94629">static buffer<\/tspan><\/text>$/;"	i
tspan5235	doc/courses/rustconf/presentation/ipc.svg	/^         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;fon/;"	i
tspan5235-7	doc/courses/rustconf/presentation/ipc.svg	/^         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;fon/;"	i
tspan5460	doc/courses/rustconf/console.svg	/^         style="font-weight:bold">TakeCell<\/tspan><\/text>$/;"	i
tspan5664	doc/courses/rustconf/console.svg	/^         y="153.3622">copy<\/tspan><\/text>$/;"	i
tspan5759	doc/courses/rustconf/presentation/ipc.svg	/^         style="font-size:12.69999981px;stroke-width:0.26458332px">Kernel<\/tspan><\/text>$/;"	i
tspan6110	doc/courses/rustconf/console.svg	/^         y="233.8622">take<\/tspan><\/text>$/;"	i
tspan6114	doc/courses/rustconf/console.svg	/^         y="233.86221">replace<\/tspan><\/text>$/;"	i
tspan6717	doc/courses/rustconf/rustconf.svg	/^         style="font-size:8.46666622px;stroke-width:0.26458332px">set<\/tspan><\/text>$/;"	i
tspan6742	doc/courses/rustconf/rustconf.svg	/^         style="font-size:8.46666622px;stroke-width:0.26458332px">fired<\/tspan><\/text>$/;"	i
tspan6746	doc/courses/rustconf/rustconf.svg	/^         style="font-size:8.46666622px;stroke-width:0.26458332px">read<\/tspan><\/text>$/;"	i
tspan6750	doc/courses/rustconf/rustconf.svg	/^         style="font-size:8.46666622px;stroke-width:0.26458332px">callback<\/tspan><\/text>$/;"	i
tspan979	doc/courses/rustconf/rustconf.svg	/^         style="font-size:12.69999981px;stroke-width:0.26458332px">rustconf<\/tspan><\/text>$/;"	i
tspan987	doc/courses/rustconf/rustconf.svg	/^         style="stroke-width:0.26458332px">alarm<\/tspan><\/text>$/;"	i
ttgr	chips/sam4l/src/usart.rs	/^    ttgr: ReadWrite<u32, TxTimeGuard::Register>, \/\/ 0x28$/;"	m	struct:UsartRegisters
tx	capsules/src/i2c_master.rs	/^    tx: MapCell<Transaction>,$/;"	m	struct:I2CMasterDriver
tx	chips/cc26x2/src/uart.rs	/^    tx: MapCell<Transaction>,$/;"	m	struct:UART
tx	chips/nrf51/src/radio.rs	/^    fn tx(&self) {$/;"	F	implementation:Radio
tx	chips/nrf52/src/radio.rs	/^    fn tx(&self) {$/;"	F	implementation:Radio
tx	chips/tm4c129x/src/uart.rs	/^    tx: OptionalCell<&'static gpio::GPIOPin>,$/;"	m	struct:UART
tx_buf	boards/launchxl/src/uart_echo.rs	/^    tx_buf: MapCell<&'static mut [u8]>,$/;"	m	struct:UartEcho
tx_buf	capsules/src/net/ipv6/ipv6_send.rs	/^    tx_buf: TakeCell<'static, [u8]>,$/;"	m	struct:IP6SendStruct
tx_buf	capsules/src/rf233.rs	/^    tx_buf: TakeCell<'static, [u8]>,$/;"	m	struct:RF233
tx_buf	chips/nrf52/src/spi.rs	/^    tx_buf: TakeCell<'static, [u8]>,$/;"	m	struct:SPIM
tx_buffer	capsules/src/console.rs	/^    tx_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:Console
tx_buffer	capsules/src/nrf51822_serialization.rs	/^    tx_buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
tx_buffer	capsules/src/nrf51822_serialization.rs	/^    tx_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:Nrf51822Serialization
tx_buffer	capsules/src/process_console.rs	/^    tx_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:ProcessConsole
tx_buffer	capsules/src/virtual_uart.rs	/^    tx_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:UartDevice
tx_buffer	chips/nrf52/src/uart.rs	/^    tx_buffer: kernel::common::cells::TakeCell<'static, [u8]>,$/;"	m	struct:Uarte
tx_callback	capsules/src/ieee802154/driver.rs	/^    tx_callback: Option<Callback>,$/;"	m	struct:App
tx_callback	capsules/src/net/udp/driver.rs	/^    tx_callback: Option<Callback>,$/;"	m	struct:App
tx_client	capsules/src/ieee802154/framer.rs	/^    tx_client: OptionalCell<&'a TxClient>,$/;"	m	struct:Framer
tx_client	capsules/src/ieee802154/mac.rs	/^    tx_client: OptionalCell<&'static radio::TxClient>,$/;"	m	struct:AwakeMac
tx_client	capsules/src/ieee802154/virtual_mac.rs	/^    tx_client: Cell<Option<&'a device::TxClient>>,$/;"	m	struct:MacUser
tx_client	capsules/src/ieee802154/xmac.rs	/^    tx_client: OptionalCell<&'static radio::TxClient>,$/;"	m	struct:XMac
tx_client	capsules/src/rf233.rs	/^    tx_client: OptionalCell<&'static radio::TxClient>,$/;"	m	struct:RF233
tx_client	chips/cc26x2/src/uart.rs	/^    tx_client: OptionalCell<&'static uart::Client>,$/;"	m	struct:UART
tx_client	chips/nrf51/src/radio.rs	/^    tx_client: OptionalCell<&'static ble_advertising::TxClient>,$/;"	m	struct:Radio
tx_client	chips/nrf52/src/radio.rs	/^    tx_client: OptionalCell<&'static ble_advertising::TxClient>,$/;"	m	struct:Radio
tx_dgram_tag	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    tx_dgram_tag: Cell<u16>,$/;"	m	struct:Sixlowpan
tx_dma	chips/sam4l/src/usart.rs	/^    tx_dma: Cell<Option<&'static dma::DMAChannel>>,$/;"	m	struct:USART
tx_dma	chips/sam4l/src/usart.rs	/^    tx_dma: Option<&'static dma::DMAChannel>,$/;"	m	struct:USARTRegManager
tx_dma_peripheral	chips/sam4l/src/usart.rs	/^    tx_dma_peripheral: dma::DMAPeripheral,$/;"	m	struct:USART
tx_fifo_not_full	chips/cc26x2/src/uart.rs	/^    pub fn tx_fifo_not_full(&self) -> bool {$/;"	F	implementation:UART
tx_header	capsules/src/ieee802154/xmac.rs	/^    tx_header: Cell<Option<XMacHeaderInfo>>,$/;"	m	struct:XMac
tx_in_progress	capsules/src/console.rs	/^    tx_in_progress: OptionalCell<AppId>,$/;"	m	struct:Console
tx_in_progress	capsules/src/process_console.rs	/^    tx_in_progress: Cell<bool>,$/;"	m	struct:ProcessConsole
tx_len	capsules/src/ieee802154/xmac.rs	/^    tx_len: Cell<usize>,$/;"	m	struct:XMac
tx_len	capsules/src/rf233.rs	/^    tx_len: Cell<u8>,$/;"	m	struct:RF233
tx_len	chips/nrf51/src/i2c.rs	/^    tx_len: Cell<u8>,$/;"	m	struct:TWIM
tx_len	chips/sam4l/src/usart.rs	/^    tx_len: Cell<usize>,$/;"	m	struct:USART
tx_payload	capsules/src/ieee802154/xmac.rs	/^    tx_payload: TakeCell<'static, [u8]>,$/;"	m	struct:XMac
tx_power	capsules/src/ble_advertising_driver.rs	/^    tx_power: u8,$/;"	m	struct:App
tx_power	capsules/src/rf233.rs	/^    tx_power: Cell<i8>,$/;"	m	struct:RF233
tx_power	chips/nrf51/src/radio.rs	/^    tx_power: Cell<TxPower>,$/;"	m	struct:Radio
tx_power	chips/nrf52/src/radio.rs	/^    tx_power: Cell<TxPower>,$/;"	m	struct:Radio
tx_preamble_buf	capsules/src/ieee802154/xmac.rs	/^    tx_preamble_buf: TakeCell<'static, [u8]>,$/;"	m	struct:XMac
tx_preamble_pending	capsules/src/ieee802154/xmac.rs	/^    tx_preamble_pending: Cell<bool>,$/;"	m	struct:XMac
tx_preamble_seq_num	capsules/src/ieee802154/xmac.rs	/^    tx_preamble_seq_num: Cell<u8>,$/;"	m	struct:XMac
tx_ready	chips/nrf51/src/uart.rs	/^    pub fn tx_ready(&self) -> bool {$/;"	F	implementation:UART
tx_ready	chips/nrf52/src/uart.rs	/^    pub fn tx_ready(&self) -> bool {$/;"	F	implementation:Uarte
tx_ready	chips/sam4l/src/usart.rs	/^    pub fn tx_ready(&self, usart: &USARTRegManager) -> bool {$/;"	F	implementation:USART
tx_ready	chips/tm4c129x/src/uart.rs	/^    pub fn tx_ready(&self) -> bool {$/;"	F	implementation:UART
tx_remaining_bytes	chips/nrf52/src/uart.rs	/^    tx_remaining_bytes: Cell<usize>,$/;"	m	struct:Uarte
tx_state	capsules/src/ieee802154/framer.rs	/^    tx_state: MapCell<TxState>,$/;"	m	struct:Framer
txaddress	chips/nrf51/src/radio.rs	/^    txaddress: ReadWrite<u32, TransmitAddress::Register>, \/\/ 0x52c - 0x530$/;"	m	struct:RadioRegisters
txaddress	chips/nrf52/src/radio.rs	/^    txaddress: ReadWrite<u32, TransmitAddress::Register>,$/;"	m	struct:RadioRegisters
txbuffer	capsules/src/fm25cl.rs	/^    txbuffer: TakeCell<'static, [u8]>,$/;"	m	struct:FM25CL
txbuffer	capsules/src/mx25r6435f.rs	/^    txbuffer: TakeCell<'static, [u8]>,$/;"	m	struct:MX25R6435F
txbuffer	capsules/src/sdcard.rs	/^    txbuffer: TakeCell<'static, [u8]>,$/;"	m	struct:SDCard
txbuffer	capsules/src/virtual_spi.rs	/^    txbuffer: TakeCell<'static, [u8]>,$/;"	m	struct:VirtualSpiMasterDevice
txctrl	chips/sifive/src/uart.rs	/^    txctrl: ReadWrite<u32, txctrl::Register>,$/;"	m	struct:UartRegisters
txd	boards/nordic/nrf52dk_base/src/lib.rs	/^    txd: usize,$/;"	m	struct:UartPins
txd	chips/nrf51/src/i2c.rs	/^    txd: ReadWrite<u32, Data::Register>,$/;"	m	struct:TwimRegisters
txd	chips/nrf51/src/uart.rs	/^    txd: ReadWrite<u32, Txd::Register>,      \/\/........ 0x51c$/;"	m	struct:UartRegisters
txd_amount	chips/nrf52/src/i2c.rs	/^    txd_amount: ReadWrite<u32>,$/;"	m	struct:TwimRegisters
txd_amount	chips/nrf52/src/spi.rs	/^    txd_amount: ReadWrite<u32>,                      \/\/ Number of bytes transferred$/;"	m	struct:SpimRegisters
txd_amount	chips/nrf52/src/uart.rs	/^    txd_amount: ReadOnly<u32, Counter::Register>,$/;"	m	struct:UarteRegisters
txd_list	chips/nrf52/src/i2c.rs	/^    txd_list: ReadWrite<u32>,$/;"	m	struct:TwimRegisters
txd_list	chips/nrf52/src/spi.rs	/^    txd_list: ReadWrite<u32>,                        \/\/ EasyDMA list type$/;"	m	struct:SpimRegisters
txd_maxcnt	chips/nrf52/src/i2c.rs	/^    txd_maxcnt: ReadWrite<u32, MAXCNT::Register>,$/;"	m	struct:TwimRegisters
txd_maxcnt	chips/nrf52/src/spi.rs	/^    txd_maxcnt: ReadWrite<u32, MAXCNT::Register>,    \/\/ Maximum number of bytes in transmit bu/;"	m	struct:SpimRegisters
txd_maxcnt	chips/nrf52/src/uart.rs	/^    txd_maxcnt: ReadWrite<u32, Counter::Register>,$/;"	m	struct:UarteRegisters
txd_ptr	chips/nrf52/src/i2c.rs	/^    txd_ptr: VolatileCell<*mut u8>,$/;"	m	struct:TwimRegisters
txd_ptr	chips/nrf52/src/spi.rs	/^    txd_ptr: VolatileCell<*const u8>,                \/\/ Data pointer$/;"	m	struct:SpimRegisters
txd_ptr	chips/nrf52/src/uart.rs	/^    txd_ptr: ReadWrite<u32, Pointer::Register>,$/;"	m	struct:UarteRegisters
txdata	chips/sifive/src/uart.rs	/^    txdata: ReadWrite<u32, txdata::Register>,$/;"	m	struct:UartRegisters
txen	chips/nrf51/src/radio.rs	/^    txen: WriteOnly<u32, Task::Register>,        \/\/ 0x000 ---> 0x004$/;"	m	struct:RadioRegisters
txpower	chips/nrf51/src/radio.rs	/^    txpower: ReadWrite<u32, TransmitPower::Register>, \/\/ 0x50c - 0x510$/;"	m	struct:RadioRegisters
txpower	chips/nrf52/src/radio.rs	/^    txpower: ReadWrite<u32, TransmitPower::Register>,$/;"	m	struct:RadioRegisters
ty	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:buildIndex.row
ty	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:paths
type	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^  int type;  \/\/ sensor type$/;"	m	struct:__anon22758edd0208	typeref:typename:int	file:
type	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	p	class:buildIndex.row
typePassesFilter	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:execQuery
u16	libraries/tock-register-interface/src/registers.rs	/^impl IntLike for u16 {$/;"	c
u16	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> From<FieldValue<u16, R>> for u16 {$/;"	c
u16	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> From<LocalRegisterCopy<u16, R>> for u16 {$/;"	c
u16_to_slice	capsules/src/net/util.rs	/^pub fn u16_to_slice(short: u16, slice: &mut [u8]) {$/;"	f
u32	boards/hail/src/test_take_map_cell.rs	/^    static mut MC_REF: MapCell<&'static u32> = MapCell::new(&FOO);$/;"	v	function:test_take_map_cell
u32	chips/nrf52/src/spi.rs	/^impl From<Frequency> for u32 {$/;"	c
u32	libraries/tock-register-interface/src/registers.rs	/^impl IntLike for u32 {$/;"	c
u32	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> From<FieldValue<u32, R>> for u32 {$/;"	c
u32	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> From<LocalRegisterCopy<u32, R>> for u32 {$/;"	c
u64	libraries/tock-register-interface/src/registers.rs	/^impl IntLike for u64 {$/;"	c
u64	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> From<FieldValue<u64, R>> for u64 {$/;"	c
u64	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> From<LocalRegisterCopy<u64, R>> for u64 {$/;"	c
u8	capsules/src/usb.rs	/^impl From<ConfigurationAttributes> for u8 {$/;"	c
u8	libraries/tock-register-interface/src/registers.rs	/^impl IntLike for u8 {$/;"	c
u8	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> From<FieldValue<u8, R>> for u8 {$/;"	c
u8	libraries/tock-register-interface/src/registers.rs	/^impl<R: RegisterLongName> From<LocalRegisterCopy<u8, R>> for u8 {$/;"	c
uaddrsize	chips/sam4l/src/usbc/mod.rs	/^    uaddrsize: ReadOnly<u32>,$/;"	m	struct:UsbcRegisters
uart	boards/imix/src/components/nrf51822.rs	/^    uart: &'static sam4l::usart::USART,$/;"	m	struct:Nrf51822Component
uart	boards/nordic/nrf52dk/src/tests/mod.rs	/^pub mod uart;$/;"	n
uart	capsules/src/console.rs	/^    uart: &'a U,$/;"	m	struct:Console
uart	capsules/src/nrf51822_serialization.rs	/^    uart: &'a U,$/;"	m	struct:Nrf51822Serialization
uart	capsules/src/process_console.rs	/^    uart: &'a U,$/;"	m	struct:ProcessConsole
uart	capsules/src/virtual_uart.rs	/^    uart: &'a hil::uart::UART,$/;"	m	struct:UartMux
uart	chips/arty_exx/src/lib.rs	/^pub mod uart;$/;"	n
uart	chips/cc26x2/src/lib.rs	/^pub mod uart;$/;"	n
uart	chips/e310x/src/lib.rs	/^pub mod uart;$/;"	n
uart	chips/nrf51/src/lib.rs	/^pub mod uart;$/;"	n
uart	chips/nrf52/src/lib.rs	/^pub mod uart;$/;"	n
uart	chips/sifive/src/lib.rs	/^pub mod uart;$/;"	n
uart	chips/tm4c129x/src/lib.rs	/^pub mod uart;$/;"	n
uart	kernel/src/debug.rs	/^    uart: &'static hil::uart::UART,$/;"	m	struct:DebugWriter
uart	kernel/src/hil/mod.rs	/^pub mod uart;$/;"	n
uart_clk_gate_deep_sleep	chips/cc26x2/src/prcm.rs	/^    pub uart_clk_gate_deep_sleep: ReadWrite<u32, ClockGate2::Register>,$/;"	m	struct:PrcmRegisters
uart_clk_gate_run	chips/cc26x2/src/prcm.rs	/^    pub uart_clk_gate_run: ReadWrite<u32, ClockGate2::Register>,$/;"	m	struct:PrcmRegisters
uart_clk_gate_sleep	chips/cc26x2/src/prcm.rs	/^    pub uart_clk_gate_sleep: ReadWrite<u32, ClockGate2::Register>,$/;"	m	struct:PrcmRegisters
uart_echo	boards/launchxl/src/main.rs	/^mod uart_echo;$/;"	n
uart_mux	boards/imix/src/components/console.rs	/^    uart_mux: &'static UartMux<'static>,$/;"	m	struct:ConsoleComponent
uart_mux	boards/imix/src/components/process_console.rs	/^    uart_mux: &'static UartMux<'static>,$/;"	m	struct:ProcessConsoleComponent
uart_rx	boards/launchxl/src/uart_echo.rs	/^    uart_rx: &'static URx,$/;"	m	struct:UartEcho
uart_tx	boards/launchxl/src/uart_echo.rs	/^    uart_tx: &'static UTx,$/;"	m	struct:UartEcho
udcon	chips/sam4l/src/usbc/mod.rs	/^    udcon: ReadWrite<u32, DeviceControl::Register>,$/;"	m	struct:UsbcRegisters
udesc	chips/sam4l/src/usbc/mod.rs	/^    udesc: ReadWrite<u32>,$/;"	m	struct:UsbcRegisters
udfnum	chips/sam4l/src/usbc/mod.rs	/^    udfnum: ReadOnly<u32>,$/;"	m	struct:UsbcRegisters
udint	chips/sam4l/src/usbc/mod.rs	/^    udint: ReadOnly<u32, DeviceInterrupt::Register>,$/;"	m	struct:UsbcRegisters
udintclr	chips/sam4l/src/usbc/mod.rs	/^    udintclr: WriteOnly<u32, DeviceInterrupt::Register>,$/;"	m	struct:UsbcRegisters
udinte	chips/sam4l/src/usbc/mod.rs	/^    udinte: ReadOnly<u32, DeviceInterrupt::Register>,$/;"	m	struct:UsbcRegisters
udinteclr	chips/sam4l/src/usbc/mod.rs	/^    udinteclr: WriteOnly<u32, DeviceInterrupt::Register>,$/;"	m	struct:UsbcRegisters
udinteset	chips/sam4l/src/usbc/mod.rs	/^    udinteset: WriteOnly<u32, DeviceInterrupt::Register>,$/;"	m	struct:UsbcRegisters
udintset	chips/sam4l/src/usbc/mod.rs	/^    udintset: WriteOnly<u32, DeviceInterrupt::Register>,$/;"	m	struct:UsbcRegisters
udp	capsules/src/net/mod.rs	/^pub mod udp;$/;"	n
udp	capsules/src/net/udp/mod.rs	/^pub mod udp;$/;"	n
udp_6lowpan	boards/imix/src/components/mod.rs	/^pub mod udp_6lowpan;$/;"	n
udp_driver	boards/imix/src/main.rs	/^    udp_driver: &'static capsules::net::udp::UDPDriver<'static>,$/;"	m	struct:Imix
udp_lowpan_test	boards/imix/src/main.rs	/^mod udp_lowpan_test;$/;"	n
udp_recv	capsules/src/net/udp/mod.rs	/^pub mod udp_recv;$/;"	n
udp_send	capsules/src/net/udp/mod.rs	/^pub mod udp_send;$/;"	n
udp_sender	boards/imix/src/udp_lowpan_test.rs	/^    udp_sender: &'a UDPSender<'a>,$/;"	m	struct:LowpanTest
uecfg	chips/sam4l/src/usbc/mod.rs	/^    uecfg: [ReadWrite<u32, EndpointConfig::Register>; 12],$/;"	m	struct:UsbcRegisters
uecon	chips/sam4l/src/usbc/mod.rs	/^    uecon: [ReadOnly<u32, EndpointControl::Register>; 12],$/;"	m	struct:UsbcRegisters
ueconclr	chips/sam4l/src/usbc/mod.rs	/^    ueconclr: [WriteOnly<u32, EndpointControl::Register>; 12],$/;"	m	struct:UsbcRegisters
ueconset	chips/sam4l/src/usbc/mod.rs	/^    ueconset: [WriteOnly<u32, EndpointControl::Register>; 12],$/;"	m	struct:UsbcRegisters
uerst	chips/sam4l/src/usbc/mod.rs	/^    uerst: ReadWrite<u32>,$/;"	m	struct:UsbcRegisters
uesta	chips/sam4l/src/usbc/mod.rs	/^    uesta: [ReadOnly<u32, EndpointStatus::Register>; 12],$/;"	m	struct:UsbcRegisters
uestaclr	chips/sam4l/src/usbc/mod.rs	/^    uestaclr: [WriteOnly<u32, EndpointStatus::Register>; 12],$/;"	m	struct:UsbcRegisters
uestaset	chips/sam4l/src/usbc/mod.rs	/^    uestaset: [WriteOnly<u32, EndpointStatus::Register>; 12],$/;"	m	struct:UsbcRegisters
ufeatures	chips/sam4l/src/usbc/mod.rs	/^    ufeatures: ReadOnly<u32>,$/;"	m	struct:UsbcRegisters
uhcon	chips/sam4l/src/usbc/mod.rs	/^    uhcon: ReadWrite<u32>,$/;"	m	struct:UsbcRegisters
uhfnum	chips/sam4l/src/usbc/mod.rs	/^    uhfnum: ReadWrite<u32>,$/;"	m	struct:UsbcRegisters
uhint	chips/sam4l/src/usbc/mod.rs	/^    uhint: ReadOnly<u32>,$/;"	m	struct:UsbcRegisters
uhintclr	chips/sam4l/src/usbc/mod.rs	/^    uhintclr: WriteOnly<u32>,$/;"	m	struct:UsbcRegisters
uhinte	chips/sam4l/src/usbc/mod.rs	/^    uhinte: ReadOnly<u32>,$/;"	m	struct:UsbcRegisters
uhinteclr	chips/sam4l/src/usbc/mod.rs	/^    uhinteclr: WriteOnly<u32>,$/;"	m	struct:UsbcRegisters
uhinteset	chips/sam4l/src/usbc/mod.rs	/^    uhinteset: WriteOnly<u32>,$/;"	m	struct:UsbcRegisters
uhintset	chips/sam4l/src/usbc/mod.rs	/^    uhintset: WriteOnly<u32>,$/;"	m	struct:UsbcRegisters
uhsofc	chips/sam4l/src/usbc/mod.rs	/^    uhsofc: ReadWrite<u32>,$/;"	m	struct:UsbcRegisters
uicr	chips/nrf52/src/lib.rs	/^pub mod uicr;$/;"	n
ul	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
ul ol	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
ul ul	kernel/target/doc/rustdoc.css	/^@font-face {font-family:'Fira Sans';font-style:normal;font-weight:400;src:local('Fira Sans'),url/;"	s
uname1	chips/sam4l/src/usbc/mod.rs	/^    uname1: ReadOnly<u32>,$/;"	m	struct:UsbcRegisters
uname2	chips/sam4l/src/usbc/mod.rs	/^    uname2: ReadOnly<u32>,$/;"	m	struct:UsbcRegisters
unhandled_interrupt	chips/cc26x2/src/crt1.rs	/^unsafe extern "C" fn unhandled_interrupt() {$/;"	f
unhandled_interrupt	chips/nrf51/src/crt1.rs	/^unsafe extern "C" fn unhandled_interrupt() {$/;"	f
unhandled_interrupt	chips/nrf52/src/crt1.rs	/^unsafe extern "C" fn unhandled_interrupt() {$/;"	f
unhandled_interrupt	chips/sam4l/src/lib.rs	/^unsafe extern "C" fn unhandled_interrupt() {$/;"	f
unhandled_interrupt	chips/tm4c129x/src/lib.rs	/^unsafe extern "C" fn unhandled_interrupt() {$/;"	f
unlock	chips/sam4l/src/bpm.rs	/^    unlock: ReadWrite<u32, Unlock::Register>,$/;"	m	struct:BpmRegisters
unlock	chips/sam4l/src/bscif.rs	/^    unlock: WriteOnly<u32, Unlock::Register>,$/;"	m	struct:BscifRegisters
unlock	chips/sam4l/src/pm.rs	/^    unlock: WriteOnly<u32, PmUnlock::Register>,$/;"	m	struct:PmRegisters
unlock	chips/sam4l/src/pm.rs	/^fn unlock(register_offset: u32) {$/;"	f
unlock	chips/sam4l/src/scif.rs	/^    unlock: WriteOnly<u32, Unlock::Register>,$/;"	m	struct:ScifRegisters
unlock	chips/sam4l/src/scif.rs	/^pub fn unlock(register: Register) {$/;"	f
unlock	chips/sifive/src/watchdog.rs	/^    fn unlock(&self) {$/;"	F	implementation:Watchdog
unlock_register	chips/sam4l/src/bpm.rs	/^unsafe fn unlock_register(register_offset: u32) {$/;"	f
unsecured_length	capsules/src/ieee802154/framer.rs	/^    fn unsecured_length(&self) -> usize {$/;"	F	implementation:FrameInfo
unset_sleepdeep	arch/cortex-m/src/scb.rs	/^pub unsafe fn unset_sleepdeep() {$/;"	f
unused_region_number	arch/cortex-m/src/mpu.rs	/^    fn unused_region_number(&self) -> Option<usize> {$/;"	F	implementation:CortexMConfig
unwrap_or	libraries/tock-cells/src/optional_cell.rs	/^    pub fn unwrap_or(&self, default: T) -> T {$/;"	F	implementation:OptionalCell
unwrap_or_default	libraries/tock-cells/src/optional_cell.rs	/^    pub fn unwrap_or_default(self) -> T$/;"	F	implementation:OptionalCell
unwrap_or_else	libraries/tock-cells/src/optional_cell.rs	/^    pub fn unwrap_or_else<F>(&self, default: F) -> T$/;"	F	implementation:OptionalCell
up_buffer	capsules/src/segger_rtt.rs	/^    up_buffer: SeggerRttBuffer,$/;"	m	struct:SeggerRttMemory
up_buffer	capsules/src/segger_rtt.rs	/^    up_buffer: TakeCell<'static, [u8]>,$/;"	m	struct:SeggerRtt
upcfg	chips/sam4l/src/usbc/mod.rs	/^    upcfg: [ReadWrite<u32>; 12],$/;"	m	struct:UsbcRegisters
upcon	chips/sam4l/src/usbc/mod.rs	/^    upcon: [ReadOnly<u32>; 12],$/;"	m	struct:UsbcRegisters
upconclr	chips/sam4l/src/usbc/mod.rs	/^    upconclr: [WriteOnly<u32>; 12],$/;"	m	struct:UsbcRegisters
upconset	chips/sam4l/src/usbc/mod.rs	/^    upconset: [WriteOnly<u32>; 12],$/;"	m	struct:UsbcRegisters
updateLocalStorage	kernel/target/doc/storage.js	/^ *\/var currentTheme=document.getElementById("themeStyle");var mainTheme=document.getElementById/;"	f
update_app_memory_region	arch/cortex-m/src/mpu.rs	/^    fn update_app_memory_region($/;"	F	implementation:MPU
update_app_memory_region	kernel/src/platform/mpu.rs	/^    fn update_app_memory_region($/;"	F	interface:MPU
update_ctr	chips/nrf5x/src/aes.rs	/^    fn update_ctr(&self) {$/;"	F	implementation:AesECB
update_heap_start_pointer	kernel/src/process.rs	/^    fn update_heap_start_pointer(&self, heap_pointer: *const u8) {$/;"	F	implementation:Process
update_heap_start_pointer	kernel/src/process.rs	/^    fn update_heap_start_pointer(&self, heap_pointer: *const u8);$/;"	F	interface:ProcessType
update_stack_start_pointer	kernel/src/process.rs	/^    fn update_stack_start_pointer(&self, stack_pointer: *const u8) {$/;"	F	implementation:Process
update_stack_start_pointer	kernel/src/process.rs	/^    fn update_stack_start_pointer(&self, stack_pointer: *const u8);$/;"	F	interface:ProcessType
upinrq	chips/sam4l/src/usbc/mod.rs	/^    upinrq: [ReadWrite<u32>; 12],$/;"	m	struct:UsbcRegisters
uprst	chips/sam4l/src/usbc/mod.rs	/^    uprst: ReadWrite<u32>,$/;"	m	struct:UsbcRegisters
upsta	chips/sam4l/src/usbc/mod.rs	/^    upsta: [ReadOnly<u32>; 12],$/;"	m	struct:UsbcRegisters
upstaclr	chips/sam4l/src/usbc/mod.rs	/^    upstaclr: [WriteOnly<u32>; 12],$/;"	m	struct:UsbcRegisters
upstaset	chips/sam4l/src/usbc/mod.rs	/^    upstaset: [WriteOnly<u32>; 12],$/;"	m	struct:UsbcRegisters
urg_ptr	capsules/src/net/tcp.rs	/^    pub urg_ptr: u16,$/;"	m	struct:TCPHeader
usableLocalStorage	kernel/target/doc/storage.js	/^ *\/var currentTheme=document.getElementById("themeStyle");var mainTheme=document.getElementById/;"	f
usage	Makefile	/^usage:$/;"	t
usart	chips/sam4l/src/lib.rs	/^pub mod usart;$/;"	n
usart_mode	chips/sam4l/src/usart.rs	/^    usart_mode: Cell<UsartMode>,$/;"	m	struct:USART
usart_rx_state	chips/sam4l/src/usart.rs	/^    usart_rx_state: Cell<USARTStateRX>,$/;"	m	struct:USART
usart_tx_state	chips/sam4l/src/usart.rs	/^    usart_tx_state: Cell<USARTStateTX>,$/;"	m	struct:USART
usb	boards/imix/src/components/mod.rs	/^pub mod usb;$/;"	n
usb	capsules/src/lib.rs	/^pub mod usb;$/;"	n
usb	kernel/src/hil/mod.rs	/^pub mod usb;$/;"	n
usb_driver	boards/imix/src/main.rs	/^    usb_driver: &'static capsules::usb_user::UsbSyscallDriver<$/;"	m	struct:Imix
usb_release	capsules/src/usb.rs	/^    pub usb_release: u16,$/;"	m	struct:DeviceDescriptor
usb_user	capsules/src/lib.rs	/^pub mod usb_user;$/;"	n
usbc	chips/sam4l/src/lib.rs	/^pub mod usbc;$/;"	n
usbc_client	capsules/src/lib.rs	/^pub mod usbc_client;$/;"	n
usbc_client	capsules/src/usb_user.rs	/^    usbc_client: &'a C,$/;"	m	struct:UsbSyscallDriver
usbc_regs	chips/sam4l/src/usbc/mod.rs	/^fn usbc_regs() -> &'static UsbcRegisters {$/;"	f
usbcon	chips/sam4l/src/usbc/mod.rs	/^    usbcon: ReadWrite<u32, Control::Register>,$/;"	m	struct:UsbcRegisters
usbfsm	chips/sam4l/src/usbc/mod.rs	/^    usbfsm: ReadOnly<u32>,$/;"	m	struct:UsbcRegisters
usbmpc	chips/tm4c129x/src/sysctl.rs	/^    usbmpc: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
usbpds	chips/tm4c129x/src/sysctl.rs	/^    usbpds: VolatileCell<u32>,$/;"	m	struct:SysctlRegisters
usbsta	chips/sam4l/src/usbc/mod.rs	/^    usbsta: ReadOnly<u32, Status::Register>,$/;"	m	struct:UsbcRegisters
usbstaclr	chips/sam4l/src/usbc/mod.rs	/^    usbstaclr: WriteOnly<u32>,$/;"	m	struct:UsbcRegisters
usbstaset	chips/sam4l/src/usbc/mod.rs	/^    usbstaset: WriteOnly<u32>,$/;"	m	struct:UsbcRegisters
use_source	capsules/src/test/aes.rs	/^    use_source: Cell<bool>,$/;"	m	struct:TestAes128Cbc
use_source	capsules/src/test/aes.rs	/^    use_source: Cell<bool>,$/;"	m	struct:TestAes128Ctr
users	capsules/src/ieee802154/virtual_mac.rs	/^    users: List<'a, MacUser<'a>>,$/;"	m	struct:MuxMac
users	capsules/src/virtual_flash.rs	/^    users: List<'a, FlashUser<'a, F>>,$/;"	m	struct:MuxFlash
userspace_call_driver	capsules/src/nonvolatile_storage_driver.rs	/^    fn userspace_call_driver($/;"	F	implementation:NonvolatileStorage
userspace_kernel_boundary	chips/arty_exx/src/chip.rs	/^    fn userspace_kernel_boundary(&self) -> &riscv32i::syscall::SysCall {$/;"	F	implementation:ArtyExx
userspace_kernel_boundary	chips/arty_exx/src/chip.rs	/^    userspace_kernel_boundary: riscv32i::syscall::SysCall,$/;"	m	struct:ArtyExx
userspace_kernel_boundary	chips/cc26x2/src/chip.rs	/^    fn userspace_kernel_boundary(&self) -> &Self::UserspaceKernelBoundary {$/;"	F	implementation:Cc26X2
userspace_kernel_boundary	chips/cc26x2/src/chip.rs	/^    userspace_kernel_boundary: cortexm4::syscall::SysCall,$/;"	m	struct:Cc26X2
userspace_kernel_boundary	chips/e310x/src/chip.rs	/^    fn userspace_kernel_boundary(&self) -> &riscv32i::syscall::SysCall {$/;"	F	implementation:E310x
userspace_kernel_boundary	chips/e310x/src/chip.rs	/^    userspace_kernel_boundary: riscv32i::syscall::SysCall,$/;"	m	struct:E310x
userspace_kernel_boundary	chips/nrf51/src/chip.rs	/^    fn userspace_kernel_boundary(&self) -> &cortexm0::syscall::SysCall {$/;"	F	implementation:NRF51
userspace_kernel_boundary	chips/nrf51/src/chip.rs	/^    userspace_kernel_boundary: cortexm0::syscall::SysCall,$/;"	m	struct:NRF51
userspace_kernel_boundary	chips/nrf52/src/chip.rs	/^    fn userspace_kernel_boundary(&self) -> &Self::UserspaceKernelBoundary {$/;"	F	implementation:NRF52
userspace_kernel_boundary	chips/nrf52/src/chip.rs	/^    userspace_kernel_boundary: cortexm4::syscall::SysCall,$/;"	m	struct:NRF52
userspace_kernel_boundary	chips/sam4l/src/chip.rs	/^    fn userspace_kernel_boundary(&self) -> &cortexm4::syscall::SysCall {$/;"	F	implementation:Sam4l
userspace_kernel_boundary	chips/sam4l/src/chip.rs	/^    userspace_kernel_boundary: cortexm4::syscall::SysCall,$/;"	m	struct:Sam4l
userspace_kernel_boundary	chips/tm4c129x/src/chip.rs	/^    fn userspace_kernel_boundary(&self) -> &cortexm4::syscall::SysCall {$/;"	F	implementation:Tm4c129x
userspace_kernel_boundary	chips/tm4c129x/src/chip.rs	/^    userspace_kernel_boundary: cortexm4::syscall::SysCall,$/;"	m	struct:Tm4c129x
userspace_kernel_boundary	kernel/src/platform/mod.rs	/^    fn userspace_kernel_boundary(&self) -> &Self::UserspaceKernelBoundary;$/;"	F	interface:Chip
userspace_length	capsules/src/nonvolatile_storage_driver.rs	/^    userspace_length: usize,$/;"	m	struct:NonvolatileStorage
userspace_start_address	capsules/src/nonvolatile_storage_driver.rs	/^    userspace_start_address: usize,$/;"	m	struct:NonvolatileStorage
using_app_buf1	capsules/src/adc.rs	/^    using_app_buf1: Cell<bool>,$/;"	m	struct:Adc
usize	chips/sam4l/src/usbc/mod.rs	/^impl From<BankIndex> for usize {$/;"	c
usize	chips/sam4l/src/usbc/mod.rs	/^impl From<EndpointIndex> for usize {$/;"	c
usize	kernel/src/returncode.rs	/^impl From<ReturnCode> for usize {$/;"	c
util	capsules/src/net/mod.rs	/^pub mod util;$/;"	n
utils	kernel/src/common/mod.rs	/^pub mod utils;$/;"	n
uvers	chips/sam4l/src/usbc/mod.rs	/^    uvers: ReadOnly<u32>,$/;"	m	struct:UsbcRegisters
v	kernel/src/common/deferred_call.rs	/^    v: UnsafeCell<usize>,$/;"	m	struct:AtomicUsize
val	boards/imix/src/spi_dummy.rs	/^    val: u8,$/;"	m	struct:DummyCB
val	boards/imix/src/spi_slave_dummy.rs	/^    val: u8,$/;"	m	struct:SlaveCB
val	chips/sam4l/src/gpio.rs	/^    val: ReadOnly<u32>,$/;"	m	struct:RegisterRC
val	chips/sam4l/src/gpio.rs	/^    val: ReadWrite<u32>,$/;"	m	struct:Register
val	libraries/tock-cells/src/map_cell.rs	/^    val: UnsafeCell<U<T>>,$/;"	m	struct:MapCell
val	libraries/tock-cells/src/take_cell.rs	/^    val: UnsafeCell<Option<&'a mut T>>,$/;"	m	struct:TakeCell
val	libraries/tock-register-interface/src/registers.rs	/^    pub fn val(&self, value: u16) -> FieldValue<u16, R> {$/;"	F	implementation:Field
val	libraries/tock-register-interface/src/registers.rs	/^    pub fn val(&self, value: u32) -> FieldValue<u32, R> {$/;"	F	implementation:Field
val	libraries/tock-register-interface/src/registers.rs	/^    pub fn val(&self, value: u64) -> FieldValue<u64, R> {$/;"	F	implementation:Field
val	libraries/tock-register-interface/src/registers.rs	/^    pub fn val(&self, value: u8) -> FieldValue<u8, R> {$/;"	F	implementation:Field
validateResult	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f	function:initSearch
value	capsules/src/usb.rs	/^    pub value: u16,$/;"	m	struct:SetupData
value	chips/nrf5x/src/timer.rs	/^    fn value(&self) -> u32 {$/;"	F	implementation:TimerAlarm
value	chips/nrf5x/src/trng.rs	/^    pub value: ReadOnly<u32, Value::Register>,$/;"	m	struct:RngRegisters
value	chips/sifive/src/gpio.rs	/^    value: ReadOnly<u32, pins::Register>,$/;"	m	struct:GpioRegisters
value	doc/courses/2018-11-SenSys/exercises/app/solutions/ble-ess.c	/^  int value; \/\/ sensor reading$/;"	m	struct:__anon22758edd0208	typeref:typename:int	file:
value	libraries/tock-cells/src/optional_cell.rs	/^    value: Cell<Option<T>>,$/;"	m	struct:OptionalCell
value	libraries/tock-cells/src/volatile_cell.rs	/^    value: T,$/;"	m	struct:VolatileCell
value	libraries/tock-register-interface/src/registers.rs	/^    pub value: T,$/;"	m	struct:FieldValue
value	libraries/tock-register-interface/src/registers.rs	/^    value: T,$/;"	m	struct:LocalRegisterCopy
value	libraries/tock-register-interface/src/registers.rs	/^    value: T,$/;"	m	struct:ReadOnly
value	libraries/tock-register-interface/src/registers.rs	/^    value: T,$/;"	m	struct:ReadWrite
value	libraries/tock-register-interface/src/registers.rs	/^    value: T,$/;"	m	struct:WriteOnly
variant	chips/nrf52/src/ficr.rs	/^    fn variant(&self) -> Variant {$/;"	F	implementation:Ficr
vd_ctl	chips/cc26x2/src/prcm.rs	/^    pub vd_ctl: ReadWrite<u32, VDControl::Register>,$/;"	m	struct:PrcmRegisters
vendor_id	capsules/src/usb.rs	/^    pub vendor_id: u16,$/;"	m	struct:DeviceDescriptor
vercomp	tools/semver.sh	/^vercomp () {$/;"	f
verify_prefix_len	capsules/src/net/util.rs	/^pub fn verify_prefix_len(prefix: &[u8], prefix_len: u8) -> bool {$/;"	f
version	capsules/src/net/ieee802154.rs	/^    pub version: FrameVersion,$/;"	m	struct:Header
version	chips/sam4l/src/acifc.rs	/^    version: ReadOnly<u32>,$/;"	m	struct:AcifcRegisters
version	chips/sam4l/src/aes.rs	/^    version: ReadOnly<u32, Version::Register>,       \/\/   0x70$/;"	m	struct:AesRegisters
version	chips/sam4l/src/dac.rs	/^    version: ReadOnly<u32, Version::Register>, \/\/         Version Register              (0xfc)$/;"	m	struct:DacRegisters
version	chips/sam4l/src/gpio.rs	/^    version: u32,$/;"	m	struct:GpioRegisters
version	chips/sam4l/src/pm.rs	/^    version: ReadOnly<u32, Version::Register>,$/;"	m	struct:PmRegisters
version	chips/sam4l/src/spi.rs	/^    version: ReadOnly<u32>,$/;"	m	struct:SpiRegisters
version	chips/sam4l/src/usart.rs	/^    version: ReadOnly<u32, Version::Register>, \/\/ 0xFC$/;"	m	struct:UsartRegisters
version	kernel/src/tbfheader.rs	/^    version: u16,$/;"	m	struct:TbfHeaderV2Base
version_class_flow	capsules/src/net/ip.rs	/^    pub version_class_flow: [u8; 4],$/;"	m	struct:IP6Header
version_class_flow	capsules/src/net/ipv6/ipv6.rs	/^    pub version_class_flow: [u8; 4],$/;"	m	struct:IP6Header
video	kernel/target/doc/normalize.css	/^html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:/;"	s
virtual_alarm	capsules/src/lib.rs	/^pub mod virtual_alarm;$/;"	n
virtual_alarms	capsules/src/virtual_alarm.rs	/^    virtual_alarms: List<'a, VirtualMuxAlarm<'a, Alrm>>,$/;"	m	struct:MuxAlarm
virtual_flash	capsules/src/lib.rs	/^pub mod virtual_flash;$/;"	n
virtual_i2c	capsules/src/lib.rs	/^pub mod virtual_i2c;$/;"	n
virtual_mac	capsules/src/ieee802154/mod.rs	/^pub mod virtual_mac;$/;"	n
virtual_spi	capsules/src/lib.rs	/^pub mod virtual_spi;$/;"	n
virtual_uart	capsules/src/lib.rs	/^pub mod virtual_uart;$/;"	n
virtual_uart	capsules/src/test/mod.rs	/^pub mod virtual_uart;$/;"	n
virtual_uart_rx_test	boards/imix/src/main.rs	/^mod virtual_uart_rx_test;$/;"	n
volatile_cell	libraries/tock-cells/src/lib.rs	/^pub mod volatile_cell;$/;"	n
voltage	capsules/src/ltc294x.rs	/^    fn voltage(&self, voltage: u16) {$/;"	F	implementation:LTC294XDriver
voltage	capsules/src/ltc294x.rs	/^    fn voltage(&self, voltage: u16);$/;"	F	interface:LTC294XClient
voltage	capsules/src/max17205.rs	/^    voltage: Cell<u16>,$/;"	m	struct:MAX17205
voltage_current	capsules/src/max17205.rs	/^    fn voltage_current(&self, voltage: u16, current: u16, error: ReturnCode) {$/;"	F	implementation:MAX17205Driver
voltage_current	capsules/src/max17205.rs	/^    fn voltage_current(&self, voltage: u16, current: u16, error: ReturnCode);$/;"	F	interface:MAX17205Client
vr	chips/sam4l/src/i2c.rs	/^    vr: ReadOnly<u32>,$/;"	m	struct:TWIMRegisters
vr	chips/sam4l/src/i2c.rs	/^    vr: ReadOnly<u32>,$/;"	m	struct:TWISRegisters
vregcr	chips/sam4l/src/bscif.rs	/^    vregcr: ReadWrite<u32, VoltageRegulatorConfig::Register>,$/;"	m	struct:BscifRegisters
vtor	arch/cortex-m/src/scb.rs	/^    vtor: VolatileCell<u32>,$/;"	m	struct:ScbRegisters
wait_dfll0_ready	chips/sam4l/src/scif.rs	/^    fn wait_dfll0_ready() {$/;"	f	function:setup_dfll_rc32k_48mhz
waiting	capsules/src/crc.rs	/^    waiting: Option<hil::crc::CrcAlg>,$/;"	m	struct:App
wake_pending	capsules/src/rf233.rs	/^    wake_pending: Cell<bool>,$/;"	m	struct:RF233
wakelvl	chips/tm4c129x/src/gpio.rs	/^    wakelvl: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
wakepen	chips/tm4c129x/src/gpio.rs	/^    wakepen: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
wakestat	chips/tm4c129x/src/gpio.rs	/^    wakestat: VolatileCell<u32>,$/;"	m	struct:GpioRegisters
watchdog	chips/e310x/src/lib.rs	/^pub mod watchdog;$/;"	n
watchdog	chips/sifive/src/lib.rs	/^pub mod watchdog;$/;"	n
watchdog	kernel/src/hil/mod.rs	/^pub mod watchdog;$/;"	n
wcause	chips/sam4l/src/pm.rs	/^    wcause: ReadOnly<u32, WakeCause::Register>,$/;"	m	struct:PmRegisters
wcfg	chips/sam4l/src/adc.rs	/^    wcfg: ReadWrite<u32, WindowMonitorConfiguration::Register>,$/;"	m	struct:AdcRegisters
wdogcfg	chips/sifive/src/watchdog.rs	/^    wdogcfg: ReadWrite<u32, cfg::Register>,$/;"	m	struct:WatchdogRegisters
wdogcmp	chips/sifive/src/watchdog.rs	/^    wdogcmp: ReadWrite<u32>,$/;"	m	struct:WatchdogRegisters
wdogcount	chips/sifive/src/watchdog.rs	/^    wdogcount: ReadWrite<u32>,$/;"	m	struct:WatchdogRegisters
wdogfeed	chips/sifive/src/watchdog.rs	/^    wdogfeed: ReadWrite<u32, feed::Register>,$/;"	m	struct:WatchdogRegisters
wdogkey	chips/sifive/src/watchdog.rs	/^    wdogkey: WriteOnly<u32, key::Register>,$/;"	m	struct:WatchdogRegisters
wdogs	chips/sifive/src/watchdog.rs	/^    wdogs: ReadWrite<u32>,$/;"	m	struct:WatchdogRegisters
wdt	chips/sam4l/src/lib.rs	/^pub mod wdt;$/;"	n
wer	chips/sam4l/src/ast.rs	/^    wer: ReadWrite<u32, Event::Register>,$/;"	m	struct:AstRegisters
wfi	arch/cortex-m/src/support.rs	/^pub unsafe fn wfi() {$/;"	f
wfi	arch/cortex-m/src/support.rs	/^pub unsafe fn wfi() {}$/;"	f
wfi	arch/riscv32i/src/support.rs	/^pub unsafe fn wfi() {$/;"	f
when	capsules/src/virtual_alarm.rs	/^    when: Cell<u32>,$/;"	m	struct:VirtualMuxAlarm
width	chips/sam4l/src/dma.rs	/^    width: Cell<DMAWidth>,$/;"	m	struct:DMAChannel
window	capsules/src/net/tcp.rs	/^    pub window: u16,$/;"	m	struct:TCPHeader
with_driver	boards/arty-e21/src/main.rs	/^    fn with_driver<F, R>(&self, driver_num: usize, f: F) -> R$/;"	F	implementation:ArtyE21
with_driver	boards/ek-tm4c1294xl/src/main.rs	/^    fn with_driver<F, R>(&self, driver_num: usize, f: F) -> R$/;"	F	implementation:EkTm4c1294xl
with_driver	boards/hail/src/main.rs	/^    fn with_driver<F, R>(&self, driver_num: usize, f: F) -> R$/;"	F	implementation:Hail
with_driver	boards/hifive1/src/main.rs	/^    fn with_driver<F, R>(&self, driver_num: usize, f: F) -> R$/;"	F	implementation:HiFive1
with_driver	boards/imix/src/main.rs	/^    fn with_driver<F, R>(&self, driver_num: usize, f: F) -> R$/;"	F	implementation:Imix
with_driver	boards/launchxl/src/main.rs	/^    fn with_driver<F, R>(&self, driver_num: usize, f: F) -> R$/;"	F	implementation:Platform
with_driver	boards/nordic/nrf51dk/src/main.rs	/^    fn with_driver<F, R>(&self, driver_num: usize, f: F) -> R$/;"	F	implementation:Platform
with_driver	boards/nordic/nrf52dk_base/src/lib.rs	/^    fn with_driver<F, R>(&self, driver_num: usize, f: F) -> R$/;"	F	implementation:Platform
with_driver	kernel/src/platform/mod.rs	/^    fn with_driver<F, R>(&self, driver_num: usize, f: F) -> R$/;"	F	interface:Platform
work	kernel/src/sched.rs	/^    work: Cell<usize>,$/;"	m	struct:Kernel
wpcr	chips/sam4l/src/spi.rs	/^    wpcr: ReadWrite<u32, WriteProtectionControl::Register>,$/;"	m	struct:SpiRegisters
wpmr	chips/sam4l/src/dac.rs	/^    wpmr: ReadWrite<u32, WriteProtectMode::Register>, \/\/  Write Protect Mode Register   (0xe4)$/;"	m	struct:DacRegisters
wpmr	chips/sam4l/src/usart.rs	/^    wpmr: ReadWrite<u32, ProtectMode::Register>,  \/\/ 0xE4$/;"	m	struct:UsartRegisters
wpsr	chips/sam4l/src/dac.rs	/^    wpsr: ReadOnly<u32, WriteProtectStatus::Register>, \/\/ Write Protect Status Register (0xe8)$/;"	m	struct:DacRegisters
wpsr	chips/sam4l/src/spi.rs	/^    wpsr: ReadOnly<u32>,$/;"	m	struct:SpiRegisters
wpsr	chips/sam4l/src/usart.rs	/^    wpsr: ReadOnly<u32, ProtectStatus::Register>, \/\/ 0xE8$/;"	m	struct:UsartRegisters
write	capsules/src/fm25cl.rs	/^    fn write(&self, buffer: &'static mut [u8], address: usize, length: usize) -> ReturnCode {$/;"	F	implementation:FM25CL
write	capsules/src/fm25cl.rs	/^    pub fn write(&self, address: u16, buffer: &'static mut [u8], len: u16) -> ReturnCode {$/;"	F	implementation:FM25CL
write	capsules/src/nonvolatile_storage_driver.rs	/^    fn write(&self, buffer: &'static mut [u8], address: usize, length: usize) -> ReturnCode {$/;"	F	implementation:NonvolatileStorage
write	capsules/src/nonvolatile_to_pages.rs	/^    fn write(&self, buffer: &'static mut [u8], address: usize, length: usize) -> ReturnCode {$/;"	F	implementation:NonvolatileToPages
write	capsules/src/virtual_i2c.rs	/^    fn write(&self, data: &'static mut [u8], len: u8) {$/;"	F	implementation:I2CDevice
write	chips/cc26x2/src/i2c.rs	/^    fn write(&self, addr: u8, data: &'static mut [u8], len: u8) {$/;"	F	implementation:I2CMaster
write	chips/nrf51/src/i2c.rs	/^    fn write(&self, addr: u8, data: &'static mut [u8], len: u8) {$/;"	F	implementation:TWIM
write	chips/nrf52/src/i2c.rs	/^    fn write(&self, addr: u8, data: &'static mut [u8], len: u8) {$/;"	F	implementation:TWIM
write	chips/sam4l/src/i2c.rs	/^    fn write($/;"	F	implementation:I2CHw
write	chips/sam4l/src/i2c.rs	/^    fn write(&self, addr: u8, data: &'static mut [u8], len: u8) {$/;"	F	implementation:I2CHw
write	kernel/src/debug.rs	/^    fn write(&self, buf: &'static mut [u8], len: usize) {$/;"	F	implementation:Debug
write	kernel/src/debug.rs	/^    fn write(&self, buf: &'static mut [u8], len: usize);$/;"	F	interface:Debug
write	kernel/src/hil/i2c.rs	/^    fn write(&self, addr: u8, data: &'static mut [u8], len: u8);$/;"	F	interface:I2CMaster
write	kernel/src/hil/i2c.rs	/^    fn write(&self, data: &'static mut [u8], len: u8);$/;"	F	interface:I2CDevice
write	kernel/src/hil/nonvolatile_storage.rs	/^    fn write(&self, buffer: &'static mut [u8], address: usize, length: usize) -> ReturnCode;$/;"	F	interface:NonvolatileStorage
write	libraries/tock-register-interface/src/registers.rs	/^    pub fn write(&self, field: FieldValue<T, R>) {$/;"	F	implementation:ReadWrite
write	libraries/tock-register-interface/src/registers.rs	/^    pub fn write(&self, field: FieldValue<T, R>) {$/;"	F	implementation:WriteOnly
write_additional_headers	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn write_additional_headers<'b>($/;"	F	implementation:TxState
write_block	chips/sam4l/src/aes.rs	/^    fn write_block(&self) -> bool {$/;"	F	implementation:Aes
write_blocks	capsules/src/sdcard.rs	/^    pub fn write_blocks(&self, buffer: &'static mut [u8], sector: u32, count: u32) -> ReturnCode/;"	F	implementation:SDCard
write_buffer	capsules/src/console.rs	/^    write_buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
write_buffer	capsules/src/sdcard.rs	/^    write_buffer: Option<AppSlice<Shared, u8>>,$/;"	m	struct:App
write_buffer	kernel/src/debug.rs	/^    fn write_buffer(&self, start: usize, end: usize, bytes: &[u8]) {$/;"	F	implementation:DebugWriter
write_byte	capsules/src/process_console.rs	/^    fn write_byte(&self, byte: u8) -> ReturnCode {$/;"	F	implementation:ProcessConsole
write_byte	chips/cc26x2/src/i2c.rs	/^    fn write_byte(&self, byte: u8, first: bool, last: bool) {$/;"	F	implementation:I2CMaster
write_byte	chips/nrf52/src/spi.rs	/^    fn write_byte(&self, _val: u8) {$/;"	F	implementation:SPIM
write_byte	chips/sam4l/src/spi.rs	/^    fn write_byte(&self, out_byte: u8) {$/;"	F	implementation:SpiHw
write_byte	chips/sam4l/src/usart.rs	/^    fn write_byte(&self, val: u8) {$/;"	F	implementation:USART
write_byte	kernel/src/hil/spi.rs	/^    fn write_byte(&self, val: u8);$/;"	F	interface:SpiMaster
write_bytes	capsules/src/process_console.rs	/^    fn write_bytes(&self, bytes: &[u8]) -> ReturnCode {$/;"	F	implementation:ProcessConsole
write_bytes	capsules/src/sdcard.rs	/^    fn write_bytes($/;"	F	implementation:SDCard
write_callback	capsules/src/console.rs	/^    write_callback: Option<Callback>,$/;"	m	struct:App
write_complete	capsules/src/nonvolatile_to_pages.rs	/^    fn write_complete(&self, pagebuffer: &'static mut F::Page, _error: hil::flash::Error) {$/;"	F	implementation:NonvolatileToPages
write_complete	capsules/src/virtual_flash.rs	/^    fn write_complete(&self, pagebuffer: &'static mut F::Page, error: hil::flash::Error) {$/;"	F	implementation:FlashUser
write_complete	capsules/src/virtual_flash.rs	/^    fn write_complete(&self, pagebuffer: &'static mut F::Page, error: hil::flash::Error) {$/;"	F	implementation:MuxFlash
write_complete	kernel/src/hil/flash.rs	/^    fn write_complete(&self, write_buffer: &'static mut F::Page, error: Error);$/;"	F	interface:Client
write_config	chips/nrf5x/src/gpio.rs	/^    pub fn write_config(&self, config: FieldValue<u32, PinConfig::Register>) {$/;"	F	implementation:GPIOPin
write_cr	chips/sam4l/src/wdt.rs	/^    fn write_cr(&self, control: FieldValue<u32, Control::Register>) {$/;"	F	implementation:Wdt
write_done	capsules/src/app_flash_driver.rs	/^    fn write_done(&self, buffer: &'static mut [u8], _length: usize) {$/;"	F	implementation:AppFlash
write_done	capsules/src/nonvolatile_storage_driver.rs	/^    fn write_done(&self, buffer: &'static mut [u8], length: usize) {$/;"	F	implementation:NonvolatileStorage
write_done	capsules/src/sdcard.rs	/^    fn write_done(&self, buffer: &'static mut [u8]) {$/;"	F	implementation:SDCardDriver
write_done	capsules/src/sdcard.rs	/^    fn write_done(&self, buffer: &'static mut [u8]);$/;"	F	interface:SDCardClient
write_done	kernel/src/hil/nonvolatile_storage.rs	/^    fn write_done(&self, buffer: &'static mut [u8], length: usize);$/;"	F	interface:NonvolatileStorageClient
write_done	tools/usb/bulk-echo-fast/main.c	/^void LIBUSB_CALL write_done(struct libusb_transfer *transfer) {$/;"	f	typeref:typename:void LIBUSB_CALL
write_expected	capsules/src/i2c_master_slave_driver.rs	/^    fn write_expected(&self) {$/;"	F	implementation:I2CMasterSlaveDriver
write_expected	kernel/src/hil/i2c.rs	/^    fn write_expected(&self);$/;"	F	interface:I2CHwSlaveClient
write_frag_hdr	capsules/src/net/sixlowpan/sixlowpan_state.rs	/^    fn write_frag_hdr(&self, frame: &mut Frame, first_frag: bool) -> usize {$/;"	F	implementation:TxState
write_index	chips/sam4l/src/aes.rs	/^    write_index: Cell<usize>,$/;"	m	struct:Aes
write_len	capsules/src/console.rs	/^    write_len: usize,$/;"	m	struct:App
write_page	capsules/src/mx25r6435f.rs	/^    fn write_page(&self, page_number: usize, buf: &'static mut Self::Page) -> ReturnCode {$/;"	F	implementation:MX25R6435F
write_page	capsules/src/virtual_flash.rs	/^    fn write_page(&self, page_number: usize, buf: &'static mut Self::Page) -> ReturnCode {$/;"	F	implementation:FlashUser
write_page	chips/nrf52/src/nvmc.rs	/^    fn write_page(&self, page_number: usize, buf: &'static mut Self::Page) -> ReturnCode {$/;"	F	implementation:Nvmc
write_page	chips/nrf52/src/nvmc.rs	/^    fn write_page(&self, page_number: usize, data: &'static mut NrfPage) -> ReturnCode {$/;"	F	implementation:Nvmc
write_page	chips/sam4l/src/flashcalw.rs	/^    fn write_page(&self, page_num: i32, data: &'static mut Sam4lPage) -> ReturnCode {$/;"	F	implementation:FLASHCALW
write_page	chips/sam4l/src/flashcalw.rs	/^    fn write_page(&self, page_number: usize, buf: &'static mut Self::Page) -> ReturnCode {$/;"	F	implementation:FLASHCALW
write_page	kernel/src/hil/flash.rs	/^    fn write_page(&self, page_number: usize, buf: &'static mut Self::Page) -> ReturnCode;$/;"	F	interface:Flash
write_position	capsules/src/segger_rtt.rs	/^    write_position: u32,$/;"	m	struct:SeggerRttBuffer
write_protect_pin	boards/nordic/nrf52dk_base/src/lib.rs	/^    write_protect_pin: usize,$/;"	m	struct:SpiMX25R6435FPins
write_protect_pin	capsules/src/mx25r6435f.rs	/^    write_protect_pin: Option<&'a P>,$/;"	m	struct:MX25R6435F
write_read	capsules/src/virtual_i2c.rs	/^    fn write_read(&self, data: &'static mut [u8], write_len: u8, read_len: u8) {$/;"	F	implementation:I2CDevice
write_read	chips/cc26x2/src/i2c.rs	/^    fn write_read(&self, addr: u8, data: &'static mut [u8], write_len: u8, read_len: u8) {$/;"	F	implementation:I2CMaster
write_read	chips/nrf51/src/i2c.rs	/^    fn write_read(&self, addr: u8, data: &'static mut [u8], write_len: u8, read_len: u8) {$/;"	F	implementation:TWIM
write_read	chips/nrf52/src/i2c.rs	/^    fn write_read(&self, addr: u8, data: &'static mut [u8], write_len: u8, read_len: u8) {$/;"	F	implementation:TWIM
write_read	chips/sam4l/src/i2c.rs	/^    fn write_read(&self, addr: u8, data: &'static mut [u8], write_len: u8, read_len: u8) {$/;"	F	implementation:I2CHw
write_read	chips/sam4l/src/i2c.rs	/^    fn write_read(&self, chip: u8, data: &'static mut [u8], split: u8, read_len: u8) {$/;"	F	implementation:I2CHw
write_read	kernel/src/hil/i2c.rs	/^    fn write_read(&self, addr: u8, data: &'static mut [u8], write_len: u8, read_len: u8);$/;"	F	interface:I2CMaster
write_read	kernel/src/hil/i2c.rs	/^    fn write_read(&self, data: &'static mut [u8], write_len: u8, read_len: u8);$/;"	F	interface:I2CDevice
write_receive	chips/nrf51/src/i2c.rs	/^    fn write_receive(&self, _data: &'static mut [u8], _max_len: u8) {$/;"	F	implementation:TWIM
write_receive	chips/nrf52/src/i2c.rs	/^    fn write_receive(&self, _data: &'static mut [u8], _max_len: u8) {$/;"	F	implementation:TWIM
write_receive	chips/sam4l/src/i2c.rs	/^    fn write_receive(&self, data: &'static mut [u8], max_len: u8) {$/;"	F	implementation:I2CHw
write_receive	kernel/src/hil/i2c.rs	/^    fn write_receive(&self, data: &'static mut [u8], max_len: u8);$/;"	F	interface:I2CSlave
write_remaining	capsules/src/console.rs	/^    write_remaining: usize, \/\/ How many bytes didn't fit in the buffer and still need to be pr/;"	m	struct:App
write_sector	capsules/src/mx25r6435f.rs	/^    fn write_sector(&self, sector_index: u32, sector: &'static mut Mx25r6435fSector) -> ReturnCo/;"	F	implementation:MX25R6435F
write_str	boards/arty-e21/src/io.rs	/^    fn write_str(&mut self, s: &str) -> ::core::fmt::Result {$/;"	F	implementation:Writer
write_str	boards/ek-tm4c1294xl/src/io.rs	/^    fn write_str(&mut self, s: &str) -> ::core::fmt::Result {$/;"	F	implementation:Writer
write_str	boards/hail/src/io.rs	/^    fn write_str(&mut self, s: &str) -> ::core::fmt::Result {$/;"	F	implementation:Writer
write_str	boards/hifive1/src/io.rs	/^    fn write_str(&mut self, s: &str) -> ::core::fmt::Result {$/;"	F	implementation:Writer
write_str	boards/imix/src/io.rs	/^    fn write_str(&mut self, s: &str) -> ::core::fmt::Result {$/;"	F	implementation:Writer
write_str	boards/launchxl/src/io.rs	/^    fn write_str(&mut self, s: &str) -> ::core::fmt::Result {$/;"	F	implementation:Writer
write_str	boards/nordic/nrf51dk/src/io.rs	/^    fn write_str(&mut self, s: &str) -> ::core::fmt::Result {$/;"	F	implementation:Writer
write_str	boards/nordic/nrf52840dk/src/io.rs	/^    fn write_str(&mut self, s: &str) -> ::core::fmt::Result {$/;"	F	implementation:Writer
write_str	boards/nordic/nrf52dk/src/io.rs	/^    fn write_str(&mut self, s: &str) -> ::core::fmt::Result {$/;"	F	implementation:Writer
write_str	kernel/src/debug.rs	/^    fn write_str(&mut self, s: &str) -> Result {$/;"	F	implementation:DebugWriterWrapper
write_to	capsules/src/usb.rs	/^    fn write_to(&self, buf: &[Cell<u8>]) -> usize {$/;"	F	interface:Descriptor
write_to_page_buffer	chips/sam4l/src/flashcalw.rs	/^    fn write_to_page_buffer(&self, pg_buff_addr: usize) {$/;"	F	implementation:FLASHCALW
write_to_unchecked	capsules/src/usb.rs	/^    fn write_to_unchecked(&self, buf: &[Cell<u8>]) -> usize {$/;"	F	implementation:ConfigurationDescriptor
write_to_unchecked	capsules/src/usb.rs	/^    fn write_to_unchecked(&self, buf: &[Cell<u8>]) -> usize {$/;"	F	implementation:DeviceDescriptor
write_to_unchecked	capsules/src/usb.rs	/^    fn write_to_unchecked(&self, buf: &[Cell<u8>]) -> usize {$/;"	F	implementation:EndpointDescriptor
write_to_unchecked	capsules/src/usb.rs	/^    fn write_to_unchecked(&self, buf: &[Cell<u8>]) -> usize {$/;"	F	implementation:InterfaceDescriptor
write_to_unchecked	capsules/src/usb.rs	/^    fn write_to_unchecked(&self, buf: &[Cell<u8>]) -> usize {$/;"	F	implementation:LanguagesDescriptor
write_to_unchecked	capsules/src/usb.rs	/^    fn write_to_unchecked(&self, buf: &[Cell<u8>]) -> usize {$/;"	F	implementation:StringDescriptor
write_to_unchecked	capsules/src/usb.rs	/^    fn write_to_unchecked(&self, buf: &[Cell<u8>]) -> usize;$/;"	F	interface:Descriptor
write_user_page	chips/sam4l/src/flashcalw.rs	/^    fn write_user_page(&self) {$/;"	F	implementation:FLASHCALW
writeable_flash_region_offset	kernel/src/tbfheader.rs	/^    writeable_flash_region_offset: u32,$/;"	m	struct:TbfHeaderV2WriteableFlashRegion
writeable_flash_region_size	kernel/src/tbfheader.rs	/^    writeable_flash_region_size: u32,$/;"	m	struct:TbfHeaderV2WriteableFlashRegion
writeable_regions	kernel/src/tbfheader.rs	/^    writeable_regions: Option<&'static [TbfHeaderV2WriteableFlashRegion]>,$/;"	m	struct:TbfHeaderV2
wth	chips/sam4l/src/adc.rs	/^    wth: ReadWrite<u32, WindowMonitorThresholdConfiguration::Register>,$/;"	m	struct:AdcRegisters
x	kernel/target/doc/main.js	/^                    <\/span>';list.appendChild(display);}}};if(window.pending_implementors){wind/;"	v
x	kernel/target/doc/main.js	/^ *\/(function(){"use strict";var itemTypes=["mod","externcrate","import","struct","enum","fn","t/;"	f
xmac	capsules/src/ieee802154/mod.rs	/^pub mod xmac;$/;"	n
xtalfreq	chips/nrf51/src/clock.rs	/^    xtalfreq: ReadWrite<u32, CrystalFrequency::Register>, \/\/ 0x550$/;"	m	struct:ClockRegisters
yield_pc	arch/cortex-m/src/syscall.rs	/^    yield_pc: usize,$/;"	m	struct:CortexMStoredState
zero	kernel/src/common/math.rs	/^    pub fn zero() -> PowerOfTwo {$/;"	F	implementation:PowerOfTwo
zero	libraries/tock-register-interface/src/registers.rs	/^    fn zero() -> Self {$/;"	F	implementation:u16
zero	libraries/tock-register-interface/src/registers.rs	/^    fn zero() -> Self {$/;"	F	implementation:u32
zero	libraries/tock-register-interface/src/registers.rs	/^    fn zero() -> Self {$/;"	F	implementation:u64
zero	libraries/tock-register-interface/src/registers.rs	/^    fn zero() -> Self {$/;"	F	implementation:u8
zero	libraries/tock-register-interface/src/registers.rs	/^    fn zero() -> Self;$/;"	F	interface:IntLike
zorp	tools/usb/bulk-echo-fast/main.c	/^static libusb_device_handle *zorp;$/;"	v	typeref:typename:libusb_device_handle *	file:
